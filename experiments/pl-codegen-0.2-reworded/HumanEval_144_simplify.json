{
  "name": "HumanEval_144_simplify",
  "language": "pl",
  "prompt": "# Your task is to implement a function that will simplify the expression\n# x * n. The function returns 1 if x * n evaluates to a whole number and ''\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>> simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\", \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\", \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\", \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "completions": [
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x * $numerator / $denominator;\n    if ($result == $x * $numerator / $denominator) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator/$x_denominator;\n    my $x_numerator_div_x_denominator_floor = floor($x_numerator_div_x_denominator);\n    my $x_numerator_div_x_denominator_ceil = ceil($x_numerator_div_x_denominator);\n    my $x_numerator_div_x_denominator_floor_floor = floor($x_numerator_div_x_denominator_floor);\n    my $x_numerator_div_x_denominator_floor_ceil = ceil($x_numerator_div_x_denominator_floor);\n    my $x_numerator_div_x_denominator_ceil_floor = floor($x_numerator_div_x_denominator_ceil);\n    my $x_numerator_div_x_denominator_ceil_ceil = ceil($x_numerator_div_x_denominator_ceil);\n    my $x_numerator_div_x_denominator_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_ceil = ceil($x_numerator_div_x_denominator_floor_floor);\n    my $x_numerator_div_x_denominator_floor_ceil_floor = floor($x_numerator_div_x_denominator_floor_ceil);\n    my $x_numerator_div_x_denominator_floor_ceil_ceil = ceil($x_numerator_div",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x->[0] * $numerator / $denominator;\n    if ($result == $x->[0] * $numerator / $denominator) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x * $numerator / $denominator;\n    if ($result == floor($result)) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_numerator = $x_numerator->[0];\n    my $x_numerator_denominator = $x_numerator->[1];\n    my $x_denominator_numerator = $x_denominator->[0];\n    my $x_denominator_denominator = $x_denominator->[1];\n    my $numerator_numerator = $numerator->[0];\n    my $numerator_denominator = $numerator->[1];\n    my $denominator_numerator = $denominator->[0];\n    my $denominator_denominator = $denominator->[1];\n    my $x_numerator_numerator_numerator = $x_numerator_numerator->[0];\n    my $x_numerator_numerator_denominator = $x_numerator_numerator->[1];\n    my $x_numerator_denominator_numerator = $x_numerator_denominator->[0];\n    my $x_numerator_denominator_denominator = $x_numerator_denominator->[1];\n    my $x_denominator_numerator_numerator = $x_denominator_numerator->[0];\n    my $x_denominator_numerator_denominator = $x_denominator_numerator->[1];\n    my $x_denominator_denominator_numerator = $x_denominator_denominator->[0];\n    my $x_denominator_denominator_denominator = $x_denominator_denominator->[1];\n    my",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    my $x_n_frac = $x_n - $x_n_int;\n    if ($x_n_int == $x_n_frac) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    if ($numerator % $denominator == 0) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_x_denominator = $numerator / $x_denominator;\n    my $numerator_div_x_denominator_div_numerator = $numerator_div_x_denominator / $numerator;\n    my $result_div_x_denominator = $result / $x_denominator;\n    my $result_div_numerator = $result / $numerator;\n    my $result_div_numerator_div_x_denominator = $result_div_numerator / $x_denominator;\n    my $result_div_numerator_div_x_denominator_div_numerator = $result_div_numerator_div_x_denominator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_x_denominator = $result_div_numerator_div_x_denominator_div_numerator / $x_denominator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_x_denominator_div_numerator = $result_div_numerator_div_x_denominator_div_numerator_div_x_denominator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_x_denominator_div_numerator_div_x_denominator = $result_div_numerator_div_x_denominator_div_numerator_div_x_denomin",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_str_int = $x_n;\n    my $x_n_str_int_int = $x_n_str_int;\n    my $x_n_str_int_int_int = $x_n_str_int_int;\n    my $x_n_str_int_int_int_int = $x_n_str_int_int_int;\n    my $x_n_str_int_int_int_int_int = $x_n_str_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int = $x_n_str_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int_int_int_int_int;\n    my $x_n_str_int_int_int_int_int_int_int_int_int_int_int_int = $x_n_str_int_int_int_int_int_int_int_int_",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    if ($x_n == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    my $x_n_int_str = $x_n_int == 0 ? \"\" : $x_n_int;\n    return $x_n_int_str;\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    my $result = 1;\n    foreach my $i (0..$numerator) {\n        $result *= $denominator;\n        $denominator *= $i;\n        if ($denominator == 1) {\n            return $result;\n        }\n    }\n    return \"\";\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x * $numerator / $denominator;\n    if ($result == floor($result)) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    if ($x_n == floor($x_n)) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator / $x_denominator;\n    my $x_numerator_div_x_denominator_floor = floor($x_numerator_div_x_denominator);\n    my $x_numerator_div_x_denominator_floor_floor = floor($x_numerator_div_x_denominator_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor_floor_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor_floor_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor_floor_floor_floor_floor);\n    my $x_numerator_div_x_denominator_floor_floor_floor_floor_floor_floor_floor_floor = floor($x_numerator_div_x_denominator_floor_floor_floor_floor_floor_floor_floor);\n    my $x_numerator_div_x",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $x->[0];\n    my $denominator = $x->[1];\n    my $result = 1;\n    my $numerator_str = $numerator->[0];\n    my $denominator_str = $denominator->[0];\n    my $numerator_int = $numerator_str;\n    my $denominator_int = $denominator_str;\n    my $numerator_int_str = $numerator_int;\n    my $denominator_int_str = $denominator_int;\n    my $numerator_int_str_int = $numerator_int_str;\n    my $denominator_int_str_int = $denominator_int_str;\n    my $numerator_int_str_int_int = $numerator_int_str_int;\n    my $denominator_int_str_int_int = $denominator_int_str_int;\n    my $numerator_int_str_int_int_int = $numerator_int_str_int_int;\n    my $denominator_int_str_int_int_int = $denominator_int_str_int_int;\n    my $numerator_int_str_int_int_int_int = $numerator_int_str_int_int_int;\n    my $denominator_int_str_int_int_int_int = $denominator_int_str_int_int_int;\n    my $numerator_int_str_int_int_int_int_int = $numerator_int_str_int_int_int_int;\n    my $denominator_int_str_int_int_int_int_int = $denominator_int_str_int_int_int_int;\n    my $numerator_int_str_int_int_int_int_int_int = $numerator_int_str_int_int_int_int_int;\n    my $denominator_int_str_int_int_",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_mod = $x_numerator_divisor % $x_denominator;\n    my $numerator_divisor_mod = $numerator_divisor % $denominator;\n    if ($x_numerator_divisor_mod == 0 and $numerator_divisor_mod == 0) {\n        $result = $x_numerator_divisor / $x_denominator;\n    }\n    return $result;\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int . \"\";\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_result = 1;\n    my $x_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_den",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int;\n    my $x_n_int_str_int_int = $x_n_int_int;\n    my $x_n_int_str_int_int_int = $x_n_int_int_int;\n    my $x_n_int_str_int_int_int_int = $x_n_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int = $x_n_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int = $x_n_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int = $x_n_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int = $x_n_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int = $x_n_int_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int = $x_n_int_int_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int_int = $x_n_int_int_int_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_value = $x_numerator->[0];\n    my $x_denominator_value = $x_denominator->[0];\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $x_numerator_value_value = $x_numerator_value->[0];\n    my $x_denominator_value_value = $x_denominator_value->[0];\n    my $numerator_value_value = $numerator_value->[0];\n    my $denominator_value_value = $denominator_value->[0];\n    my $x_numerator_value_value_value = $x_numerator_value_value->[0];\n    my $x_denominator_value_value_value = $x_denominator_value_value->[0];\n    my $numerator_value_value_value = $numerator_value_value->[0];\n    my $denominator_value_value_value = $denominator_value_value->[0];\n    my $x_numerator_value_value_value_value = $x_numerator_value_value_value->[0];\n    my $x_denominator_value_value_value_value = $x_denominator_value_value_value->[0];\n    my $numerator_value_value_value_value = $numerator_value_value_value->[0];\n    my $denominator_value_value_value_value = $denominator_value_value_value->[0];\n    my $x_numerator_value_value_value_value_value = $x_numerator_value_",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    my $result = 1;\n    my $numerator_str = $numerator;\n    my $denominator_str = $denominator;\n    my $numerator_str_list = split /\\//, $numerator_str;\n    my $denominator_str_list = split /\\//, $denominator_str;\n    my $numerator_str_list_length = @$numerator_str_list;\n    my $denominator_str_list_length = @$denominator_str_list;\n    my $numerator_str_list_length_minus_1 = $numerator_str_list_length - 1;\n    my $denominator_str_list_length_minus_1 = $denominator_str_list_length - 1;\n    my $numerator_str_list_length_minus_2 = $numerator_str_list_length - 2;\n    my $denominator_str_list_length_minus_2 = $denominator_str_list_length - 2;\n    my $numerator_str_list_length_minus_3 = $numerator_str_list_length - 3;\n    my $denominator_str_list_length_minus_3 = $denominator_str_list_length - 3;\n    my $numerator_str_list_length_minus_4 = $numerator_str_list_length - 4;\n    my $denominator_str_list_length_minus_4 = $denominator_str_list_length - 4;\n    my $numerator_str_list_length_minus_5 = $numerator_str_list_length - 5;\n    my $denominator_str_list_length_minus_5 = $denominator_str_list_length - 5;\n    my $numerator_str_list_length_minus_6 = $numerator_str_list_length - 6;\n    my $denominator_str_list_length",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my($numerator, $denominator) = split /;\n    my($new_numerator, $new_denominator) = $numerator * $x;\n    if ($new_numerator % $new_denominator == 0) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_result = $x_numerator_divisor / $x_denominator;\n    my $numerator_divisor_result = $numerator_divisor / $denominator;\n    my $x_numerator_divisor_result_result = $x_numerator_divisor_result / $x_denominator;\n    my $numerator_divisor_result_result = $numerator_divisor_result / $denominator;\n    my $x_numerator_divisor_result_result_result = $x_numerator_divisor_result_result / $x_denominator;\n    my $numerator_divisor_result_result_result = $numerator_divisor_result_result / $denominator;\n    my $x_numerator_divisor_result_result_result_result = $x_numerator_divisor_result_result_result / $x_denominator;\n    my $numerator_divisor_result_result_result_result = $numerator_divisor_result_result_result / $denominator;\n    my $x_numerator_divisor_result_result_result_result_result = $x_numerator_divisor_result_result_result_result / $x_denominator;\n    my $numerator_divisor_result_result_result_result_result = $numerator_divisor_result_result_result_result /",
    "    my $x_n = $x * $n;\n    if ($x_n == $x * $n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $n_numerator = $numerator;\n    my $n_denominator = $denominator;\n    my $n_result = 0;\n    my $n_numerator_result = 0;\n    my $n_denominator_result = 0;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $n_numerator_result_result = 0;\n    my $n_denominator_result_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $n_numerator_result_result_result = 0;\n    my $n_denominator_result_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $n_numerator_result_result_result_result = 0;\n    my $n_denominator_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $n_numerator_result_result_result_result_result = 0;\n    my $n_denominator_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $n_numerator_result_result_result_result_result_result = 0;\n    my $n_denominator_result",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    my $x_n_int_str = sprintf(\"%d\", $x_n_int);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $simplified = 1;\n    my $simplified_numerator = $numerator;\n    my $simplified_denominator = $denominator;\n    my $simplified_numerator_string = $simplified_numerator;\n    my $simplified_denominator_string = $simplified_denominator;\n    my $simplified_numerator_string_length = $simplified_numerator_string->length;\n    my $simplified_denominator_string_length = $simplified_denominator_string->length;\n    my $simplified_numerator_string_length_minus_one = $simplified_numerator_string_length - 1;\n    my $simplified_denominator_string_length_minus_one = $simplified_denominator_string_length - 1;\n    my $simplified_numerator_string_length_minus_two = $simplified_numerator_string_length - 2;\n    my $simplified_denominator_string_length_minus_two = $simplified_denominator_string_length - 2;\n    my $simplified_numerator_string_length_minus_three = $simplified_numerator_string_length - 3;\n    my $simplified_denominator_string_length_minus_three = $simplified_denominator_string_length - 3;\n    my $simplified_numerator_string_length_minus_four = $simplified_numerator_string_length - 4;\n    my $simplified_denominator_string_length_minus_four = $simplified_denominator_string_length - 4;\n    my $simplified_numerator_string_length_minus_five = $simplified_numerator_string_length - 5;\n    my $simplified_denominator_string_length_minus_five = $sim",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_int = $x_n;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str;\n    my $x_n_int_str_int_int = $x_n_int_str_int;\n    my $x_n_int_str_int_int_int = $x_n_int_str_int_int;\n    my $x_n_int_str_int_int_int_int = $x_n_int_str_int_int_int;\n    my $x_n_int_str_int_int_int_int_int = $x_n_int_str_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int_int_int;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int_int = $x_n_int",
    "    my($numerator, $denominator) = split /;\n    my($numerator_int, $denominator_int) = split /;\n    my($numerator_int_int, $denominator_int_int) = split /;\n    my($numerator_int_int_int, $denominator_int_int_int) = split /;\n    my($numerator_int_int_int_int, $denominator_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int, $denominator_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int, $denominator_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_result = 1;\n    my $x_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_den",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    my $result = 1;\n    if ($numerator % $denominator == 0) {\n        $result = $numerator / $denominator;\n    }\n    return $result;\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_mod = $x_numerator_divisor % $x_denominator;\n    my $numerator_divisor_mod = $numerator_divisor % $denominator;\n    if ($x_numerator_divisor_mod == 0) {\n        $result = $x_numerator_divisor / $x_denominator;\n    }\n    if ($numerator_divisor_mod == 0) {\n        $result = $numerator_divisor / $denominator;\n    }\n    return $result;\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    if ($x_n == floor($x_n)) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $n_numerator = $numerator;\n    my $n_denominator = $denominator;\n    my $n_result = 1;\n    my $x_n_numerator = $x_numerator;\n    my $x_n_denominator = $x_denominator;\n    my $x_n_result = 1;\n    my $n_x_numerator = $n_numerator;\n    my $n_x_denominator = $n_denominator;\n    my $n_x_result = 1;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 1;\n    my $n_x_n_numerator = $n_x_numerator;\n    my $n_x_n_denominator = $n_x_denominator;\n    my $n_x_n_result = 1;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 1;\n    my $n_x_n_numerator = $n_x_numerator;\n    my $n_x_n_denominator = $n_x_denominator;\n    my $n_x_n_result = 1;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n",
    "    my $xn = $x * $n;\n    my $xn_int = int($xn);\n    if ($xn_int == $xn) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
    "    my $xn = $x * $n;\n    my $xn_int = int($xn);\n    if ($xn_int == $xn) {\n        return 1;\n    } else {\n        return '';\n    }\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_int = $x_n;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_str = $x_n_int_str;\n    my $x_n_int_str_str_str = $x_n_int_str_str;\n    my $x_n_int_str_str_str_str = $x_n_int_str_str_str;\n    my $x_n_int_str_str_str_str_str = $x_n_int_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str = $x_n_int_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str = $x_n_int_str_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str_str = $x_n_int_str_str_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str_str_str = $x_n_int_str_str_str_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str_str_str_str = $x_n_int_str_str_str_str_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str_str_str_str_str = $x_n_int_str_str_str_str_str_str_str_str_str_str;\n    my $x_n_int_str_str_str_str_str_str_str_str_str_str_str_str = $x_n_int",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_str_num = $x_n;\n    my $x_n_str_num_int = $x_n;\n    my $x_n_str_num_int_int = $x_n;\n    my $x_n_str_num_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $n_numerator = $numerator;\n    my $n_denominator = $denominator;\n    my $n_result = 0;\n    my $x_n_numerator = $x_numerator;\n    my $x_n_denominator = $x_denominator;\n    my $x_n_result = 0;\n    my $n_n_numerator = $n_numerator;\n    my $n_n_denominator = $n_denominator;\n    my $n_n_result = 0;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 0;\n    my $n_n_n_numerator = $n_n_numerator;\n    my $n_n_n_denominator = $n_n_denominator;\n    my $n_n_n_result = 0;\n    my $x_n_n_n_numerator = $x_n_n_numerator;\n    my $x_n_n_n_denominator = $x_n_n_denominator;\n    my $x_n_n_n_result = 0;\n    my $n_n_n_n_numerator = $n_n_n_numerator;\n    my $n_n_n_n_denominator = $n_n_n_denominator;\n    my $n_n_n_n_result = 0;\n    my $x_n_n_n_n_numerator = $x_n_n_n_numerator;\n    my $",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result_result = 0;\n    my $x_den",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my($numerator, $denominator) = split /;\n    my($new_numerator, $new_denominator) = $numerator * $x;\n    if ($new_numerator / $new_denominator == $numerator / $denominator) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $simplified = 1 if $x->[0] * $numerator / $denominator == $x->[0] * $numerator / $denominator;\n    return $simplified ? 1 : \"\";\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    my $x_n_int_str = sprintf(\"%d\", $x_n_int);\n    my $x_n_int_str_int = $x_n_int_str - 0;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_x_denominator = $numerator / $x_denominator;\n    my $numerator_div_x_denominator_div_numerator = $numerator_div_x_denominator / $numerator;\n    my $result_div_numerator_div_x_denominator = $result / $numerator_div_x_denominator;\n    my $result_div_numerator_div_x_denominator_div_numerator = $result_div_numerator_div_x_denominator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_numerator = $result_div_numerator_div_x_denominator_div_numerator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_numerator_div_numerator = $result_div_numerator_div_x_denominator_div_numerator_div_numerator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_numerator_div_numerator_div_numerator = $result_div_numerator_div_x_denominator_div_numerator_div_numerator_div_numerator / $numerator;\n    my $result_div_numerator_div_x_denominator_div_numerator_div_numerator_div_numerator_div_numerator_div",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x->[0] * $numerator / $denominator;\n    if ($result == $result->[0]) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    my $x_n_int_str = sprintf(\"%d\", $x_n_int);\n    my $x_n_int_str_int = $x_n_int_str - 0;\n    my $x_n_int_str_int_str = sprintf(\"%d\", $x_n_int_str_int);\n    if ($x_n_int_str_int_str == $x_n_int_str) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $xn = $x * $n;\n    if ($xn == $x * $n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    my $result = 0;\n    my $numerator_str = $numerator;\n    my $denominator_str = $denominator;\n    my $numerator_str_list = split /\\//, $numerator_str;\n    my $denominator_str_list = split /\\//, $denominator_str;\n    my $numerator_str_list_len = @$numerator_str_list;\n    my $denominator_str_list_len = @$denominator_str_list;\n    my $numerator_str_list_len_minus_1 = $numerator_str_list_len - 1;\n    my $denominator_str_list_len_minus_1 = $denominator_str_list_len - 1;\n    my $numerator_str_list_len_minus_2 = $numerator_str_list_len - 2;\n    my $denominator_str_list_len_minus_2 = $denominator_str_list_len - 2;\n    my $numerator_str_list_len_minus_3 = $numerator_str_list_len - 3;\n    my $denominator_str_list_len_minus_3 = $denominator_str_list_len - 3;\n    my $numerator_str_list_len_minus_4 = $numerator_str_list_len - 4;\n    my $denominator_str_list_len_minus_4 = $denominator_str_list_len - 4;\n    my $numerator_str_list_len_minus_5 = $numerator_str_list_len - 5;\n    my $denominator_str_list_len_minus_5 = $denominator_str_list_len - 5;\n    my $numerator_str_list_len_minus_6 = $numerator_str_list_len - 6;\n    my $denominator_str_list_len",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_mod = $x_numerator_divisor % $x_denominator;\n    my $numerator_divisor_mod = $numerator_divisor % $denominator;\n    if ($x_numerator_divisor_mod == 0 && $numerator_divisor_mod == 0) {\n        $result = $x_numerator_divisor / $x_denominator;\n    }\n    return $result;\n}\n",
    "    my($x_n, $n_x) = split /;\n    my($x_n_n, $n_x_n) = split /;\n    my($x_n_n_x_n, $n_x_n_n_x_n) = split /;\n    my($x_n_n_x_n_n, $n_x_n_n_x_n_n) = split /;\n    my($x_n_n_x_n_n_x_n, $n_x_n_n_x_n_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n, $n_x_n_n_x_n_n_x_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n_x_n, $n_x_n_n_x_n_n_x_n_x_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n_x_n_x_n, $n_x_n_n_x_n_n_x_n_x_n_x_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n_x_n_x_n_x_n, $n_x_n_n_x_n_n_x_n_x_n_x_n_x_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n_x_n_x_n_x_n_x_n, $n_x_n_n_x_n_n_x_n_x_n_x_n_x_n_x_n_x_n) = split /;\n    my($x_n_n_x_n_n_x_n_x_n_x_n_x_n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_div_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_denominator = $numerator / $denominator;\n    my $x_numerator_div_denominator_result = $x_numerator_div_denominator * $numerator_div_denominator;\n    my $x_numerator_div_denominator_result_result = $x_numerator_div_denominator_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result = $x_numerator_div_denominator_result_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result_result = $x_numerator_div_denominator_result_result_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result_result_result = $x_numerator_div_denominator_result_result_result_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result_result_result_result = $x_numerator_div_denominator_result_result_result_result_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result_result_result_result_result = $x_numerator_div_denominator_result_result_result_result_result_result / $denominator;\n    my $x_numerator_div_denominator_result_result_result_result_result_result_result_result = $x_numerator_",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_value = $x_numerator->[0];\n    my $x_denominator_value = $x_denominator->[0];\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $x_numerator_value_value = $x_numerator_value->[0];\n    my $x_denominator_value_value = $x_denominator_value->[0];\n    my $numerator_value_value = $numerator_value->[0];\n    my $denominator_value_value = $denominator_value->[0];\n    my $x_numerator_value_value_value = $x_numerator_value_value->[0];\n    my $x_denominator_value_value_value = $x_denominator_value_value->[0];\n    my $numerator_value_value_value = $numerator_value_value->[0];\n    my $denominator_value_value_value = $denominator_value_value->[0];\n    my $x_numerator_value_value_value_value = $x_numerator_value_value_value->[0];\n    my $x_denominator_value_value_value_value = $x_denominator_value_value_value->[0];\n    my $numerator_value_value_value_value = $numerator_value_value_value->[0];\n    my $denominator_value_value_value_value = $denominator_value_value_value->[0];\n    my $x_numerator_value_value_value_value_value = $x_numerator_value_",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int;\n    my $x_n_int_str_int_int = $x_n_int_int;\n    if ($x_n_int_str_int_int == $x_n_int_str_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    return $x_n_int == $x_n ? 1 : '';\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_div_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_denominator = $numerator / $denominator;\n    my $x_numerator_div_denominator_result = $x_numerator_div_denominator * $numerator_div_denominator;\n    my $x_numerator_div_denominator_result_mod = $x_numerator_div_denominator_result % $x_denominator;\n    my $x_numerator_div_denominator_result_mod_result = $x_numerator_div_denominator_result_mod / $x_denominator;\n    my $x_numerator_div_denominator_result_mod_result_mod = $x_numerator_div_denominator_result_mod % $x_denominator;\n    if ($x_numerator_div_denominator_result_mod_result_mod == 0) {\n        $result = $x_numerator_div_denominator_result_mod_result_mod;\n    }\n    return $result;\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_value = $x_numerator->[0];\n    my $x_denominator_value = $x_denominator->[0];\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $x_numerator_value_value = $x_numerator_value->[0];\n    my $x_denominator_value_value = $x_denominator_value->[0];\n    my $numerator_value_value = $numerator_value->[0];\n    my $denominator_value_value = $denominator_value->[0];\n    my $x_numerator_value_value_value = $x_numerator_value_value->[0];\n    my $x_denominator_value_value_value = $x_denominator_value_value->[0];\n    my $numerator_value_value_value = $numerator_value_value->[0];\n    my $denominator_value_value_value = $denominator_value_value->[0];\n    my $x_numerator_value_value_value_value = $x_numerator_value_value_value->[0];\n    my $x_denominator_value_value_value_value = $x_denominator_value_value_value->[0];\n    my $numerator_value_value_value_value = $numerator_value_value_value->[0];\n    my $denominator_value_value_value_value = $denominator_value_value_value->[0];\n    my $x_numerator_value_value_value_value_value = $x_numerator_value_",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator/$x_denominator;\n    my $numerator_div_x_denominator = $numerator/$x_denominator;\n    my $numerator_div_x_denominator_mod_x_denominator = $numerator_div_x_denominator % $x_denominator;\n    my $numerator_div_x_denominator_mod_x_denominator_div_x_denominator = $numerator_div_x_denominator_mod_x_denominator/$x_denominator;\n    my $numerator_div_x_denominator_mod_x_denominator_div_x_denominator_div_x_denominator = $numerator_div_x_denominator_mod_x_denominator_div_x_denominator/$x_denominator;\n    my $numerator_div_x_denominator_mod_x_denominator_div_x_denominator_div_x_denominator_div_x_denominator = $numerator_div_x_denominator_mod_x_denominator_div_x_denominator_div_x_denominator/$x_denominator;\n    if ($x_numerator_div_x_denominator == $numerator_div_x_denominator) {\n        $result = 1;\n    } else if ($x_numerator_div_x_denominator == $numerator_div_x_denominator_mod_x_denominator) {\n        $result = $x_numerator_div_x_denominator_mod_x_denominator_div_x_denominator;\n",
    "    my $num = $x->[0];\n    my $den = $x->[1];\n    my $new_num = $num * $n;\n    my $new_den = $den * $n;\n    if ($new_num == $new_den) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result_result = 0;\n    my $x_den",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_result = 1;\n    my $x_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_numerator_result = 1;\n    my $x_denominator_denominator_result = 1;\n    my $x_numerator_denominator_numerator_result = 1;\n    my $x_denominator_numerator_denominator_result = 1;\n    my $x_numerator_denominator_denominator_numerator_result = 1;\n    my $x_denominator_numerator_denominator_denominator_result = 1;\n    my $x_numerator_denominator_numerator_denominator_denominator_result = 1;\n    my $x_denominator_numerator_denominator_numerator_denominator_result = 1;\n    my $x_numerator_denominator_numerator_denominator_denominator_denominator_result = 1;\n    my $x_denominator_numerator_denominator_numerator_denominator_denominator_result = 1;\n    my $x_numerator_denominator_numerator_denominator_denominator_denominator_denominator_result = 1;\n    my $x_denominator_numerator_denominator_numerator_denominator_denominator_denominator_result = 1;\n    my $x_numerator_denominator_numerator_denominator_denominator_denominator_denominator_den",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_mod = $x_numerator_divisor % $x_denominator;\n    my $numerator_divisor_mod = $numerator_divisor % $denominator;\n    my $x_numerator_divisor_mod_divisor = $x_numerator_divisor_mod / $x_denominator;\n    my $numerator_divisor_mod_divisor = $numerator_divisor_mod / $denominator;\n    my $x_numerator_divisor_mod_divisor_mod = $x_numerator_divisor_mod_divisor % $x_denominator;\n    my $numerator_divisor_mod_divisor_mod = $numerator_divisor_mod_divisor % $denominator;\n    my $x_numerator_divisor_mod_divisor_mod_divisor = $x_numerator_divisor_mod_divisor_mod % $x_denominator;\n    my $numerator_divisor_mod_divisor_mod_divisor = $numerator_divisor_mod_divisor_mod % $denominator;\n    my $x_numerator_divisor_mod_divisor_mod_divisor_divisor = $x_numerator_divisor_mod_divisor_mod_divisor % $x_denominator;\n    my $numerator_divisor_mod_div",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result_result = 0;\n    my $x_den",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    if ($x_n == floor($x_n)) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $xn = $x * $n;\n    my $xn_int = int($xn);\n    my $xn_frac = $xn - $xn_int;\n    my $xn_frac_int = int($xn_frac);\n    if ($xn_int == $xn_frac_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $x_n = $x * $n;\n    if ($x_n == $x * $n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return '';\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    my $x_n_int_str_int_int = $x_n_int_str_int / 1;\n    my $x_n_int_str_int_int_int = $x_n_int_str_int_int / 1;\n    my $x_n_int_str_int_int_int_int = $x_n_int_str_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int = $x_n_int_str_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int = $x_n_int_str_int_int_int_int_int_int_int_int_int / 1;\n    my $x_n_int_str_int_int_int_int_int_int_int_int_int_int_int",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $x->[0];\n    my $denominator = $x->[1];\n    my $result = 1;\n    my $new_numerator = $numerator;\n    my $new_denominator = $denominator;\n    my $new_numerator_int = $numerator;\n    my $new_denominator_int = $denominator;\n    my $new_numerator_int_int = $numerator;\n    my $new_denominator_int_int = $denominator;\n    my $new_numerator_int_int_int = $numerator;\n    my $new_denominator_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int_int_int_int_int = $denominator;\n    my $new_numerator_int_int_int_int_int_int_int_int_int = $numerator;\n    my $new_denominator_int_int_int_int_int_int_int_int_int = $den",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $x_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $x_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $x_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $x_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result = 0;\n    my $x_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result = 0;\n    my $x_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_result = 1;\n    my $x_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_denominator_result = 1;\n    my $x_numerator_denominator_result = 1;\n    my $x_denominator_numerator_result = 1;\n    my $x_numerator_den",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($numerator, $denominator) = split /;\n    my($numerator_int, $denominator_int) = split /;\n    my($numerator_int_int, $denominator_int_int) = split /;\n    my($numerator_int_int_int, $denominator_int_int_int) = split /;\n    my($numerator_int_int_int_int, $denominator_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int, $denominator_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int, $denominator_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_value = $x_numerator->[0];\n    my $x_denominator_value = $x_denominator->[0];\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $x_numerator_value_value = $x_numerator_value->[0];\n    my $x_denominator_value_value = $x_denominator_value->[0];\n    my $numerator_value_value = $numerator_value->[0];\n    my $denominator_value_value = $denominator_value->[0];",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int . \"\";\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $n_numerator = $numerator;\n    my $n_denominator = $denominator;\n    my $n_result = 0;\n    my $x_n_numerator = $x_numerator;\n    my $x_n_denominator = $x_denominator;\n    my $x_n_result = 0;\n    my $n_n_numerator = $n_numerator;\n    my $n_n_denominator = $n_denominator;\n    my $n_n_result = 0;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 0;\n    my $n_n_n_numerator = $n_n_numerator;\n    my $n_n_n_denominator = $n_n_denominator;\n    my $n_n_n_result = 0;\n    my $x_n_n_n_numerator = $x_n_n_numerator;\n    my $x_n_n_n_denominator = $x_n_n_denominator;\n    my $x_n_n_n_result = 0;\n    my $n_n_n_n_numerator = $n_n_n_numerator;\n    my $n_n_n_n_denominator = $n_n_n_denominator;\n    my $n_n_n_n_result = 0;\n    my $x_n_n_n_n_numerator = $x_n_n_n_numerator;\n    my $",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnx) = split /;\n    my($xnxnn, $nxnxn) = split /;\n    my($xnxnnn, $nxnxnn) = split /;\n    my($xnxnnnn, $nxnxnnn) = split /;\n    my($xnxnnnnn, $nxnxnnnn) = split /;\n    my($xnxnnnnnn, $nxnxnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnxnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnxnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnxnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnx",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    my $x_n_str = $x_n - $x_n_int;\n    if ($x_n_int == $x_n_str) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    my $x_n_int_str = sprintf(\"%d\", $x_n_int);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    my $x_n_frac = $x_n - $x_n_int;\n    if ($x_n_int == $x_n_frac) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $x_n = $x * $n;\n    if ($x_n == int($x_n)) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $x->[0];\n    my $denominator = $x->[1];\n    my $result = 1;\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $numerator_value_int = $numerator_value;\n    my $denominator_value_int = $denominator_value;\n    my $numerator_value_int_mod = $numerator_value_int % $denominator_value_int;\n    my $numerator_value_int_mod_div = $numerator_value_int_mod / $denominator_value_int;\n    if ($numerator_value_int_mod_div == 0) {\n        $result = $numerator_value_int_mod;\n    }\n    return $result;\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 0;\n    my $n_numerator = $numerator;\n    my $n_denominator = $denominator;\n    my $n_result = 0;\n    my $x_n_numerator = $x_numerator;\n    my $x_n_denominator = $x_denominator;\n    my $x_n_result = 0;\n    my $n_x_numerator = $n_numerator;\n    my $n_x_denominator = $n_denominator;\n    my $n_x_result = 0;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 0;\n    my $n_x_n_numerator = $n_x_numerator;\n    my $n_x_n_denominator = $n_x_denominator;\n    my $n_x_n_result = 0;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n_result = 0;\n    my $n_x_n_numerator = $n_x_numerator;\n    my $n_x_n_denominator = $n_x_denominator;\n    my $n_x_n_result = 0;\n    my $x_n_n_numerator = $x_n_numerator;\n    my $x_n_n_denominator = $x_n_denominator;\n    my $x_n_n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x->[0] * $numerator / $denominator;\n    if ($result == $result->[0]) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $x->[0];\n    my $denominator = $x->[1];\n    my $simplified = 1 if $numerator * $n == $numerator * $n->[0] && $denominator * $n == $denominator * $n->[1];\n    return $simplified ? 1 : '';\n}",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    my $x_n_frac = $x_n - $x_n_int;\n    if ($x_n_int == $x_n_frac) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return '';\n}",
    "    my $x_n = $x * $n;\n    if ($x_n == $x * $n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_str = $x_n;\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_value = $x_numerator->[0];\n    my $x_denominator_value = $x_denominator->[0];\n    my $numerator_value = $numerator->[0];\n    my $denominator_value = $denominator->[0];\n    my $x_numerator_value_value = $x_numerator_value->[0];\n    my $x_denominator_value_value = $x_denominator_value->[0];\n    my $numerator_value_value = $numerator_value->[0];\n    my $denominator_value_value = $denominator_value->[0];\n    my $x_numerator_value_value_value = $x_numerator_value_value->[0];\n    my $x_denominator_value_value_value = $x_denominator_value_value->[0];\n    my $numerator_value_value_value = $numerator_value_value->[0];\n    my $denominator_value_value_value = $denominator_value_value->[0];\n    my $x_numerator_value_value_value_value = $x_numerator_value_value_value->[0];\n    my $x_denominator_value_value_value_value = $x_denominator_value_value_value->[0];\n    my $numerator_value_value_value_value = $numerator_value_value_value->[0];\n    my $denominator_value_value_value_value = $denominator_value_value_value->[0];\n    my $x_numerator_value_value_value_value_value = $x_numerator_value_",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_denominator = $numerator / $denominator;\n    my $x_numerator_div_denominator_div_numerator_div_denominator = $x_numerator_div_denominator / $numerator_div_denominator;\n    if ($x_numerator_div_denominator_div_numerator_div_denominator == 1) {\n        $result = $x_numerator_div_denominator;\n    }\n    return $result;\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_result = 0;\n    my $x_denominator_result = 0;\n    my $x_numerator_result_result = 0;\n    my $x_denominator_result_result = 0;\n    my $x_numerator_result_result_result = 0;\n    my $x_denominator_result_result_result = 0;\n    my $x_numerator_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_denominator_result_result_result_result_result_result_result_result_result = 0;\n    my $x_numerator_result_result_result_result_result_result_result_result_result_result = 0;\n    my $x_den",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x * $numerator / $denominator;\n    if ($result == $x * $numerator / $denominator) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my $x_n = $x * $n;\n    if ($x_n == $x * $n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    if ($x_n == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_denominator = $x_numerator / $x_denominator;\n    my $numerator_denominator = $numerator / $denominator;\n    my $numerator_numerator = $numerator % $denominator;\n    my $numerator_result = 1;\n    my $denominator_result = 1;\n    my $denominator_denominator = $denominator % $denominator;\n    my $denominator_numerator = $denominator / $denominator;\n    my $denominator_numerator_result = 1;\n    my $denominator_denominator_result = 1;\n    my $denominator_numerator_denominator = $denominator_numerator / $denominator_denominator;\n    my $denominator_numerator_denominator_result = 1;\n    my $denominator_denominator_denominator = $denominator_denominator / $denominator_denominator;\n    my $denominator_denominator_denominator_result = 1;\n    my $denominator_numerator_denominator_denominator = $denominator_numerator_denominator / $denominator_denominator_denominator;\n    my $denominator_numerator_denominator_denominator_result = 1;\n    my $denominator_denominator_denominator_denominator = $denominator_denominator_denominator / $denominator_denominator_denominator;\n    my $denominator_denominator_denominator_denominator_result = 1;\n    my $denominator_numerator_denominator",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnx) = split /;\n    my($xnxnx, $nxnxn) = split /;\n    my($xnxnxn, $nxnxnx) = split /;\n    my($xnxnxnx, $nxnxnxn) = split /;\n    my($xnxnxnxn, $nxnxnxnx) = split /;\n    my($xnxnxnxnx, $nxnxnxnxn) = split /;\n    my($xnxnxnxnxn, $nxnxnxnxnx) = split /;\n    my($xnxnxnxnxnx, $nxnxnxnxnxn) = split /;\n    my($xnxnxnxnxnxn, $nxnxnxnxnxnx) = split /;\n    my($xnxnxnxnxnxnx, $nxnxnxnxnxnxn) = split /;\n    my($xnxnxnxnxnxnxn, $nxnxnxnxnxnxnx) = split /;\n    my($xnxnxnxnxnxnxnx, $nxnxnxnxnxnxnxn) = split /;\n    my($xnxnxnxnxnxnxnxn, $nxnxnxnxnxnxnxnx) = split /;\n    my($xnxnxnxnxnxnxnxnx, $nxnxnxnxnxnxnxnxn) = split /;\n    my($xnxnxnxnxnxnxnxnxn, $nxnxnxnxn",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n / 1;\n    my $x_n_int_str = $x_n_int . \"\";\n    my $x_n_int_str_int = $x_n_int_str / 1;\n    if ($x_n_int_str_int == $x_n_int) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_div_x_denominator = $x_numerator / $x_denominator;\n    my $numerator_div_x_denominator = $numerator / $x_denominator;\n    my $numerator_div_x_denominator_div_numerator = $numerator_div_x_denominator / $numerator;\n    my $numerator_div_x_denominator_div_numerator_div_numerator = $numerator_div_x_denominator_div_numerator / $numerator;\n    if ($numerator_div_x_denominator_div_numerator_div_numerator == 1) {\n        $result = $x_numerator_div_x_denominator;\n    }\n    return $result;\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my($numerator, $denominator) = split /;\n    my($numerator_int, $denominator_int) = split /;\n    my($numerator_int_int, $denominator_int_int) = split /;\n    my($numerator_int_int_int, $denominator_int_int_int) = split /;\n    my($numerator_int_int_int_int, $denominator_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int, $denominator_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int, $denominator_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_int_int_int_int_int_int_int) = split /;\n    my($numerator_int_int_int_int_int_int_int_int_int_int_int_int, $denominator_int_int_int_int_",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $numerator = $x * $n;\n    my $denominator = $n;\n    if ($numerator % $denominator == 0) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $simplified = 1;\n    my $simplified_numerator = $x->[0];\n    my $simplified_denominator = $x->[1];\n    my $simplified_numerator_divisor = $simplified_numerator / $simplified_denominator;\n    my $simplified_denominator_divisor = $simplified_denominator / $simplified_denominator;\n    my $simplified_numerator_divisor_remainder = $simplified_numerator / $simplified_denominator;\n    my $simplified_denominator_divisor_remainder = $simplified_denominator / $simplified_denominator;\n    my $simplified_numerator_divisor_remainder_quotient = $simplified_numerator / $simplified_denominator;\n    my $simplified_denominator_divisor_remainder_quotient = $simplified_denominator / $simplified_denominator;\n    my $simplified_numerator_divisor_remainder_quotient_remainder = $simplified_numerator / $simplified_denominator;\n    my $simplified_denominator_divisor_remainder_quotient_remainder = $simplified_denominator / $simplified_denominator;\n    my $simplified_numerator_divisor_remainder_quotient_remainder_quotient = $simplified_numerator / $simplified_denominator;\n    my $simplified_denominator_divisor_remainder_quotient_remainder_quotient = $simplified_denominator / $simplified_denominator;\n    my $simplified_numerator_divisor_remainder",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    if ($x_n == $x_n_int) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_int = $x_n;\n    my $x_n_int_str = $x_n_int;\n    my $x_n_int_str_int = $x_n_int_str;\n    my $x_n_int_str_int_str = $x_n_int_str_int;\n    my $x_n_int_str_int_str_int = $x_n_int_str_int_str;\n    my $x_n_int_str_int_str_int_str = $x_n_int_str_int_str_int;\n    my $x_n_int_str_int_str_int_str_int = $x_n_int_str_int_str_int_str;\n    my $x_n_int_str_int_str_int_str_int_str = $x_n_int_str_int_str_int_str_int;\n    my $x_n_int_str_int_str_int_str_int_str_int = $x_n_int_str_int_str_int_str_int_str;\n    my $x_n_int_str_int_str_int_str_int_str_int_str = $x_n_int_str_int_str_int_str_int_str_int;\n    my $x_n_int_str_int_str_int_str_int_str_int_str_int = $x_n_int_str_int_str_int_str_int_str_int_str;\n    my $x_n_int_str_int_str_int_str_int_str_int_str_int_str = $x_n_int_str_int_str_int_str_int_str_int_str;\n    my $x_n_int_str_int_str_int_str_int_str_int_str_int_str_int = $x_n_int_str",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = $x->[0] * $numerator / $denominator;\n    if ($result == $x->[0] * $numerator / $denominator) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];",
    "    my $x_n = $x * $n;\n    if ($x_n == $x) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my($x_n, $n_x) = split /;\n    my($x_n_x, $n_x_x) = split /;\n    my($x_n_x_n_x, $n_x_x_n_x) = split /;\n    my($x_n_x_n_x_n_x, $n_x_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x, $n_x_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x_n_x) = split /;\n    my($x_n_x_n_x_n_x_n",
    "    my $x_n = $x * $n;\n    my $x_n_int = $x_n - 0;\n    my $x_n_int_str = sprintf(\"%d\", $x_n_int);\n    my $x_n_int_str_int = $x_n_int - 0;\n    my $x_n_int_str_int_str = sprintf(\"%d\", $x_n_int_str_int);\n    if ($x_n_int_str_int_str == $x_n_int_str) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n",
    "    my $x_n = $x * $n;\n    if ($x_n == $x * $n) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    if ($x_n == floor($x_n)) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 0;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];",
    "    my $x_n = $x * $n;\n    my $x_n_str = $x_n;\n    my $x_n_str_num = $x_n;\n    my $x_n_str_num_int = $x_n;\n    my $x_n_str_num_int_int = $x_n;\n    my $x_n_str_num_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int_int_int_int_int_int_int_int_int_int_int = $x_n;\n    my $x_n_str_num_int_int_int_int",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_result = 1;\n    my $x_numerator_denominator = $x_numerator / $x_denominator;\n    my $numerator_denominator = $numerator / $denominator;\n    my $numerator_result = $x_numerator * $numerator_denominator;\n    my $denominator_result = $x_denominator * $numerator_denominator;\n    my $result_numerator = $numerator_result * $denominator_result;\n    my $result_denominator = $denominator_result * $denominator_result;\n    my $result_result = $result_numerator / $result_denominator;\n    if ($result_result == 1) {\n        return 1;\n    }\n    return '';\n}\n",
    "    my $x_n = $x * $n;\n    my $x_n_int = int($x_n);\n    if ($x_n_int == $x_n) {\n        return 1;\n    }\n    return \"\";\n}\n",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $result = 1;\n    my $x_numerator = $x->[0];\n    my $x_denominator = $x->[1];\n    my $x_numerator_divisor = $x_numerator / $x_denominator;\n    my $numerator_divisor = $numerator / $denominator;\n    my $x_numerator_divisor_mod = $x_numerator_divisor % $x_denominator;\n    my $numerator_divisor_mod = $numerator_divisor % $denominator;\n    my $x_numerator_divisor_mod_mod = $x_numerator_divisor_mod % $x_denominator;\n    my $numerator_divisor_mod_mod = $numerator_divisor_mod % $denominator;\n    my $x_numerator_divisor_mod_mod_mod = $x_numerator_divisor_mod_mod % $x_denominator;\n    my $numerator_divisor_mod_mod_mod = $numerator_divisor_mod_mod % $denominator;\n    my $x_numerator_divisor_mod_mod_mod_mod = $x_numerator_divisor_mod_mod_mod % $x_denominator;\n    my $numerator_divisor_mod_mod_mod_mod = $numerator_divisor_mod_mod_mod % $denominator;\n    my $x_numerator_divisor_mod_mod_mod_mod_mod = $x_numerator_divisor_mod_mod_mod_mod % $x_denominator;\n    my $numerator_divisor_mod_mod_mod_mod_mod = $numerator_divisor_mod_mod_mod_mod % $denominator;\n    my $x",
    "    my $numerator = $n->[0];\n    my $denominator = $n->[1];\n    my $simplified = 1 if $x * $numerator / $denominator == $x * $numerator / $denominator;\n    return $simplified ? 1 : '';\n}\n",
    "    my $x_n = $x * $n;\n    if ($x_n == floor($x_n)) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($",
    "    my($xn, $nx) = split /;\n    my($xnx, $nxn) = split /;\n    my($xnxn, $nxnn) = split /;\n    my($xnxnn, $nxnnn) = split /;\n    my($xnxnnn, $nxnnnn) = split /;\n    my($xnxnnnn, $nxnnnnn) = split /;\n    my($xnxnnnnn, $nxnnnnnn) = split /;\n    my($xnxnnnnnn, $nxnnnnnnn) = split /;\n    my($xnxnnnnnnn, $nxnnnnnnnn) = split /;\n    my($xnxnnnnnnnn, $nxnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnn, $nxnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnn, $nxnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnn, $nxnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnn, $nxnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnn) = split /;\n    my($xnxnnnnnnnnnnnnnnnnnn, $nxnnnnnnnnnnnnnnnnnnn) = split /;\n    my($"
  ],
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ]
}