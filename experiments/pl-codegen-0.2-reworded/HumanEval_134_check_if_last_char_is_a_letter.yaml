name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns 1 if the last character\n# of a given string\
  \ is an alphabetical character and is not\n# a part of a word, and '' otherwise.\n\
  # Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>>\
  \ check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($last_char) = substr($txt, -1);\n    return $last_char if $last_char\
    \ =~ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char if !~ /\\w/;\n    }\n    return\
    \ '';\n}", "    return $txt =~ /\\S$/ and not $txt =~ /\\w/;\n}", "    return\
    \ $txt =~ /\\w\\w$/ ? '' : 1;\n}", "    return $txt =~ /\\S$/ and not $txt =~\
    \ /\\S\\S/;\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char\
    \ if $last_char =~ /[a-zA-Z]/;\n}", "    return $txt =~ /\\w\\b$/ ? \"\" : 1;\n\
    }", "    my($last_char) = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\w/) {\n            return \"\";\n        }\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\\
    b/) {\n            return 1;\n        }\n    }\n    return '';\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /[a-zA-Z]\\b/) {\n            return 1;\n        }\n    }\n    return '';\n\
    }", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]\\S/) {\n            return 1;\n     \
    \   }\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n  \
    \  if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char\
    \ =~ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]/ &&\
    \ $last_char !~ /\\w+/) {\n            return 1;\n        }\n    }\n    return\
    \ '';\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return \"\";\n  \
    \      } else {\n            return 1;\n        }\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char\
    \ if $last_char =~ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1);\n\
    \    return $last_char =~ /[a-zA-Z]/ ? '' : 1;\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !~ /\\\
    w/;\n    }\n    return '';\n}", "    return $txt =~ /\\S$/ and not $txt =~ /\\\
    w/;\n}", "    my($last_char) = $txt;\n    my($last_char_is_a_letter) = $last_char\
    \ ne '';\n    my($last_char_is_a_letter_in_word) = $last_char_is_a_letter && !\
    \ $last_char_is_a_letter_in_word;\n    return $last_char_is_a_letter_in_word ?\
    \ 1 : '';\n}", "    my($last_char) = $txt->substr(-1);\n    return $last_char\
    \ =~ /[a-zA-Z]/ ? \"\" : 1;\n}", "    return $txt =~ /\\w\\b/ ? \"\" : 1;\n}",
  "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\s/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = $txt->{last};\n\
    \    my($last_char_is_a_letter) = $last_char->isalpha();\n    return $last_char_is_a_letter\
    \ ? \"\" : 1;\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char =~ /\\w/;\n  \
    \  }\n    return '';\n}", "    my($last_char) = $txt->substr(-1, 1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\s/) {\n            return \"\"\
    ;\n        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char\
    \ if !~ $txt /\\s/;\n    }\n    return '';\n}", "    my($last_char) = substr($txt,\
    \ -1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\\
    b/) {\n            return 1;\n        }\n    }\n    return '';\n}", "    return\
    \ $txt =~ /\\b\\w+\\b/;\n}", "    return $txt =~ /\\w\\s$/ ? '' : 1;\n}", "  \
    \  my($last_char) = substr($txt, -1);\n    return $last_char if $last_char =~\
    \ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1, 1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\S/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    return $last_char =~ /[a-zA-Z]/ ? \"\" : 1;\n}", "    my($last_char)\
    \ = $txt->substr(-1, 1);\n    my($last_char_is_a_letter) = $last_char->isalpha();\n\
    \    return $last_char_is_a_letter ? \"\" : 1;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if (isalpha($last_char)) {\n        return $txt->substr(0, -1);\n    }\n\
    \    return '';\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\s/) {\n            return\
    \ \"\";\n        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last_char)\
    \ = $txt;\n    if($last_char =~ /[a-zA-Z]/) {\n        return $last_char;\n  \
    \  }\n    return \"\";\n}", "    my($last) = $txt;\n    if(length($txt) > 0) {\n\
    \        $last = substr($txt, -1);\n        if(!isalpha($last)) {\n          \
    \  return \"\";\n        }\n        my $word = split /\\s+/, $txt;\n        foreach\
    \ my $w (@$word) {\n            if(!isalpha($w)) {\n                return \"\"\
    ;\n            }\n        }\n        return \"1\";\n    }\n    return \"\";\n}",
  "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       if ($last_char =~ /\\w/) {\n            return \"\";\n        }\n    \
    \    return 1;\n    }\n    return \"\";\n}", "    my($last) = $txt;\n    my($last_char)\
    \ = substr($last, -1);\n    my($last_char_is_a_letter) = $last_char ne '' && $last_char\
    \ ne ' ';\n    return $last_char_is_a_letter;\n}", "    my($last_char) = $txt->{last};\n\
    \    if ($last_char eq '') {\n        return '';\n    }\n    if ($last_char eq\
    \ ' ') {\n        return '';\n    }\n    if ($last_char eq '\\n') {\n        return\
    \ '';\n    }\n    if ($last_char eq '\\r') {\n        return '';\n    }\n    if\
    \ ($last_char eq '\\t') {\n        return '';\n    }\n    if ($last_char eq '\\\
    v') {\n        return '';\n    }\n    if ($last_char eq '\\f') {\n        return\
    \ '';\n    }\n    if ($last_char eq '\\b') {\n        return '';\n    }\n    if\
    \ ($last_char eq '\\a') {\n        return '';\n    }\n    if ($last_char eq '\\\
    e') {\n        return '';\n    }\n    if ($last_char eq '\\0') {\n        return\
    \ '';\n    }\n    if ($last_char eq '\\x0B') {\n        return '';\n    }\n  \
    \  if ($last_char eq '\\x0C') {\n        return '';\n    }\n    if ($last_char\
    \ eq '\\x0D') {\n        return '';\n    }\n    if ($last_char eq '\\x0E') {\n\
    \        return '';\n    }\n    if ($last_char eq '\\x0F') {\n        return '';\n\
    \    }\n    if ($last_char eq '\\x10') {\n        return '';\n    }\n    if ($last_char\
    \ eq '\\x11') {\n        return '';\n    }\n    if ($last_char eq '\\x12') {\n\
    \        return '';\n    }\n    if ($last_char eq '\\x13') {\n        return '';\n\
    \    }\n    if ($last_char eq '\\x14') {\n        return '';\n    }\n    if ($last_char\
    \ eq '\\x15') {\n        return '';\n    }\n    if ($last_char eq '\\x16') {\n\
    \        return '';\n    }\n", "    return $txt =~ /\\b[a-zA-Z]\\b/ ? '' : 1;\n\
    }", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return 1;\n     \
    \   }\n    }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n  \
    \  return $last_char if $last_char =~ /[a-zA-Z]/;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\w/) {\n   \
    \         return \"\";\n        }\n        else {\n            return 1;\n   \
    \     }\n    }\n    return \"\";\n}", "    return $txt =~ /\\w\\b/ ? '' : 1;\n\
    }", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]/) {\n            return $last_char;\n\
    \        }\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1,\
    \ 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\\
    b/) {\n            return 1;\n        }\n    }\n    return '';\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char\
    \ if !~ $txt /\\S/;\n    }\n    return '';\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if(isalpha($last_char) && !~ /\\w+$/i) {\n        return $last_char;\n\
    \    }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    if\
    \ ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n \
    \           return 1;\n        }\n    }\n    return '';\n}", "    my($last_char)\
    \ = $txt->substr(-1);\n    my($last_char_is_a_letter) = $last_char->isalpha();\n\
    \    return $last_char_is_a_letter ? $last_char : '';\n}", "    my($last_char)\
    \ = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /[a-zA-Z]\\s/) {\n            return \"\";\n        }\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    return\
    \ $last_char if $last_char =~ /\\w/ and not $last_char =~ /\\s/;\n}", "    return\
    \ $txt =~ /\\w\\b/ ? \"\" : 1;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /\\w/) {\n        return $last_char;\n    }\n    return\
    \ \"\";\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        return $last_char if !~ $txt->grep(/\\s/);\n    }\n    return '';\n\
    }", "    return $txt =~ /\\w\\s$/ ? '' : 1;\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    return $last_char =~ /[a-zA-Z]/ ? '' : 1;\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /\\s/) {\n            return \"\";\n        }\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my($last) = $txt;\n    my($last_char) = substr($last,\
    \ -1);\n    my($last_char_is_letter) = $last_char ne '' and $last_char ne ' ';\n\
    \    return $last_char_is_letter ? $last : '';\n}", "    return $txt =~ /\\w\\\
    b/ and not $txt =~ /\\b\\w/;\n}", "    my($last_char) = $txt;\n    my($last_char_is_a_letter)\
    \ = $last_char =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter) {\n        return\
    \ $last_char;\n    }\n    return \"\";\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char\
    \ =~ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = substr($txt, -1,\
    \ 1);\n    if(isalpha($last_char)) {\n        if(!$txt) {\n            return\
    \ \"\";\n        }\n        my $last_char_is_a_letter = 1;\n        my $last_char_is_a_word\
    \ = 0;\n        my $last_char_is_a_space = 0;\n        my $last_char_is_a_punct\
    \ = 0;\n        my $last_char_is_a_letter_in_a_word = 0;\n        my $last_char_is_a_punct_in_a_word\
    \ = 0;\n        my $last_char_is_a_space_in_a_word = 0;\n        my $last_char_is_a_punct_in_a_punct\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_is_a_punct_in_a_space\
    \ = 0;\n        my $last_char_is_a_space_in_a_space = 0;\n        my $last_char_is_a_punct_in_a_space\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_is_a_punct_in_a_punct\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_is_a_punct_in_a_punct\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_is_a_punct_in_a_punct\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_is_a_punct_in_a_punct\
    \ = 0;\n        my $last_char_is_a_space_in_a_punct = 0;\n        my $last_char_",
  "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       return $last_char;\n    }\n    return \"\";\n}", "    my($last_char) =\
    \ substr($txt, -1);\n    my($last_char_is_letter) = $last_char ne '' && $last_char\
    \ ne ' ';\n    return $last_char_is_letter ? 1 : '';\n}", "    return $txt =~\
    \ /\\S$/ ? $txt : \"\";\n}", "    my($last_char) = $txt->substr(-1, 1);\n    if\
    \ ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\S/) {\n \
    \           return 1;\n        }\n    }\n    return '';\n}", "    return $txt\
    \ =~ /\\b[a-z]\\b/ ? '' : 1;\n}", "    my($last_char) = substr($txt, -1);\n  \
    \  return $last_char =~ /[a-zA-Z]/ ? '' : 1;\n}", "    my($last) = $txt;\n   \
    \ my($last_char) = substr($last, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       if ($last_char =~ /[a-zA-Z]/ && $last_char !~ /\\w+/) {\n            return\
    \ \"\";\n        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last)\
    \ = $txt;\n    my($last_char) = substr($last, -1);\n    my($last_char_is_letter)\
    \ = $last_char ne '' && $last_char !~ /[^a-zA-Z]/;\n    return $last_char_is_letter\
    \ ? $last : '';\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !~ /\\\
    w/;\n    }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n    if\
    \ ($last_char =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char =~\
    \ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_a_letter) = $last_char->isalpha();\n    return $last_char_is_a_letter\
    \ ? \"\" : 1;\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char\
    \ if $last_char =~ /[a-zA-Z]/;\n}", "    return $txt =~ /\\b[a-zA-Z]\\b/ ? ''\
    \ : 1;\n}", "    my($last_char) = substr($txt, -1);\n    my($last_char_is_a_letter)\
    \ = $last_char ne '' && $last_char ne ' ';\n    return $last_char_is_a_letter\
    \ ? 1 : '';\n}", "    my($last_char) = $txt->substr(-1);\n    my($last_char_is_a_letter)\
    \ = $last_char ne '' and\n        $last_char eq chr($last_char) and\n        $last_char\
    \ ne ' ' and\n        $last_char ne '\\n' and\n        $last_char ne '\\r' and\n\
    \        $last_char ne '\\t' and\n        $last_char ne '\\v' and\n        $last_char\
    \ ne '\\f' and\n        $last_char ne '\\a' and\n        $last_char ne '\\b' and\n\
    \        $last_char ne '\\e' and\n        $last_char ne '\\f' and\n        $last_char\
    \ ne '\\n' and\n        $last_char ne '\\r' and\n        $last_char ne '\\t' and\n\
    \        $last_char ne '\\v' and\n        $last_char ne '\\f' and\n        $last_char\
    \ ne '\\a' and\n        $last_char ne '\\b' and\n        $last_char ne '\\e' and\n\
    \        $last_char ne '\\f' and\n        $last_char ne '\\n' and\n        $last_char\
    \ ne '\\r' and\n        $last_char ne '\\t' and\n        $last_char ne '\\v' and\n\
    \        $last_char ne '\\f' and\n        $last_char ne '\\a' and\n        $last_char\
    \ ne '\\b' and\n        $last_char ne '\\e' and\n        $last_char ne '\\f' and\n\
    \        $last_char ne '\\n' and\n        $last_char ne '\\r' and\n        $last_char\
    \ ne '\\t' and\n        $last_char ne '\\v' and\n        $last_char ne '\\f' and\n\
    \        $last_char ne '\\a' and\n        $last_char ne '\\b' and\n        $last_char\
    \ ne '\\e' and\n        $last_char ne '\\f' and\n        $last_char ne '\\n' and\n\
    \        $last_", "    return $txt =~ /\\S$/ and not $txt =~ /\\S\\S/;\n}", " \
    \   my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n\
    \        return $last_char if !$last_char =~ /[a-zA-Z]/;\n    }\n    return '';\n\
    }", "    my($last_char) = substr($txt, -1, 1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        return $last_char;\n    }\n    return \"\";\n}", "    my($last) =\
    \ $txt;\n    my($last_char) = $last;\n    my($last_char_is_a_letter) = $last_char\
    \ =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter) {\n        return $last_char;\n\
    \    }\n    return \"\";\n}", "    return $txt =~ /\\w\\w$/ ? '' : 1;\n}", " \
    \   my($last_char) = substr($txt, -1);\n    if(isalpha($last_char)) {\n      \
    \  return $txt;\n    }\n    return \"\";\n}", "    my($last_char) = $txt;\n  \
    \  if($last_char eq '') {\n        return '';\n    }\n    if($last_char eq ' ')\
    \ {\n        return '';\n    }\n    if($last_char eq '.') {\n        return '';\n\
    \    }\n    if($last_char eq ',') {\n        return '';\n    }\n    if($last_char\
    \ eq '!') {\n        return '';\n    }\n    if($last_char eq '?') {\n        return\
    \ '';\n    }\n    if($last_char eq '-') {\n        return '';\n    }\n    if($last_char\
    \ eq '_') {\n        return '';\n    }\n    if($last_char eq ':') {\n        return\
    \ '';\n    }\n    if($last_char eq ';') {\n        return '';\n    }\n    if($last_char\
    \ eq '(') {\n        return '';\n    }\n    if($last_char eq ')') {\n        return\
    \ '';\n    }\n    if($last_char eq '{') {\n        return '';\n    }\n    if($last_char\
    \ eq '}') {\n        return '';\n    }\n    if($last_char eq '[' && $txt eq ']')\
    \ {\n        return '';\n    }\n    if($last_char eq ']') {\n        return '';\n\
    \    }\n    if($last_char eq '\"') {\n        return '';\n    }\n    if($last_char\
    \ eq '\\'') {\n        return '';\n    }\n    if($last_char eq '\\\\') {\n   \
    \     return '';\n    }\n    if($last_char eq '/') {\n        return '';\n   \
    \ }\n    if($last_char eq '*') {\n        return '';\n    }\n    if($last_char\
    \ eq '&') {\n        return '';\n    }\n    if($last_char eq '=') {\n        return\
    \ '';\n    }\n    if($last_char eq '+') {\n        return '';\n    }\n    if($last_char\
    \ eq '%') {\n        return ''", "    my($last_char) = $txt->substr(-1);\n   \
    \ if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n\
    \            return 1;\n        }\n    }\n    return '';\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    return $last_char if $last_char =~ /[a-zA-Z]/;\n}",
  "    my($last_char) = substr($txt, -1);\n    if (isalpha($last_char)) {\n      \
    \  return substr($txt, -1);\n    }\n    return '';\n}", "    my($last_char) =\
    \ $txt->substr(-1, 1);\n    my($last_char_is_a_letter) = $last_char->isalpha();\n\
    \    return $last_char_is_a_letter ? \"\" : 1;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /\\w/) {\n        return $last_char;\n    }\n    return\
    \ \"\";\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char =~\
    \ /[a-zA-Z]/ ? '' : 1;\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /\\w/ && $last_char !~ /\\w\\s/g) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    return $txt =~ /\\w\\w$/ and not $txt =~ /\\w\\w\\w/;\n}", " \
    \   my($last_char) = $txt->substr(-1);\n    my($last_char_is_a_letter) = $last_char\
    \ eq \" \" || $last_char eq \"\";\n    return $last_char_is_a_letter ? \"\" :\
    \ 1;\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char if $last_char\
    \ =~ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char\
    \ if $last_char =~ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1);\n\
    \    if(isalpha($last_char)) {\n        return $txt;\n    }\n    else {\n    \
    \    return \"\";\n    }\n}", "    return $txt =~ /\\w\\b/ and not $txt =~ /\\\
    b\\w/;\n}", "    my($last_char) = substr($txt, -1);\n    if(isalpha($last_char))\
    \ {\n        if(!~ /\\w+$/i) {\n            return \"\";\n        }\n    }\n \
    \   return 1;\n}", "    my($last_char) = $txt->substr(-1);\n    my($last_char_is_a_letter)\
    \ = $last_char eq ' ' || $last_char eq '\\n' || $last_char eq '\\t' || $last_char\
    \ eq '\\r' || $last_char eq '\\v' || $last_char eq '\\f' || $last_char eq '\\\
    a' || $last_char eq '\\b' || $last_char eq '\\0' || $last_char eq '\\x0B' || $last_char\
    \ eq '\\x0C' || $last_char eq '\\x0E' || $last_char eq '\\x0F' || $last_char eq\
    \ '\\x10' || $last_char eq '\\x11' || $last_char eq '\\x12' || $last_char eq '\\\
    x13' || $last_char eq '\\x14' || $last_char eq '\\x15' || $last_char eq '\\x16'\
    \ || $last_char eq '\\x17' || $last_char eq '\\x18' || $last_char eq '\\x19' ||\
    \ $last_char eq '\\x1A' || $last_char eq '\\x1B' || $last_char eq '\\x1C' || $last_char\
    \ eq '\\x1D' || $last_char eq '\\x1E' || $last_char eq '\\x1F' || $last_char eq\
    \ '\\x7F';\n    return $last_char_is_a_letter ? 1 : '';\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    return ($last_char =~ /\\w/) ? \"\" : 1;\n}", "   \
    \ return $txt =~ /\\b[a-zA-Z]\\b/ ? '' : 1;\n}", "    my($last_char) = $txt->substr(-1,\
    \ 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]/\
    \ && $txt->substr(-2, 1) =~ /\\s/) {\n            return \"\";\n        }\n  \
    \      return \"1\";\n    }\n    return \"\";\n}", "    return $txt =~ /\\w\\\
    b/ and not $txt =~ /\\b\\w/;\n}", "    my($last_char) = $txt->substr(-1, 1);\n\
    \    my($last_char_is_a_letter) = $last_char =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter)\
    \ {\n        return $last_char;\n    } else {\n        return \"\";\n    }\n}",
  "    my($last_char) = substr($txt, -1);\n    return $last_char if $last_char =~\
    \ /[a-zA-Z]/;\n}", "    return $txt =~ /\\S$/ ? \"\" : 1;\n}", "    return $txt\
    \ =~ /\\S$/ and not $txt =~ /\\S\\s/;\n}", "    return $txt =~ /\\S$/ ? \"\" :\
    \ 1;\n}", "    my($last_char) = substr($txt, -1);\n    return ($last_char =~ /[a-zA-Z]/)\
    \ ? $last_char : \"\";\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char\
    \ =~ /\\s/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\w/) {\n   \
    \         return \"\";\n        }\n        return 1;\n    }\n    return \"\";\n\
    }", "    my($last_char) = $txt->substr(-1);\n    my($last_char_is_a_letter) =\
    \ $last_char->isalpha();\n    return $last_char_is_a_letter ? \"\" : 1;\n}", " \
    \   my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n\
    \        if ($last_char =~ /[a-zA-Z]\\s/) {\n            return \"\";\n      \
    \  }\n        return 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char;\n    }\n\
    \    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    if (isalpha($last_char)\
    \ && !~ /\\w+$/i) {\n        return $last_char;\n    }\n    return \"\";\n}",
  "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       if ($last_char =~ /\\b/) {\n            return \"\";\n        }\n    \
    \    return 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    return $last_char =~ /[a-zA-Z]/ && !~ $txt /\\w/;\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    return $last_char if $last_char =~ /[a-zA-Z]/ && $txt;\n\
    }", "    my($last_char) = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        return $last_char;\n    }\n    return \"\";\n}", "    return $txt\
    \ =~ /\\w\\w$/ and not $txt =~ /\\w/;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /\\w/ && $last_char !~ /\\s/ && $last_char !~ /\\d/) {\n\
    \        return 1;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1,\
    \ 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !$txt->substr(-1,\
    \ 1) =~ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_a_letter) = $last_char eq \" \" || $last_char eq \"\";\n\
    \    return $last_char_is_a_letter;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]/ &&\
    \ $txt->substr(-2) =~ /\\s/) {\n            return \"\";\n        }\n        return\
    \ \"1\";\n    }\n    return \"\";\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !$last_char\
    \ =~ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !~ /\\w/;\n\
    \    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char =~ /\\w/;\n  \
    \  }\n    return \"\";\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char if ! $last_char =~ /\\w+/;\n   \
    \ }\n    return '';\n}", "    return $txt =~ /\\b[a-zA-Z]\\b/ ? \"\" : 1;\n}",
  "    my($last_char) = $txt->substr(-1);\n    return $last_char =~ /[a-zA-Z]/ ? ''\
    \ : 1;\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\s/) {\n            return \"\";\n        }\n\
    \        return 1;\n    }\n    return \"\";\n}", "    return $txt =~ /\\b\\w+\\\
    b/ ? '' : 1;\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\w/) {\n            return \"\"\
    ;\n        }\n        return 1;\n    }\n    return \"\";\n}", "    return $txt\
    \ =~ /\\S$/ and not $txt =~ /\\S\\S/;\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_a_letter) = $last_char->isalpha();\n    return $last_char_is_a_letter\
    \ ? $last_char : '';\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\S/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char\
    \ =~ /\\w/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1,\
    \ 1);\n    my($last_char_is_a_letter) = $last_char =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter)\
    \ {\n        return $last_char;\n    }\n    return \"\";\n}", "    my($last) =\
    \ $txt;\n    my($last_char) = substr($last, -1);\n    my($last_char_is_letter)\
    \ = $last_char ne '' and $last_char ne ' ';\n    if ($last_char_is_letter) {\n\
    \        return $last_char_is_letter;\n    }\n    return '';\n}", "    my($last_char)\
    \ = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /\\w/) {\n            return \"\";\n        }\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my($last_char) = substr($txt, -1, 1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\s/) {\n            return\
    \ \"\";\n        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last_char)\
    \ = substr($txt, -1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /[a-zA-Z]/ && $txt =~ /\\S/) {\n            return 1;\n        }\n    }\n\
    \    return '';\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char =~ /\\w/;\n  \
    \  }\n    return '';\n}", "    return $txt =~ /\\w\\s$/ ? '' : 1;\n}", "    my($last_char)\
    \ = substr($txt, -1, 1);\n    return ($last_char =~ /[a-zA-Z]/) ? \"\" : 1;\n}",
  "    my($last_char) = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n\
    \        return $last_char unless $last_char =~ /\\w/;\n    }\n    return '';\n\
    }", "    my($last_char) = $txt->substr(-1, 1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\w/) {\n            return \"\";\n        } else\
    \ {\n            return 1;\n        }\n    } else {\n        return \"\";\n  \
    \  }\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\s/) {\n            return \"\";\n        }\n\
    \        return 1;\n    }\n    return \"\";\n}", "    return $txt =~ /\\w\\b/\
    \ ? '' : 1;\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~\
    \ /[a-zA-Z]/) {\n        if ($last_char =~ /\\w/) {\n            return \"\";\n\
    \        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last) = $txt;\n\
    \    my($last_char) = substr($last, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n\
    \        if ($last_char =~ /[a-zA-Z]/) {\n            return $last_char;\n   \
    \     }\n    }\n    return \"\";\n}", "    return $txt =~ /\\w\\b/ ? \"\" : 1;\n\
    }", "    return $txt =~ /\\w\\w$/ and not $txt =~ /\\w\\w\\w/;\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /[a-zA-Z]\\b/) {\n            return 1;\n        }\n    }\n    return '';\n\
    }", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\s/) {\n            return \"\";\n        }\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    my($last_char_is_a_letter) = ($last_char eq \" \") ||\n        (ord($last_char)\
    \ >= 65 && ord($last_char) <= 90) ||\n        (ord($last_char) >= 97 && ord($last_char)\
    \ <= 122);\n    return $last_char_is_a_letter ? 1 : '';\n}", "    return $txt\
    \ =~ /\\w\\w$/ ? '' : 1;\n}", "    if($txt) {\n        $txt =~ s/\\s+$//;\n  \
    \      return $txt =~ /[^\\w]$/ ? '' : 1;\n    }\n    return '';\n}", "    my($last_char)\
    \ = substr($txt, -1, 1);\n    return $last_char if $last_char =~ /[a-zA-Z]/;\n\
    }", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        return $last_char unless m/ /;\n    }\n    return '';\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /[a-zA-Z]\\s/) {\n            return \"\";\n        }\n        else {\n \
    \           return 1;\n        }\n    }\n    else {\n        return \"\";\n  \
    \  }\n}", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\w/) {\n            return \"\";\n        }\n\
    \        else {\n            return 1;\n        }\n    }\n    else {\n       \
    \ return \"\";\n    }\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last) = $txt;\n    return\
    \ $last =~ /\\w/ ? \"\" : 1;\n}", "    my($last_char) = $txt->substr(-1);\n  \
    \  if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char;\n    }\n    return\
    \ \"\";\n}", "    my($last_char) = substr($txt, -1);\n    if(isalpha($last_char))\
    \ {\n        return $txt;\n    }\n    return \"\";\n}", "    my($last_char) =\
    \ $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char\
    \ =~ /\\w/) {\n            return \"\";\n        }\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1,\
    \ 1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\w/) {\n\
    \            return \"\";\n        }\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]\\S/) {\n            return 1;\n     \
    \   }\n    }\n    return '';\n}", "    return $txt =~ /\\b\\w+\\b/ ? '' : 1;\n\
    }", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /[a-zA-Z]/ && $txt->substr(-2) =~ /\\s/) {\n  \
    \          return \"\";\n        }\n        return \"1\";\n    }\n    return \"\
    \";\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char if $last_char\
    \ =~ /[a-zA-Z]/;\n}", "    return $txt =~ /\\b\\w+\\b/ ? '' : 1;\n}", "    my($last_char)\
    \ = $txt->substr(-1);\n    if ($last_char =~ /\\w/) {\n        return $last_char;\n\
    \    }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1, 1);\n   \
    \ if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]/ && !m/\\\
    w+$/g) {\n            return \"\";\n        }\n        return \"1\";\n    }\n\
    \    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    return $last_char\
    \ if $last_char =~ /[a-zA-Z]/;\n}", "    my($last_char) = substr($txt, -1);\n\
    \    my($last_char_is_letter) = $last_char ne '' and $last_char =~ /[a-zA-Z]/;\n\
    \    return $last_char_is_letter ? $last_char : '';\n}", "    my($last_char) =\
    \ substr($txt, -1);\n    my($last_char_is_a_letter) = $last_char ne '' and $last_char\
    \ =~ /[a-zA-Z]/;\n    return $last_char_is_a_letter ? $last_char : '';\n}", " \
    \   my($last_char) = $txt->substr(-1);\n    my($last_char_is_a_letter) = $last_char\
    \ =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter) {\n        return $last_char;\n\
    \    }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        return $last_char unless $last_char =~ /\\w/;\n  \
    \  }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n    return\
    \ ($last_char =~ /[a-zA-Z]/) ? $last_char : \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        return $last_char if !~ $txt\
    \ /[a-zA-Z]/;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_letter) = $last_char->isalpha();\n    if ($last_char_is_letter)\
    \ {\n        return $txt->substr(0, $txt->length() - 1);\n    } else {\n     \
    \   return $txt;\n    }\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\b/) {\n            return \"\"\
    ;\n        }\n        return 1;\n    }\n    return \"\";\n}", "    my($last_char)\
    \ = substr($txt, -1);\n    return $last_char if $last_char =~ /[a-zA-Z]/;\n}",
  "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/) {\n \
    \       if ($last_char =~ /[a-zA-Z]\\b/) {\n            return 1;\n        }\n\
    \    }\n    return '';\n}", "    my($last_char) = substr($txt, -1);\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\b/) {\n            return\
    \ 1;\n        }\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_a_letter) = $last_char->isalpha();\n    return $last_char_is_a_letter\
    \ ? \"\" : 1;\n}", "    my($last_char) = $txt->substr(-1);\n    my $last_char_is_a_letter\
    \ = $last_char =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter) {\n        return\
    \ $last_char;\n    }\n    return '';\n}", "    my($last_char) = $txt->substr(-1);\n\
    \    my($last_char_is_a_letter) = $last_char =~ /[a-zA-Z]/;\n    if ($last_char_is_a_letter)\
    \ {\n        return $last_char;\n    }\n    return \"\";\n}", "    return $txt\
    \ =~ /\\b\\w+\\b/ ? '' : 1;\n}", "    my($last_char) = substr($txt, -1, 1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /\\s/) {\n   \
    \         return \"\";\n        }\n        return 1;\n    }\n    return \"\";\n\
    }", "    my($last_char) = $txt->substr(-1);\n    if ($last_char =~ /[a-zA-Z]/)\
    \ {\n        if ($last_char =~ /\\s/) {\n            return \"\";\n        }\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my($last_char) = substr($txt,\
    \ -1);\n    if ($last_char =~ /[a-zA-Z]/) {\n        if ($last_char =~ /[a-zA-Z]\\\
    S/) {\n            return 1;\n        }\n    }\n    return '';\n}", "    my($last_char)\
    \ = $txt->substr(-1);\n    if(isalpha($last_char)) {\n        return $txt->substr(-1);\n\
    \    }\n    return '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
