name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my(@h) = {};\n    my(@count) = {};\n    my(@max) = {};\n    my(@max_count)\
    \ = {};\n    my(@max_count_letter) = {};\n    my(@max_count_letter_count) = {};\n\
    \    my(@max_count_letter_count_count) = {};\n    my(@max_count_letter_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count) = {};\n    my(@max_count_letter_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count) = {};\n\
    \    my(@max_count_letter_count_count_count_count_count_count_count) = {};\n \
    \   my(@max_count_letter_count_count_count_count_count_count_count_count) = {};\n\
    \    my(@max_count_letter_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = {};\n    my(@max_", "    my @counts = ();\n    my @max_count = ();\n    my\
    \ @max_count_letter = ();\n    my @max_count_letter_count = ();\n    my @max_count_letter_count_count\
    \ = ();\n    my @max_count_letter_count_count_count = ();\n    my @max_count_letter_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count = ();\n    my\
    \ @max_count_letter_count_count_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count",
  "    my($result) = {};\n    my($count, $chars) = split \" \", $test;\n    foreach\
    \ my $ch (@$chars) {\n        $count = $result{$ch} if defined $result{$ch};\n\
    \        $count = $count + 1 if $ch eq $test;\n        $result{$ch} = $count;\n\
    \    }\n    return $result;\n}", "    my($h) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    my($count) = 0;\n    my($key) = \"\";\n    foreach my $c (@$test)\
    \ {\n        $key = $c;\n        $count = $h{$key} ? $h{$key} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $key;\n        }\n        $h{$key} = $count;\n    }\n    return $h{$max_key};\n\
    }", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    my($letter, $count)\
    \ = undef;\n    foreach my $letter (split / /, $test) {\n        $count = $count\
    \ + 1;\n        if ($count > $max) {\n            $max = $count;\n           \
    \ $letter = $letter;\n        }\n        $result{$letter} = $count;\n    }\n \
    \   return $result;\n}\n", "    my(@counts, @letters) = split / /, $test;\n  \
    \  my(@max, @max_count) = 0, 0;\n    foreach my $letter (@letters) {\n       \
    \ my $count = $counts{$letter};\n        if ($count > 0) {\n            $counts{$letter}\
    \ = $count - 1;\n            $counts{$letter} = $counts{$letter} ? $counts{$letter}\
    \ : 0;\n        }\n        if ($count > $max_count) {\n            $max_count\
    \ = $count;\n            $max = $letter;\n        }\n    }\n    return ($max_count,\
    \ $max);\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach\
    \ my $letter (@$test) {\n        $count = $result->{$letter} ? $result->{$letter}\
    \ + 1 : 1;\n        if ($count > $max) {\n            $max = $count;\n       \
    \     $result = {$letter => $count};\n        }\n        else if ($count == $max)\
    \ {\n            $result->{$letter} = $count;\n        }\n    }\n    return $result;\n\
    }", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach\
    \ my $c (@$test) {\n        $hash{$c} = 0;\n        $hash{$c}++;\n        if ($hash{$c}\
    \ > $max) {\n            $max = $hash{$c};\n            $max_key = $c;\n     \
    \   }\n    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my @result\
    \ = ();", "    my(@counts, @letters) = split / /, $test;\n    my(@max, @max_letter)\
    \ = 0, 0;\n    foreach my $letter (@letters) {\n        my $count = $counts{$letter};\n\
    \        if ($count > @max) {\n            @max = $count;\n            @max_letter\
    \ = $letter;\n        }\n    }\n    return (\n        $max_letter,\n        $max\n\
    \    );\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach\
    \ my $c (@$test) {\n        $count += 1;\n        $max = max($count, $max);\n\
    \        $result{$c} = $count;\n    }\n    return $result;\n}", "    my($count,\
    \ $max) = 0, 0;\n    my @result = ();\n    foreach my $letter (@$test) {\n   \
    \     $count += 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \            @result = [$letter];\n        }\n        else if ($count == $max)\
    \ {\n            @result = [$letter, $letter];\n        }\n    }\n    return @result;\n\
    }", "    my @count = ();\n    my @result = ();\n    my @max = 0;\n    my @max_count\
    \ = 0;\n    my @max_count_letter = ();\n    my @max_count_letter_count = ();\n\
    \    my @max_count_letter_count_count = ();\n    my @max_count_letter_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count = ();\n\
    \    my @max_count_letter_count_count_count_count_count_count_count = ();\n  \
    \  my @max_count_letter_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_", "   \
    \ my(@counts, @letters) = split / /;\n    my(@max_count, @max_letter) = 0, 0;\n\
    \    my(@result) = {};\n    foreach my $letter (@letters) {\n        my $count\
    \ = $counts{$letter};\n        if ($count > @max_count) {\n            @max_count\
    \ = $count;\n            @max_letter = $letter;\n        }\n        if (!$count)\
    \ {\n            delete $counts{$letter};\n        }\n        else {\n       \
    \     $counts{$letter} = $count + 1;\n        }\n    }\n    if (@counts) {\n \
    \       @result{@max_letter} = @max_count;\n    }\n    return @result;\n}", " \
    \   my %h = ();\n    my $max = 0;\n    my $max_letter = \"\";\n    foreach my\
    \ $c (@$test) {\n        $h{$c}++;\n        if ($h{$c} > $max) {\n           \
    \ $max = $h{$c};\n            $max_letter = $c;\n        }\n    }\n    return\
    \ $h;\n}", "    my($hash) = {};\n    my($count) = 0;\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    my($max_count) = 0;\n    foreach my $letter (@$test) {\n      \
    \  $count += 1;\n        if (!$hash->{$letter}) {\n            $hash->{$letter}\
    \ = 1;\n        } else {\n            $hash->{$letter} += 1;\n        }\n    \
    \    if ($hash->{$letter} > $max_count) {\n            $max_key = $letter;\n \
    \           $max_count = $hash->{$letter};\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n        }\n    }\n    return $hash;\n}", "  \
    \  my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my\
    \ $c (@$test) {\n        $hash{$c}++;\n        if ($hash{$c} > $max) {\n     \
    \       $max = $hash{$c};\n            $max_key = $c;\n        }\n    }\n    return\
    \ $hash;\n}", "    my($result) = {};\n    my($count, $max) = 0, 0;\n    my($letter,\
    \ $count) = undef;\n    foreach my $letter (split / /, $test) {\n        $count\
    \ = $result{$letter} ? $result{$letter} : 0;\n        $count++;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $letter = $letter;\n    \
    \    }\n        $result{$letter} = $count;\n    }\n    return $result;\n}", " \
    \   my($count, $max) = 0, 0;\n    my($result) = {};\n    my($letter, $count) =\
    \ undef;\n    foreach my $letter (split / /) {\n        $count = $count + 1 if\
    \ $letter =~ /[a-z]/;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $letter = $letter;\n        }\n    }\n    $result{$letter} = $max;\n\
    \    return $result;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n\
    \    foreach my $letter (@$test) {\n        $count = $result{$letter} ? $result{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $result = {$letter => $count};\n        }\n        else if ($count\
    \ == $max) {\n            $result{$letter} = $count;\n        }\n    }\n    return\
    \ $result;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach\
    \ my $letter (@$test) {\n        $count = $result{$letter} ? $result{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $result = {$letter => $count};\n        }\n        else if ($count\
    \ == $max) {\n            $result{$letter} = $count;\n        }\n    }\n    return\
    \ $result;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach\
    \ my $letter (@$test) {\n        $count += 1 if $letter ne \"\";\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $result = {};\n         \
    \   $result{$letter} = 1;\n        } else if ($count == $max) {\n            $result{$letter}\
    \ += 1;\n        }\n    }\n    return $result;\n}", "    my($hash) = {};\n   \
    \ my($count) = 0;\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my\
    \ $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n\
    \        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my @counts = ();\n    my @result = ();\n \
    \   my @max = ();\n    my @max_count = ();\n    my @max_count_count = ();\n  \
    \  my @max_count_count_count = ();\n    my @max_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count", " \
    \   my($count, $max) = 0, 0;\n    my @result = ();\n    foreach my $letter (@$test)\
    \ {\n        $count += 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \            @result = [$letter];\n        }\n        else if ($count == $max)\
    \ {\n            @result = [$letter, $max];\n        }\n    }\n    return @result;\n\
    }", "    my @counts = ();\n    my @max_count = ();\n    my @max_count_letter =\
    \ ();\n    my @max_count_letter_count = ();\n    my @max_count_letter_count_count\
    \ = ();\n    my @max_count_letter_count_count_count = ();\n    my @max_count_letter_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count = ();\n    my\
    \ @max_count_letter_count_count_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count",
  "    my(@counts, @letters) = split / /;\n    my(@max, @max_count) = 0, 0;\n    foreach\
    \ my $letter (@letters) {\n        my $count = $counts{$letter};\n        if ($count\
    \ > 0) {\n            $counts{$letter} = $count - 1;\n            if ($count >\
    \ @max_count) {\n                @max_count = $count;\n                @max =\
    \ $letter;\n            }\n        }\n    }\n    return @{$max => $max_count,\
    \ @{$max} => @letters};\n}", "    my($h, $count) = {}, 0;\n    foreach my $c (@$test)\
    \ {\n        $h{$c} += 1;\n        $count += 1;\n        if ($count > $h{$c})\
    \ {\n            $h{$c} = $count;\n        }\n    }\n    return $h;\n}", "   \
    \ my($hash) = {};\n    my($count, $letter) = 0;\n    my($max) = 0;\n    foreach\
    \ my $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n\
    \        $count++;\n        $hash{$letter} = $count;\n        $max = $count >\
    \ $max ? $count : $max;\n    }\n    return $hash;\n}", "    my($count, $max) =\
    \ 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test) {\n        $count\
    \ += 1;\n        if ($count > $max) {\n            $max = $count;\n          \
    \  $result = {};\n            $result{$letter} = 1;\n        } else if ($count\
    \ == $max) {\n            $result{$letter} += 1;\n        }\n    }\n    return\
    \ $result;\n}", "    my($h) = {};\n    my($max) = 0;\n    my($max_key) = \"\"\
    ;\n    my($count) = 0;\n    foreach my $letter (@$test) {\n        $count = $h{$letter}\
    \ ? $h{$letter} : 0;\n        $h{$letter} = $count + 1;\n        $count += 1;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $letter;\n        }\n    }\n    return $h;\n}", "    my($hash) = {};\n   \
    \ my($max) = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    my($key) =\
    \ \"\";\n    my($key_count) = 0;\n    foreach my $letter (@$test) {\n        $key\
    \ = $letter;\n        $count = $hash{$key} ? $hash{$key} : 0;\n        $count++;\n\
    \        $hash{$key} = $count;\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $max_key = $key;\n        }\n    }\n    return $hash;\n\
    }", "    my($count, $max) = 0, 0;\n    my @result = ();\n    foreach my $letter\
    \ (@$test) {\n        $count += 1;\n        if ($count > $max) {\n           \
    \ $max = $count;\n            @result = [$letter];\n        } elsif ($count ==\
    \ $max) {\n            @result = [$letter, $letter];\n        }\n    }\n    return\
    \ @result;\n}", "    my($h, $count) = {}, 0;\n    my $max = 0;\n    foreach $c\
    \ (@$test) {\n        $h{$c}++;\n        $count += $h{$c};\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_c = $c;\n        }\n\
    \    }\n    return $h{$max_c};\n}", "    my @hash = ();\n    my @count = ();\n\
    \    my @max = 0;\n    my @max_count = 0;\n    my @max_count_hash = ();\n    my\
    \ @max_count_hash_count = 0;\n    my @max_count_hash_count_count = 0;\n    my\
    \ @max_count_hash_count_count_count = 0;\n    my @max_count_hash_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count = 0;\n    my @max_count_hash_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count = 0;\n\
    \    my @max_count_hash_count_count_count_count_count_count_count_count = 0;\n\
    \    my @max_count_hash_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    my @max_", "    my($counts, $max) = {}, 0;\n    my($letter, $count)\
    \ = \"\";\n    foreach my $letter (@$test) {\n        $count = $counts{$letter}\
    \ ? $counts{$letter} : 0;\n        $count++;\n        $counts{$letter} = $count;\n\
    \        $max = $count > $max ? $count : $max;\n    }\n    $counts{$letter} =\
    \ $counts{$letter} ? $counts{$letter} : 0;\n    $counts{$letter}++;\n    return\
    \ $counts;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach\
    \ my $c (@$test) {\n        $count += 1;\n        $max = $count if $count > $max;\n\
    \        $result{$c} = $count;\n    }\n    return $result;\n}", "    my(@counts)\
    \ = {};\n    my(@max) = 0;\n    my(@max_count) = 0;\n    my(@max_letter) = \"\"\
    ;\n    my(@max_count_letter) = 0;\n    my(@max_letter_count) = 0;\n    my(@max_letter_count_letter)\
    \ = 0;\n    foreach my $letter (@$test) {\n        my $count = $counts{$letter};\n\
    \        $counts{$letter} = $count + 1;\n        $counts{$letter} ||= 0;\n   \
    \     $count ||= 0;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_letter = $letter;\n        }\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_letter_count = $letter;\n\
    \        }\n        if ($count > $max_count_letter) {\n            $max_count_letter\
    \ = $count;\n            $max_letter_count_letter = $letter;\n        }\n    }\n\
    \    if ($max) {\n        $max_letter_count_letter ||= 0;\n        $max_letter_count_letter\
    \ ||= $max_letter_count;\n        $max_letter_count_letter ||= $max_letter;\n\
    \        $max_letter_count_letter ||= $max_letter_count_letter;\n        $max_letter_count_letter\
    \ ||= $max_letter;\n        $max_letter_count_letter ||= $max_letter_count_letter;\n\
    \        $max_letter_count_letter ||= $max_letter_count_letter;\n        $max_letter_count_letter\
    \ ||= $max_letter_count_letter;\n        $max_letter_count_letter ||= $max_letter_count_letter;\n\
    \        $max_letter_count_letter ||= $max_letter_count_letter;\n        $max_letter_count_letter\
    \ ||= $max_letter_count_letter;\n        $max_letter_count_letter ||= $max_letter_count_letter;\n\
    \        $max_letter_", "    my($result) = {};\n    my($count) = 0;\n    my($max)\
    \ = 0;\n    my($max_letter) = \"\";\n    my($max_count) = 0;\n    foreach my $letter\
    \ (@$test) {\n        $count += 1;\n        if (!$result->{$letter}) {\n     \
    \       $result->{$letter} = 1;\n            $count = 1;\n        } else {\n \
    \           $result->{$letter} += 1;\n            if ($count > $max_count) {\n\
    \                $max_count = $count;\n                $max_letter = $letter;\n\
    \            }\n        }\n        if ($count > $max) {\n            $max = $count;\n\
    \        }\n    }\n    $result->{$max_letter} = $max_count;\n    return $result;\n\
    }", "    my($result) = {};\n    my $count = 0;\n    my $max = 0;\n    my $max_letter\
    \ = \"\";\n    for my $letter (@$test) {\n        $count += 1;\n        if (!$result->{$letter})\
    \ {\n            $result->{$letter} = 1;\n        } else {\n            $result->{$letter}\
    \ += 1;\n        }\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_letter = $letter;\n        }\n    }\n    $result->{$max_letter}\
    \ = $max;\n    return $result;\n}", "    my($hash) = {};\n    my($max) = 0;\n\
    \    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my $letter (@$test)\
    \ {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $hash{$letter}\
    \ = $count + 1;\n        $count = $count + 1;\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_key = $letter;\n        }\n    }\n\
    \    $hash{$max_key} = $max;\n    return $hash;\n}", "    my(@h) = {};\n    my(@s)\
    \ = {};\n    my(@c) = {};\n    my(@i) = {};\n    my(@l) = {};\n    my(@v) = {};\n\
    \    my(@s) = {};\n    my(@c) = {};\n    my(@i) = {};\n    my(@l) = {};\n    my(@v)\
    \ = {};\n    my(@s) = {};\n    my(@c) = {};\n    my(@i) = {};\n    my(@l) = {};\n\
    \    my(@v) = {};\n    my(@s) = {};\n    my(@c) = {};\n    my(@i) = {};\n    my(@l)\
    \ = {};\n    my(@v) = {};\n    my(@s) = {};\n    my(@c) = {};\n    my(@i) = {};\n\
    \    my(@l) = {};\n    my(@v) = {};\n    my(@s) = {};\n    my(@c) = {};\n    my(@i)\
    \ = {};\n    my(@l) = {};\n    my(@v) = {};\n    my(@s) = {};\n    my(@c) = {};\n\
    \    my(@i) = {};\n    my(@l) = {};\n    my(@v) = {};\n    my(@s) = {};\n    my(@c)\
    \ = {};\n    my(@i) = {};\n    my(@l) = {};\n    my(@v) = {};\n    my(@s) = {};\n\
    \    my(@c) = {};\n    my(@i) = {};\n    my(@l) = {};\n    my(@v) = {};\n    my(@s)\
    \ = {};\n    my(@c) = {};\n    my(@i) = {};\n    my(@l) = {};\n    my(@v) = {};\n\
    \    my", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my\
    \ $letter (@$test) {\n        $count += $letter =~ /[a-z]/g;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $result = {};\n        }\n\
    \        if (!defined($result->{$letter})) {\n            $result->{$letter} =\
    \ 1;\n        } else {\n            $result->{$letter} += 1;\n        }\n    }\n\
    \    return $result;\n}", "    my(@counts, @letters) = split / /, $test;\n   \
    \ my(@max, @max_count) = 0, 0;\n    my(@result) = {};\n    foreach my $letter\
    \ (@letters) {\n        my($count, $letter) = @counts[$letter];\n        if ($count\
    \ > @max_count) {\n            @max_count = $count;\n            @max = $letter;\n\
    \        }\n        if (!defined($counts[$letter])) {\n            $counts[$letter]\
    \ = 1;\n        } else {\n            $counts[$letter] = $counts[$letter] + 1;\n\
    \        }\n    }\n    if (@max_count > 0) {\n        @result[@max] = @max_count;\n\
    \    }\n    return @result;\n}", "    my($counts, $max) = {};\n    my($max_count,\
    \ $max_letter) = 0, \"\";\n    foreach my $letter (@$test) {\n        $counts{$letter}\
    \ += 1;\n        if ($counts{$letter} > $max_count) {\n            $max_count\
    \ = $counts{$letter};\n            $max_letter = $letter;\n        }\n    }\n\
    \    return $max_count ? $max_letter : $max_count;\n}\n", "    my @counts = ();\n\
    \    my @max_count = ();\n    my @max_count_letter = ();\n    my @max_count_letter_count\
    \ = ();\n    my @max_count_letter_count_count = ();\n    my @max_count_letter_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count = ();\n\
    \    my @max_count_letter_count_count_count_count_count_count_count = ();\n  \
    \  my @max_count_letter_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count",
  "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $c (@$test)\
    \ {\n        $count += 1;\n        $max = max($count, $max);\n        $result{$c}\
    \ = $count;\n    }\n    return $result;\n}", "    my(@counts, @max_counts) = ();\n\
    \    my(@max_counts_keys, @max_counts_values) = ();\n    my(@counts_keys, @counts_values)\
    \ = ();", "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n\
    \    my @max_count_count = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my %counts = ();\n    my %max = ();\n    my %max_count = ();\n    my %max_count_count\
    \ = ();\n    my %max_count_count_count = ();\n    my %max_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count = ();\n    my %max_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count = ();\n    my %max_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my %max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my %max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my %max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($max_count)\
    \ = 0;\n    foreach my $letter (@$test) {\n        $hash{$letter} = 0;\n     \
    \   $hash{$letter}++;\n        if ($hash{$letter} > $max_count) {\n          \
    \  $max_count = $hash{$letter};\n            $max_key   = $letter;\n        }\n\
    \        if ($hash{$letter} > $max) {\n            $max = $hash{$letter};\n  \
    \      }\n    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    foreach my $c (@$test) {\n        $count += 1;\n        $max = max($count,\
    \ $max);\n        if (!defined($result->{$c})) {\n            $result->{$c} =\
    \ 1;\n        } else {\n            $result->{$c} += 1;\n        }\n    }\n  \
    \  return $result;\n}", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    my($count) = 0;\n    foreach my $letter (@$test) {\n        $count\
    \ = $hash{$letter} ? $hash{$letter} : 0;\n        $count++;\n        $hash{$letter}\
    \ = $count;\n        if ($count > $max) {\n            $max = $count;\n      \
    \      $max_key = $letter;\n        }\n    }\n    return $hash;\n}", "    my(@counts,\
    \ @max_counts) = ();\n    my(@max_counts_keys, @max_counts_values) = ();\n   \
    \ my(@counts_keys, @counts_values) = ();", "    my @counts = ();\n    my @max\
    \ = ();\n    my @max_count = ();\n    my @max_count_count = ();\n    my @max_count_count_count\
    \ = ();\n    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my\
    \ $letter (@$test) {\n        $hash{$letter} = 1;\n        if ($hash{$letter}\
    \ > $max) {\n            $max = $hash{$letter};\n            $max_key = $letter;\n\
    \        }\n    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my\
    \ @result = ();", "    my(@counts, @letters) = split / /, $test;\n    my(@max,\
    \ @max_letter) = 0, 0;\n    my(@max_count, @max_letter_count) = 0, 0;\n    foreach\
    \ my $letter (@letters) {\n        my $count = @counts{$letter};\n        if ($count\
    \ > @max_count) {\n            @max_count = $count;\n            @max_letter_count\
    \ = $count;\n            @max_letter = $letter;\n        }\n        if ($count\
    \ > @max) {\n            @max = $count;\n            @max_letter = $letter;\n\
    \        }\n    }\n    return (\n        @max_count,\n        @max_letter_count,\n\
    \        @max_letter,\n    );\n}", "    my @counts = ();\n    my @max = ();\n\
    \    my @max_count = ();\n    my @max_count_count = ();\n    my @max_count_count_count\
    \ = ();\n    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($h) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my $c\
    \ (@$test) {\n        $h{$c} += 1;\n        if ($h{$c} > $max) {\n           \
    \ $max = $h{$c};\n            $max_key = $c;\n        }\n    }\n    return $h;\n\
    }", "    my(@counts, @chars) = split / /, $test;\n    my(@max, @max_chars) = 0,\
    \ 0;\n    my(@max_count, @max_chars_count) = 0, 0;\n    my(@max_count_chars, @max_count_chars_count)\
    \ = 0, 0;\n    foreach my $char (@chars) {\n        my $count = @counts[$char];\n\
    \        if ($count > @max_count) {\n            @max_count = $count;\n      \
    \      @max_count_chars = $char;\n            @max_count_chars_count = $count;\n\
    \        }\n        if ($count > @max) {\n            @max = $count;\n       \
    \     @max_chars = $char;\n            @max_chars_count = $count;\n        }\n\
    \    }\n    return (\n        (\n            $max_count_chars,\n            $max_count_chars_count,\n\
    \        ),\n        (\n            $max_chars,\n            $max_chars_count,\n\
    \        ),\n    );\n}", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    my($count) = 0;\n    my($key) = \"\";\n    foreach my $letter (@$test)\
    \ {\n        $key = $letter;\n        $count = $hash{$key} ? $hash{$key} : 0;\n\
    \        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $key;\n        }\n        $hash{$key} = $count;\n    }\n\
    \    return $hash{$max_key};\n}", "    my($result) = {};\n    my($max) = 0;\n\
    \    my($count) = 0;\n    my($letter) = \"\";\n    my($counts) = {};\n    foreach\
    \ my $letter (@$test) {\n        $counts{$letter}++;\n        if ($counts{$letter}\
    \ > $count) {\n            $count = $counts{$letter};\n            $letter = $letter;\n\
    \        }\n        if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n\
    \        }\n    }\n    $result{$letter} = $count;\n    return $result;\n}", " \
    \   my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($count, $max) = 0, 0;\n    my @result = ();\n    foreach my $letter (@$test)\
    \ {\n        $count += 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \            @result = [$letter];\n        } elsif ($count == $max) {\n      \
    \      @result = [$letter, $letter];\n        }\n    }\n    return @result;\n}",
  "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($result) = {};\n    my($count, $letter) = 0;\n    foreach my $letter (@$test)\
    \ {\n        $count = $result{$letter} ? $result{$letter} : 0;\n        $count++;\n\
    \        $result{$letter} = $count;\n    }\n    return $result;\n}", "    my @counts\
    \ = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count =\
    \ ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($hash) = {};\n    my($max) = 0;\n    my($count) = 0;\n    foreach my $letter\
    \ (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_letter\
    \ = $letter;\n        }\n        $hash{$letter} = $count;\n    }\n    return $hash;\n\
    }", "    my %h = ();\n    my $max = 0;\n    foreach my $c (@$test) {\n       \
    \ $h{$c} += 1;\n        if ($h{$c} > $max) {\n            $max = $h{$c};\n   \
    \     }\n    }\n    return %h;\n}", "    my($hash) = {};\n    my($max) = 0;\n\
    \    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my $letter (@$test)\
    \ {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $letter;\n        }\n        $hash{$letter} = $count;\n    }\n    return $hash;\n\
    }", "    my(@h) = {};\n    my(@c) = {};\n    my(@s) = {};\n    my(@r) = {};\n\
    \    my(@a) = {};\n    my(@b) = {};\n    my(@d) = {};\n    my(@f) = {};\n    my(@g)\
    \ = {};\n    my(@i) = {};\n    my(@j) = {};\n    my(@k) = {};\n    my(@l) = {};\n\
    \    my(@m) = {};\n    my(@n) = {};\n    my(@o) = {};\n    my(@p) = {};\n    my(@q)\
    \ = {};\n    my(@r) = {};\n    my(@s) = {};\n    my(@t) = {};\n    my(@u) = {};\n\
    \    my(@v) = {};\n    my(@w) = {};\n    my(@x) = {};\n    my(@y) = {};\n    my(@z)\
    \ = {};\n    my(@A) = {};\n    my(@B) = {};\n    my(@C) = {};\n    my(@D) = {};\n\
    \    my(@E) = {};\n    my(@F) = {};\n    my(@G) = {};\n    my(@H) = {};\n    my(@I)\
    \ = {};\n    my(@J) = {};\n    my(@K) = {};\n    my(@L) = {};\n    my(@M) = {};\n\
    \    my(@N) = {};\n    my(@O) = {};\n    my(@P) = {};\n    my(@Q) = {};\n    my(@R)\
    \ = {};\n    my(@S) = {};\n    my(@T) = {};\n    my(@U) = {};\n    my(@V) = {};\n\
    \    my(@W) = {};\n    my(@X) = {};\n    my", "    my($result) = {};\n    my($max)\
    \ = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my $letter\
    \ (@$test) {\n        $count = $result{$letter} if defined $result{$letter};\n\
    \        $count += 1;\n        $result{$letter} = $count;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_key = $letter;\n   \
    \     }\n    }\n    $result{$max_key} = $max;\n    return $result;\n}", "    my(@counts,\
    \ @max_count) = ();\n    my(@max_count_letter, @max_count_count) = ();\n    my(@max_count_letter_count)\
    \ = ();\n    my(@max_count_letter_count_count) = ();\n    my(@max_count_letter_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count) = ();\n    my(@max_count_letter_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count) = ();\n\
    \    my(@max_count_letter_count_count_count_count_count_count_count) = ();\n \
    \   my(@max_count_letter_count_count_count_count_count_count_count_count) = ();\n\
    \    my(@max_count_letter_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\
    \ = ();\n    my(@max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count)",
  "    my(@h) = {};\n    my(@c) = {};\n    my(@r) = {};\n    my(@s) = {};\n    my(@l)\
    \ = {};\n    my(@v) = {};\n    my(@o) = {};\n    my(@n) = {};\n    my(@a) = {};\n\
    \    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@d) = {};\n    my(@i)\
    \ = {};\n    my(@g) = {};\n    my(@u) = {};\n    my(@l) = {};\n    my(@e) = {};\n\
    \    my(@r) = {};\n    my(@s) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r)\
    \ = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n\
    \    my(@d) = {};\n    my(@e) = {};\n    my(@s) = {};\n    my(@t) = {};\n    my(@e)\
    \ = {};\n    my(@r) = {};\n    my(@d) = {};\n    my(@e) = {};\n    my(@s) = {};\n\
    \    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@d) = {};\n    my(@e)\
    \ = {};\n    my(@s) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n\
    \    my(@d) = {};\n    my(@e) = {};\n    my(@s) = {};\n    my(@t) = {};\n    my(@e)\
    \ = {};\n    my(@r) = {};\n    my", "    my(@counts, @letters) = split / /, $test;\n\
    \    my(@max_count, @max_letter) = 0, 0;\n    foreach my $letter (@letters) {\n\
    \        my $count = $counts{$letter};\n        if ($count > @max_count) {\n \
    \           @max_count = $count;\n            @max_letter = $letter;\n       \
    \ }\n    }\n    return @{$max_letter => @max_count};\n}", "    my($count, $max)\
    \ = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test) {\n        $count\
    \ += $result{$letter} ? 1 : 0;\n        $max = $count if $count > $max else $max;\n\
    \        $result{$letter} = $count;\n    }\n    return $result if $max;\n}", " \
    \   my(@counts, @letters) = split /\\s+/, $test;\n    my(@max, @max_count) = 0,\
    \ 0;\n    foreach my $letter (@letters) {\n        my $count = $counts{$letter};\n\
    \        if ($count > 0) {\n            if ($count > @max_count) {\n         \
    \       @max_count = $count;\n                @max = $letter;\n            }\n\
    \            if ($count == @max_count) {\n                @max_count += 1;\n \
    \               @max = $letter;\n            }\n        }\n    }\n    return @max_count\
    \ ? @max_count : @max ? @max : 0;\n}", "    my($hash) = {};\n    my($count) =\
    \ 0;\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($max_count) = 0;\n \
    \   foreach my $letter (@$test) {\n        $count += 1;\n        $hash{$letter}\
    \ = 1;\n        if ($count > $max) {\n            $max = $count;\n           \
    \ $max_key = $letter;\n            $max_count = $count;\n        }\n    }\n  \
    \  return $hash;\n}", "    my @count = ();\n    my @result = ();\n    my @max\
    \ = 0;\n    my @max_count = 0;\n    my @max_letter = ();\n    my @max_count_letter\
    \ = ();\n    my @max_letter_count = ();\n    my @max_count_letter_count = ();",
  "    my @counts = ();\n    my @max_count = ();\n    my @max_count_letter = ();\n\
    \    my @max_count_letter_count = ();\n    my @max_count_letter_count_count =\
    \ ();\n    my @max_count_letter_count_count_count = ();\n    my @max_count_letter_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count = ();\n    my\
    \ @max_count_letter_count_count_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count",
  "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($h) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my $c\
    \ (@$test) {\n        $h{$c}++;\n        if ($h{$c} > $max) {\n            $max\
    \ = $h{$c};\n            $max_key = $c;\n        }\n    }\n    return $h;\n}",
  "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test)\
    \ {\n        $count = $result->{$letter} ? $result->{$letter} + 1 : 1;\n     \
    \   $max = $count > $max ? $count : $max;\n        $result->{$letter} = $count;\n\
    \    }\n    return $result->{$max};\n}", "    my($hash) = {};\n    my($count)\
    \ = 0;\n    my($max) = 0;\n    my($max_count) = 0;\n    my($max_letter) = \"\"\
    ;\n    my($max_count_letter) = 0;\n    foreach my $letter (@$test) {\n       \
    \ $count += 1;\n        $hash{$letter} = 1;\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_letter = $letter;\n  \
    \      }\n        if ($count == 1) {\n            $max_count_letter = $count;\n\
    \        }\n        if ($count > $max) {\n            $max = $count;\n       \
    \ }\n    }\n    if ($max_count_letter > 1) {\n        $max_count_letter = $max_count_letter;\n\
    \    }\n    if ($max_count_letter == 1) {\n        $max_count_letter = $max_count_letter;\n\
    \    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my @result =\
    \ ();", "    my(@h) = {};\n    my(@c) = {};\n    my(@s) = {};\n    my(@r) = {};\n\
    \    my(@i) = {};\n    my(@l) = {};\n    my(@u) = {};\n    my(@o) = {};\n    my(@t)\
    \ = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@a) = {};\n    my(@n) = {};\n\
    \    my(@g) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@e) = {};\n    my(@n)\
    \ = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n\
    \    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t)\
    \ = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n\
    \    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e)\
    \ = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n\
    \    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r)\
    \ = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n\
    \    my(@n) = {};\n    my(@t) = {};\n    my", "    my($count, $max) = 0, 0;\n\
    \    my($result) = {};\n    foreach my $letter (@$test) {\n        $count = $result{$letter}\
    \ ? $result{$letter} : 0;\n        $count++;\n        if ($count > $max) {\n \
    \           $max = $count;\n            $result = {$letter => $count};\n     \
    \   }\n        else if ($count == $max) {\n            $result{$letter} = $count;\n\
    \        }\n    }\n    return $result;\n}", "    my($hash) = {};\n    my($max)\
    \ = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my $letter\
    \ (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $hash{$letter}\
    \ = $count + 1;\n        $count += 1;\n        if ($count > $max) {\n        \
    \    $max = $count;\n            $max_key = $letter;\n        }\n    }\n    return\
    \ $hash;\n}", "    my($h) = {};\n    my($c) = 0;\n    my($s) = \"\";\n    foreach\
    \ $c (split / /, $test) {\n        $s = $s . $c;\n        if (!defined($h->{$c}))\
    \ {\n            $h->{$c} = 1;\n        } else {\n            $h->{$c}++;\n  \
    \      }\n        if ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n\
    \        if ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n        if\
    \ ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n        if ($h->{$c}\
    \ > $c) {\n            $h->{$c} = 1;\n        }\n        if ($h->{$c} > $c) {\n\
    \            $h->{$c} = 1;\n        }\n        if ($h->{$c} > $c) {\n        \
    \    $h->{$c} = 1;\n        }\n        if ($h->{$c} > $c) {\n            $h->{$c}\
    \ = 1;\n        }\n        if ($h->{$c} > $c) {\n            $h->{$c} = 1;\n \
    \       }\n        if ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n\
    \        if ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n        if\
    \ ($h->{$c} > $c) {\n            $h->{$c} = 1;\n        }\n        if ($h->{$c}\
    \ > $c) {\n            $h->{$c} = 1;\n        }\n        if ($h->{$c} > $c) {\n\
    \            $h->{$c} = 1;\n        }\n        if ($h->{$c} > $c) {\n        \
    \    $h->{$c} = 1", "    my(@counts, @letters) = split / /, $test;\n    my(@max,\
    \ @max_letter) = 0, 0;\n    foreach my $letter (@letters) {\n        my $count\
    \ = $counts{$letter};\n        if ($count > @max) {\n            @max = $count;\n\
    \            @max_letter = $letter;\n        }\n    }\n    return $max_letter\
    \ ? ($max, @counts{$max_letter}) : ($max, @counts);\n}", "    my($hash) = {};\n\
    \    my($count) = 0;\n    my($max) = 0;\n    my($max_letter) = \"\";\n    my($max_count)\
    \ = 0;\n    foreach my $letter (@$test) {\n        $count += 1;\n        if (!$hash->{$letter})\
    \ {\n            $hash->{$letter} = 1;\n            $count = 1;\n        } else\
    \ {\n            $hash->{$letter} += 1;\n            $count = $hash->{$letter};\n\
    \        }\n        if ($count > $max) {\n            $max = $count;\n       \
    \     $max_letter = $letter;\n            $max_count = $count;\n        }\n  \
    \  }\n    return $hash;\n}", "    my($h, $max) = {}, 0;\n    foreach $c (@$test)\
    \ {\n        $h{$c}++;\n        if ($h{$c} > $max) {\n            $max = $h{$c};\n\
    \        }\n    }\n    return $h;\n}", "    my(@counts, @max) = ();\n    my(@max_count)\
    \ = 0;\n    my(@max_letter) = \"\";", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    foreach my $letter (@$test) {\n        $count = $result->{$letter}\
    \ ? $result->{$letter} + 1 : 1;\n        $max = $count > $max ? $count : $max;\n\
    \        $result->{$letter} = $count;\n    }\n    return $result->{$max};\n}",
  "    my(@counts, @chars) = split /\\s/, $test;\n    my(@max) = {};\n    my(@max_count)\
    \ = 0;\n    foreach my $char (@chars) {\n        my $count = @counts{$char};\n\
    \        if ($count > @max_count) {\n            @max_count = $count;\n      \
    \      @max = {$char};\n        }\n        if ($count == @max_count) {\n     \
    \       push @max{$char}, 1;\n        }\n    }\n    return @max;\n}", "    my($hash)\
    \ = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n  \
    \  foreach my $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my($result) = {};\n    my($count, $letter)\
    \ = 0;\n    my($max) = 0;\n    foreach my $letter (@$test) {\n        $count =\
    \ $result{$letter} ? $result{$letter} : 0;\n        $count++;\n        $result{$letter}\
    \ = $count;\n        $max = $count > $max ? $count : $max;\n    }\n    return\
    \ $result;\n}", "    my(@h) = {};\n    my(@c) = {};\n    my(@r) = {};\n    my(@s)\
    \ = {};\n    my(@l) = {};\n    my(@v) = {};\n    my(@i) = {};\n    my(@o) = {};\n\
    \    my(@u) = {};\n    my(@a) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r)\
    \ = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n\
    \    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n)\
    \ = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n\
    \    my(@t) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t)\
    \ = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n\
    \    my(@e) = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e)\
    \ = {};\n    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n\
    \    my(@r) = {};\n    my(@n) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@r)\
    \ = {};\n    my(@n) = {};\n    my(@t) = {};\n    my", "    my($count, $max) =\
    \ 0, 0;\n    my @result = ();\n    foreach my $c (@$test) {\n        $count +=\
    \ 1 if $c ne \" \";\n        if ($count > $max) {\n            $max = $count;\n\
    \            @result = ($c, $count);\n        }\n    }\n    return @result;\n}",
  "    my($result) = {};\n    my($max_count) = 0;\n    my($max_letter) = \"\";\n \
    \   my($count) = 0;\n    my($letter) = \"\";\n    foreach my $letter (@$test)\
    \ {\n        $count = $result{$letter} ? $result{$letter} : 0;\n        $count++;\n\
    \        $result{$letter} = $count;\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max_letter = $letter;\n        }\n\
    \    }\n    $result{$max_letter} = $max_count;\n    return $result;\n}", "   \
    \ my($count, $max) = 0, 0;\n    my($result) = {};\n    my($letter, $count) = undef;\n\
    \    foreach my $letter (split / /) {\n        $count = $count + 1 if $letter\
    \ eq $test;\n        if ($count > $max) {\n            $max = $count;\n      \
    \      $letter = $letter;\n        }\n    }\n    $result{$letter} = $max;\n  \
    \  return $result;\n}", "    my($count, $max) = 0, 0;\n    my @result = ();\n\
    \    foreach my $letter (@$test) {\n        $count += 1;\n        if ($count >\
    \ $max) {\n            $max = $count;\n            @result = [$letter];\n    \
    \    } elsif ($count == $max) {\n            @result = [$letter, $letter];\n \
    \       }\n    }\n    return @result;\n}", "    my($h, $max) = {}, 0;\n    my\
    \ $i;\n    for $i = 0; $i < length($test); $i++ {\n        $h{$test[$i]} = 1;\n\
    \        $max = $max if $h{$test[$i]} > $max else $h{$test[$i]};\n    }\n    return\
    \ $h if $max;\n}", "    my(@h) = {};\n    my(@c) = {};\n    my(@s) = {};\n   \
    \ my(@r) = {};\n    my(@l) = {};\n    my(@cnt) = {};\n    my(@max) = {};\n   \
    \ my(@max_cnt) = {};\n    my(@max_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt) = {};\n\
    \    my(@max_cnt_cnt_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt) = {};\n\
    \    my(@max_cnt_cnt_cnt_cnt_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt)\
    \ = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt)\
    \ = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt)\
    \ = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt) = {};\n\
    \    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt) = {};\n    my(@max_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt",
  "    my(%hash) = {};\n    my(%count) = {};\n    my(%max) = {};\n    my(%max_count)\
    \ = {};\n    my(%max_count_letter) = {};\n    my(%max_count_letter_count) = {};\n\
    \    my(%max_count_letter_count_count) = {};\n    my(%max_count_letter_count_count_letter)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count) = {};\n    my(%max_count_letter_count_count_letter_count_count)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter) = {};\n\
    \    my(%max_count_letter_count_count_letter_count_count_letter_count) = {};\n\
    \    my(%max_count_letter_count_count_letter_count_count_letter_count_count) =\
    \ {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count_letter)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count_letter_count)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count)\
    \ = {};\n    my(%max_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count_letter_count_count_letter)\
    \ = {};\n    my(%max_", "    my($count, $max) = 0, 0;\n    my($result) = {};\n\
    \    my($ch, $count) = \"\";\n    my($i) = 0;\n    foreach $ch (split /\\s+/,\
    \ $test) {\n        $count += 1;\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $result = {};\n        }\n        if ($ch ne \"\") {\n\
    \            $result{$ch} = $count;\n        }\n        $i += 1;\n        if ($i\
    \ == 1) {\n            continue;\n        }\n        $count = 0;\n    }\n    return\
    \ $result;\n}\n", "    my @counts = ();\n    my @max = ();\n    my @max_count\
    \ = ();\n    my @max_count_count = ();\n    my @max_count_count_count = ();\n\
    \    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test)\
    \ {\n        $count += $letter =~ s/[^a-z]/ /g;\n        if ($count > $max) {\n\
    \            $max = $count;\n            $result = {};\n        }\n        if\
    \ (!defined $result->{$letter}) {\n            $result->{$letter} = 1;\n     \
    \   } else {\n            $result->{$letter} += 1;\n        }\n    }\n    return\
    \ $result;\n}", "    my($counts, $max) = {}, 0;\n    my($letter, $count) = \"\"\
    ;\n    foreach my $char (split / / $test) {\n        $count = $counts{$char} ?\
    \ $counts{$char} + 1 : 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $letter = $char;\n        }\n        $counts{$char} = $count;\n \
    \   }\n    return $counts{$letter};\n}", "    my @counts = ();\n    my @max =\
    \ ();\n    my @max_count = ();\n    my @max_count_count = ();\n    my @max_count_count_count\
    \ = ();\n    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my(@h) = {};\n    my(@count) = {};\n    my(@max) = 0;\n    foreach my $c (@$test)\
    \ {\n        $c =~ s/[^a-z]//g;\n        $c =~ s/^\\s+|\\s+$//g;\n        $c =~\
    \ s/\\s+/ /g;\n        my $c = $c;\n        if (!defined $h{$c}) {\n         \
    \   $h{$c} = 1;\n            $count{$c} = 1;\n        }\n        else {\n    \
    \        $count{$c}++;\n            if ($count{$c} > $max) {\n               \
    \ $max = $count{$c};\n            }\n        }\n    }\n    foreach my $c (@$h)\
    \ {\n        if ($max == $count{$c}) {\n            push @{$h}, $c;\n        }\n\
    \    }\n    return @{$h};\n}", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    foreach my $c (@$test) {\n        $hash{$c}++;\n        if ($hash{$c}\
    \ > $max) {\n            $max = $hash{$c};\n            $max_key = $c;\n     \
    \   }\n    }\n    return $hash;\n}", "    my($hash) = {};\n    my($count) = 0;\n\
    \    my($max) = 0;\n    my($max_key) = \"\";\n    my($max_count) = 0;\n    foreach\
    \ my $letter (@$test) {\n        $count += 1;\n        $hash{$letter} = 1;\n \
    \       if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $letter;\n            $max_count = 1;\n        } else if ($count == $max)\
    \ {\n            $max_count += 1;\n        }\n    }\n    return $hash;\n}", " \
    \   my($result) = {};\n    my($count, $letter) = 0, '';\n    foreach my $c (@$test)\
    \ {\n        $count += 1;\n        $letter = $c;\n        if (!$result->{$letter})\
    \ {\n            $result->{$letter} = 1;\n        } else {\n            $result->{$letter}\
    \ += 1;\n        }\n    }\n    return $result;\n}", "    my($h, $max) = {}, 0;\n\
    \    foreach my $c (@$test) {\n        $h{$c} += 1;\n        if ($h{$c} > $max)\
    \ {\n            $max = $h{$c};\n        }\n    }\n    return $h;\n}", "    my($counts,\
    \ $max) = {};\n    my($max_count, $max_letter) = 0, \"\";\n    foreach my $letter\
    \ (@$test) {\n        $counts{$letter}++;\n        if ($counts{$letter} > $max_count)\
    \ {\n            $max_count = $counts{$letter};\n            $max_letter = $letter;\n\
    \        }\n    }\n    return $max_count ? $max_letter : $max_count;\n}", "  \
    \  my($counts, $max_count) = {}, 0;\n    my($letter, $count) = \"\";\n    foreach\
    \ my $c (@$test) {\n        $letter = $c;\n        $count = $counts{$letter} ?\
    \ $counts{$letter} : 0;\n        $counts{$letter} = $count + 1;\n        $count\
    \ = $count > $max_count ? $count : $max_count;\n        $max_count = $count if\
    \ $count > $max_count;\n    }\n    return $counts;\n}", "    my($hash) = {};\n\
    \    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my $letter (@$test)\
    \ {\n        $hash{$letter}++;\n        if ($hash{$letter} > $max) {\n       \
    \     $max = $hash{$letter};\n            $max_key = $letter;\n        }\n   \
    \ }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my @result = ();",
  "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my %hash = ();\n    my $max = 0;\n    my $max_key = \"\";\n    foreach my $c\
    \ (@$test) {\n        if (!defined $hash{$c}) {\n            $hash{$c} = 1;\n\
    \        } else {\n            $hash{$c} += 1;\n        }\n        if ($hash{$c}\
    \ > $max) {\n            $max = $hash{$c};\n            $max_key = $c;\n     \
    \   }\n    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    foreach my $letter (@$test) {\n        $count += $letter =~ /[a-z]/;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $result\
    \ = {};\n        }\n        if ($letter =~ /[a-z]/ and $count == $max) {\n   \
    \         $result{$letter}++;\n        }\n    }\n    return $result;\n}", "  \
    \  my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test)\
    \ {\n        $count += 1;\n        $max = $count if $count > $max;\n        $result{$letter}\
    \ = $count;\n    }\n    return $result if $max;\n}", "    my($hash) = {};\n  \
    \  my($max) = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my\
    \ $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n\
    \        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    foreach my $letter (@$test) {\n        $count = $result{$letter}\
    \ ? $result{$letter} : 0;\n        $count++;\n        if ($count > $max) {\n \
    \           $max = $count;\n            $result = {$letter => $count};\n     \
    \   }\n        else if ($count == $max) {\n            $result{$letter} = $count;\n\
    \        }\n    }\n    return $result;\n}", "    my($hash) = {};\n    my($max)\
    \ = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    foreach my $letter\
    \ (@$test) {\n        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $letter;\n        }\n        $hash{$letter} = $count;\n    }\n    return $hash;\n\
    }", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter\
    \ (@$test) {\n        $count += $letter =~ s/[^a-z]//g;\n        $max = max($count,\
    \ $max);\n        if ($count == $max) {\n            $result{$letter} = 1;\n \
    \       } else {\n            $result{$letter} = $count;\n        }\n    }\n \
    \   return $result;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my\
    \ $c (@$test) {\n        $hash{$c} = 0;\n        $hash{$c}++;\n        if ($hash{$c}\
    \ > $max) {\n            $max = $hash{$c};\n            $max_key = $c;\n     \
    \   }\n    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my @result\
    \ = ();\n    foreach my $letter (@$test) {\n        $count += 1;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            @result = [$letter];\n  \
    \      }\n        else if ($count == $max) {\n            @result = [$letter,\
    \ $letter];\n        }\n    }\n    return @result;\n}", "    my(@h) = {};\n  \
    \  my(@s) = {};\n    my(@c) = {};\n    my(@r) = {};\n    my(@l) = {};\n    my(@i)\
    \ = {};\n    my(@o) = {};\n    my(@u) = {};\n    my(@t) = {};\n    my(@e) = {};\n\
    \    my(@n) = {};\n    my(@a) = {};\n    my(@r) = {};\n    my(@d) = {};\n    my(@g)\
    \ = {};\n    my(@l) = {};\n    my(@i) = {};\n    my(@e) = {};\n    my(@r) = {};\n\
    \    my(@t) = {};\n    my(@e) = {};\n    my(@n) = {};\n    my(@a) = {};\n    my(@r)\
    \ = {};\n    my(@d) = {};\n    my(@g) = {};\n    my(@l) = {};\n    my(@i) = {};\n\
    \    my(@e) = {};\n    my(@r) = {};\n    my(@t) = {};\n    my(@e) = {};\n    my(@n)\
    \ = {};\n    my(@a) = {};\n    my(@r) = {};\n    my(@d) = {};\n    my(@g) = {};\n\
    \    my(@l) = {};\n    my(@i) = {};\n    my(@e) = {};\n    my(@r) = {};\n    my(@t)\
    \ = {};\n    my(@e) = {};\n    my(@n) = {};\n    my(@a) = {};\n    my(@r) = {};\n\
    \    my(@d) = {};\n    my(@g) = {};\n    my(@l) = {};\n    my(@i) = {};\n    my(@e)\
    \ = {};\n    my", "    my($hash) = {};\n    my($count) = 0;\n    my($max) = 0;\n\
    \    my($max_key) = \"\";\n    my($max_count) = 0;\n    foreach my $letter (@$test)\
    \ {\n        $count += 1;\n        $hash{$letter} = 1;\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $max_key = $letter;\n        }\n\
    \    }\n    foreach my $letter (@$hash) {\n        $count = $hash{$letter};\n\
    \        if ($count == $max) {\n            $max_count += 1;\n        }\n    }\n\
    \    return $max_key;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n\
    \    foreach my $c (@$test) {\n        $count += $c;\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $result = {};\n            $result{$c}\
    \ = 1;\n        } else if ($count == $max) {\n            $result{$c}++;\n   \
    \     }\n    }\n    return $result;\n}", "    my(@counts, @max) = ();\n    my(@max_count,\
    \ @max_letter) = ();\n    my(@letters, @count) = ();\n    my(@counts_hash) = ();",
  "    my(@counts) = {};\n    my(@max) = 0;\n    my(@max_count) = 0;\n    my(@max_letter)\
    \ = \"\";\n    my(@max_count_letter) = 0;\n    foreach my $letter (@$test) {\n\
    \        my $count = $counts{$letter};\n        $counts{$letter} = $count + 1;\n\
    \        $count = $count + 1;\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $max_letter = $letter;\n        }\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_count_letter\
    \ = $letter;\n        }\n    }\n    return $counts;\n}", "    my(@h) = {};\n \
    \   my(@s) = {};\n    my(@c) = {};\n    my(@a) = {};\n    my(@b) = {};\n    my(@d)\
    \ = {};\n    my(@f) = {};\n    my(@g) = {};\n    my(@i) = {};\n    my(@j) = {};\n\
    \    my(@k) = {};\n    my(@l) = {};\n    my(@m) = {};\n    my(@n) = {};\n    my(@o)\
    \ = {};\n    my(@p) = {};\n    my(@q) = {};\n    my(@r) = {};\n    my(@s) = {};\n\
    \    my(@t) = {};\n    my(@u) = {};\n    my(@v) = {};\n    my(@w) = {};\n    my(@x)\
    \ = {};\n    my(@y) = {};\n    my(@z) = {};", "    my($hash) = {};\n    my($max)\
    \ = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    my($key) = \"\";\n\
    \    my($value) = 0;\n    my($i) = 0;\n    foreach my $letter (@$test) {\n   \
    \     $key = $letter;\n        $value = $hash{$key} ? $hash{$key} : 0;\n     \
    \   $value += 1;\n        $hash{$key} = $value;\n        $count += 1;\n      \
    \  if ($count > $max) {\n            $max = $count;\n            $max_key = $key;\n\
    \        }\n        $i += 1;\n    }\n    return $hash{$max_key};\n}", "    my($count,\
    \ $max) = 0, 0;\n    my @result = ();\n    foreach my $c (@$test) {\n        $count\
    \ += 1;\n        if ($count > $max) {\n            $max = $count;\n          \
    \  @result = [$c];\n        }\n        else if ($count == $max) {\n          \
    \  @result = [$c, $max];\n        }\n    }\n    return @result;\n}", "    my(@h)\
    \ = {};\n    my(@c) = {};\n    my(@s) = {};\n    my(@l) = {};\n    my(@p) = {};\n\
    \    my(@r) = {};\n    my(@t) = {};\n    my(@u) = {};\n    my(@v) = {};\n    my(@w)\
    \ = {};\n    my(@x) = {};\n    my(@y) = {};\n    my(@z) = {};\n    my(@a) = {};\n\
    \    my(@b) = {};\n    my(@c) = {};\n    my(@d) = {};\n    my(@e) = {};\n    my(@f)\
    \ = {};\n    my(@g) = {};\n    my(@h) = {};\n    my(@i) = {};\n    my(@j) = {};\n\
    \    my(@k) = {};\n    my(@l) = {};\n    my(@m) = {};\n    my(@n) = {};\n    my(@o)\
    \ = {};\n    my(@p) = {};\n    my(@q) = {};\n    my(@r) = {};\n    my(@s) = {};\n\
    \    my(@t) = {};\n    my(@u) = {};\n    my(@v) = {};\n    my(@w) = {};\n    my(@x)\
    \ = {};\n    my(@y) = {};\n    my(@z) = {};\n    my(@A) = {};\n    my(@B) = {};\n\
    \    my(@C) = {};\n    my(@D) = {};\n    my(@E) = {};\n    my(@F) = {};\n    my(@G)\
    \ = {};\n    my(@H) = {};\n    my(@I) = {};\n    my(@J) = {};\n    my(@K) = {};\n\
    \    my(@L) = {};\n    my", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    my($count) = 0;", "    my @counts = ();\n    my @max = ();\n  \
    \  my @max_count = ();\n    my @max_count_count = ();\n    my @max_count_count_count\
    \ = ();\n    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    foreach my $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my @counts = ();\n    my @max = ();\n    my\
    \ @max_count = ();\n    my @max_count_count = ();\n    my @max_count_count_count\
    \ = ();\n    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($h, $count) = {}, 0;\n    foreach $c (@$test) {\n        $h{$c}++;\n   \
    \     $count += $h{$c};\n    }\n    return $count ? $h : undef;\n}", "    my($hash)\
    \ = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n  \
    \  foreach my $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my(@counts, @letters) = split /\\s+/, $test;\n\
    \    my(@max, @max_count) = 0, 0;\n    my(@max_letter, @max_count) = \"\";\n \
    \   foreach my $letter (@letters) {\n        my $count = @counts{$letter};\n \
    \       if ($count > @max_count) {\n            @max_count = $count;\n       \
    \     @max_letter = $letter;\n        }\n    }\n    if (@max_count) {\n      \
    \  @counts{@max_letter} = @max_count;\n    }\n    return @counts;\n}", "    my($count,\
    \ $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test) {\n  \
    \      $count = $result{$letter} ? $result{$letter} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $result\
    \ = {$letter => $count};\n        }\n        else if ($count == $max) {\n    \
    \        $result{$letter} = $count;\n        }\n    }\n    return $result;\n}",
  "    my @counts = ();\n    my @max = ();\n    my @max_count = ();\n    my @max_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @max_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    my($key) = \"\";\n    foreach my $letter (@$test) {\n        $key\
    \ = $letter;\n        $count = $hash{$key} ? $hash{$key} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $key;\n        }\n        $hash{$key} = $count;\n    }\n    return $hash{$max_key};\n\
    }", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    my($key) = \"\";\n    foreach my $letter (@$test) {\n        $key\
    \ = $letter;\n        $count = $hash{$key} ? $hash{$key} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $key;\n        }\n        $hash{$key} = $count;\n    }\n    return $hash{$max_key};\n\
    }", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $c (@$test)\
    \ {\n        $count += 1;\n        $max = $count if $count > $max;\n        $result{$c}\
    \ = $count;\n    }\n    return $result;\n}", "    my(@counts, @letters) = split\
    \ / /;\n    my(@max, @max_letter) = 0, 0;\n    my(@max_count, @max_letter_count)\
    \ = 0, 0;\n    foreach my $letter (@letters) {\n        my($count, $letter) =\
    \ @counts{$letter};\n        if ($count > @max_count) {\n            @max_count\
    \ = $count;\n            @max_letter_count = $count;\n            @max_letter\
    \ = $letter;\n        }\n        if ($count > @max) {\n            @max = $count;\n\
    \            @max_letter = $letter;\n        }\n    }\n    return @{$max_letter\
    \ => $max_letter_count};\n}", "    my($hash) = {};\n    my($count, $max) = 0,\
    \ 0;\n    foreach my $char (split / /) {\n        $count = $hash{$char} ? $hash{$char}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_char = $char;\n        }\n        $hash{$char} = $count;\n \
    \   }\n    return $hash;\n}", "    my(@counts, @maxes) = split /\\s+/, $test;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n\
    \    my(@counts) = @counts;\n    my(@maxes) = @maxes;\n    my(@counts) = @counts;\n\
    \    my(@maxes) = @maxes;\n    my(@counts) = @", "    my(@counts, @letters) =\
    \ split / /, $test;\n    my(@max, @max_count) = 0, 0;\n    foreach my $letter\
    \ (@letters) {\n        my($count, $letter) = @counts{$letter};\n        if ($count\
    \ > @max_count) {\n            @max_count = $count;\n            @max = $letter;\n\
    \        }\n    }\n    return @{$max => $max_count};\n}", "    my(@counts, @letters)\
    \ = split /\\s+/, $test;\n    my(@max_count, @max_letter) = 0, 0;\n    foreach\
    \ my $letter (@letters) {\n        my $count = $counts{$letter};\n        if ($count\
    \ > @max_count) {\n            @max_count = $count;\n            @max_letter =\
    \ $letter;\n        }\n    }\n    return $counts{$max_letter};\n}", "    my(@h)\
    \ = {};\n    my(@s) = {};\n    my(@c) = {};\n    my(@s2) = {};\n    my(@c2) =\
    \ {};\n    my(@s3) = {};\n    my(@c3) = {};\n    my(@s4) = {};\n    my(@c4) =\
    \ {};\n    my(@s5) = {};\n    my(@c5) = {};\n    my(@s6) = {};\n    my(@c6) =\
    \ {};\n    my(@s7) = {};\n    my(@c7) = {};\n    my(@s8) = {};\n    my(@c8) =\
    \ {};\n    my(@s9) = {};\n    my(@c9) = {};\n    my(@s10) = {};\n    my(@c10)\
    \ = {};\n    my(@s11) = {};\n    my(@c11) = {};\n    my(@s12) = {};\n    my(@c12)\
    \ = {};\n    my(@s13) = {};\n    my(@c13) = {};\n    my(@s14) = {};\n    my(@c14)\
    \ = {};\n    my(@s15) = {};\n    my(@c15) = {};\n    my(@s16) = {};\n    my(@c16)\
    \ = {};\n    my(@s17) = {};\n    my(@c17) = {};\n    my(@s18) = {};\n    my(@c18)\
    \ = {};\n    my(@s19) = {};\n    my(@c19) = {};\n    my(@s20) = {};\n    my(@c20)\
    \ = {};\n    my(@s21) = {};\n    my(@c21) = {};\n    my(@s22) = {};\n    my(@c22)\
    \ = {};\n    my(@s23) = {};\n    my(@c23) = {", "    my %hash = ();\n    my $max\
    \ = 0;\n    my $max_letter = \"\";\n    foreach my $letter (@$test) {\n      \
    \  $hash{$letter}++;\n        if ($hash{$letter} > $max) {\n            $max =\
    \ $hash{$letter};\n            $max_letter = $letter;\n        }\n    }\n    return\
    \ $hash{$max_letter};\n}", "    my @counts = ();\n    my @max = ();\n    my @max_count\
    \ = ();\n    my @max_count_count = ();\n    my @max_count_count_count = ();\n\
    \    my @max_count_count_count_count = ();\n    my @max_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @max_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count = ();\n \
    \   my @max_count_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_count_count_count_count_count_count_count_count_count = ();\n   \
    \ my @max_count_count_count_count_count_count_count_count_count_count_count =\
    \ ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_",
  "    my($count, $max) = 0, 0;\n    my @result = ();", "    my($h, $count) = {},\
    \ 0;\n    my $max = 0;\n    foreach my $c (@$test) {\n        $h{$c} += 1;\n \
    \       $count += 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \        }\n    }\n    $h = sort { $h->{$_} }->keys;\n    return $h;\n}", "  \
    \  my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    my($key) = \"\";\n    foreach my $letter (@$test) {\n        $key\
    \ = $letter;\n        $count = $hash{$key} ? $hash{$key} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_key\
    \ = $key;\n        }\n        $hash{$key} = $count;\n    }\n    return $hash{$max_key};\n\
    }", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach\
    \ my $letter (@$test) {\n        $hash{$letter}++;\n        if ($hash{$letter}\
    \ > $max) {\n            $max = $hash{$letter};\n            $max_key = $letter;\n\
    \        }\n    }\n    return $hash;\n}", "    my($h) = {};\n    my($max) = 0;\n\
    \    my($max_key) = \"\";\n    my($count) = 0;\n    my($key) = \"\";\n    foreach\
    \ my $c (@$test) {\n        $key = $c;\n        $count = $h{$key} ? $h{$key} :\
    \ 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $key;\n        }\n        $h{$key} = $count;\n    }\n\
    \    return $h{$max_key};\n}", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key)\
    \ = \"\";\n    foreach my $letter (@$test) {\n        $hash{$letter} = 1;\n  \
    \      $max = max($max, $hash{$letter});\n        if ($max == $hash{$letter})\
    \ {\n            $max_key = $letter;\n        }\n    }\n    return $max_key;\n\
    }", "    my($hash) = {};\n    my($count) = 0;\n    my($max) = 0;\n    my($max_count)\
    \ = 0;\n    my($max_letter) = \"\";\n    my($max_count_letter) = 0;\n    foreach\
    \ my $letter (@$test) {\n        $count += 1;\n        $hash{$letter} = 1;\n \
    \       if ($count > $max_count) {\n            $max_count = $count;\n       \
    \     $max_letter = $letter;\n        }\n        if ($count == $max_count) {\n\
    \            $hash{$letter} += 1;\n            if ($hash{$letter} > $max_count_letter)\
    \ {\n                $max_count_letter = $hash{$letter};\n                $max_letter\
    \ = $letter;\n            }\n        }\n    }\n    return $hash;\n}", "    my($h)\
    \ = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my $c (@$test)\
    \ {\n        $h{$c}++;\n        if ($h{$c} > $max) {\n            $max = $h{$c};\n\
    \            $max_key = $c;\n        }\n    }\n    return $h;\n}", "    my($count,\
    \ $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test) {\n  \
    \      $count = $result{$letter} ? $result{$letter} : 0;\n        $count++;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $result\
    \ = {$letter => $count};\n        }\n        else if ($count == $max) {\n    \
    \        $result{$letter} = $count;\n        }\n    }\n    return $result;\n}",
  "    my($result) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    foreach my $letter (@$test) {\n        $count = $result{$letter} ?\
    \ $result{$letter} : 0;\n        $count++;\n        if ($count > $max) {\n   \
    \         $max = $count;\n            $max_key = $letter;\n        }\n       \
    \ $result{$letter} = $count;\n    }\n    return $result{$max_key};\n}", "    my($hash)\
    \ = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n  \
    \  my($key) = \"\";\n    my($value) = 0;\n    foreach my $letter (@$test) {\n\
    \        $key = $letter;\n        $value = $hash{$key} ? $hash{$key} : 0;\n  \
    \      $hash{$key} = $value + 1;\n        $count = $hash{$key} > $count ? $hash{$key}\
    \ : $count;\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            $max_key = $key;\n        }\n    }\n    $hash{$max_key} = $count;\n\
    \    return $hash;\n}", "    my($h, $count) = {}, 0;\n    my $max = 0;\n    foreach\
    \ $c (@$test) {\n        $h{$c} += 1;\n        $count += 1;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_c = $c;\n        }\n\
    \    }\n    return $h;\n}", "    my($count, $max) = 0, 0;\n    my($result) = {};\n\
    \    foreach my $letter (@$test) {\n        $count += $result{$letter} ? 1 : 0;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $result\
    \ = {$letter => $count};\n        }\n        else if ($count == $max) {\n    \
    \        $result{$letter} = $count + 1;\n        }\n    }\n    return $result;\n\
    }", "    my($result) = {};\n    my($max) = 0;\n    my($count) = 0;\n    foreach\
    \ my $letter (@$test) {\n        $count += 1;\n        $result{$letter} = 1;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_letter\
    \ = $letter;\n        }\n    }\n    $result{$max_letter} = $max;\n    return $result;\n\
    }", "    my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $c (@$test)\
    \ {\n        $count += 1;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $result = {};\n        }\n        $result{$c} = $count;\n    }\n\
    \    return $result;\n}", "    my($count, $max) = 0, 0;\n    my @result = ();\n\
    \    foreach my $c (@$test) {\n        $count += 1;\n        if ($count > $max)\
    \ {\n            $max = $count;\n            @result = [$c];\n        } elsif\
    \ ($count == $max) {\n            @result = [$c, $c];\n        }\n    }\n    return\
    \ @result;\n}", "    my @hash = ();\n    my @count = ();\n    my @max = ();\n\
    \    my @max_count = ();\n    my @max_count_hash = ();\n    my @max_count_hash_count\
    \ = ();\n    my @max_count_hash_count_count = ();\n    my @max_count_hash_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count = ();\n    my @max_count_hash_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count = ();\n  \
    \  my @max_count_hash_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_hash_count_count_count_count_count_count_count_count = ();\n    my\
    \ @max_count_hash_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_hash_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_hash_count_count_count_count_count_count_count_", " \
    \   my($count, $max) = 0, 0;\n    my($result) = {};\n    foreach my $letter (@$test)\
    \ {\n        $count += $result{$letter} ? 1 : 0;\n        $max = $count if $count\
    \ > $max else $max;\n        $result{$letter} = $count;\n    }\n    return $result\
    \ if $max;\n}", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\
    \";\n    my($count) = 0;\n    my($key) = \"\";\n    my($value) = 0;\n    my($i)\
    \ = 0;\n    foreach $i (split / / $test) {\n        $key = $i;\n        $value\
    \ = 1;\n        $count = 0;\n        while ($count < 2) {\n            $count\
    \ += $hash{$key} ? 1 : 0;\n            $key = $hash{$key} ? $key : \"\";\n   \
    \     }\n        if ($count > $max) {\n            $max = $count;\n          \
    \  $max_key = $key;\n        }\n        $hash{$key} = 1;\n    }\n    return $hash;\n\
    }", "    my($count, $max) = 0, 0;\n    my($result) = {};", "    my($result) =\
    \ {};\n    my($count) = 0;\n    my($max) = 0;\n    foreach my $letter (@$test)\
    \ {\n        $count += 1;\n        if (!$result->{$letter}) {\n            $result->{$letter}\
    \ = 1;\n        } else {\n            $result->{$letter} += 1;\n        }\n  \
    \      if ($result->{$letter} > $max) {\n            $max = $result->{$letter};\n\
    \        }\n    }\n    $result->{$max} = $count;\n    return $result;\n}", " \
    \   my(@counts, @max) = ();\n    my(@max_count) = 0;\n    my(@max_letter) = \"\
    \";\n    my(@max_count_letter) = 0;\n    foreach my $letter (@$test) {\n     \
    \   my($count, $letter) = @counts{$letter};\n        $count++;\n        if ($count\
    \ > @max_count) {\n            @max_count = $count;\n            @max_letter =\
    \ $letter;\n        }\n        if ($count > @max_count_letter) {\n           \
    \ @max_count_letter = $count;\n        }\n        if ($letter ne \"\") {\n   \
    \         @counts{$letter} = ($count, $letter);\n        }\n    }\n    @counts{$max_letter}\
    \ = @max_count_letter;\n    return @counts;\n}", "    my($count, $max) = 0, 0;\n\
    \    my($result) = {};\n    my($letter, $count) = undef;\n    foreach my $letter\
    \ (split / /, $test) {\n        $count = $count + 1;\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $letter = $letter;\n        }\n \
    \       $result{$letter} = $count;\n    }\n    return $result;\n}", "    my %h\
    \ = ();\n    my $max = 0;\n    foreach my $c (split / /) {\n        $h{$c} = 0;\n\
    \        $h{$c}++;\n        if ($h{$c} > $max) {\n            $max = $h{$c};\n\
    \        }\n    }\n    return $h;\n}", "    my($count, $max) = 0, 0;\n    my @result\
    \ = ();\n    foreach my $c (@$test) {\n        $count += 1;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            @result = [$c];\n       \
    \ }\n        else if ($count == $max) {\n            @result = [$c, $max];\n \
    \       }\n    }\n    return @result;\n}", "    my($hash) = {};\n    my($max)\
    \ = 0;\n    my($max_key) = \"\";\n    my($count) = 0;\n    my($key) = \"\";\n\
    \    my($value) = 0;\n    foreach my $letter (@$test) {\n        $key = $letter;\n\
    \        $value = 1;\n        if ($hash{$key} > 0) {\n            $value += $hash{$key};\n\
    \        }\n        $hash{$key} = $value;\n        if ($value > $max) {\n    \
    \        $max = $value;\n            $max_key = $key;\n        }\n        $count\
    \ += $value;\n    }\n    return $hash;\n}", "    my(@counts, @letters) = split\
    \ / /, $test;\n    my(@max, @max_count) = 0, 0;\n    foreach my $letter (@letters)\
    \ {\n        my $count = $counts{$letter};\n        if ($count > @max_count) {\n\
    \            @max_count = $count;\n            @max = $letter;\n        }\n  \
    \      if ($count == @max_count) {\n            push @max, $letter;\n        }\n\
    \    }\n    return @max_count ? @max_count : @max ? @max : 0;\n}", "    my($counts,\
    \ $max) = {};\n    my($max_count, $max_letter) = 0, \"\";\n    foreach my $letter\
    \ (@$test) {\n        $counts{$letter}++;\n        if ($counts{$letter} > $max_count)\
    \ {\n            $max_count = $counts{$letter};\n            $max_letter = $letter;\n\
    \        }\n    }\n    return $counts{$max_letter};\n}", "    my @count = ();\n\
    \    my @result = ();\n    my @max = 0;\n    my @max_count = 0;\n    my @max_count_letter\
    \ = ();\n    my @max_count_letter_count = ();\n    my @max_count_letter_count_count\
    \ = ();\n    my @max_count_letter_count_count_count = ();\n    my @max_count_letter_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count = ();\n    my\
    \ @max_count_letter_count_count_count_count_count_count = ();\n    my @max_count_letter_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_letter_count_count_count_count_count_count_", "   \
    \ my($hash) = {};\n    my($count) = 0;\n    my($max) = 0;\n    my($max_count)\
    \ = 0;\n    my($max_letter) = \"\";\n    my($max_count_letter) = \"\";\n    foreach\
    \ my $letter (@$test) {\n        $count += 1;\n        $hash{$letter} = 1;\n \
    \       if ($count > $max) {\n            $max = $count;\n            $max_letter\
    \ = $letter;\n        }\n        if ($count == $max) {\n            $max_count\
    \ += 1;\n            $max_count_letter = $letter;\n        }\n    }\n    if ($max_count\
    \ > 1) {\n        return {$max_letter => $max_count, $max_count_letter => $max_count};\n\
    \    }\n    else {\n        return $hash;\n    }\n}", "    my($count, $max) =\
    \ 0, 0;\n    my @result = ();\n    foreach my $letter (@$test) {\n        $count\
    \ += 1;\n        if ($count > $max) {\n            $max = $count;\n          \
    \  @result = [$letter];\n        }\n        else if ($count == $max) {\n     \
    \       @result = [$letter, $max];\n        }\n    }\n    return @result;\n}",
  "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    foreach my\
    \ $letter (@$test) {\n        $hash{$letter}++;\n        if ($hash{$letter} >\
    \ $max) {\n            $max = $hash{$letter};\n            $max_key = $letter;\n\
    \        }\n    }\n    return $hash;\n}", "    my(@counts, @max_counts) = ();\n\
    \    my(@max_counts_keys) = ();", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    my($letter, $count) = undef;\n    foreach my $letter (split / /)\
    \ {\n        $count = $count + 1 if $letter eq $test;\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $letter = $letter;\n        }\n \
    \   }\n    $result{$letter} = $max;\n    return $result;\n}", "    my %hash =\
    \ ();\n    my @count = ();\n    my @max = ();\n    my @min = ();\n    my @max_count\
    \ = ();\n    my @min_count = ();\n    my @max_count_count = ();\n    my @min_count_count\
    \ = ();\n    my @max_count_count_count = ();\n    my @min_count_count_count =\
    \ ();\n    my @max_count_count_count_count = ();\n    my @min_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count = ();\n    my @min_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count = ();\n    my @min_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count = ();\n    my @min_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @min_count_count_count_count_count_count_count_count_count_count = ();\n\
    \    my @max_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @min_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @min_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @min_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = ();\n    my @max_count_count_count_count_count_count", "    my($count, $max)\
    \ = 0, 0;\n    my($result) = {};", "    my($hash) = {};\n    my($max) = 0;\n \
    \   my($count) = 0;\n    my($key) = \"\";\n    foreach my $letter (@$test) {\n\
    \        $count = $hash{$letter} ? $hash{$letter} : 0;\n        $count++;\n  \
    \      $hash{$letter} = $count;\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $key = $letter;\n        }\n    }\n    return $hash{$key};\n\
    }", "    my($hash) = {};\n    my($max) = 0;\n    my($max_key) = \"\";\n    my($count)\
    \ = 0;\n    foreach my $letter (@$test) {\n        $count = $hash{$letter} ? $hash{$letter}\
    \ : 0;\n        $count++;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_key = $letter;\n        }\n        $hash{$letter} = $count;\n\
    \    }\n    return $hash;\n}", "    my($count, $max) = 0, 0;\n    my($result)\
    \ = {};\n    my($letter, $count) = undef;\n    foreach my $letter (split / /,\
    \ $test) {\n        $count = $count + 1;\n        if ($count > $max) {\n     \
    \       $max = $count;\n            $letter = $letter;\n        }\n        $result{$letter}\
    \ = $count;\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
