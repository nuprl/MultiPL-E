name: HumanEval_11_string_xor
language: pl
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"\
  010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n\
  \        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $a xor $b;\n}", "    my $result = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n\
    \    return $result;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1", "    my $result = \"\";\n    for ($a, $b)\
    \ {\n        $result .= $a xor $b;\n    }\n    return $result;\n}", "    return\
    \ sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/\n    );\n\
    }", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", "    return sprintf(\"\
    %c%c\",\n        $a[0] xor $b[0],\n        $a[1] xor $b[1]\n    );\n}", "    return\
    \ sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", "    my $result = '';\n    for\
    \ ($a, $b) {\n        $result .= $a xor $b;\n    }\n    return $result;\n}", " \
    \   return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/g,\n        $b =~ /(.)\\1/g\n\
    \    );\n}", "    my $result = '';\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", " \
    \   my($result) = '';\n    for ($i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor\
    \ $b[$i];\n    }\n    return $result;\n}", "    return $a xor $b;\n}", "    return\
    \ sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/,\n      \
    \  \"$1\"\n    );\n}", "    return $a xor $b;\n}", "    $a =~ s/0/1/g;\n    $b\
    \ =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}", "    return sprintf(\"%s%s\"\
    , $a xor $b, $a xor $b);\n}", "    my $result = \"\";\n    for (my $i = 0; $i\
    \ < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return\
    \ $result;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1", "    my $result = '';\n    for ($a, $b) {\n\
    \        $result .= $a xor $b;\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/\n    );\n}", "    my\
    \ $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $b xor $a);\n}", "    return sprintf(\"%s%s\",\n        $a\
    \ =~ /(.)\\1/,\n        $b =~ /(.)\\1/\n    );\n}", "    my $result = \"\";\n\
    \    for ($a, $b) {\n        $result .= $a xor $b;\n    }\n    return $result;\n\
    }", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}",
  "    return sprintf(\"%c%c\", (($a & 1) ^ ($b & 1)) ? '1' : '0', (($a & 2) ^ ($b\
    \ & 2)) ? '1' : '0');\n}", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n\
    }", "    my $result = '';\n    for ($a, $b) {\n        $result .= ($a xor $b);\n\
    \    }\n    return $result;\n}", "    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n   \
    \ return $result;\n}", "    my $result = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/g,\n        $b =~ /(.)\\\
    1/g\n    );\n}", "    my($result) = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= ($a[$i] == \"1\" && $b[$i] == \"1\") ? \"1\" : \"\
    0\";\n    }\n    return $result;\n}\n", "    return sprintf(\"%s%s\",\n      \
    \  ($a & $b) ? \"1\" : \"0\",\n        ($a & ~$b) ? \"1\" : \"0\");\n}", "   \
    \ $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    $a;\n}", "    $a =~\
    \ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a\
    \ =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n  \
    \  $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", " \
    \   my $result = \"\";\n    for ($a, $b) {\n        $result .= $a xor $b;\n  \
    \  }\n    return $result;\n}", "    return sprintf(\"%s%s\",\n        $a =~ /0/\
    \ ? \"1\" : \"0\",\n        $b =~ /0/ ? \"0\" : \"1\"\n    );\n}", "    return\
    \ $a xor $b;\n}", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", " \
    \   return sprintf(\"%s%s\", $a xor $b, $b xor $a);\n}", "    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor\
    \ $b[$i];\n    }\n    return $result;\n}", "    return $a xor $b;\n}", "    my\
    \ $result = '';\n    for ($a, $b) {\n        $result .= (($a == '1') xor ($b ==\
    \ '1'));\n    }\n    return $result;\n}", "    my $result = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n  \
    \  }\n    return $result;\n}", "    my $result = \"\";\n    for ($a, $b) {\n \
    \       $result .= $a xor $b;\n    }\n    return $result;\n}", "    return sprintf(\"\
    %c%c\", $a[0] ^ $b[0], $a[1] ^ $b[1]);\n}", "    return sprintf(\"%s%s\", $a xor\
    \ $b, $a xor $b);\n}", "    my $result = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }", "    return $a xor $b;\n}", "    return sprintf(\"%02x\", $a xor $b);\n}",
  "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/,\n\
    \        $a xor $b\n    );\n}", "    my $result = '';\n    for ($a, $b) {\n  \
    \      $result .= ($a == $b) ? '0' : '1';\n    }\n    return $result;\n}", " \
    \   return $a xor $b;\n}", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\\
    1/,\n        $b =~ /(.)\\1/,\n        $a xor $b\n    );\n}", "    my($result)\
    \ = '';\n    for ($i = 0; $i < length($a); $i++) {\n        $result .= $a[$i]\
    \ xor $b[$i];\n    }\n    return $result;\n}", "    my $result = \"\";\n    for\
    \ my $i (0..255) {\n        $result .= (($a[$i] == \"1\") && ($b[$i] == \"1\"\
    )) ? \"1\" : \"0\";\n    }\n    return $result;\n}", "    my $result = \"\";\n\
    \    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n\
    \    }\n    return $result;\n}", "    return $a xor $b;\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    my($result) = '';\n    for ($i = 0; $i\
    \ < length($a); $i++) {\n        $result .= ($a[$i] == '1' && $b[$i] == '1') ?\
    \ '1' : '0';\n    }\n    return $result;\n}", "    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= ($a[$i] == \"1\" &&\
    \ $b[$i] == \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}", "    $a =~\
    \ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a\
    \ =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n  \
    \  $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1", "    my($result) = '';\n    for ($i = 0; $i < length($a); $i++)\
    \ {\n        $result .= ($a[$i] == '1' and $b[$i] == '1') ? '1' : '0';\n    }\n\
    \    return $result;\n}", "    return sprintf(\"%c%c\", $a[0] ^ $b[0], $a[1] ^\
    \ $b[1]);\n}", "    return $a xor $b;\n}", "    return sprintf(\"%c%c\",\n   \
    \     ($a & $b) ? '1' : '0',\n        ($a & ~$b) ? '1' : '0'\n    );\n}", "  \
    \  my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor\
    \ $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"%s%s\", $a xor\
    \ $b, $a xor $b);\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    $a =~ s/0/0/g;\n\
    \    $b =~ s/0/0/g;\n    return $a xor $b;\n}", "    my $result = \"\";\n    for\
    \ my $i (0..255) {\n        $result .= (($a[$i] == \"1\") xor ($b[$i] == \"1\"\
    ));\n    }\n    return $result;\n}", "    my $result = \"\";\n    for (my $i =\
    \ 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n\
    \    return $result;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor\
    \ $b;\n    return $a;\n}", "    return $a xor $b;\n}", "    $a =~ s/0/1/g;\n \
    \   $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1", " \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return $a\
    \ xor $b;\n}", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", "   \
    \ my($result) = '';\n    for (my $i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\",\n        ($a & $b) ? \"1\" : \"0\",\n        ($a & ~$b) ? \"1\" : \"0\"\
    \n    );\n}", "    return $a xor $b;\n}", "    return $a xor $b;\n}", "    $a\
    \ =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n  \
    \  $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    return $a xor $b;\n}", "    $a =~ s/0/1/g;\n\
    \    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}", "    $a =~ s/0/1/g;\n\
    \    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}", "    $a =~ s/0/1/g;\n\
    \    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}", "    my $result = \"\"\
    ;\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor\
    \ $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"%s%s\", $a xor\
    \ $b, $a xor $b);\n}", "    my($result) = '';\n    for ($i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }\n", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", " \
    \   my $result = '';\n    for ($a, $b) {\n        $result .= $a xor $b;\n    }\n\
    \    return $result;\n}", "    return sprintf(\"%c%c\", (($a & $b) | (~$a & ~$b)),\
    \ (($a & ~$b) | (~$a & $b)));\n}", "    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= ($a[$i] == \"1\" and $b[$i] ==\
    \ \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor\
    \ $b[$i];\n    }\n    return $result;\n}", "    my($result) = '';\n    for ($i\
    \ = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n\
    \    return $result;\n}", "    return $a xor $b;\n}", "    return $a xor $b;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return\
    \ $a xor $b;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1", "    my $result = \"\";\n    for (my $i =\
    \ 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n\
    \    return $result;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    $a =~ s/0/0/g;\n\
    \    $b =~ s/0/0/g;\n    return $a xor $b;\n}", "    my $result = \"\";\n    for\
    \ (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n\
    \    }\n    return $result;\n}", "    my $result = \"\";\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= ($a[$i] == \"1\" and $b[$i] ==\
    \ \"1\") ? \"1\" : \"0\";\n    }\n    return $result;\n}", "    return $a xor\
    \ $b;\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    return\
    \ $a;\n}", "    return sprintf(\"%s%s\", $a, $b);\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    my($result) = '';\n    for (my $i = 0;\
    \ $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n   \
    \ return $result;\n}", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}",
  "    return $a xor $b;\n}", "    return sprintf(\"%02x\", $a xor $b);\n}", "   \
    \ return sprintf(\"%s%s\",\n        ($a & $b) ? \"1\" : \"0\",\n        ($a &\
    \ ~$b) ? \"1\" : \"0\"\n    );\n}", "    return sprintf(\"%s%s\",\n        $a\
    \ =~ /(.)\\1/g,\n        $b =~ /(.)\\1/g\n    );\n}", "    return sprintf(\"%s%s\"\
    , $a xor $b, $a xor $b);\n}", "    return $a xor $b;\n}", "    my $result = \"\
    \";\n    for ($a, $b) {\n        $result .= $a xor $b;\n    }\n    return $result;\n\
    }", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}",
  "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/\n\
    \    );\n}", "    my $result = '';\n    for my $i (0..255) {\n        $result\
    \ .= (($a[$i] == '1' && $b[$i] == '1') ||\n                    ($a[$i] == '0'\
    \ && $b[$i] == '0'));\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    return $a xor $b;\n}", "    return sprintf(\"\
    %02x\", $a xor $b);\n}", "    return $a xor $b;\n}", "    $a =~ s/0/1/g;\n   \
    \ $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1", " \
    \   my($result) = '';\n    for ($i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"\
    %02x\", $a xor $b);\n}", "    my $result = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n  \
    \      $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    $a\
    \ =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    return $a;\n}", "    my($result)\
    \ = '';\n    for ($i = 0; $i < length($a); $i++) {\n        $result .= (($a[$i]\
    \ == '1') ^ ($b[$i] == '1')) ? '1' : '0';\n    }\n    return $result;\n}", " \
    \   my($result) = '';\n    for ($i = 0; $i < length($a); $i++) {\n        $result\
    \ .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\",\n        $a =~ /(.)\\1/g,\n        $b =~ /(.)\\1/g\n    );\n}", "    return\
    \ sprintf(\"%02x\", (int(ord(substr($a, 1))) ^ int(ord(substr($b, 1)))));\n}",
  "    my($result) = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    my($result) = '';\n    for ($i = 0; $i\
    \ < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return\
    \ $result;\n}", "    return sprintf(\"%02x\", $a xor $b);\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    return sprintf(\"%s%s\",\n        ($a\
    \ & $b) ? \"1\" : \"0\",\n        ($a & ~$b) ? \"1\" : \"0\"\n    );\n}", "  \
    \  return sprintf(\"%02x\", $a xor $b);\n}", "    return sprintf(\"%02x\", $a\
    \ xor $b);\n}", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/g,\n    \
    \    $b =~ /(.)\\1/g\n    );\n}", "    return $a xor $b;\n}", "    return $a xor\
    \ $b;\n}", "    return $a xor $b;\n}", "    my $result = \"\";\n    for (my $i\
    \ = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n\
    \    return $result;\n}", "    return sprintf(\"%s%s\", $a, $b);\n}", "    return\
    \ sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", "    return $a xor $b;\n}", " \
    \   my $result = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n       \
    \ $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return $a\
    \ xor $b;\n}", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n      \
    \  $b =~ /(.)\\1/,\n        \"$1\"\n    );\n}", "    my($result) = '';\n    for\
    \ ($i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n \
    \   }\n    return $result;\n}", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\\
    1/,\n        $b =~ /(.)\\1/\n    );\n}", "    my $result = \"\";\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i] xor $b[$i];\n  \
    \  }\n    return $result;\n}", "    return $a xor $b;\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $b xor $a);\n}", "    return sprintf(\"%02x\", $a xor $b);\n\
    }", "    return sprintf(\"%s%s\", $a xor $b, $a xor $b);\n}", "    $a =~ s/0/1/g;\n\
    \    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1", " \
    \   my $result = '';\n    for ($a, $b) {\n        $result .= (($a == '1' && $b\
    \ == '1') || ($a == '0' && $b == '0')) ? '0' : '1';\n    }\n    return $result;\n\
    }", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    $a =~ s/0/0/g;\n    $b =~ s/0/0/g;\n\
    \    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n\
    \    $a =~ s/0/0/g;\n    $b =~ s/0/0/g;\n    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n\
    \    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/1/g;\n    $b =~ s/1/1/g;\n    return $a xor $b;\n}\n", "    return\
    \ sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/\n    );\n\
    }", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n    \
    \    $b =~ /(.)\\1/\n    );\n}", "    return sprintf(\"%s%s\",\n        $a =~\
    \ /(.)\\1/g,\n        $b =~ /(.)\\1/g\n    );\n}", "    return sprintf(\"%s%s\"\
    , $a xor $b, $a xor $b);\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a\
    \ xor $b;\n    return $a;\n}", "    return $a xor $b;\n}", "    $a =~ s/0/1/g;\n\
    \    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n\
    \    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1", " \
    \   $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n    $a =~ s/1/0/g;\n    $b =~ s/1/0/g;\n\
    \    $a =~ s/1", "    return sprintf(\"%02x\", $a xor $b);\n}", "    return sprintf(\"\
    %s%s\", $a xor $b, $a xor $b);\n}", "    return sprintf(\"%s%s\", $a, $b);\n}",
  "    return $a xor $b;\n}", "    return $a xor $b;\n}", "    return sprintf(\"%s%s\"\
    ,\n        $a =~ /(.)\\1/g,\n        $b =~ /(.)\\1/g\n    );\n}", "    my $result\
    \ = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $result .= $a[$i]\
    \ xor $b[$i];\n    }\n    return $result;\n}", "    return sprintf(\"%s%s\", $a\
    \ xor $b, $a xor $b);\n}", "    my($result) = '';\n    for ($i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }", "    return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\\
    1/\n    );\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor $b;\n    return\
    \ $a;\n}", "    return $a xor $b;\n}", "    return sprintf(\"%s%s\", $a xor $b,\
    \ $a xor $b);\n}", "    my($result) = '';\n    for ($i = 0; $i < length($a); $i++)\
    \ {\n        $result .= (($a[$i] == '1') ^ ($b[$i] == '1')) ? '1' : '0';\n   \
    \ }\n    return $result;\n}", "    return sprintf(\"%s%s\", $a xor $b, $a xor\
    \ $b);\n}", "    my($result) = '';\n    for ($i = 0; $i < length($a); $i++) {\n\
    \        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n}", "    return\
    \ $a xor $b;\n}", "    return sprintf(\"%s%s\", $a xor $b, $b xor $a);\n}", " \
    \   return sprintf(\"%s%s\",\n        $a =~ /(.)\\1/,\n        $b =~ /(.)\\1/,\n\
    \        \"$1\"\n    );\n}", "    $a =~ s/0/1/g;\n    $b =~ s/0/1/g;\n    $a xor\
    \ $b;\n    return $a;\n}", "    my $result = '';\n    for ($a, $b) {\n       \
    \ $result .= (($a == '1' && $b == '1') || ($a == '0' && $b == '0'));\n    }\n\
    \    return $result;\n}", "    my($result) = '';\n    for ($i = 0; $i < length($a);\
    \ $i++) {\n        $result .= $a[$i] xor $b[$i];\n    }\n    return $result;\n\
    }", "    return $a xor $b;\n}", "    return sprintf(\"%s%s\",\n        $a =~ /0/\
    \ ? \"1\" : \"0\",\n        $b =~ /0/ ? \"0\" : \"1\"\n    );\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
