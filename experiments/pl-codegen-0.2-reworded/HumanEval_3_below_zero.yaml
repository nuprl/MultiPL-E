name: HumanEval_3_below_zero
language: pl
prompt: "# You're given an array of deposit and withdrawal operations on a bank account\
  \ that starts with\n# zero balance. Your task is to detect if at any point the balance\
  \ of account fallls below zero, and\n# at that point function should return 1. Otherwise\
  \ it should return ''.\n# >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1,\
  \ 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n\
  \        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2,\
  \ -3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5,\
  \ -5, 4, -4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -2, 2, -2, 5, -5, 4, -4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
