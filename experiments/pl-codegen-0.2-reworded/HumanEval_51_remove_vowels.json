{
  "name": "HumanEval_51_remove_vowels",
  "language": "pl",
  "prompt": "# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "completions": [
    "    my $vowels = \"aeiou\";\n    my $result;\n    while($text){\n        my $char = $text->{0};\n        if ($vowels->{$char}){\n            $text->{0} = \"\";\n        }\n        else{\n            $text->{0} = $text->{0};\n        }\n        $text = $text->{1};\n    }\n    $result = $text;\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for my $i (0..$text->length-1) {\n        if (!$vowels->contains($text->substr($i,1))) {\n            $result .= $text->substr($i,1);\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if (!($text[$i] in $vowels)) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for my $i (@$text) {\n        if (!$vowels{$i}) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels->contains($c)) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    for my $i (@$text) {\n        if (!$vowels{$i}) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if (!($text{$i} =~ /[$vowels]/)) {\n            $newtext .= $text{$i};\n        }\n    }\n    return $newtext;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    while ($text) {\n        if ($text =~ /[$vowels]/i) {\n            $text = \"\";\n        } else {\n            $text = $text . \" \";\n        }\n        $result = $result . $text;\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    foreach my $char (split /\\s/, $text) {\n        if (!$vowels->contains($char)) {\n            $newtext .= $char;\n        }\n    }\n    return $newtext;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    for my $i (@$text) {\n        if (!$vowels{$i}) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if ($vowels .= $c) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!(ord($c) in $vowels)) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my $vowels = \"aeiou\";\n    my $result = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return filter { $text =~ /[aeiou]/ } ? $text : \"\";\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!(ord($c) in $vowels)) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result;\n    while ($text =~ s/[$vowels]//g) {\n        $result .= $text;\n    }\n    return $result;\n}",
    "    return filter { $text =~ /[aeiou]/i } $text;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result;\n    while ($text =~ /[$vowels]/g) {\n        $text =~ s/[$vowels]//g;\n    }\n    $result = $text;\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for my $i (@$text) {\n        if (!$vowels{$i}) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if ($text[$i] !~ /[$vowels]/i) {\n            $new_text .= $text[$i];\n        }\n    }\n    return $new_text;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    my($vowels) = \"aeiou\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my $vowels = \"aeiou\";\n    my $result;\n    while ($text =~ /[$vowels]/g) {\n        $text =~ s/[$vowels]//g;\n        $result .= $text;\n    }\n    return $result;\n}",
    "    return filter { $text =~ s/[aeiou]/x/g; return $text; }\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels->contains($c)) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my $vowels = \"aeiou\";\n    my $result = \"\";\n    for my $i (0..$text->length-1) {\n        if ($text->substr($i,1) ne $vowels) {\n            $result .= $text->substr($i,1);\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    for my $i (0..$text->length-1) {\n        if ($text->substr($i,1) ne $vowels) {\n            $new_text .= $text->substr($i,1);\n        }\n    }\n    return $new_text;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for my $char (substr $text, 0, 1) {\n        if ($vowels .= $char) {\n            $result .= $char;\n        }\n    }\n    return $result;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if (!(index($vowels, substr($text, $i, 1)))) {\n            $new_text .= substr($text, $i, 1);\n        }\n    }\n    return $new_text;\n}",
    "    return filter { $text =~ s/[aeiou]/x/g; return $text; }\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for my $i (0..$text-1) {\n        if ($text[$i] eq $vowels) {\n            continue;\n        }\n        $result .= $text[$i];\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    my $vowels = \"aeiou\";\n    my $result = \"\";\n    while ($text =~ s/[$vowels]//g) {\n        $result .= $text;\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiou\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (not $vowels->{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n        if (!$vowels[$text[$i]]) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return filter { $text =~ s/[aeiou]/x/g; return $text; }\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if ($vowels .= $c) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for my $i (@$text) {\n        if ($vowels .= $i) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if ($vowels .= $c) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if ($vowels .= $text[$i]) {\n            $new_text .= $text[$i];\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    for my $i (@$text) {\n        if (!$vowels->{$i}) {\n            $new_text .= $i;\n        }\n    }\n    return $new_text;\n}",
    "    return $text =~ s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for my $i (@$text) {\n        if (!$vowels{$i}) {\n            $result .= $i;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text =~ s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return unless ($text =~ /[aeiou]/);\n    }\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!(ord($c) in $vowels)) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    my $vowels = \"aeiou\";\n    my $new_text = \"\";\n    for my $i (0..$text->length-1) {\n        if ($text->substr($i,1) ne $vowels) {\n            $new_text .= $text->substr($i,1);\n        }\n    }\n    return $new_text;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiou\";\n    my($newtext) = \"\";\n    for my $i (0..$text-1) {\n        if ($text[$i] ne $vowels) {\n            $newtext .= $text[$i];\n        }\n    }\n    return $newtext;\n}",
    "    my($vowels) = \"aeiou\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if ($vowels .= $c) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    my $vowels = \"aeiouAEIOU\";\n    my $result = \"\";\n    for (my $i = 0; $i < length($text); $i++) {\n        if (!$vowels->contains($text[$i])) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return unless {\n            $_ =~ /[aeiou]/;\n        };\n    } $text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my $vowels = \"aeiou\";\n    my $result = \"\";\n    for my $i (0..$text-1) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($new_text) = \"\";\n    foreach my $c (@$text) {\n        if ($vowels .= $c) {\n            $new_text .= $c;\n        }\n    }\n    return $new_text;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (not $vowels->contains($c)) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($newtext) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $newtext .= $c;\n        }\n    }\n    return $newtext;\n}",
    "    return $text =~ s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~/[aeiou]/g ? substr($text, 1) : $text;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    $text =~ s/[aeiou]/x/g;\n    return $text;\n}",
    "    my $vowels = \"aeiou\";\n    my $result;\n    while($text) {\n        my $char = $text->{0};\n        if ($vowels->{$char}) {\n            $text->{0} = \"\";\n        } else {\n            $text->{0} = $char;\n        }\n        $text = $text->{1};\n    }\n    $result = $text;\n    return $result;\n}",
    "    return filter { $text =~ /[aeiou]/ } $text;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    return filter {\n        return unless $text =~ /[aeiou]/;\n    } $text;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    while($text){\n        if(substr($text, 0, 1) =~ /[$vowels]/) {\n            $text = substr($text, 1);\n        } else {\n            $result .= substr($text, 0, 1);\n            $text = substr($text, 1);\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    while($text){\n        my($char) = $text;\n        if(!$vowels->{$char}) {\n            $result .= $char;\n        }\n        $text = $text . substr($text, 1);\n    }\n    return $result;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    foreach my $c (@$text) {\n        if (!$vowels{$c}) {\n            $result .= $c;\n        }\n    }\n    return $result;\n}",
    "    my($vowels) = \"aeiouAEIOU\";\n    my($result) = \"\";\n    for ($i = 0; $i < length($text); $i++) {\n        if (!$vowels{$text[$i]}) {\n            $result .= $text[$i];\n        }\n    }\n    return $result;\n}",
    "    return $text=~s/[aeiou]/x/g;\n}",
    "    return filter {\n        return $text =~ s/[aeiou]/x/g;\n    }\n}",
    "    return $text =~ s/[aeiou]/x/g;\n}",
    "    my($vowels) = \"aeiou\";\n    my($result) = \"\";\n    while($text){\n        if(!$vowels->{$text->{0}}){\n            $result->{$text->{0}};\n        }\n        $text = $text->{1};\n    }\n    return $result;\n}",
    "    return filter {\n        $_ =~ /[aeiou]/;\n    } $text;\n}"
  ],
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ]
}