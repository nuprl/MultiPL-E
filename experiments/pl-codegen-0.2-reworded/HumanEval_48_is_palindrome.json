{
  "name": "HumanEval_48_is_palindrome",
  "language": "pl",
  "prompt": "# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "completions": [
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text == $text.reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    return ($text == $text[0..-1]);\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    my($odd, $even) = 0;",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    my($odd, $even) = 0;\n    my($odd_len, $even_len) = 0;\n    my($odd_str, $even_str) = \"\";\n    my($odd_str_len, $even_str_len) = 0;\n    my($odd_str_len_max, $even_str_len_max) = 0;\n    my($odd_str_max, $even_str_max) = \"\";\n    my($odd_str_max_len, $even_str_max_len) = 0;\n    my($odd_str_max_len_max, $even_str_max_len_max) = 0;\n    my($odd_str_max_len_max_str, $even_str_max_len_max_str) = \"\";\n    my($odd_str_max_len_max_str_len, $even_str_max_len_max_str_len) = 0;\n    my($odd_str_max_len_max_str_len_max, $even_str_max_len_max_str_len_max) = 0;\n    my($odd_str_max_len_max_str_len_max_str, $even_str_max_len_max_str_len_max_str) = \"\";\n    my($odd_str_max_len_max_str_len_max_str_len, $even_str_max_len_max_str_len_max_str_len) = 0;\n    my($odd_str_max_len_max_str_len_max_str_len_max, $even_str_max_len_max_str_len_max_str_len_max) = 0;\n    my($odd_str_max_len_max_str_len_max_str_len_max_str, $even_str_max_len_max_str_len_max_str_len_max_str) = \"\";\n    my($odd_str_max_len_max_str_len_max_str_",
    "    return $text eq $text->reverse();\n}",
    "    my $len = length $text;\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse $half_text;\n    return $half_text eq $half_text_rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my @text = split /\\s+/, $text;\n    my $half = $text[0];\n    for (my $i = 1; $i < @text; $i++) {\n        my $half = $half . $text[$i];\n    }\n    return $half eq $text[0];\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my @text = split /[^a-zA-Z]/, $text;\n    my @text_rev = @text;\n    reverse @text_rev;\n    return $text eq $text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0, $len - 1;\n    while ($i <= $j) {\n        my $ch = $text[$i];\n        $i += 1;\n        if ($ch == $text[$j]) {\n            $j -= 1;\n        } else {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_str = substr($text, 0, $half_len);\n    my $half_str_rev = reverse($half_str);\n    return $half_str eq $half_str_rev;\n}",
    "    return $text eq $text->reverse();\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0, $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i += 1;\n        $j -= 1;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($text_length) = length($text);\n    my($half_length) = $text_length / 2;\n    my($half_text) = substr($text, 0, $half_length);\n    my($half_text_reverse) = reverse($half_text);\n    return $half_text eq $half_text_reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse();\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $half = $text->substr(0, length($text)/2);\n    my $half_rev = reverse($half);\n    return $text eq $half_rev;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    my($p) = 1;\n    while ($i < $len) {\n        $p = $text[$i];\n        $i++;\n        if ($i >= $len) {\n            return $p;\n        }\n        if ($p != $text[$i]) {\n            return 0;\n        }\n        $i++;\n    }\n    return $p;\n}",
    "    return $text eq $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text[0..-1];\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $str = $text;\n    my $rev = $str;\n    reverse($str);\n    return $str eq $rev;\n}",
    "    return $text == $text[0..-1];\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text == $text.reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = 0;\n    my($ch) = 0;\n    my($ch2) = 0;\n    my($ch3) = 0;\n    my($ch4) = 0;\n    my($ch5) = 0;\n    my($ch6) = 0;\n    my($ch7) = 0;\n    my($ch8) = 0;\n    my($ch9) = 0;\n    my($ch10) = 0;\n    my($ch11) = 0;\n    my($ch12) = 0;\n    my($ch13) = 0;\n    my($ch14) = 0;\n    my($ch15) = 0;\n    my($ch16) = 0;\n    my($ch17) = 0;\n    my($ch18) = 0;\n    my($ch19) = 0;\n    my($ch20) = 0;\n    my($ch21) = 0;\n    my($ch22) = 0;\n    my($ch23) = 0;\n    my($ch24) = 0;\n    my($ch25) = 0;\n    my($ch26) = 0;\n    my($ch27) = 0;\n    my($ch28) = 0;\n    my($ch29) = 0;\n    my($ch30) = 0;\n    my($ch31) = 0;\n    my($ch32) = 0;\n    my($ch33) = 0;\n    my($ch34) = 0;\n    my($ch35) = 0;\n    my($ch36) = 0;\n    my($ch37) = 0;\n    my($ch38) = 0;\n    my($ch39) = 0;\n    my($ch40) = 0;\n    my($ch41) = 0;\n    my($ch42) = 0;\n    my($ch43) = 0;\n    my($ch44) = 0;\n    my($ch45) = 0;\n    my($ch46) = 0;\n    my($ch47) = 0;\n    my",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    my($odd, $even) = 0;\n    while($i < $len) {\n        $odd = $i;\n        $even = $i + 1;\n        while($even < $len && $text[$even] == $text[$odd]) {\n            $even += 1;\n        }\n        $i += 1;\n    }\n    return $odd == $len - 1;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_rev) = reverse($half_text);\n    return $half_text eq $half_rev;\n}",
    "    return $text eq $text[0..-1] eq $text[0..-2..-1];\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $str = $text;\n    my $len = length $str;\n    my $half = $len / 2;\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $half) {\n        if ($str[$i] ne $str[$j]) {\n            return 0;\n        }\n        $i += 1;\n        $j -= 1;\n    }\n    return 1;\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_str = substr($text, 0, $half_len);\n    my $half_str_rev = reverse($half_str);\n    return $half_str eq $half_str_rev;\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    if ($half_text eq $half_text_rev) {\n        return 1;\n    }\n    return 0;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0, $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++; $j--;\n    }\n    return 1;\n}",
    "    return $text == $text.reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text == $text.reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text[0..-1];\n}",
    "    return $text eq $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_rev = $half;\n    my $half_rev_rev = $half;\n    my $half_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = $half;\n    my $half_rev_rev_rev_rev_rev_",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text == $text->reverse();\n}",
    "    my $len = length $text;\n    my $half = $len / 2;\n    my $i = 0;\n    my $j = $len - 1;\n    my $half_text = \"\";\n    while ($i < $half) {\n        $half_text .= substr($text, $i, 1);\n        $i++;\n    }\n    while ($j >= $i) {\n        if ($text[$j] != $half_text[$i]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text.reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    while($i < $len/2) {\n        if($text[$i] != $text[$len-1-$j]) {\n            return 0;\n        }\n        $i++;\n        $j++;\n    }\n    return 1;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text == $text[0..-1];\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;",
    "    if($text eq \"\") {\n        return 1;\n    }\n    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse();\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $half = $text[0];\n    for (my $i = 1; $i < length($text); $i++) {\n        if ($text[$i] ne $half) {\n            return 0;\n        }\n        $half = $text[$i];\n    }\n    return 1;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text == $text.reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half;\n    my($half_text) = substr($text, 0, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = 0;\n    my($result) = 1;\n    while($i < $half) {\n        $result = ($text[$i] == $text[$j]) and $result;\n        $i++;\n        $j++;\n    }\n    return $result;\n}",
    "    if($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = 0;\n    my($half_len) = $half - 1;\n    my($half_text) = substr($text, $half_len, $half_len);\n    my($half_text_rev) = reverse($half_text);\n    my($half_text_rev_rev) = reverse($half_text_rev);\n    if ($half_text eq $half_text_rev) {\n        return 1;\n    }\n    if ($half_text eq $half_text_rev_rev) {\n        return 1;\n    }\n    return 0;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    my $len = length $text;\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_str = substr($text, 0, $half_len);\n    my $half_str_rev = reverse $half_str;\n    return $half_str eq $half_str_rev;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($text_length) = length($text);\n    my($half_length) = $text_length / 2;\n    my($half_text) = substr($text, 0, $half_length);\n    my($half_text_reverse) = reverse($half_text);\n    return $half_text eq $half_text_reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text.reverse();\n}",
    "    return $text == $text[0..-1];\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half - 1;\n    my($half_str) = substr($text, 0, $half_len);\n    my($half_rev) = reverse($half_str);\n    return $half_str eq $half_rev;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = 0;\n    my($result) = 1;\n    while($i < $half) {\n        $j = $half - $i;\n        if($text[$i] != $text[$j]) {\n            $result = 0;\n            break;\n        }\n        $i++;\n    }\n    return $result;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    while($i < $len/2) {\n        if($text[$i] != $text[$len-1-$j]) {\n            return 0;\n        }\n        $i++;\n        $j++;\n    }\n    return 1;\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    return $text eq $text->reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = $half;\n    while($i < $half) {\n        if($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i) = 0;\n    my($j) = $len - 1;\n    while ($i <= $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = $half - 1;\n    my($ch) = $text[$j];\n    my($ch2) = $text[$i];\n    while ($i <= $half) {\n        if ($ch != $ch2) {\n            return 0;\n        }\n        $i++;\n        $j--;\n        $ch = $text[$j];\n        $ch2 = $text[$i];\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    return $text eq $text->reverse();\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0, $len - 1;\n    while ($i < $j) {\n        if ($text[$i] != $text[$j]) {\n            return 0;\n        }\n        $i++, $j--;\n    }\n    return 1;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($half_len) = $half;\n    my($half_str) = substr($text, 0, $half_len);\n    my($half_str_rev) = reverse($half_str);\n    return $half_str eq $half_str_rev;\n}",
    "    my($len) = length($text);\n    my($half) = $len / 2;\n    my($i) = 0;\n    my($j) = $half - 1;\n    my($ch) = $text[$i];\n    my($ch2) = $text[$j];\n    while ($i <= $half) {\n        if ($ch != $ch2) {\n            return 0;\n        }\n        $i++;\n        $j--;\n        $ch = $text[$i];\n        $ch2 = $text[$j];\n    }\n    return 1;\n}",
    "    if ($text eq \"\") {\n        return 1;\n    }\n    my $len = length($text);\n    my $half = $len / 2;\n    my $half_len = $half - 1;\n    my $half_text = substr($text, 0, $half_len);\n    my $half_text_rev = reverse($half_text);\n    return $half_text eq $half_text_rev;\n}",
    "    my($len) = length($text);\n    my($rev) = reverse($text);\n    return $text eq $rev;\n}",
    "    my($len) = length($text);\n    my($i, $j) = 0;\n    while($i < $len/2) {\n        if($text[$i] != $text[$len-1-$j]) {\n            return 0;\n        }\n        $i++;\n        $j++;\n    }\n    return 1;\n}",
    "    return $text eq $text->reverse;\n}",
    "    return $text == $text->reverse();\n}",
    "    my($len) = length($text);\n    my($i, $j);"
  ],
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ]
}