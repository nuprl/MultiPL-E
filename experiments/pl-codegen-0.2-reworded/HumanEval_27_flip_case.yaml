name: HumanEval_27_flip_case
language: pl
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char eq $char;\n        $result .= $char.toupper() if $char.isupper();\n\
    \        $result .= $char.tolower() if $char.islower();\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= \"a\" and $char <= \"z\" else $char.lc;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string ) {\n  \
    \      $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $c (@$string)\
    \ {\n        $result .= $c if $c >= \"a\" and $c <= \"z\" else $c.lc;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[a-z]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (substr $string, 0, 1) {\n        $result .= substr($string, 1, 1) . uc($char);\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char ne \" \";\n    \
    \    $result =~ s/[a-z]/ $char, /i;\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char ne \" \";\n        $result =~ s/[a-z]/ $char, /i;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string)\
    \ {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char;\n        if ($char >= 'a' && $char <= 'z') {\n\
    \            $result .= $char.to_upper();\n        } else {\n            $result\
    \ .= $char.to_lower();\n        }\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    foreach my $char (substr($string, 0, 1)) {\n        $result .=\
    \ substr($string, 1, 1) . uc($char);\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char;\n      \
    \  if ($char >= 'a' && $char <= 'z') {\n            $result .= $char.to_upper();\n\
    \        } else {\n            $result .= $char.to_lower();\n        }\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char;\n        if ($char >= 'a' && $char <= 'z') {\n\
    \            $result .= $char.to_upper();\n        } else {\n            $result\
    \ .= $char.to_lower();\n        }\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ >= 'a' && $char <= 'z';\n        $result .= $char if $char >= 'A' && $char <=\
    \ 'Z';\n        $result .= $char if $char >= '0' && $char <= '9';\n    }\n   \
    \ return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string )\
    \ {\n        $result .= $char if $char >= 'a' and $char <= 'z';\n        $result\
    \ .= $char if $char >= 'A' and $char <= 'Z';\n        $result .= $char if $char\
    \ >= '0' and $char <= '9';\n    }\n    return $result;\n}", "    my($result) =\
    \ \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/i;\n  \
    \      $result .= $char if $char =~ /^[0-9]/i;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char >= 'a' and $char <= 'z';\n        $result .= $char if $char >= 'A'\
    \ and $char <= 'Z';\n        $result .= $char if $char >= '0' and $char <= '9';\n\
    \    }\n    return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n    $string\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  foreach my $char (split /\\s/, $string) {\n        $result .= $char if $char\
    \ =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/;\n    }\n    return\
    \ $result;\n}", "    my($new_string) = \"\";\n    foreach my $char (split /\\\
    s/, $string) {\n        $new_string .= $char if $char ne \" \";\n        $new_string\
    \ =~ s/[a-z]/ $char, /g;\n    }\n    return $new_string;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ >= 'a' && $char <= 'z';\n        $result .= $char if $char >= 'A' && $char <=\
    \ 'Z';\n        $result .= $char if $char >= '0' && $char <= '9';\n    }\n   \
    \ return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string )\
    \ {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[a-z]/;\n\
    \    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  for my $char ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n\
    \        $result .= $char.toupper() if $char =~ /^[A-Z]/;\n        $result .=\
    \ $char.tolower() if $char =~ /^[0-9]/;\n    }\n    return $result;\n}", "   \
    \ my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char >= 'a' and $char <= 'z';\n        $result .= $char if $char >= 'A'\
    \ and $char <= 'Z';\n        $result .= $char if $char >= '0' and $char <= '9';\n\
    \    }\n    return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n    $string\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    $string =~ s/([a-z])/ $1\
    \ /g;\n    $string =~ s/^./ /g;\n    $string =~ s/\\.$//g;\n    return $string;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char >= 'a' and $char <= 'z';\n\
    \        $result .= $char if $char >= 'A' and $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' and $char <= '9';\n    }\n    return $result;\n}", " \
    \   my($new_string) = \"\";\n    foreach my $char (split /\\s/, $string) {\n \
    \       $new_string .= $char if $char eq $char->{lc};\n        $new_string .=\
    \ $char->{uc} if $char eq $char->{uc};\n    }\n    return $new_string;\n}", " \
    \   my($string_flipped) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n\
    \        if (isalpha($char)) {\n            $string_flipped .= substr($string,\
    \ 1, 1).uc($char);\n        } else {\n            $string_flipped .= substr($string,\
    \ 1, 1).lc($char);\n        }\n    }\n    return $string_flipped;\n}", "    my($string)\
    \ =~ s/([a-z])/ $1 /g;\n    my($string) =~ s/([A-Z])/ $1 /g;\n    return $string;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char eq $char;\n        $result .= $char.toUpper() if $char.isUpper();\n\
    \        $result .= $char.toLower() if $char.isLower();\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char ne \" \";\n        $result =~ s/[a-z]/ $char, /g;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char >= 'a' and $char <= 'z';\n        $result\
    \ .= $char if $char >= 'A' and $char <= 'Z';\n        $result .= $char if $char\
    \ >= '0' and $char <= '9';\n    }\n    return $result;\n}", "    $string =~ s/([a-z])/\
    \ $1 /g;\n    $string =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result)\
    \ = \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/i;\n  \
    \      $result .= $char if $char =~ /^[0-9]/i;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n      \
    \  $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper()\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower() if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char ne \" \";\n    \
    \    $result =~ s/[a-z]/[A-Z]/g;\n        $result =~ s/[A-Z]/[a-z]/g;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char >= \"a\" and $char <= \"z\"\n       \
    \     || $char == \" \";\n        $result .= $char if $char >= \"A\" and $char\
    \ <= \"Z\"\n            || $char == \" \";\n    }\n    return $result;\n}", " \
    \   my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char =~ /^[a-z]/;\n        $result .= $char.toupper() if $char =~ /^[A-Z]/;\n\
    \        $result .= $char.tolower() if $char =~ /^[0-9]/;\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n\
    \        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char if $char\
    \ =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string ) {\n  \
    \      $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        my $upper = $char >= 97 && $char <= 122;\n        my $lower =\
    \ $char >= 65 && $char <= 90;\n        if ($upper && $lower) {\n            $result\
    \ .= $char;\n        } elsif ($upper) {\n            $result .= $char.to_lower();\n\
    \        } elsif ($lower) {\n            $result .= $char.to_upper();\n      \
    \  } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my($new_string) = \"\";\n    foreach my $char (substr($string, 0, 1))\
    \ {\n        if ($char eq \"a\"..\"z\") {\n            $new_string .= \"A\";\n\
    \        } else {\n            $new_string .= \"a\";\n        }\n    }\n    foreach\
    \ my $char (substr($string, 1, 1)) {\n        if ($char eq \"A\"..\"Z\") {\n \
    \           $new_string .= \"a\";\n        } else {\n            $new_string .=\
    \ \"A\";\n        }\n    }\n    return $new_string;\n}", "    my($result) = \"\
    \";\n    foreach my $char (substr $string, 0, 1) {\n        $result .= substr($string,\
    \ 1, 1) . uc($char);\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    for my $char ( @$string ) {\n        $result .= $char if $char eq $char;\n\
    \        $result .= $char.toupper() if $char.isupper();\n        $result .= $char.tolower()\
    \ if $char.islower();\n    }\n    return $result;\n}", "    my($new_string) =\
    \ \"\";\n    foreach my $char (substr($string, 0, 1)) {\n        $new_string .=\
    \ substr($string, 1, 1) . uc($char);\n    }\n    return $new_string;\n}", "  \
    \  my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n      \
    \  $result .= $char if $char ne \" \";\n        $result =~ s/[a-z]/ $char, /i;\n\
    \    }\n    return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n    $string\
    \ =~ s/([A-Z])/ $1 /g;\n    $string =~ s/^./ /g;\n    return $string;\n}", " \
    \   $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/([A-Z])/ $1 /g;\n    $string\
    \ =~ s/^./ /g;\n    return $string;\n}", "    my($result) = \"\";\n    foreach\
    \ my $char (substr($string, 0, 1)) {\n        $result .= substr($string, 1, 1)\
    \ . uc($char);\n    }\n    return $result;\n}", "    my($new_string) = \"\";\n\
    \    foreach my $char (substr($string, 0, 1)) {\n        if ($char == \"a\" ||\
    \ $char == \"A\") {\n            $new_string .= \"A\";\n        } else {\n   \
    \         $new_string .= \"a\";\n        }\n    }\n    foreach my $char (substr($string,\
    \ 1, 1)) {\n        if ($char == \"a\" || $char == \"A\") {\n            $new_string\
    \ .= \"A\";\n        } else {\n            $new_string .= \"a\";\n        }\n\
    \    }\n    return $new_string;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char.toupper if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if\
    \ $char =~ /^[a-z]/;\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    for my $char ( @$string ) {\n        $result .= ( $char == \"-\" ) ? \"\
    \ \" : \"-${lc $char}\";\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    for my $char ( @$string ) {\n        $result .= $char if $char eq $char;\n\
    \        $result .= $char.toUpper() if $char.isLower();\n        $result .= $char.toLower()\
    \ if $char.isUpper();\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    foreach my $c (@$string) {\n        $result .= $c if $c >= 'a' and $c <=\
    \ 'z';\n        $result .= $c if $c >= 'A' and $c <= 'Z';\n        $result .=\
    \ $c if $c >= '0' and $c <= '9';\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char (0..255)\n    {\n        if ($string eq \"\") {\n\
    \            $result .= $char;\n        } else {\n            $result .= (($char\
    \ >= 97 && $char <= 122) ? \"a\" : \"A\");\n            $result .= (($char >=\
    \ 65 && $char <= 90) ? \"A\" : \"a\");\n        }\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n\
    \        $result .= $char if $char =~ /^[a-z]/i;\n        $result .= $char if\
    \ $char =~ /^[A-Z]/i;\n        $result .= $char if $char =~ /^[0-9]/i;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        $result .= $char if $char >= 97 && $char <= 122;\n        $result\
    \ .= $char - 32 if $char >= 65 && $char <= 90;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    foreach my $char (split /(.)/, $string) {\n      \
    \  $result .= $char if $char eq $char[0]\n        else $char[0] . $char[1];\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char;\n        if ($char >= 'a' && $char <=\
    \ 'z') {\n            $result .= $char.to_upper();\n        } else {\n       \
    \     $result .= $char.to_lower();\n        }\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char eq $char;\n        $result .= $char.toUpper() if $char.isLower();\n\
    \        $result .= $char.toLower() if $char.isUpper();\n    }\n    return $result;\n\
    }", "    $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/([A-Z])/ $1 /g;\n    return\
    \ $string;\n}", "    my($new_string) = \"\";\n    foreach my $char (substr($string,\
    \ 0, 1)) {\n        $new_string .= substr($string, 1, 1) . chr(ord(lc($char)));\n\
    \    }\n    return $new_string;\n}", "    my($new_string) = \"\";\n    foreach\
    \ my $char (split /\\s/, $string) {\n        $new_string .= $char if $char ne\
    \ \" \";\n        $new_string =~ s/[a-z]/ $char, u;\n    }\n    return $new_string;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char;\n        $char =~ s/[a-z]/ $&.upper();\n        $char =~ s/^./ $&.lower();\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char.to_upper if $char =~ /^[A-Z]/;\n        $result .= $char.to_lower if\
    \ $char =~ /^[0-9]/;\n    }\n    return $result;\n}", "    my($new_string) = \"\
    \";\n    foreach my $char ( @$string ) {\n        $new_string .= $char if $char\
    \ =~ /^[a-z]/i;\n        $new_string .= $char if $char =~ /^[A-Z]/i;\n       \
    \ $new_string .= $char if $char =~ /^[0-9]/i;\n    }\n    return $new_string;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char eq $char;\n        $result .= $char.toUpper() if $char.isLower();\n\
    \        $result .= $char.toLower() if $char.isUpper();\n    }\n    return $result;\n\
    }", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string) =~ s/([A-Z])/ $1 /g;\n\
    \    return $string;\n}", "    my($string_length) = length($string);\n    my($new_string)\
    \ = \"\";\n    for (my $i = 0; $i < $string_length; $i++) {\n        $new_string\
    \ .= substr($string, $i, 1) . substr($string, $i, 1).uc;\n    }\n    return $new_string;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($new_string) = \"\";\n    foreach my\
    \ $char (substr $string, 0, 1) {\n        $new_string .= substr($string, 1, 1)\
    \ . uc($char);\n    }\n    return $new_string;\n}", "    my($new_string) = \"\"\
    ;\n    foreach my $char (split /\\s/, $string) {\n        $new_string .= $char\
    \ if $char =~ /^[a-z]/;\n        $new_string .= $char if $char =~ /^[A-Z]/;\n\
    \        $new_string .= $char if $char =~ /^[0-9]/;\n    }\n    return $new_string;\n\
    }", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string) =~ s/([A-Z])/ $1 /g;\n\
    \    return $string;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char if $char >= 'a' and $char <= 'z';\n \
    \       $result .= $char if $char >= 'A' and $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' and $char <= '9';\n    }\n    return $result;\n}", " \
    \   my($result) = \"\";\n    foreach my $char (substr($string, 0, 1)) {\n    \
    \    $result .= substr($string, 1, 1) . uc($char);\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n\
    \        $result .= substr($string, 1, 1) . chr(ord(substr($string, 0, 1)) ^ 0x20);\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $c (@$string)\
    \ {\n        $result .= uc($c);\n    }\n    return $result;\n}", "    $string\
    \ =~ s/([a-z])/ $1 /g;\n    $string =~ s/^./ /g;\n    return $string;\n}", " \
    \   my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char >= \"a\" and $char <= \"z\";\n        $result .= $char if $char >=\
    \ \"A\" and $char <= \"Z\";\n        $result .= $char if $char >= \"0\" and $char\
    \ <= \"9\";\n    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1\
    \ /g;\n    my($string) =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result)\
    \ = \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/i;\n  \
    \      $result .= $char if $char =~ /^[0-9]/i;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char eq $char.lc;\n        $result .= $char.uc if $char eq $char.uc;\n \
    \   }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= ( $char == \"-\" ) ? \" \" : \"-$char\";\n    }\n  \
    \  return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/([A-Z])/\
    \ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n\
    \        $result .= $char if $char >= 'A' && $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' && $char <= '9';\n    }\n    return $result;\n}", "  \
    \  my($result) = \"\";\n    foreach my $char (substr($string, 0, 1)) {\n     \
    \   $result .= substr($string, 1, 1) . uc($char);\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char eq $char;\n        $result .= $char.toUpper() if $char.isLower();\n\
    \        $result .= $char.toLower() if $char.isUpper();\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper if $char =~\
    \ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[a-z]/;\n    }\n \
    \   return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/([A-Z])/\
    \ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n    for my $char\
    \ (substr $string, 0, 1) {\n        if ($char =~ /[a-z]/) {\n            $result\
    \ .= $char.toupper();\n        } else {\n            $result .= $char.tolower();\n\
    \        }\n    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach\
    \ my $char (split /\\s/, $string) {\n        $result .= $char if $char =~ /^[a-z]/;\n\
    \        $result .= $char.to_upper if $char =~ /^[A-Z]/;\n        $result .= $char.to_lower\
    \ if $char =~ /^[0-9]/;\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    for my $char ( @$string ) {\n        $result .= $char if $char eq $char.lc;\n\
    \        $result .= $char.uc if $char eq $char.uc;\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char;\n        if ($char >= 'a' && $char <= 'z') {\n            $result\
    \ .= $char.to_upper();\n        } else {\n            $result .= $char.to_lower();\n\
    \        }\n    }\n    return $result;\n}", "    $string =~ s/([a-z])/ $1 /g;\n\
    \    $string =~ s/^./ /g;\n    return $string;\n}", "    my($result) = $string;\n\
    \    my $i = 0;\n    while ($i < length($string)) {\n        $i += 1;\n      \
    \  $result[$i] =~ s/[a-z]/A/g;\n        $result[$i] =~ s/[A-Z]/a/g;\n    }\n \
    \   return $result;\n}", "    my($result) = \"\";\n    foreach my $char (substr\
    \ $string, 0, 1) {\n        $result .= substr $string, 1, 1)\n        if ($char\
    \ >= \"a\" && $char <= \"z\") {\n            $result .= chr(($char - \"a\" + \"\
    A\"));\n        } else {\n            $result .= $char;\n        }\n    }\n  \
    \  return $result;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        if ($string eq \"\") {\n            $result .= $char;\n      \
    \  } else {\n            $result .= (ord($string[0]) == $char) ? $string[0] :\
    \ $string[0] . $string[1];\n        }\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ eq $char;\n        $result .= $char.toupper() if $char.isupper();\n        $result\
    \ .= $char.tolower() if $char.islower();\n    }\n    return $result;\n}", "  \
    \  $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/([A-Z])/ $1 /g;\n    return\
    \ $string;\n}", "    my($result) = \"\";\n    for my $char ( @$string ) {\n  \
    \      $result .= $char if $char >= 'a' and $char <= 'z';\n        $result .=\
    \ $char if $char >= 'A' and $char <= 'Z';\n        $result .= $char if $char >=\
    \ '0' and $char <= '9';\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char if\
    \ $char =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/;\n      \
    \  $result .= $char if $char =~ /^[a-zA-Z]/;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char eq $char.lc;\n        $result .= $char.uc if $char eq $char.uc;\n \
    \   }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  for my $char ( @$string ) {\n        $result .= $char if $char eq $char.lc;\n\
    \        $result .= $char.uc if $char eq $char.uc;\n    }\n    return $result;\n\
    }", "    my($new_string) = \"\";\n    foreach my $char (substr $string, 0, 1)\
    \ {\n        if ($char eq \"a\" || $char eq \"A\") {\n            $new_string\
    \ .= \"A\";\n        } elseif ($char eq \"b\" || $char eq \"B\") {\n         \
    \   $new_string .= \"B\";\n        } elseif ($char eq \"c\" || $char eq \"C\"\
    ) {\n            $new_string .= \"C\";\n        } elseif ($char eq \"d\" || $char\
    \ eq \"D\") {\n            $new_string .= \"D\";\n        } elseif ($char eq \"\
    e\" || $char eq \"E\") {\n            $new_string .= \"E\";\n        } elseif\
    \ ($char eq \"f\" || $char eq \"F\") {\n            $new_string .= \"F\";\n  \
    \      } elseif ($char eq \"g\" || $char eq \"G\") {\n            $new_string\
    \ .= \"G\";\n        } elseif ($char eq \"h\" || $char eq \"H\") {\n         \
    \   $new_string .= \"H\";\n        } elseif ($char eq \"i\" || $char eq \"I\"\
    ) {\n            $new_string .= \"I\";\n        } elseif ($char eq \"j\" || $char\
    \ eq \"J\") {\n            $new_string .= \"J\";\n        } elseif ($char eq \"\
    k\" || $char eq \"K\") {\n            $new_string .= \"K\";\n        } elseif\
    \ ($char eq \"l\" || $char eq \"L\") {\n            $new_string .= \"L\";\n  \
    \      } elseif ($char eq \"m\" || $char eq \"M\") {\n            $new_string\
    \ .= \"M\";\n        } elseif ($char eq \"n\" || $char eq \"N\") {\n         \
    \   $new_string .= \"N\";\n        } elseif ($char eq \"o\" || $char eq \"O\"\
    ) {\n            $new_string .= \"O\";\n        } elseif ($char eq \"p\" || $char\
    \ eq \"P\") {\n            $new_string .= \"P\";\n        } elseif ($", "    my($result)\
    \ = \"\";\n    foreach my $char (substr $string, 0, 1) {\n        $result .= substr\
    \ $string, 1, 1)\n    }\n    return $result;\n}", "    my($new_string) = \"\"\
    ;\n    foreach my $char (substr $string, 0, 1) {\n        $new_string .= substr\
    \ $string, 1, 1)\n        if ($char >= \"a\" && $char <= \"z\") {\n          \
    \  $new_string .= chr(($char - \"a\" + \"A\"));\n        } else {\n          \
    \  $new_string .= $char;\n        }\n    }\n    return $new_string;\n}", "   \
    \ my($result) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n       \
    \ $result .= substr($string, 1, 1) . uc($char);\n    }\n    return $result;\n}",
  "    $string =~ s/([a-z])/ $1 /g;\n    $string =~ s/^./ /g;\n    return $string;\n\
    }", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n\
    \        $result .= $char if $char ne \" \";\n        $result =~ s/[a-z]/ $char,\
    \ /i;\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n\
    \        $result .= $char if $char >= 'A' && $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' && $char <= '9';\n    }\n    return $result;\n}", "  \
    \  my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char >= 'A' &&\
    \ $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <= '9';\n \
    \   }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper()\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower() if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($new_string) = \"\";\n    foreach my\
    \ $char (substr($string, 0, 1)) {\n        if ($char eq \"a\" || $char eq \"A\"\
    ) {\n            $new_string .= \"A\";\n        } elseif ($char eq \"b\" || $char\
    \ eq \"B\") {\n            $new_string .= \"B\";\n        } elseif ($char eq \"\
    c\" || $char eq \"C\") {\n            $new_string .= \"C\";\n        } elseif\
    \ ($char eq \"d\" || $char eq \"D\") {\n            $new_string .= \"D\";\n  \
    \      } elseif ($char eq \"e\" || $char eq \"E\") {\n            $new_string\
    \ .= \"E\";\n        } elseif ($char eq \"f\" || $char eq \"F\") {\n         \
    \   $new_string .= \"F\";\n        } elseif ($char eq \"g\" || $char eq \"G\"\
    ) {\n            $new_string .= \"G\";\n        } elseif ($char eq \"h\" || $char\
    \ eq \"H\") {\n            $new_string .= \"H\";\n        } elseif ($char eq \"\
    i\" || $char eq \"I\") {\n            $new_string .= \"I\";\n        } elseif\
    \ ($char eq \"j\" || $char eq \"J\") {\n            $new_string .= \"J\";\n  \
    \      } elseif ($char eq \"k\" || $char eq \"K\") {\n            $new_string\
    \ .= \"K\";\n        } elseif ($char eq \"l\" || $char eq \"L\") {\n         \
    \   $new_string .= \"L\";\n        } elseif ($char eq \"m\" || $char eq \"M\"\
    ) {\n            $new_string .= \"M\";\n        } elseif ($char eq \"n\" || $char\
    \ eq \"N\") {\n            $new_string .= \"N\";\n        } elseif ($char eq \"\
    o\" || $char eq \"O\") {\n            $new_string .= \"O\";\n        } elseif\
    \ ($char eq \"p\" || $char eq \"P\") {\n            $new_string .= \"P\";\n  \
    \      } elseif ($", "    my($result) = $string;\n    my($chars) = split /[^a-zA-Z]/,\
    \ $string;\n    foreach my $char (@$chars) {\n        $result =~ s/[a-z]/$char,\
    \ /g;\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n\
    \        $result .= $char if $char >= 'A' && $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' && $char <= '9';\n    }\n    return $result;\n}", "  \
    \  my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char >= 'A' &&\
    \ $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <= '9';\n \
    \   }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= ( $char == \" \" ) ? \" \" : toupper($char);\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if $char =~ /^[a-z]/;\n\
    \    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  foreach my $char (split /\\s/, $string) {\n        $result .= $char if $char\
    \ ne \" \";\n        $result =~ s/[a-z]/ $char, /g;\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n\
    \        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toUpper()\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char.toLower() if $char =~ /^[a-z]/;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char eq $char[0];\n \
    \       $result .= $char[0] if $char eq $char;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char (0..255)\n    {\n        if ($string\
    \ eq \"\") {\n            $result .= $char;\n        } else if ($char >= 97 &&\
    \ $char <= 122) {\n            $result .= chr($char - 32);\n        } else if\
    \ ($char >= 65 && $char <= 90) {\n            $result .= chr($char + 32);\n  \
    \      } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char.toupper if $char =~ /^[A-Z]/;\n        $result .= $char.tolower if\
    \ $char =~ /^[0-9]/;\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char if\
    \ $char =~ /^[a-z]/;\n        $result .= $char.toupper if $char =~ /^[A-Z]/;\n\
    \        $result .= $char.tolower if $char =~ /^[0-9]/;\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  foreach my $char (substr($string, 0, 1)) {\n        $result .= substr($string,\
    \ 1, 1) . uc($char);\n    }\n    return $result;\n}", "    $string =~ s/([a-z])/\
    \ $1 /g;\n    $string =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ >= \"a\" and $char <= \"z\" else chr(ord($char) + 32);\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char;\n        $char =~ s/^./ /g;\n        $char =~ s/.$/ /g;\n    }\n \
    \   return $result;\n}", "    my($result) = \"\";\n    foreach my $char (split\
    \ /\\s/, $string) {\n        $result .= $char if $char eq $char->downcase;\n \
    \       $result .= $char->upcase if $char eq $char->upcase;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string ) {\n  \
    \      $result .= $char if $char >= \"a\" and $char <= \"z\" else $char.lc;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char ne \" \";\n    \
    \    $result =~ s/[a-z]/ $char, /i;\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    foreach my $char (substr $string, 0, 1) {\n        $result .= substr($string,\
    \ 1, 1) . uc($char);\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    foreach my $char (substr($string, 1)) {\n        $result .= substr($char,\
    \ 0, 1) . uc($char, 1);\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    for my $char ( @$string ) {\n        $result .= $char if $char >= \"\
    a\" and $char <= \"z\" else $char.lc;\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ >= \"a\" and $char <= \"z\";\n        $result .= $char if $char >= \"A\" and\
    \ $char <= \"Z\";\n        $result .= $char if $char >= \"0\" and $char <= \"\
    9\";\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ (substr $string, 0, 1) {\n        $result .= substr($string, 1, 1) . uc($char);\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char =~ /^[a-z]/;\n \
    \       $result .= $char if $char =~ /^[A-Z]/;\n        $result .= $char if $char\
    \ =~ /^[0-9]/;\n    }\n    return $result;\n}", "    my($new_string) = \"\";\n\
    \    foreach my $char (split /\\s/, $string) {\n        $new_string .= $char if\
    \ $char eq $char->lc;\n        $new_string .= $char->uc if $char eq $char->uc;\n\
    \    }\n    return $new_string;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result\
    \ .= $char if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n\
    \    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  for my $char ( @$string ) {\n        $result .= $char;\n        $char =~ s/[a-z]/\
    \ $&.upper;\n        $char =~ s/^./ $&.lower;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for (my $i = 0; $i < length($string); $i++) {\n  \
    \      $result .= substr($string, $i, 1) . (substr($string, $i, 1) eq \"a\" ?\
    \ \"A\" : \"a\");\n    }\n    return $result;\n}", "    my($result) = \"\";\n\
    \    foreach my $char (split /\\s/, $string) {\n        $result .= $char if $char\
    \ eq $char->downcase;\n        $result .= $char->upcase if $char eq $char->upcase;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n  \
    \      $result .= $char if $char >= 'A' && $char <= 'Z';\n        $result .= $char\
    \ if $char >= '0' && $char <= '9';\n    }\n    return $result;\n}", "    my($result)\
    \ = \"\";\n    for my $char ( @$string ) {\n        $result .= $char if $char\
    \ =~ /^[a-z]/;\n        $result .= $char.toupper if $char =~ /^[A-Z]/;\n     \
    \   $result .= $char.tolower if $char =~ /^[a-z]/;\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char =~ /^[a-z]/;\n        $result .= $char.toupper() if $char\
    \ =~ /^[A-Z]/;\n        $result .= $char.tolower() if $char =~ /^[0-9]/;\n   \
    \ }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char =~ /^[a-z]/;\n        $result .= $char\
    \ if $char =~ /^[A-Z]/;\n        $result .= $char if $char =~ /^[0-9]/;\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    foreach my $char (split\
    \ /\\s/, $string) {\n        $result .= $char if $char =~ /^[a-z]/i;\n       \
    \ $result .= $char if $char =~ /^[A-Z]/i;\n        $result .= $char if $char =~\
    \ /^[0-9]/i;\n    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach\
    \ my $char (split /\\s/, $string) {\n        $result .= $char if $char =~ /^[a-z]/i;\n\
    \        $result .= $char if $char =~ /^[A-Z]/;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char (0..255)\n    {\n        my $upper =\
    \ $char >= 97 && $char <= 122;\n        my $lower = $char >= 65 && $char <= 90;\n\
    \        if ($upper && !$lower) { $result .= $char - 32; }\n        if (!$upper\
    \ && $lower) { $result .= $char + 32; }\n        if ($upper && $lower) { $result\
    \ .= $char; }\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for\
    \ my $char ( @$string ) {\n        $result .= $char if $char >= 'a' and $char\
    \ <= 'z';\n        $result .= $char if $char >= 'A' and $char <= 'Z';\n      \
    \  $result .= $char if $char >= '0' and $char <= '9';\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ (0..255)\n    {\n        if ($string eq \"\") {\n            $result .= $char;\n\
    \        } else if ($char >= 97 && $char <= 122) {\n            $result .= chr($char\
    \ - 32);\n        } else if ($char >= 65 && $char <= 90) {\n            $result\
    \ .= chr($char + 32);\n        } else {\n            $result .= $char;\n     \
    \   }\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char\
    \ ( @$string ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n\
    \        $result .= $char if $char >= 'A' && $char <= 'Z';\n        $result .=\
    \ $char if $char >= '0' && $char <= '9';\n    }\n    return $result;\n}", "  \
    \  my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char eq $char;\n        $result .= $char.toUpper() if $char.isLower();\n\
    \        $result .= $char.toLower() if $char.isUpper();\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n\
    \        $result .= substr $string, 1, 1 if $char eq \"a\" || $char eq \"A\";\n\
    \        $result .= substr $string, 1, 1 if $char eq \"e\" || $char eq \"E\";\n\
    \        $result .= substr $string, 1, 1 if $char eq \"i\" || $char eq \"I\";\n\
    \        $result .= substr $string, 1, 1 if $char eq \"o\" || $char eq \"O\";\n\
    \        $result .= substr $string, 1, 1 if $char eq \"u\" || $char eq \"U\";\n\
    \        $result .= substr $string, 1, 1 if $char eq \"y\" || $char eq \"Y\";\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    foreach my $char\
    \ (split /\\s/, $string) {\n        $result .= $char if $char eq $char->upcase;\n\
    \        $result .= $char->downcase if $char eq $char->downcase;\n    }\n    return\
    \ $result;\n}", "    my($new_string) = \"\";\n    foreach my $char (split /\\\
    s/, $string) {\n        $new_string .= $char if $char eq $char->upcase;\n    }\n\
    \    return $new_string;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char >= 'a' && $char <= 'z';\n        $result\
    \ .= $char if $char >= 'A' && $char <= 'Z';\n        $result .= $char if $char\
    \ >= '0' && $char <= '9';\n    }\n    return $result;\n}", "    my($result) =\
    \ \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char eq $char.lc;\n        $result .= $char.uc if $char eq $char.uc;\n \
    \   }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        $result .= $char if $char >= 97 && $char <= 122;\n        $result\
    \ .= $char - 32 if $char >= 65 && $char <= 90;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char\
    \ if $char eq $char.lc;\n        $result .= $char.uc if $char eq $char.uc;\n \
    \   }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char eq $char.lc;\n        $result .= $char.uc\
    \ if $char eq $char.uc;\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    for my $char (substr $string, 0, 1) {\n        $result .= substr($string,\
    \ 1, 1) . uc($char);\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    for my $char ( @$string ) {\n        $result .= $char if $char eq $char;\n\
    \        $result .= $char.toUpper() if $char.isLower();\n        $result .= $char.toLower()\
    \ if $char.isUpper();\n    }\n    return $result;\n}", "    my($result) = \"\"\
    ;\n    for my $char (0..255)\n    {\n        $result .= $char if $char >= 97 &&\
    \ $char <= 122;\n        $result .= $char - 32 if $char >= 65 && $char <= 90;\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= ( $char == \"-\" ) ? \" \" : \"-$char\";\n\
    \    }\n    return $result;\n}", "    my($result) = \"\";\n    for my $char (\
    \ @$string ) {\n        $result .= $char if $char eq $char;\n        $result .=\
    \ $char.toupper() if $char.isupper();\n        $result .= $char.tolower() if $char.islower();\n\
    \    }\n    return $result;\n}", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string)\
    \ =~ s/([A-Z])/ $1 /g;\n    return $string;\n}", "    my($result) = \"\";\n  \
    \  foreach my $char (split /\\s/, $string) {\n        $result .= $char if $char\
    \ =~ /^[a-z]/i;\n        $result .= $char if $char =~ /^[A-Z]/i;\n        $result\
    \ .= $char if $char =~ /^[0-9]/i;\n    }\n    return $result;\n}", "    my($newstring)\
    \ = \"\";\n    foreach my $char (substr($string, 0, 1)) {\n        $newstring\
    \ .= substr($string, 1, 1) . chr(ord(lc($char)));\n    }\n    return $newstring;\n\
    }", "    my($string_length) = length($string);\n    my($result) = \"\";\n    for\
    \ (my $i = 0; $i < $string_length; $i++) {\n        $result .= substr($string,\
    \ $i, 1) . chr(ord(substr($string, $i, 1)) ^ 0x20);\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char (0..255)\n    {\n        if ($string\
    \ eq \"\") {\n            $result .= $char;\n        } else {\n            $result\
    \ .= (($char eq \"a\") or ($char eq \"A\")) ? \"A\" : \"a\";\n        }\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char ( @$string\
    \ ) {\n        $result .= $char if $char >= \"a\" and $char <= \"z\";\n      \
    \  $result .= $char if $char >= \"A\" and $char <= \"Z\";\n        $result .=\
    \ $char if $char >= \"0\" and $char <= \"9\";\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string) {\n      \
    \  $result .= $char if $char =~ /^[a-z]/i;\n        $result .= $char if $char\
    \ =~ /^[A-Z]/i;\n        $result .= $char if $char =~ /^[0-9]/i;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string)\
    \ {\n        $result .= $char if $char ne \" \";\n        $result =~ s/[a-z]/\
    \ $char, /i;\n    }\n    return $result;\n}", "    my($result) = \"\";\n    for\
    \ my $char (0..255)\n    {\n        if ($string eq \"\") {\n            $result\
    \ .= $char;\n        } else {\n            $result .= (ord($string[0]) == $char)\
    \ ? $string[0] : $string[0] . $string[1];\n        }\n    }\n    return $result;\n\
    }", "    my($string) =~ s/([a-z])/ $1 /g;\n    my($string) =~ s/([A-Z])/ $1 /g;\n\
    \    return $string;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        $result .= $char if $char >= 97 && $char <= 122;\n        $result\
    \ .= $char - 32 if $char >= 65 && $char <= 90;\n    }\n    return $result;\n}",
  "    my($result) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n      \
    \  $result .= substr($string, 1, 1) . uc($char);\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    foreach my $char (substr $string, 0, 1) {\n\
    \        $result .= substr $string, 1, 1)\n        if ($char >= \"a\" && $char\
    \ <= \"z\") {\n            $result .= chr(($char - \"a\") + \"A\");\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my($result) = \"\";\n    for my $char ( @$string ) {\n        $result\
    \ .= $char if $char >= 'a' && $char <= 'z';\n        $result .= $char if $char\
    \ >= 'A' && $char <= 'Z';\n        $result .= $char if $char >= '0' && $char <=\
    \ '9';\n    }\n    return $result;\n}", "    my($new_string) = \"\";\n    foreach\
    \ my $char (split /\\s/, $string) {\n        $new_string .= $char if $char ne\
    \ \" \";\n        $new_string .= $char if $char eq \" \";\n        $new_string\
    \ .= $char.toupper() if $char eq \" \";\n        $new_string .= $char.tolower()\
    \ if $char.isupper();\n    }\n    return $new_string;\n}", "    my($result) =\
    \ \"\";\n    foreach my $char (split /\\s/, $string) {\n        $result .= $char\
    \ if $char ne \" \";\n        $result =~ s/[a-z]/ $char, /i;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    foreach my $char (split /\\s/, $string)\
    \ {\n        $result .= $char if $char eq $char->lc;\n        $result .= $char->uc\
    \ if $char eq $char->uc;\n    }\n    return $result;\n}", "    my($result) = \"\
    \";\n    for my $char ( @$string ) {\n        $result .= $char if $char =~ /^[a-z]/;\n\
    \        $result .= $char.toupper() if $char =~ /^[A-Z]/;\n        $result .=\
    \ $char.tolower() if $char =~ /^[a-z]/;\n    }\n    return $result;\n}", "   \
    \ my($result) = \"\";\n    for my $char ( @$string ) {\n        $result .= $char;\n\
    \        if ($char >= 'a' && $char <= 'z') {\n            $result .= $char.to_upper();\n\
    \        } else {\n            $result .= $char.to_lower();\n        }\n    }\n\
    \    return $result;\n}", "    my($result) = \"\";\n    for my $char (0..255)\n\
    \    {\n        if ($string eq \"\") {\n            $result .= $char;\n      \
    \  } else {\n            $result .= (($char >= 97 && $char <= 122) ? \"a\" : \"\
    A\");\n            $result .= (($char >= 65 && $char <= 90) ? \"A\" : \"a\");\n\
    \        }\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
