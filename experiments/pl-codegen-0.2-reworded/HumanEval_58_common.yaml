name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two arrays.\n# >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i\
    \ = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n \
    \           $j++;\n        } else {\n            push @common, $l1[$i];\n    \
    \        $i++;\n            $j++;\n        }\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1) {\n        while ($j < @l2 && $l1[$i] < $l2[$j])\
    \ {\n            $j++;\n        }\n        if ($j == @l2) {\n            push\
    \ @common, $l1[$i];\n        }\n        $i++;\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort\
    \ { $l1 };\n    my @l2_unique = unique_sort { $l2 };\n    my @l1_common = intersect\
    \ { @l1_unique, @l2_unique };\n    my @l2_common = intersect { @l2_unique, @l1_unique\
    \ };\n    my @common = unique_sort { @l1_common, @l2_common };\n    return @common;\n\
    }", "    my @a = @$l1;\n    my @b = @$l2;\n    my @c = common(@a, @b);\n    return\
    \ @c;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i\
    \ = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n \
    \           $j++;\n        } else {\n            push @common, $l1[$i];\n    \
    \        $i++;\n            $j++;\n        }\n    }\n    return @common;\n}",
  "    my @a = @$l1;\n    my @b = @$l2;\n    my @c = ();\n    my $i = 0;\n    my $j\
    \ = 0;\n    while ($i < @a && $j < @b) {\n        if ($a[$i] < $b[$j]) {\n   \
    \         push @c, $a[$i];\n            $i++;\n        }\n        else if ($a[$i]\
    \ > $b[$j]) {\n            push @c, $b[$j];\n            $j++;\n        }\n  \
    \      else {\n            push @c, $a[$i];\n            $i++;\n            $j++;\n\
    \        }\n    }\n    while ($i < @a) {\n        push @c, $a[$i];\n        $i++;\n\
    \    }\n    while ($j < @b) {\n        push @c, $b[$j];\n        $j++;\n    }\n\
    \    return @c;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_unique;\n    my @l2_unique;\n    my @l1_common;\n    my @l2_common;\n\
    \    my @l1_common_unique;\n    my @l2_common_unique;\n    my @l1_common_unique_sorted;\n\
    \    my @l2_common_unique_sorted;\n    my @l1_common_unique_sorted_unique;\n \
    \   my @l2_common_unique_sorted_unique;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique = unique(@l1);\n    my @l2_unique = unique(@l2);\n\
    \    my @common_unique = unique(@l1_unique, @l2_unique);\n    my @common_unique_sorted\
    \ = sort(@common_unique);\n    return @common_unique_sorted;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @ret = ();\n    my $i = 0;\n    foreach\
    \ my $e1 (@l1) {\n        my $j = 0;\n        foreach my $e2 (@l2) {\n       \
    \     if ($e1 eq $e2) {\n                $ret[$i] = $e1;\n                $i++;\n\
    \                $j++;\n            }\n            if ($j == 1) {\n          \
    \      break;\n            }\n        }\n    }\n    return @ret;\n}", "    my\
    \ $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n\
    \    my $l2_unique = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique,\
    \ $l2_unique);\n    return $l1_common;\n}", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @common_unique;",
  "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n    my\
    \ $l2_pos = 0;\n    my $l1_common = [];\n    my $l2_common = [];\n    while ($l1_pos\
    \ < $l1_len && $l2_pos < $l2_len) {\n        if ($l1[$l1_pos] == $l2[$l2_pos])\
    \ {\n            $l1_common .= $l1[$l1_pos];\n            $l2_common .= $l2[$l2_pos];\n\
    \            $l1_pos++;\n            $l2_pos++;\n        } else if ($l1[$l1_pos]\
    \ < $l2[$l2_pos]) {\n            $l1_pos++;\n        } else {\n            $l2_pos++;\n\
    \        }\n    }\n    return ($l1_common, $l2_common);\n}", "    my @a = @$l1;\n\
    \    my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my $l1_len\
    \ = @{$l1};\n    my $l2_len = @{$l2};\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $ret = [];\n    while($i < $l1_len && $j < $l2_len) {\n        if($l1[$i] <\
    \ $l2[$j]) {\n            $i++;\n        } else if($l1[$i] > $l2[$j]) {\n    \
    \        $j++;\n        } else {\n            $ret = $ret + [$l1[$i]];\n     \
    \       $i++;\n            $j++;\n        }\n    }\n    return $ret;\n}", "  \
    \  my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n \
    \   my @l2_unique;\n    my @common_unique;\n    my @l1_unique_unique;\n    my\
    \ @l2_unique_unique;\n    my @common_unique_unique;\n    my @l1_unique_unique_unique;\n\
    \    my @l2_unique_unique_unique;\n    my @common_unique_unique_unique;", "  \
    \  my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i;\n    for $i = 0; $i < min($@l1,\
    \ @l2); $i++ {\n\tif ($l1[$i] eq $l2[$i]) {\n\t    push @common, $l1[$i];\n\t\
    }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n \
    \   my @common;\n    my @l1_unique = unique_sort { $l1 };\n    my @l2_unique =\
    \ unique_sort { $l2 };\n    my @common_unique = unique_sort { @common };\n   \
    \ for (@l1_unique) {\n        my $i = @l1_unique - 1;\n        my $i_unique =\
    \ @l1_unique - 1;\n        my $i_unique_unique = @l1_unique - 1;\n        my $i_unique_unique_unique\
    \ = @l1_unique - 1;\n        my $i_unique_unique_unique_unique = @l1_unique -\
    \ 1;\n        if (defined($l1[$i])) {\n            if (defined($l2[$i])) {\n \
    \               if (defined($common[$i])) {\n                    if ($l1[$i] eq\
    \ $l2[$i]) {\n                        push @common_unique, $l1[$i];\n        \
    \            }\n                } else {\n                    push @common_unique,\
    \ $l1[$i];\n                }\n            } else {\n                push @common_unique,\
    \ $l1[$i];\n            }\n        } else {\n            push @common_unique,\
    \ $l1[$i];\n        }\n    }\n    for (@l2_unique) {\n        my $i = @l2_unique\
    \ - 1;\n        my $i_unique = @l2_unique - 1;\n        my $i_unique_unique =\
    \ @l2_unique - 1;\n        my $i_unique_unique_unique = @l2_unique - 1;\n    \
    \    if (defined($l2[$i])) {\n            if (defined($common[$i])) {\n      \
    \          if ($l2[$i] eq $l1[$i]) {\n                    push @common_unique,\
    \ $l2[$i];\n                }\n            } else {\n                push @common_unique,\
    \ $l2[$i];\n            }\n        } else {\n            push @common_unique,\
    \ $l2[$i", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique\
    \ = unique(@l1);\n    my @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique,\
    \ @l2_unique);\n    return @common_unique;\n}", "    my @l1 = @$l1;\n    my @l2\
    \ = @$l2;\n    my @result;\n    my @l1_unique;\n    my @l2_unique;\n    my @result_unique;\n\
    \    my @l1_unique_sorted;\n    my @l2_unique_sorted;\n    my @result_unique_sorted;\n\
    \    my @l1_unique_sorted_unique;\n    my @l2_unique_sorted_unique;\n    my @result_unique_sorted_unique;",
  "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return ($l1_len - $l2_len) ? \\\n        ($l1_len - $l2_len)\
    \ : \\\n        ($l2_len - $l1_len) ? \\\n            ($l1_common + $l2_common)\
    \ : \\\n            $l1_common;\n}\n", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n    my $l2_unique\
    \ = sort { $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique, $l2_unique);\n\
    \    my $l2_common = common($l2_unique, $l1_unique);\n    return ($l1_len - $l2_len)\
    \ -\n        (scalar(@{$l1_common}) - scalar(@{$l2_common}));\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    while ($i\
    \ < @l1) {\n        my $j = 0;\n        while ($j < @l2) {\n            if ($l1[$i]\
    \ eq $l2[$j]) {\n                push @common, $l1[$i];\n                $j++;\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n   \
    \ my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n \
    \           $j++;\n        } else {\n            push @common, $l1[$i];\n    \
    \        $i++;\n            $j++;\n        }\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    while\
    \ ($i < @l1) {\n        my $j = 0;\n        while ($j < @l2) {\n            if\
    \ ($l1[$i] eq $l2[$j]) {\n                push @common, $l1[$i];\n           \
    \     $j++;\n            }\n            $j++;\n        }\n        $i++;\n    }\n\
    \    return @common;\n}\n", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_unique;\n    my @l2_unique;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my $i = 0;\n    while ($i < @l1) {\n        if ($l1[$i]\
    \ eq $l2[$i]) {\n            push @common, $l1[$i];\n            $i++;\n     \
    \   } else {\n            $i++;\n        }\n    }\n    return @common;\n}", " \
    \   my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n\
    \    my $l2_unique = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique,\
    \ $l2_unique);\n    return $l1_common;\n}", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @ret = ();", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @result;\n\
    \    my @unique;\n    my @count;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n \
    \   my @common;\n    my $i = 0;\n    while ($i < @l1) {\n        my $j = 0;\n\
    \        while ($j < @l2) {\n            if ($l1[$i] eq $l2[$j]) {\n         \
    \       push @common, $l1[$i];\n                $j++;\n            }\n       \
    \     $j++;\n        }\n        $i++;\n    }\n    return @common;\n}", "    my\
    \ @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    while($i\
    \ < @l1) {\n        my $j = 0;\n        while($j < @l2) {\n            if(@l1[$i]\
    \ eq @l2[$j]) {\n                push @common, @l1[$i];\n                $j++;\n\
    \            }\n        }\n        $i++;\n    }\n    return @common;\n}", "  \
    \  my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @sorted_l1;\n \
    \   my @sorted_l2;\n    my @sorted_common;", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my $i = 0;\n    while ($i < @l1) {\n        my $e1\
    \ = shift(@l1);\n        my $e2 = shift(@l2);\n        if ($e1 eq $e2) {\n   \
    \         push @common, $e1;\n        }\n        $i++;\n    }\n    return @common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @result;\n    my @l1_unique\
    \ = unique(@l1);\n    my @l2_unique = unique(@l2);\n    my @common = common(@l1_unique,\
    \ @l2_unique);\n    my @result = @common;\n    return @result;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n\
    \    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n      \
    \      $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n   \
    \     } else {\n            push @common, $l1[$i];\n            $i++;\n      \
    \      $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j <\
    \ @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else\
    \ if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n            push\
    \ @common, $l1[$i];\n            $i++;\n            $j++;\n        }\n    }\n\
    \    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_uniq = sort\
    \ { $a <=> $b } keys %{$l1};\n    my $l2_uniq = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = [];\n    my $l2_common = [];\n    foreach my $i (@$l1_uniq)\
    \ {\n        if (exists $l2_uniq { $l1_uniq{$i} }) {\n            $l1_common{$i}\
    \ = 1;\n            $l2_common{$i} = 1;\n        }\n    }\n    return sort { $a\
    \ <=> $b } ($l1_common, $l2_common);\n}", "    my @a = @$l1;\n    my @b = @$l2;\n\
    \    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n    my\
    \ @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort { $l1 };\n   \
    \ my @l2_unique = unique_sort { $l2 };\n    my @l1_common = common_sort { @l1_unique\
    \ };\n    my @l2_common = common_sort { @l2_unique };\n    my @common = common_sort\
    \ { @l1_common, @l2_common };\n    return @common;\n}", "    my @a = @$l1;\n \
    \   my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n\
    \    my @l1_common;\n    my @l2_common;\n    my @l1_unique_common;\n    my @l2_unique_common;\n\
    \    my @l1_common_unique;\n    my @l2_common_unique;\n    my @l1_common_unique_common;\n\
    \    my @l2_common_unique_common;\n    my @l1_common_unique_common_unique;\n \
    \   my @l2_common_unique_common_unique;\n    my @l1_common_unique_common_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n \
    \   my @l2_unique;\n    my @l1_unique_sorted;\n    my @l2_unique_sorted;\n   \
    \ my @l1_common_sorted;\n    my @l2_common_sorted;\n    my @l1_common_sorted_unique;\n\
    \    my @l2_common_sorted_unique;\n    my @l1_common_sorted_unique_sorted;\n \
    \   my @l2_common_sorted_unique_sorted;\n    my @l1_common_sorted_unique_sorted_unique;\n\
    \    my @l2_common_sorted_unique_sorted_unique;\n    my @l1_common_sorted_unique_sorted_unique_sorted;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted;", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_unique = unique_sort { $l1 };\n    my @l2_unique = unique_sort { $l2\
    \ };\n    my @common_unique = unique_sort { @common };\n    my @common_unique_uniq\
    \ = unique_sort { @common_unique };\n    my @common_unique_uniq_intersect = intersect\
    \ { @common_unique_uniq, @l1_unique, @l2_unique };\n    my @common_unique_uniq_intersect_uniq\
    \ = unique_sort { @common_unique_uniq_intersect };\n    return @common_unique_uniq_intersect_uniq;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n\
    \    my @l2_unique;\n    my @l1_common;\n    my @l2_common;\n    my @l1_unique_sorted;\n\
    \    my @l2_unique_sorted;\n    my @l1_common_sorted;\n    my @l2_common_sorted;\n\
    \    my @l1_unique_sorted_uniq;\n    my @l2_unique_sorted_uniq;\n    my @l1_common_sorted_uniq;\n\
    \    my @l2_common_sorted_uniq;\n    my @l1_unique_sorted_uniq_uniq;\n    my @l2_unique_sorted_uniq_uniq;\n\
    \    my @l1_common_sorted_uniq_uniq;\n    my @l2_common_sorted_uniq_uniq;\n  \
    \  my @l1_unique_sorted_uniq_uniq_uniq;\n    my @l2_unique_sorted_uniq_uniq_uniq;\n\
    \    my @l1_common_sorted_uniq_uniq_uniq;\n    my @l2_common_sorted_uniq_uniq_uniq;\n\
    \    my @l1_unique_sorted_uniq_uniq_uniq_uniq;\n    my @l2_unique_sorted_uniq_uniq_uniq_uniq;\n\
    \    my @l1_common_sorted_uniq_uniq_uniq_uniq;\n    my @l2_common_sorted_uniq_uniq_uniq_uniq;\n\
    \    my @l1_unique_sorted_uniq_uniq_uniq_uniq_uniq;\n    my @l2_unique_sorted_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l1_common_sorted_uniq_uniq_uniq_uniq_uniq;\n    my @l2", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort\
    \ { $_[0] } @l1;\n    my @l2_unique = unique_sort { $_[0] } @l2;\n    my @common_unique\
    \ = unique_sort { $_[0] }\n\t(intersect { $_[0] } @l1_unique, @l2_unique);\n \
    \   return @common_unique;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my\
    \ @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_common;\n    my\
    \ @l2_common;\n    my @l1_common_unique;\n    my @l2_common_unique;\n    my @l1_common_unique_sorted;\n\
    \    my @l2_common_unique_sorted;\n    my @l1_common_sorted;\n    my @l2_common_sorted;\n\
    \    my @l1_common_unique_sorted_uniq;\n    my @l2_common_unique_sorted_uniq;\n\
    \    my @l1_common_sorted_uniq;\n    my @l2_common_sorted_uniq;\n    my @l1_common_unique_sorted_uniq_uniq;\n\
    \    my @l2_common_unique_sorted_uniq_uniq;\n    my @l1_common_sorted_uniq_uniq;\n\
    \    my @l2_common_sorted_uniq_uniq;\n    my @l1_common_unique_sorted_uniq_uniq_uniq;\n\
    \    my @l2_common_unique_sorted_uniq_uniq_uniq;\n    my @l1_common_sorted_uniq_uniq_uniq;\n\
    \    my @l2_common_sorted_uniq_uniq_uniq;", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1\
    \ && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n      \
    \  } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n    \
    \        push @common, $l1[$i];\n            $i++;\n            $j++;\n      \
    \  }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_unique_sorted;\n\
    \    my @l2_unique_sorted;\n    my @l1_common;\n    my @l2_common;\n    my @l1_common_sorted;\n\
    \    my @l2_common_sorted;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i;\n    my $j;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @ret;\n\
    \    my $i = 0;\n    while ($i < @l1) {\n        my $e1 = shift @l1;\n       \
    \ my $e2 = shift @l2;\n        if ($e1 eq $e2) {\n            push @ret, $e1;\n\
    \        }\n        $i++;\n    }\n    return @ret;\n}", "    my @a1 = @$l1;\n\
    \    my @a2 = @$l2;\n    my @r = ();\n    my $i = 0;\n    foreach my $e1 (@a1)\
    \ {\n        my $j = 0;\n        foreach my $e2 (@a2) {\n            if ($e1 eq\
    \ $e2) {\n                push @r, $e1;\n                $i++;\n             \
    \   break;\n            }\n            $j++;\n        }\n    }\n    return sort\
    \ @r;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i\
    \ = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            push @common, $l1[$i];\n            $i++;\n      \
    \  } else if ($l1[$i] > $l2[$j]) {\n            push @common, $l2[$j];\n     \
    \       $j++;\n        } else {\n            push @common, $l1[$i];\n        \
    \    $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "  \
    \  my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1) {\n        while ($j < @l2 && $l1[$i] < $l2[$j])\
    \ {\n            $j++;\n        }\n        if ($j >= @l2) {\n            push\
    \ @common, $l1[$i];\n        }\n        $i++;\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            push @common, $l1[$i];\n            $i++;\n        } else if\
    \ ($l1[$i] > $l2[$j]) {\n            push @common, $l2[$j];\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @ret = ();\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @ret, $l1[$i];\n            $i++;\n            $j++;\n     \
    \   }\n    }\n    return @ret;\n}", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_sorted = sort { $a <=> $b } @$l1;\n    my $l2_sorted =\
    \ sort { $a <=> $b } @$l2;\n    my $i = 0;\n    my $j = 0;\n    my $common = [];\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1_sorted[$i] == $l2_sorted[$j])\
    \ {\n            $common .= $l1_sorted[$i];\n            $i++;\n            $j++;\n\
    \        } else if ($l1_sorted[$i] < $l2_sorted[$j]) {\n            $i++;\n  \
    \      } else {\n            $j++;\n        }\n    }\n    return $common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}\n", "    my $l1_len\
    \ = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_set = set_intersect($l1, $l2);\n\
    \    my $l2_set = set_intersect($l2, $l1);\n    my $l1_common = set_intersect($l1_set,\
    \ $l2_set);\n    my $l1_unique = set_subtract($l1_set, $l1_common);\n    my $l2_unique\
    \ = set_subtract($l2_set, $l2_common);\n    return sort(set_union($l1_common,\
    \ $l2_common)\n                + $l1_unique\n                + $l2_unique);\n}",
  "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return ($l1_len + $l2_len - $l1_len - $l2_len +\n        \
    \    $l1_common + $l2_common);\n}", "    my @a = @$l1;\n    my @b = @$l2;\n  \
    \  my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n    my @l2\
    \ = @$l2;\n    my @common;\n    my @l1_unique = unique_sort { $l1 };\n    my @l2_unique\
    \ = unique_sort { $l2 };\n    my @l1_common = intersect { @l1_unique, @l2_unique\
    \ };\n    my @l2_common = intersect { @l2_unique, @l1_unique };\n    my @common\
    \ = unique_sort { @l1_common, @l2_common };\n    return @common;\n}", "    my\
    \ $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort { $a <=>\
    \ $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n   \
    \ my $l1_common = [];\n    my $l2_common = [];\n    foreach my $i (@$l1_unique)\
    \ {\n        if (exists $l2_unique { $l1_unique{$i} == $l2_unique{$i} }) {\n \
    \           $l1_common{$i} = 1;\n        }\n    }\n    foreach my $i (@$l2_unique)\
    \ {\n        if (exists $l1_unique { $l1_unique{$i} == $l2_unique{$i} }) {\n \
    \           $l2_common{$i} = 1;\n        }\n    }\n    return sort { $l1_len <=>\
    \ $l2_len }\n        keys %{$l1_common} +\n        keys %{$l2_common};\n}", " \
    \   my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return ($l1_common, $l2_common);\n}", "    my $l1_len = @{$l1};\n\
    \    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n    my $l2_pos = 0;\n    my $result\
    \ = [];\n    while ($l1_pos < $l1_len && $l2_pos < $l2_len) {\n        if ($l1[$l1_pos]\
    \ == $l2[$l2_pos]) {\n            $result .= $l1[$l1_pos];\n            $l1_pos++;\n\
    \            $l2_pos++;\n        }\n        elsif ($l1[$l1_pos] < $l2[$l2_pos])\
    \ {\n            $l1_pos++;\n        }\n        elsif ($l2[$l2_pos] < $l1[$l1_pos])\
    \ {\n            $l2_pos++;\n        }\n    }\n    return $result;\n}", "    my\
    \ @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;", "    my @l1 = @$l1;\n   \
    \ my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n  \
    \  my @l1_unique_sorted;\n    my @l2_unique_sorted;", "    my @l1 = @$l1;\n  \
    \  my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_unique = array_unique($l1);\n    my $l2_unique = array_unique($l2);\n\
    \    my $l1_common = array_intersect($l1_unique, $l2_unique);\n    return $l1_common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            push\
    \ @common, $l1[$i];\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            push @common, $l2[$j];\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_common;\n\
    \    my @l2_common;\n    my @l1_unique_sorted;\n    my @l2_unique_sorted;\n  \
    \  my @l1_common_sorted;\n    my @l2_common_sorted;\n    my @l1_unique_sorted_uniq;\n\
    \    my @l2_unique_sorted_uniq;\n    my @l1_common_sorted_uniq;\n    my @l2_common_sorted_uniq;",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n \
    \   my @l2_unique;\n    my @l1_unique_uniq;\n    my @l2_unique_uniq;\n    my @l1_common;\n\
    \    my @l2_common;\n    my @l1_common_uniq;\n    my @l2_common_uniq;\n    my\
    \ @l1_common_uniq_uniq;\n    my @l2_common_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq;\n \
    \   my @l2_common_uniq_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq_uniq_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq_uniq_uniq_uniq_uniq_uniq;\n    my @l1_common_uniq_uniq_uniq_uniq_uniq_uniq_uniq_uniq_uniq;\n\
    \    my @l2_common_uniq_uniq_uniq_uniq_uniq_uniq_", "    my @l1 = @$l1;\n    my\
    \ @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique(@l1);\n    my @l2_unique\
    \ = unique(@l2);\n    my @common_unique = unique(@l1_unique, @l2_unique);\n  \
    \  foreach my $i (@common_unique) {\n        if (exists($l1{$i}) && exists($l2{$i}))\
    \ {\n            push @common, $i;\n        }\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n \
    \   my @l2_unique;", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n   \
    \ my $l1_unique = sort { $a <=> $b } keys %{$l1};\n    my $l2_unique = sort {\
    \ $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique, $l2_unique);\n\
    \    my $l2_common = common($l2_unique, $l1_unique);\n    return ($l1_common,\
    \ $l2_common);\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @count = 0;\n    foreach my $i (@l1) {\n        if (exists\
    \ $i in @l2) {\n            push @common, $i;\n            @count++;\n       \
    \ }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_unique;\n    my @l2_unique;\n    my @l1_unique_sorted;\n    my @l2_unique_sorted;\n\
    \    my @l1_common;\n    my @l2_common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @count;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n \
    \   my @common;\n    my @count;\n    my @sorted;\n    my @sorted_l1;\n    my @sorted_l2;\n\
    \    my @sorted_common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    while ($i < @l1) {\n\
    \        my $j = 0;\n        while ($j < @l2) {\n            if ($l1[$i] eq $l2[$j])\
    \ {\n                push @common, $l1[$i];\n                $j++;\n         \
    \   }\n        }\n        $i++;\n    }\n    return @common;\n}", "    my @l1 =\
    \ @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique(@l1);\n\
    \    my @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique,\
    \ @l2_unique);\n    return @common_unique;\n}", "    my $l1_len = @{$l1};\n  \
    \  my $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n    my $l2_unique\
    \ = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique, $l2_unique);\n\
    \    my $l1_common_len = @{$l1_common};\n    my $l2_common_len = @{$l2_common};\n\
    \    my $l1_common_unique = array_unique($l1_common);\n    my $l2_common_unique\
    \ = array_unique($l2_common);\n    my $l1_common_common = array_intersect($l1_common_unique,\
    \ $l2_common_unique);\n    my $l1_common_common_len = @{$l1_common_common};\n\
    \    my $l2_common_common_len = @{$l2_common_common};\n    return (sort { $l1_common_common_len\
    \ <=> $l2_common_common_len }\n            $l1_common_common)\n    || (sort {\
    \ $l2_common_common_len <=> $l1_common_common_len }\n            $l2_common_common)\n\
    \    || (sort { $l1_common_len <=> $l2_common_len }\n            $l1_common)\n\
    \    || (sort { $l2_common_len <=> $l1_common_len }\n            $l2_common)\n\
    \    || (sort { $l1_len <=> $l2_len }\n            $l1)\n    || (sort { $l2_len\
    \ <=> $l1_len }\n            $l2);\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my $i = 0;\n    while ($i < @l1) {\n\tmy $j = 0;\n\twhile\
    \ ($j < @l2) {\n\t    if ($l1[$i] eq $l2[$j]) {\n\t\tpush @common, $l1[$i];\n\t\
    \t$j++;\n\t    }\n\t}\n\t$i++;\n    }\n    return @common;\n}", "    my @a = @$l1;\n\
    \    my @b = @$l2;\n    my @c = ();\n    my $i = 0;\n    foreach my $e (@a) {\n\
    \        my $j = 0;\n        foreach my $e2 (@b) {\n            if ($e eq $e2)\
    \ {\n                push @c, $e;\n                $j++;\n            }\n    \
    \    }\n        if ($j == 0) {\n            push @c, $e;\n        }\n    }\n \
    \   return @c;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_unique = unique_sort { $_[0] };\n    my @l2_unique = unique_sort {\
    \ $_[0] };\n    my @l1_common = common_sort { @l1_unique };\n    my @l2_common\
    \ = common_sort { @l2_unique };\n    my @common = common_sort { @l1_common, @l2_common\
    \ };\n    return @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n\
    \    my $l1_sorted = sort { $a <=> $b } @$l1;\n    my $l2_sorted = sort { $a <=>\
    \ $b } @$l2;\n    my $l1_unique = unique { $a } @$l1_sorted;\n    my $l2_unique\
    \ = unique { $a } @$l2_sorted;\n    my $l1_common = intersect { $a } @$l1_sorted;\n\
    \    my $l2_common = intersect { $a } @$l2_sorted;\n    my $l1_common_len = @{$l1_common};\n\
    \    my $l2_common_len = @{$l2_common};\n    if ($l1_len == $l2_len && $l1_len\
    \ == $l1_common_len && $l2_len == $l2_common_len) {\n        return $l1_common;\n\
    \    }\n    return undef;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my\
    \ @common;\n    my @l1_u = sort { $a <=> $b } @l1;\n    my @l2_u = sort { $a <=>\
    \ $b } @l2;\n    my @common_u = sort { $a <=> $b } @l1_u;\n    my @common_u_u\
    \ = @common_u;\n    while (@l1_u) {\n\tmy $x = shift @l1_u;\n\tif (exists $x in\
    \ @l2_u) {\n\t    push @common_u_u, $x;\n\t}\n    }\n    return @common_u_u;\n\
    }", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n\
    \    my $l2_unique = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique,\
    \ $l2_unique);\n    return $l1_common;\n}", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_unique_sorted;\n\
    \    my @l2_unique_sorted;\n    my @l1_common_sorted;\n    my @l2_common_sorted;\n\
    \    my @l1_common_sorted_unique;\n    my @l2_common_sorted_unique;\n    my @l1_common_sorted_unique_sorted;\n\
    \    my @l2_common_sorted_unique_sorted;\n    my @l1_common_sorted_unique_sorted_unique;\n\
    \    my @l2_common_sorted_unique_sorted_unique;\n    my @l1_common_sorted_unique_sorted_unique_sorted;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted;\n    my @l1_common_sorted_unique_sorted_unique_sorted_unique;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted_unique;\n    my @l1_common_sorted_unique_sorted_unique_sorted_unique_sorted;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted_unique_sorted;\n    my @l1_common_sorted_unique_sorted_unique_sorted_unique_sorted_unique;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted_unique_sorted_unique;\n\
    \    my @l1_common_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted;\n\
    \    my @l2_common_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted;\n\
    \    my @l1_common_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique;\n\
    \    my @l2_common_sorted_unique_s", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j <\
    \ @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else\
    \ if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n            push\
    \ @common, $l1[$i];\n            $i++;\n            $j++;\n        }\n    }\n\
    \    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @ret\
    \ = ();\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1) {\n        while\
    \ ($j < @l2 && $l1[$i] < $l2[$j]) {\n            $j++;\n        }\n        if\
    \ ($j >= @l2) {\n            $ret = push @ret, $l1[$i];\n        } else {\n  \
    \          $ret = push @ret, $l2[$j];\n        }\n        $i++;\n        $j++;\n\
    \    }\n    return @ret;\n}\n", "    my @a = @$l1;\n    my @b = @$l2;\n    my\
    \ @c = ();\n    my $i = 0;\n    foreach my $elem (@a) {\n        my $j = 0;\n\
    \        foreach my $elem2 (@b) {\n            if ($elem eq $elem2) {\n      \
    \          push @c, $elem;\n                $i++;\n                break;\n  \
    \          }\n            $j++;\n        }\n        if ($j == 0) {\n         \
    \   push @c, $elem;\n            $i++;\n        }\n    }\n    return sort @c;\n\
    }", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n\
    \    my $l2_pos = 0;\n    my $l1_last = 0;\n    my $l2_last = 0;\n    my $l1_common\
    \ = [];\n    my $l2_common = [];", "    my @a = @$l1;\n    my @b = @$l2;\n   \
    \ my @c = sort { $a <=> $b } keys %a;\n    return sort { $a <=> $b } keys %c;\n\
    }", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort\
    \ { $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return (sort { $a <=> $b } $l1_common) + $l2_common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique(@l1);\n\
    \    my @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique,\
    \ @l2_unique);\n    @common = @common_unique;\n    return @common;\n}", "    my\
    \ @a1 = @$l1;\n    my @a2 = @$l2;\n    my @ret = ();", "    my @a = @$l1;\n  \
    \  my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n\
    \    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n      \
    \      $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n   \
    \     } else {\n            push @common, $l1[$i];\n            $i++;\n      \
    \      $j++;\n        }\n    }\n    return @common;\n}\n", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique = keys %{sort %{$l1}};\n    my @l2_unique\
    \ = keys %{sort %{$l2}};\n    my @common_unique = common(@l1_unique, @l2_unique);\n\
    \    foreach (@l1_unique) {\n        if (exists $l2 { $l2{$_} eq $1 }) {\n   \
    \         push @common, $1;\n        }\n    }\n    return @common_unique;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @a = @$l1;\n\
    \    my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my @a\
    \ = @$l1;\n    my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i;\n    for $i\
    \ = 0; $i < min($@l1, @l2); $i++ {\n        if ($l1[$i] ne $l2[$i]) {\n      \
    \      return 0;\n        }\n    }\n    for $i = 0; $i < @l1; $i++ {\n       \
    \ if ($l1[$i] ne $l2[$i]) {\n            return 0;\n        }\n    }\n    return\
    \ @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n   \
    \ my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n \
    \           $j++;\n        } else {\n            push @common, $l1[$i];\n    \
    \        $i++;\n            $j++;\n        }\n    }\n    return @common;\n}",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @result;\n    my @count;\n    my\
    \ @count2;\n    my @count3;\n    my @count4;\n    my @count5;\n    my @count6;\n\
    \    my @count7;\n    my @count8;\n    my @count9;\n    my @count10;\n    my @count11;\n\
    \    my @count12;\n    my @count13;\n    my @count14;\n    my @count15;\n    my\
    \ @count16;\n    my @count17;\n    my @count18;\n    my @count19;\n    my @count20;\n\
    \    my @count21;\n    my @count22;\n    my @count23;\n    my @count24;\n    my\
    \ @count25;\n    my @count26;\n    my @count27;\n    my @count28;\n    my @count29;\n\
    \    my @count30;\n    my @count31;\n    my @count32;\n    my @count33;\n    my\
    \ @count34;\n    my @count35;\n    my @count36;\n    my @count37;\n    my @count38;\n\
    \    my @count39;\n    my @count40;\n    my @count41;\n    my @count42;\n    my\
    \ @count43;\n    my @count44;\n    my @count45;\n    my @count46;\n    my @count47;\n\
    \    my @count48;\n    my @count49;\n    my @count50;\n    my @count51;\n    my\
    \ @count52;\n    my @count53;\n    my @count54;\n    my @count55;\n    my @count56;\n\
    \    my @count57;\n    my @count58;\n    my @count59;\n    my @count60;\n    my\
    \ @count61;\n    my @count62;\n    my @count63;\n    my @count64;\n    my @count65;\n\
    \    my @count66;\n    my @count67;\n    my @count68;\n    my @count69;\n", " \
    \   my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_sorted = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_sorted = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = [];\n    my $l2_common = [];\n    my $l1_unique = [];\n \
    \   my $l2_unique = [];\n    my $l1_common_len = 0;\n    my $l2_common_len = 0;\n\
    \    my $l1_unique_len = 0;\n    my $l2_unique_len = 0;\n    foreach my $i (@$l1_sorted)\
    \ {\n        if (exists $l2_sorted { $i }) {\n            push @{$l1_common},\
    \ $i;\n            push @{$l1_common_len}, $l1_len[$i];\n        } else {\n  \
    \          push @{$l1_unique}, $i;\n            push @{$l1_unique_len}, $l1_len[$i];\n\
    \        }\n    }\n    foreach my $i (@$l2_sorted) {\n        if (exists $l1_sorted\
    \ { $i }) {\n            push @{$l2_common}, $i;\n            push @{$l2_common_len},\
    \ $l2_len[$i];\n        } else {\n            push @{$l2_unique}, $i;\n      \
    \      push @{$l2_unique_len}, $l2_len[$i];\n        }\n    }\n    return (\n\
    \        sort { $a <=> $b } @{$l1_common},\n        sort { $a <=> $b } @{$l2_common},\n\
    \        sort { $a <=> $b } @{$l1_unique},\n        sort { $a <=> $b } @{$l2_unique}\n\
    \    );\n}", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique\
    \ = sort { $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys\
    \ %{$l2};\n    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common\
    \ = common($l2_unique, $l1_unique);\n    return ($l1_len + $l2_len - $l1_len -\
    \ $l2_len +\n            $l1_common + $l2_common);\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique(@l1);\n    my\
    \ @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique, @l2_unique);\n\
    \    @common = @common_unique;\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @ret = ();", "    my @a = @$l1;\n    my @b = @$l2;\n\
    \    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n    my\
    \ @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @s1 = sort { $l1[$_] <=> $l2[$_] } @l1;\n    my @s2 =\
    \ sort { $l1[$_] <=> $l2[$_] } @l2;\n    my @s1_unique = unique { sort { $l1[$_]\
    \ <=> $l2[$_] } @s1 } @s1;\n    my @s2_unique = unique { sort { $l1[$_] <=> $l2[$_]\
    \ } @s2 } @s2;\n    my @s1_common = unique { sort { $l1[$_] <=> $l2[$_] } @s1_unique\
    \ } @s1_unique;\n    my @s2_common = unique { sort { $l1[$_] <=> $l2[$_] } @s2_unique\
    \ } @s2_unique;\n    return @s1_common;\n}", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my @sorted_l1 = sort { $l1[$_] <=> $l2[$_] } @l1;\n\
    \    my @sorted_l2 = sort { $l1[$_] <=> $l2[$_] } @l2;\n    my @sorted_common\
    \ = sort { $l1[$_] <=> $l2[$_] } @common;\n    my @sorted_l1_unique = unique {\
    \ sort { $l1[$_] <=> $l2[$_] } @sorted_l1 } @sorted_l1;\n    my @sorted_l2_unique\
    \ = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_l2 } @sorted_l2;\n    my @sorted_common_unique\
    \ = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_common } @sorted_common;\n \
    \   my @sorted_l1_unique_unique = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_l1_unique\
    \ } @sorted_l1_unique;\n    my @sorted_l2_unique_unique = unique { sort { $l1[$_]\
    \ <=> $l2[$_] } @sorted_l2_unique } @sorted_l2_unique;\n    my @sorted_common_unique_unique\
    \ = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_common_unique } @sorted_common_unique;\n\
    \    return @sorted_l1_unique_unique;\n}\n", "    my @a = @$l1;\n    my @b = @$l2;\n\
    \    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n    my\
    \ @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort { $l1 };\n   \
    \ my @l2_unique = unique_sort { $l2 };\n    my @l1_common = common_sort { @l1_unique\
    \ };\n    my @l2_common = common_sort { @l2_unique };\n    my @common = common_sort\
    \ { @l1_common, @l2_common };\n    return @common;\n}", "    my $l1_len = @{$l1};\n\
    \    my $l2_len = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n\
    \    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique,\
    \ $l2_unique);\n    my $l2_common = common($l2_unique, $l1_unique);\n    return\
    \ (sort { $a <=> $b } $l1_common) + $l2_common;\n}", "    my $l1_len = @{$l1};\n\
    \    my $l2_len = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n\
    \    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique,\
    \ $l2_unique);\n    my $l2_common = common($l2_unique, $l1_unique);\n    return\
    \ ($l1_len - $l1_unique + $l2_len - $l2_unique +\n            $l1_common - $l2_common);\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @ret = ();\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @ret, $l1[$i];\n            $i++;\n            $j++;\n     \
    \   }\n    }\n    return @ret;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique;\n    my @l2_unique;", "    my @a = @$l1;\n\
    \    my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my $l1_len\
    \ = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n    my $l2_pos = 0;\n\
    \    my $l1_common = [];\n    my $l2_common = [];", "    my @l1 = @$l1;\n    my\
    \ @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my\
    \ @l1_common;\n    my @l2_common;\n    my @l1_unique_common;\n    my @l2_unique_common;\n\
    \    my @l1_common_unique;\n    my @l2_common_unique;\n    my @l1_common_unique_common;\n\
    \    my @l2_common_unique_common;\n    my @l1_common_unique_common_unique;\n \
    \   my @l2_common_unique_common_unique;\n    my @l1_common_unique_common_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique;\n    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l2_common_unique_common_unique_unique_unique_unique_unique_unique_unique_unique;\n\
    \    my @l1_common_unique_common_unique_unique_unique_unique_unique_unique_",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort\
    \ { $_[0] } @l1;\n    my @l2_unique = unique_sort { $_[0] } @l2;\n    my @l1_common\
    \ = common_sort { $_[0] } @l1_unique;\n    my @l2_common = common_sort { $_[0]\
    \ } @l2_unique;\n    my @common = common_sort { $_[0] } @l1_common;\n    return\
    \ @common;\n}", "    my @a = @$l1;\n    my @b = @$l2;\n    my @c = sort { $a <=>\
    \ $b } keys %a;\n    return sort { $c <=> $b } keys %c;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i;\n    my $j;", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @result;", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_set = set {$l1};\n    my $l2_set = set {$l2};\n    my\
    \ $common = [];\n    my $i = 0;\n    while ($i < $l1_len && $i < $l2_len) {\n\
    \        if ($l1[$i] == $l2[$i]) {\n            push @{$common}, $l1[$i];\n  \
    \          $i++;\n        } else if ($l1[$i] < $l2[$i]) {\n            push @{$l1_set},\
    \ $l1[$i];\n            $i++;\n        } else {\n            push @{$l2_set},\
    \ $l2[$i];\n            $i++;\n        }\n    }\n    return @{$common}\n}", " \
    \   my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n\
    \    my @l2_unique;\n    my @l1_unique_sorted;\n    my @l2_unique_sorted;\n  \
    \  my @l1_common_sorted;\n    my @l2_common_sorted;", "    my @l1 = @$l1;\n  \
    \  my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort { $l1 };\n\
    \    my @l2_unique = unique_sort { $l2 };\n    my @l1_common = common_sort { @l1_unique\
    \ };\n    my @l2_common = common_sort { @l2_unique };\n    my @common = common_sort\
    \ { @l1_common, @l2_common };\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}\n", "    my @l1 = @$l1;\n    my @l2 =\
    \ @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @l1\
    \ && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n      \
    \  } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n    \
    \        push @common, $l1[$i];\n            $i++;\n            $j++;\n      \
    \  }\n    }\n    return @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_sorted = sort { $a <=> $b } keys %{$l1};\n    my $l2_sorted\
    \ = sort { $a <=> $b } keys %{$l2};\n    my $l1_unique = unique { $a <=> $b }\
    \ keys %{$l1};\n    my $l2_unique = unique { $a <=> $b } keys %{$l2};\n    my\
    \ $l1_common = common { $l1_sorted, $l2_sorted };\n    my $l2_common = common\
    \ { $l2_sorted, $l1_sorted };\n    my $l1_common_len = @{$l1_common};\n    my\
    \ $l2_common_len = @{$l2_common};\n    my $l1_common_unique = unique { $a <=>\
    \ $b } keys %{$l1_common};\n    my $l2_common_unique = unique { $a <=> $b } keys\
    \ %{$l2_common};\n    return (\n        $l1_common_len,\n        $l2_common_len,\n\
    \        $l1_common_unique,\n        $l2_common_unique,\n        $l1_common,\n\
    \        $l2_common,\n    );\n}\n", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @ret = ();", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @count = 0;\n    my @l1_count = 0;\n    my @l2_count = 0;\n    foreach\
    \ my $e (@l1) {\n\tmy $i = 0;\n\tforeach my $e (@l2) {\n\t    if ($e eq $e) {\n\
    \t\t$count++;\n\t\t$l1_count++;\n\t\t$l2_count++;\n\t    }\n\t    $i++;\n\t}\n\
    \    }\n    if ($count eq 0) {\n\treturn ();\n    }\n    my @common = sort { $l1_count\
    \ <=> $l2_count } keys %l1;\n    return @common;\n}", "    my @a = @$l1;\n   \
    \ my @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @ret = ();", "    my @a = @$l1;\n    my\
    \ @b = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my $l1_len\
    \ = @{$l1};\n    my $l2_len = @{$l2};\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $ret = [];", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my\
    \ $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n \
    \           $j++;\n        } else {\n            push @common, $l1[$i];\n    \
    \        $i++;\n            $j++;\n        }\n    }\n    return @common;\n}\n",
  "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return ($l1_len - $l1_unique + $l2_len - $l2_unique +\n  \
    \          $l1_common - $l2_common);\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n\
    \    my $l2_pos = 0;\n    my $result = [];", "    my $l1_len = @{$l1};\n    my\
    \ $l2_len = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n   \
    \ my $l2_unique = sort { $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique,\
    \ $l2_unique);\n    my $l2_common = common($l2_unique, $l1_unique);\n    return\
    \ ($l1_common, $l2_common);\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n   \
    \ my @common;\n    my @l1_unique = unique_sort { $l1 };\n    my @l2_unique = unique_sort\
    \ { $l2 };\n    my @common_unique = unique_sort { $l1_unique, $l2_unique };\n\
    \    for (@common_unique) {\n        push @common, $_;\n    }\n    return @common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i;\n   \
    \ my $j;\n    my $k;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @l1_u = sort { $l1[$_] <=> $l2[$_] } @l1;\n    my @l2_u = sort { $l1[$_]\
    \ <=> $l2[$_] } @l2;\n    my @common_u = common(@l1_u, @l2_u);\n    return @common_u;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique(@l1);\n    my\
    \ @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique, @l2_unique);\n\
    \    @common = @common_unique;\n    return @common;\n}", "    my $l1_len = @{$l1};\n\
    \    my $l2_len = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n\
    \    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n    my $l1_common = common($l1_unique,\
    \ $l2_unique);\n    my $l2_common = common($l2_unique, $l1_unique);\n    return\
    \ (sort { $a <=> $b } $l1_common) + $l2_common;\n}", "    my @l1 = @$l1;\n   \
    \ my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len\
    \ = @{$l2};\n    my $l1_unique = sort { $a <=> $b } keys %{$l1};\n    my $l2_unique\
    \ = sort { $a <=> $b } keys %{$l2};\n    my $common = [];\n    foreach my $i (@$l1_unique)\
    \ {\n        if (exists $l2_unique { $l1_unique{$i} == $l2_unique{$i} }) {\n \
    \           $common .= $l1_unique{$i};\n        }\n    }\n    return $common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique\
    \ = unique(@l1);\n    my @l2_unique = unique(@l2);\n    my @common_unique = unique(@l1_unique,\
    \ @l2_unique);\n    @common = @common_unique;\n    return @common;\n}", "    my\
    \ @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @sorted_l1 = sort {\
    \ $l1[$_] <=> $l2[$_] } @l1;\n    my @sorted_l2 = sort { $l1[$_] <=> $l2[$_] }\
    \ @l2;\n    my @sorted_common = sort { $l1[$_] <=> $l2[$_] } @common;\n    my\
    \ @sorted_l1_unique = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_l1 } @sorted_l1;\n\
    \    my @sorted_l2_unique = unique { sort { $l1[$_] <=> $l2[$_] } @sorted_l2 }\
    \ @sorted_l2;\n    my @sorted_common_unique = unique { sort { $l1[$_] <=> $l2[$_]\
    \ } @sorted_common } @sorted_common;\n    return @sorted_common_unique;\n}", " \
    \   my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}\n", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}\n", "    my $l1_len = @{$l1};\n    my\
    \ $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n    my $l2_unique\
    \ = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique, $l2_unique);\n\
    \    return sort { $l1_len <=> $l2_len } $l1_common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n\
    \    my @common_unique;\n    my @l1_unique_unique;\n    my @l2_unique_unique;\n\
    \    my @common_unique_unique;\n    my @l1_unique_unique_unique;\n    my @l2_unique_unique_unique;\n\
    \    my @common_unique_unique_unique;", "    my @a = @$l1;\n    my @b = @$l2;\n\
    \    my @c = common(@a, @b);\n    return @c;\n}", "    my $l1_len = @{$l1};\n\
    \    my $l2_len = @{$l2};\n    my $l1_unique = array_unique($l1);\n    my $l2_unique\
    \ = array_unique($l2);\n    my $l1_common = array_intersect($l1_unique, $l2_unique);\n\
    \    return $l1_common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    while($i < @l1) {\n        my $j = 0;\n        while($j < @l2) {\n      \
    \      if($l1[$i] eq $l2[$j]) {\n                push @common, $l1[$i];\n    \
    \            $j++;\n            }\n        }\n        $i++;\n    }\n    return\
    \ @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_set\
    \ = set {$l1};\n    my $l2_set = set {$l2};\n    my $common = [];\n    my $i =\
    \ 0;\n    while($i < $l1_len) {\n        if(!$l1_set->has($l1[$i])) {\n      \
    \      $i++;\n            continue;\n        }\n        my $j = 0;\n        while($j\
    \ < $l2_len) {\n            if(!$l2_set->has($l2[$j])) {\n                $j++;\n\
    \                continue;\n            }\n            if($l1[$i] == $l2[$j])\
    \ {\n                $common->push($l1[$i]);\n                $l1_set->delete($l1[$i]);\n\
    \                $l2_set->delete($l2[$j]);\n                $j++;\n          \
    \      continue;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return $common;\n}", "    my @a = @$l1;\n    my @b = @$l2;\n    my\
    \ @c = ();\n    my $i = 0;\n    foreach my $e (@a) {\n        my $j = 0;\n   \
    \     foreach my $e2 (@b) {\n            if ($e eq $e2) {\n                $c{$e}\
    \ = 1;\n                $i++;\n                break;\n            }\n       \
    \     $j++;\n        }\n    }\n    return sort { $c{$a[$i]} <=> $c{$b[$j]} } @c;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique = unique(@l1);\n    my @l2_unique = unique(@l2);\n\
    \    my @common_unique = unique(@l1_unique, @l2_unique);\n    my @common_unique_sorted\
    \ = sort(@common_unique);\n    return @common_unique_sorted;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n\
    \    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n      \
    \      $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n   \
    \     } else {\n            push @common, $l1[$i];\n            $i++;\n      \
    \      $j++;\n        }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my @l1_unique;\n    my @l2_unique;\n\
    \    my @l1_common;\n    my @l2_common;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_unique_uniq;\n\
    \    my @l2_unique_uniq;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }\n", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j])\
    \ {\n            $i++;\n        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1[$i];\n            $i++;\n   \
    \         $j++;\n        }\n    }\n    return @common;\n}", "    my $l1_len =\
    \ @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_pos = 0;\n    my $l2_pos = 0;\n\
    \    my $l1_last = 0;\n    my $l2_last = 0;\n    my $l1_common = [];\n    my $l2_common\
    \ = [];\n    while($l1_len > 0 && $l2_len > 0) {\n        if($l1[$l1_pos] < $l2[$l2_pos])\
    \ {\n            $l1_pos++;\n            $l1_len--;\n            $l1_last = $l1_pos;\n\
    \        } else if($l1[$l1_pos] > $l2[$l2_pos]) {\n            $l2_pos++;\n  \
    \          $l2_len--;\n            $l2_last = $l2_pos;\n        } else {\n   \
    \         $l1_pos++;\n            $l2_pos++;\n            $l1_len--;\n       \
    \     $l2_len--;\n            $l1_last = $l1_pos;\n            $l2_last = $l2_pos;\n\
    \            $l1_common.push($l1[$l1_pos]);\n            $l2_common.push($l2[$l2_pos]);\n\
    \        }\n    }\n    return $l1_common;\n}\n", "    my @a = @$l1;\n    my @b\
    \ = @$l2;\n    my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n\
    \    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n    while\
    \ ($i < @l1 && $j < @l2) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else if ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n\
    \            push @common, $l1[$i];\n            $i++;\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n\
    \    my @common;\n    my @l1_unique = unique(@l1);\n    my @l2_unique = unique(@l2);\n\
    \    my @common_unique = unique(@l1_unique, @l2_unique);\n    my @common_unique_sorted\
    \ = sort(@common_unique);\n    return @common_unique_sorted;\n}", "    my @l1\
    \ = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i;\n    for $i = 0; $i\
    \ < min($@l1, @l2); $i++ {\n        if ($l1[$i] ne $l2[$i]) {\n            return\
    \ 0;\n        }\n    }\n    my @common = sort { $l1[$i] <=> $l2[$i] } @l1;\n \
    \   return @common;\n}", "    my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n\
    \    my $l1_sorted = sort { $a <=> $b } @$l1;\n    my $l2_sorted = sort { $a <=>\
    \ $b } @$l2;\n    my $l1_unique = unique { $a } @$l1_sorted;\n    my $l2_unique\
    \ = unique { $a } @$l2_sorted;\n    my $l1_common = common { $l1_unique, $l2_unique\
    \ };\n    return $l1_common;\n}", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n  \
    \  my @common;\n    my @l1_unique;\n    my @l2_unique;\n    my @l1_unique_sorted;\n\
    \    my @l2_unique_sorted;\n    my @l1_common_sorted;\n    my @l2_common_sorted;",
  "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my @l1_unique = unique_sort\
    \ { $l1 };\n    my @l2_unique = unique_sort { $l2 };\n    my @l1_common = intersect\
    \ { @l1_unique, @l2_unique };\n    my @l2_common = intersect { @l2_unique, @l1_unique\
    \ };\n    my @common = unique_sort { @l1_common, @l2_common };\n    return @common;\n\
    }", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n    my $i = 0;\n\
    \    while ($i < @l1) {\n        my $j = 0;\n        while ($j < @l2) {\n    \
    \        if ($l1[$i] eq $l2[$j]) {\n                push @common, $l1[$i];\n \
    \               $j++;\n            }\n            else {\n                $j++;\n\
    \            }\n        }\n        $i++;\n    }\n    return @common;\n}", "  \
    \  my $l1_len = @{$l1};\n    my $l2_len = @{$l2};\n    my $l1_unique = sort {\
    \ $a <=> $b } keys %{$l1};\n    my $l2_unique = sort { $a <=> $b } keys %{$l2};\n\
    \    my $l1_common = common($l1_unique, $l2_unique);\n    my $l2_common = common($l2_unique,\
    \ $l1_unique);\n    return ($l1_len + $l2_len - $l1_len - $l2_len +\n        \
    \    $l1_common + $l2_common);\n}", "    my @a = @$l1;\n    my @b = @$l2;\n  \
    \  my @c = common(@a, @b);\n    return @c;\n}", "    my @l1 = @$l1;\n    my @l2\
    \ = @$l2;\n    my @result;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n\
    \    my @count;", "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @common;\n \
    \   my $i = 0;\n    my $j = 0;\n    while ($i < @l1 && $j < @l2) {\n        if\
    \ ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] > $l2[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
