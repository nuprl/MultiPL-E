{
  "name": "HumanEval_93_encode",
  "language": "pl",
  "prompt": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp8ls0kp2q.pl line 56, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 56, near \"use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp8ls0kp2q.pl line 83, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 83, at EOF\nExecution of /tmp/tmp8ls0kp2q.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    for ($i = 0; $i < length($message); $i++) {\n        if ($message[$i] == \" \") {\n            $encoded .= \" \";\n        } else {\n            $encoded .= $message[$i];\n            if ($vowels .= $message[$i]) {\n                $encoded .= $vowels_2[2];\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = \"aeiouAEIOU\";\n    my @vowels_2 = \"AEIOU\";\n    my @swapped = \"\";\n    my @encoded = \"\";\n    foreach my $letter (@$message) {\n        if (index($vowels, $letter) >= 0) {\n            $letter = $vowels_2[index($vowels, $letter)];\n        }\n        $swapped = $swapped . $letter;\n        $encoded = $encoded . $letter;\n    }\n    $encoded = $swapped . $encoded;\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[AEIOU]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..$message->length-1) {\n        $encoded .= $message->substr($i, 1)->upcase;\n        $encoded .= $message->substr($i, 2)->downcase;\n    }\n    $encoded .= $message->substr($message->length-1, 1)->downcase;\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Can't locate object method \"length\" via package \"TEST\" (perhaps you forgot to load \"TEST\"?) at /tmp/tmpfu3llhty.pl line 14.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..255) {\n        $encoded .= $message->{$message->{$i}};\n        $encoded .= $message->{$message->{$i+2}};\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for $i (0..length($message)) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/ $message[$i+2]/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    foreach my $c (@$message) {\n        $encoded .= $c;\n        $encoded =~ s/[aeiou]/ $c.swapcase() /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_rev = @vowels;\n    reverse @vowels_rev;\n    my @encoded = ();\n    foreach my $c (@message) {\n        if ($c =~ /[aeiou]/) {\n            my $vowel = $c;\n            my $vowel_rev = $vowel;\n            reverse @vowels_rev;\n            my $encoded_c = $vowel_rev[2];\n        } else {\n            my $encoded_c = $c;\n        }\n        $encoded_c =~ s/[aeiou]/ $vowels_rev[2]/g;\n        $encoded_c =~ s/a/ $vowels_rev[0]/g;\n        $encoded_c =~ s/e/ $vowels_rev[1]/g;\n        $encoded_c =~ s/i/ $vowels_rev[3]/g;\n        $encoded_c =~ s/o/ $vowels_rev[4]/g;\n        $encoded_c =~ s/u/ $vowels_rev[5]/g;\n        $encoded_c =~ s/A/ $vowels_rev[0]/g;\n        $encoded_c =~ s/E/ $vowels_rev[1]/g;\n        $encoded_c =~ s/I/ $vowels_rev[3]/g;\n        $encoded_c =~ s/O/ $vowels_rev[4]/g;\n        $encoded_c =~ s/U/ $vowels_rev[5]/g;\n        $encoded_c =~ s/0/ $vowels_rev[0]/g;\n        $encoded_c =~ s/1/ $vowels_rev[1]/g;\n        $encoded_c =~ s/2/ $vowels_rev[2]/g;\n        $encoded_c\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpdd3p6goy.pl line 41, at end of line\nsyntax error at /tmp/tmpdd3p6goy.pl line 41, near \"$encoded_c\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpdd3p6goy.pl line 68, at end of line\nsyntax error at /tmp/tmpdd3p6goy.pl line 68, at EOF\nExecution of /tmp/tmpdd3p6goy.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr($vowels->index($c), 2) . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        if ($char == \"A\" || $char == \"E\" || $char == \"I\" || $char == \"O\" || $char == \"U\") {\n            $encoded .= $char;\n            $encoded .= $char;\n        } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[a-z]/ $message =~ s/[aeiou]/ $message =~ s/a/ $message =~ s/e/ $message =~ s/i/ $message =~ s/o/ $message =~ s/u/ $message =~ s/y/ $message =~ s/A/ $message =~ s/E/ $message =~ s/I/ $message =~ s/O/ $message =~ s/U/ $message =~ s/Y/ $message =~ s/a/ $message =~ s/e/ $message =~ s/i/ $message =~ s/o/ $message =~ s/u/ $message =~ s/y/ $message =~ s/A/ $message =~ s/E/ $message =~ s/I/ $message =~ s/O/ $message =~ s/U/ $message =~ s/Y/ $message =~ s/a/ $message =~ s/e/ $message =~ s/i/ $message =~ s/o/ $message =~ s/u/ $message =~ s/y/ $message =~ s/A/ $message =~ s/E/ $message =~ s/I/ $message =~ s/O/ $message =~ s/U/ $message =~ s/Y/ $message =~ s/a/ $message =~ s/e/ $message =~ s/i/ $message =~ s/o/ $message =~ s/u/ $message =~ s/y/ $message =~ s/A/ $message =~ s/E/ $message =~ s/I/ $message =~ s/O/ $message =~ s/U/ $message =~ s/Y/ $message =~ s/a/ $message =~ s/e/ $message =~ s/i/ $message =~ s/o/ $message =~ s/u/ $message =~ s/y/ $message =~ s/A/ $message =~ s/E/ $message =~ s/I/ $message =~\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpy3iiafe2.pl line 16, near \"s/[a-z]/ $message =~ s/[\"\nUnknown regexp modifier \"/y\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/A\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/E\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/I\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/O\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/U\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/Y\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/e\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\nUnknown regexp modifier \"/y\" at /tmp/tmpy3iiafe2.pl line 16, at end of line\n/tmp/tmpy3iiafe2.pl has too many errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"A\" || $message[$i] == \"E\" || $message[$i] == \"I\" || $message[$i] == \"O\" || $message[$i] == \"U\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[a-z]/[A-Z]/g;\n        $encoded =~ s/[A-Z]/[a-z]/g;\n        $encoded =~ s/[0-9]/[0-9]/g;\n        $encoded =~ s/[^a-zA-Z0-9]/[^a-zA-Z0-9]/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= substr($message, $i, 1).uc($message, $i).uc($message, $i+2);\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Too many arguments for uc at /tmp/tmp3c0iw28i.pl line 15, near \"$i)\"\nToo many arguments for uc at /tmp/tmp3c0iw28i.pl line 15, near \"2)\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmp3c0iw28i.pl line 19.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for $char in $message {\n        $encoded .= $char;\n        if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\" || $char == \"u\") {\n            $encoded .= $char;\n            $encoded .= $char;\n        } else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpwfy8zr5t.pl line 14, near \"$char in\"\n\t(Missing operator before in?)\nsyntax error at /tmp/tmpwfy8zr5t.pl line 14, near \"$char in \"\nsyntax error at /tmp/tmpwfy8zr5t.pl line 24, near \"}\"\nExecution of /tmp/tmpwfy8zr5t.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        $encoded =~ s/[AEIOU]/ $char.swapcase() /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpuxc08mj0.pl line 56, at end of line\nsyntax error at /tmp/tmpuxc08mj0.pl line 56, near \"use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpuxc08mj0.pl line 83, at end of line\nsyntax error at /tmp/tmpuxc08mj0.pl line 83, at EOF\nExecution of /tmp/tmpuxc08mj0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..$message->length) {\n        $encoded .= $message->substr($i, 1)->downcase;\n        if ($message->substr($i, 1)->is_vowel) {\n            $encoded .= $message->substr($i+2, 1)->downcase;\n        } else {\n            $encoded .= $message->substr($i, 1)->downcase;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Can't locate object method \"length\" via package \"TEST\" (perhaps you forgot to load \"TEST\"?) at /tmp/tmpipyd5q5i.pl line 14.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_pos = $vowels . $vowels;\n    my $vowels_pos_pos = $vowels_pos . $vowels_pos;\n    my $vowels_pos_pos_pos = $vowels_pos_pos . $vowels_pos_pos;\n    my $vowels_pos_pos_pos_pos = $vowels_pos_pos_pos . $vowels_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos . $vowels_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos_pos . $vowels_pos_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos_pos_pos . $vowels_pos_pos_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos_pos_pos_pos . $vowels_pos_pos_pos_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos_pos_pos_pos_pos_pos . $vowels_pos_pos_pos_pos_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = $vowels_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos . $vowels_pos_pos_pos_pos_pos_pos_pos_pos_pos;\n    my $vowels_pos_pos_pos_pos_pos\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp2g3km8e4.pl line 26, at end of line\nsyntax error at /tmp/tmp2g3km8e4.pl line 26, near \"$vowels_pos_pos_pos_pos_pos\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp2g3km8e4.pl line 53, at end of line\nsyntax error at /tmp/tmp2g3km8e4.pl line 53, at EOF\nExecution of /tmp/tmp2g3km8e4.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"a\" || $message[$i] == \"e\" || $message[$i] == \"i\" || $message[$i] == \"o\" || $message[$i] == \"u\") {\n            $encoded .= $message[$i + 2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowel_count = 0;\n    my $vowel_index = 0;\n    my $vowel_index_2 = 0;\n    my $vowel_index_3 = 0;\n    my $vowel_index_4 = 0;\n    my $vowel_index_5 = 0;\n    my $vowel_index_6 = 0;\n    my $vowel_index_7 = 0;\n    my $vowel_index_8 = 0;\n    my $vowel_index_9 = 0;\n    my $vowel_index_10 = 0;\n    my $vowel_index_11 = 0;\n    my $vowel_index_12 = 0;\n    my $vowel_index_13 = 0;\n    my $vowel_index_14 = 0;\n    my $vowel_index_15 = 0;\n    my $vowel_index_16 = 0;\n    my $vowel_index_17 = 0;\n    my $vowel_index_18 = 0;\n    my $vowel_index_19 = 0;\n    my $vowel_index_20 = 0;\n    my $vowel_index_21 = 0;\n    my $vowel_index_22 = 0;\n    my $vowel_index_23 = 0;\n    my $vowel_index_24 = 0;\n    my $vowel_index_25 = 0;\n    my $vowel_index_26 = 0;\n    my $vowel_index_27 = 0;\n    my $vowel_index_28 = 0;\n    my $vowel_index_29 = 0;\n    my $vowel_index_30 = 0;\n    my $vowel_index_31 = 0;\n    my $vowel_index_32 = 0;\n    my $vowel_index_33 = 0;\n    my $vowel_index_34 = 0;\n    my $v\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp59zu20j9.pl line 51, at end of line\nsyntax error at /tmp/tmp59zu20j9.pl line 51, near \"$v\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp59zu20j9.pl line 78, at end of line\nsyntax error at /tmp/tmp59zu20j9.pl line 78, at EOF\nExecution of /tmp/tmp59zu20j9.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_2 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_3 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_4 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_5 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_6 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_7 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_8 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_9 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_10 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_11 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_12 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_13 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_14 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_15 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_16 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_17 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_18 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_19 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_20 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_21 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_22 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_23 = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_24 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_25 = (\"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp8mfbmkr7.pl line 43, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 37)\nString found where operator expected at /tmp/tmp8mfbmkr7.pl line 43, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp8mfbmkr7.pl line 43, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp8mfbmkr7.pl line 43, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp8mfbmkr7.pl line 44, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 43)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp8mfbmkr7.pl line 44, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp8mfbmkr7.pl line 44, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp8mfbmkr7.pl line 44, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $message =~ s/[aeiou]/ $& 2;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmpka_4p8ux.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"A\" || $message[$i] == \"E\" || $message[$i] == \"I\" || $message[$i] == \"O\" || $message[$i] == \"U\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        $encoded =~ s/[AEIOU]/ $char;\n        $encoded =~ s/[a-z]/ $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp1vt9b70g.pl line 17, near \"$encoded =~ s/[\"\n  (Might be a runaway multi-line // string starting on line 16)\nBEGIN not safe after errors--compilation aborted at /tmp/tmp1vt9b70g.pl line 21.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"A\" || $message[$i] == \"E\" || $message[$i] == \"I\" || $message[$i] == \"O\" || $message[$i] == \"U\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = \"aeiouAEIOU\";\n    my @vowels_rev = \"AEIOUaeiouAEIOU\";\n    my @encoded = \"\";\n    foreach my $c (@message) {\n        if (ord($c) >= 65 and ord($c) <= 90) {\n            if ($c =~ /^[aeiouAEIOU]$/) {\n                $encoded .= $vowels_rev[2 * ord($c) - 65];\n            } else {\n                $encoded .= $c;\n            }\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/ $message[$i + 2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr($vowels->index($c), 2) . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp81sd45zt.pl line 43, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 43, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp81sd45zt.pl line 70, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 70, at EOF\nExecution of /tmp/tmp81sd45zt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZV\";\n    my $vowels_7 = \"AEIOUYXZVX\";\n    my $vowels_8 = \"AEIOUYXZVXC\";\n    my $vowels_9 = \"AEIOUYXZVXCD\";\n    my $vowels_10 = \"AEIOUYXZVXCDG\";\n    my $vowels_11 = \"AEIOUYXZVXCDGX\";\n    my $vowels_12 = \"AEIOUYXZVXCDGXD\";\n    my $vowels_13 = \"AEIOUYXZVXCDGXDZ\";\n    my $vowels_14 = \"AEIOUYXZVXCDGXDZV\";\n    my $vowels_15 = \"AEIOUYXZVXCDGXDZVX\";\n    my $vowels_16 = \"AEIOUYXZVXCDGXDZVXC\";\n    my $vowels_17 = \"AEIOUYXZVXCDGXDZVXCD\";\n    my $vowels_18 = \"AEIOUYXZVXCDGXDZVXCDG\";\n    my $vowels_19 = \"AEIOUYXZVXCDGXDZVXCDGX\";\n    my $vowels_20 = \"AEIOUYXZVXCDGXDZVXCDGXD\";\n    my $vowels_21 = \"AEIOUYXZVXCDGXDZVXCDGXDZ\";\n    my $vowels_22 = \"AEIOUYXZVX\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 35)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 41)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    $encoded .= $message[length($message)];\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"a\" || $message[$i] == \"e\" || $message[$i] == \"i\" || $message[$i] == \"o\" || $message[$i] == \"u\") {\n            $encoded .= $message[$i + 2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZV\";\n    my $vowels_7 = \"AEIOUYXZVX\";\n    my $vowels_8 = \"AEIOUYXZVXC\";\n    my $vowels_9 = \"AEIOUYXZVXCD\";\n    my $vowels_10 = \"AEIOUYXZVXCDG\";\n    my $vowels_11 = \"AEIOUYXZVXCDGX\";\n    my $vowels_12 = \"AEIOUYXZVXCDGXD\";\n    my $vowels_13 = \"AEIOUYXZVXCDGXDZ\";\n    my $vowels_14 = \"AEIOUYXZVXCDGXDZV\";\n    my $vowels_15 = \"AEIOUYXZVXCDGXDZVX\";\n    my $vowels_16 = \"AEIOUYXZVXCDGXDZVXC\";\n    my $vowels_17 = \"AEIOUYXZVXCDGXDZVXCD\";\n    my $vowels_18 = \"AEIOUYXZVXCDGXDZVXCDG\";\n    my $vowels_19 = \"AEIOUYXZVXCDGXDZVXCDGX\";\n    my $vowels_20 = \"AEIOUYXZVXCDGXDZVXCDGXD\";\n    my $vowels_21 = \"AEIOUYXZVXCDGXDZVXCDGXDZ\";\n    my $vowels_22 = \"AEIOUYXZVX\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 35)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 41)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_pos = \"aeiou\";\n    my $vowels_pos_2 = \"aeiou\";\n    my $vowels_pos_3 = \"aeiou\";\n    my $vowels_pos_4 = \"aeiou\";\n    my $vowels_pos_5 = \"aeiou\";\n    my $vowels_pos_6 = \"aeiou\";\n    my $vowels_pos_7 = \"aeiou\";\n    my $vowels_pos_8 = \"aeiou\";\n    my $vowels_pos_9 = \"aeiou\";\n    my $vowels_pos_10 = \"aeiou\";\n    my $vowels_pos_11 = \"aeiou\";\n    my $vowels_pos_12 = \"aeiou\";\n    my $vowels_pos_13 = \"aeiou\";\n    my $vowels_pos_14 = \"aeiou\";\n    my $vowels_pos_15 = \"aeiou\";\n    my $vowels_pos_16 = \"aeiou\";\n    my $vowels_pos_17 = \"aeiou\";\n    my $vowels_pos_18 = \"aeiou\";\n    my $vowels_pos_19 = \"aeiou\";\n    my $vowels_pos_20 = \"aeiou\";\n    my $vowels_pos_21 = \"aeiou\";\n    my $vowels_pos_22 = \"aeiou\";\n    my $vowels_pos_23 = \"aeiou\";\n    my $vowels_pos_24 = \"aeiou\";\n    my $vowels_pos_25 = \"aeiou\";\n    my $vowels_pos_26 = \"aeiou\";\n    my $vowels_pos_27 = \"aeiou\";\n    my $vowels_pos_28 = \"aeiou\";\n    my $vowels_pos_29 = \"aeiou\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmp9_x4ee07.pl line 71, at end of line\nsyntax error at /tmp/tmp9_x4ee07.pl line 71, at EOF\nExecution of /tmp/tmp9_x4ee07.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowel_pos = $vowels.index(\"a\");\n    my $vowel_pos2 = $vowels.index(\"e\");\n    my $vowel_pos3 = $vowels.index(\"i\");\n    my $vowel_pos4 = $vowels.index(\"o\");\n    my $vowel_pos5 = $vowels.index(\"u\");\n    for ($i = 0; $i < length($message); $i++) {\n        if ($message[$i] == \" \") {\n            $encoded .= \" \";\n        } else {\n            $encoded .= $message[$i];\n            if ($message[$i] == $vowels[$vowel_pos]) {\n                $encoded .= $message[$i+$vowel_pos2];\n            } else if ($message[$i] == $vowels[$vowel_pos3]) {\n                $encoded .= $message[$i+$vowel_pos4];\n            } else if ($message[$i] == $vowels[$vowel_pos4]) {\n                $encoded .= $message[$i+$vowel_pos5];\n            } else if ($message[$i] == $vowels[$vowel_pos5]) {\n                $encoded .= $message[$i+$vowel_pos3];\n            } else if ($message[$i] == $vowels[$vowel_pos2]) {\n                $encoded .= $message[$i+$vowel_pos];\n            } else {\n                $encoded .= $message[$i];\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Not enough arguments for index at /tmp/tmpnkqu60y3.pl line 15, near \"\"a\")\"\nNot enough arguments for index at /tmp/tmpnkqu60y3.pl line 16, near \"\"e\")\"\nNot enough arguments for index at /tmp/tmpnkqu60y3.pl line 17, near \"\"i\")\"\nNot enough arguments for index at /tmp/tmpnkqu60y3.pl line 18, near \"\"o\")\"\nNot enough arguments for index at /tmp/tmpnkqu60y3.pl line 19, near \"\"u\")\"\nsyntax error at /tmp/tmpnkqu60y3.pl line 27, near \"else if\"\nsyntax error at /tmp/tmpnkqu60y3.pl line 29, near \"} else\"\nsyntax error at /tmp/tmpnkqu60y3.pl line 31, near \"} else\"\nsyntax error at /tmp/tmpnkqu60y3.pl line 33, near \"} else\"\nExecution of /tmp/tmpnkqu60y3.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"A\" || $message[$i] == \"E\" || $message[$i] == \"I\" || $message[$i] == \"O\" || $message[$i] == \"U\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[AEIOU]/ $message[2]/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/2[$&]/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_regex = \"a|e|i|o|u\";\n    my $vowels_count = 0;\n    my $vowels_pos = \"\";\n    my $vowels_pos_regex = \"\";\n    my $vowels_pos_count = 0;\n    my $vowels_pos_pos = \"\";\n    my $vowels_pos_pos_regex = \"\";\n    my $vowels_pos_pos_count = 0;\n    my $vowels_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_regex = \"\";\n    my $vowels_pos_pos_pos_count = 0;\n    my $vowels_pos_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_pos_regex = \"\";\n    my $vowels_pos_pos_pos_pos_count = 0;\n    my $vowels_pos_pos_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_pos_pos_regex = \"\";\n    my $vowels_pos_pos_pos_pos_pos_count = 0;\n    my $vowels_pos_pos_pos_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_pos_pos_pos_regex = \"\";\n    my $vowels_pos_pos_pos_pos_pos_pos_count = 0;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_regex = \"\";\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_count = 0;\n    my $vowels_pos_pos_pos_pos_pos_pos_pos_pos = \"\";\n    my $vowels_pos_pos_pos_pos_pos_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp62vw3ucw.pl line 40, at end of line\nsyntax error at /tmp/tmp62vw3ucw.pl line 40, near \"$vowels_pos_pos_pos_pos_pos_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp62vw3ucw.pl line 67, at end of line\nsyntax error at /tmp/tmp62vw3ucw.pl line 67, at EOF\nExecution of /tmp/tmp62vw3ucw.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n        $encoded .= $message[$i+1];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp8ls0kp2q.pl line 56, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 56, near \"use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp8ls0kp2q.pl line 83, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 83, at EOF\nExecution of /tmp/tmp8ls0kp2q.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr($vowels->index($c) + 2, 1);\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_regex = \"a|e|i|o|u\";\n    my $vowels_regex_sub = \"A|E|I|O|U\";\n    my $vowels_regex_sub_len = 6;\n    my $vowels_regex_sub_count = 0;\n    my $vowels_regex_sub_index = 0;\n    my $vowels_regex_sub_index_len = 0;\n    my $vowels_regex_sub_index_count = 0;\n    my $vowels_regex_sub_index_count_len = 0;\n    my $vowels_regex_sub_index_count_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_count_len_len_len_len_len_len_len_len_len_len_len = 0;\n    my $vowels_regex_sub_index_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp1lulrrmt.pl line 34, at end of line\nsyntax error at /tmp/tmp1lulrrmt.pl line 34, near \"$vowels_regex_sub_index_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp1lulrrmt.pl line 61, at end of line\nsyntax error at /tmp/tmp1lulrrmt.pl line 61, at EOF\nExecution of /tmp/tmp1lulrrmt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for $i (0..length($message)) {\n        $encoded .= substr($message, $i, 1) . chr(ord(substr($message, $i, 1)) + 2);\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $c (0..255) {\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message{$c} ne \" \";\n        $encoded .= $c if $message\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp9faleo_0.pl line 40, at end of line\nsyntax error at /tmp/tmp9faleo_0.pl line 40, near \"$message\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp9faleo_0.pl line 67, at end of line\nsyntax error at /tmp/tmp9faleo_0.pl line 67, at EOF\nExecution of /tmp/tmp9faleo_0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c;\n            $encoded .= $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/ $message[$i + 2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    $encoded .= $message[length($message)];\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = \"aeiouAEIOU\";\n    my @vowels_2 = \"AEIOU\";\n    my @swapped = \"\";\n    my @encoded = \"\";\n    foreach my $letter (@message) {\n        if (ord($letter) >= 65 && ord($letter) <= 90) {\n            $letter = chr(ord($letter) + 32);\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \";\n        }\n        if ($letter == \" \") {\n            $letter = \" \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpnw2wk50s.pl line 80, at end of line\nsyntax error at /tmp/tmpnw2wk50s.pl line 80, near \"use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpnw2wk50s.pl line 107, at end of line\nsyntax error at /tmp/tmpnw2wk50s.pl line 107, at EOF\nExecution of /tmp/tmpnw2wk50s.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    for my $c (0..255) {\n        if ($message eq \"\") {\n            $encoded .= $c;\n            continue;\n        }\n        if ($message eq $c) {\n            $encoded .= $c;\n            continue;\n        }\n        if ($message eq $vowels) {\n            $encoded .= $vowels_2[2];\n            continue;\n        }\n        $encoded .= $c;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/ $message[$i + 2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[AEIOU]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {};\n    my $vowel_pos = {\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp8ls0kp2q.pl line 56, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 56, near \"use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp8ls0kp2q.pl line 83, at end of line\nsyntax error at /tmp/tmp8ls0kp2q.pl line 83, at EOF\nExecution of /tmp/tmp8ls0kp2q.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp81sd45zt.pl line 43, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 43, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp81sd45zt.pl line 70, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 70, at EOF\nExecution of /tmp/tmp81sd45zt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUY\";\n    my $vowels_5 = \"AEIOUY\";\n    my $vowels_6 = \"AEIOUY\";\n    my $vowels_7 = \"AEIOUY\";\n    my $vowels_8 = \"AEIOUY\";\n    my $vowels_9 = \"AEIOUY\";\n    my $vowels_10 = \"AEIOUY\";\n    my $vowels_11 = \"AEIOUY\";\n    my $vowels_12 = \"AEIOUY\";\n    my $vowels_13 = \"AEIOUY\";\n    my $vowels_14 = \"AEIOUY\";\n    my $vowels_15 = \"AEIOUY\";\n    my $vowels_16 = \"AEIOUY\";\n    my $vowels_17 = \"AEIOUY\";\n    my $vowels_18 = \"AEIOUY\";\n    my $vowels_19 = \"AEIOUY\";\n    my $vowels_20 = \"AEIOUY\";\n    my $vowels_21 = \"AEIOUY\";\n    my $vowels_22 = \"AEIOUY\";\n    my $vowels_23 = \"AEIOUY\";\n    my $vowels_24 = \"AEIOUY\";\n    my $vowels_25 = \"AEIOUY\";\n    my $vowels_26 = \"AEIOUY\";\n    my $vowels_27 = \"AEIOUY\";\n    my $vowels_28 = \"AEIOUY\";\n    my $vowels_29 = \"AEIOUY\";\n    my $vowels_30 = \"AEIOUY\";\n    my $vowels_31 = \"AEIOUY\";\n    my $vowels_32 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 45)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 51)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZV\";\n    my $vowels_6 = \"AEIOUYXZVX\";\n    my $vowels_7 = \"AEIOUYXZVXC\";\n    my $vowels_8 = \"AEIOUYXZVXCD\";\n    my $vowels_9 = \"AEIOUYXZVXCDG\";\n    my $vowels_10 = \"AEIOUYXZVXCDGX\";\n    my $vowels_11 = \"AEIOUYXZVXCDGXH\";\n    my $vowels_12 = \"AEIOUYXZVXCDGXHZ\";\n    my $vowels_13 = \"AEIOUYXZVXCDGXHZV\";\n    my $vowels_14 = \"AEIOUYXZVXCDGXHZVX\";\n    my $vowels_15 = \"AEIOUYXZVXCDGXHZVXC\";\n    my $vowels_16 = \"AEIOUYXZVXCDGXHZVXCD\";\n    my $vowels_17 = \"AEIOUYXZVXCDGXHZVXCDG\";\n    my $vowels_18 = \"AEIOUYXZVXCDGXHZVXCDGX\";\n    my $vowels_19 = \"AEIOUYXZVXCDGXHZVXCDGXH\";\n    my $vowels_20 = \"AEIOUYXZVXCDGXHZVXCDGXHZ\";\n    my $vowels_21 = \"AEIOUYXZVXCDGXHZVXCDGXHZV\";\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmprl1zqtvt.pl line 63, at end of line\nsyntax error at /tmp/tmprl1zqtvt.pl line 63, at EOF\nExecution of /tmp/tmprl1zqtvt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr($vowels->index($c), 2) . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp81sd45zt.pl line 43, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 43, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp81sd45zt.pl line 70, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 70, at EOF\nExecution of /tmp/tmp81sd45zt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (split / /, $message) {\n        if ($c eq \" \") {\n            $encoded .= \" \";\n        } else {\n            if ($vowels->index($c) >= 0) {\n                $encoded .= $vowels_2->slice(0, 2)->{$c};\n            } else {\n                $encoded .= $c;\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Can't locate object method \"index\" via package \"aeiou\" (perhaps you forgot to load \"aeiou\"?) at /tmp/tmpu2v8bavq.pl line 20.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_rev = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_pos = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @vowels_pos_rev = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @message_rev = @message;\n    my @message_pos = @message;\n    my @message_pos_rev = @message_rev;\n    my @message_swapped = @message_pos;\n    my @message_swapped_rev = @message_pos_rev;\n    my @message_swapped_pos = @message_pos_rev;\n    my @message_swapped_pos_rev = @message_pos;\n    my @message_swapped_pos_rev_rev = @message_pos_rev;\n    my @message_swapped_pos_rev_rev_rev = @message_pos_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev = @message_pos_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev = @message_pos_rev_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev_rev = @message_pos_rev_rev_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev_rev_rev = @message_pos_rev_rev_rev_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev_rev_rev_rev = @message_pos_rev_rev_rev_rev_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev_rev_rev_rev_rev = @message_pos_rev_rev_rev_rev_rev_rev_rev_rev;\n    my @message_swapped_pos_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = @message_pos_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmptqiwvipv.pl line 33, at end of line\nsyntax error at /tmp/tmptqiwvipv.pl line 33, near \"@message_pos_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmptqiwvipv.pl line 60, at end of line\nsyntax error at /tmp/tmptqiwvipv.pl line 60, at EOF\nExecution of /tmp/tmptqiwvipv.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYT\";\n    my $vowels_5 = \"AEIOUYT\";\n    my $vowels_6 = \"AEIOUYT\";\n    my $vowels_7 = \"AEIOUYT\";\n    my $vowels_8 = \"AEIOUYT\";\n    my $vowels_9 = \"AEIOUYT\";\n    my $vowels_10 = \"AEIOUYT\";\n    my $vowels_11 = \"AEIOUYT\";\n    my $vowels_12 = \"AEIOUYT\";\n    my $vowels_13 = \"AEIOUYT\";\n    my $vowels_14 = \"AEIOUYT\";\n    my $vowels_15 = \"AEIOUYT\";\n    my $vowels_16 = \"AEIOUYT\";\n    my $vowels_17 = \"AEIOUYT\";\n    my $vowels_18 = \"AEIOUYT\";\n    my $vowels_19 = \"AEIOUYT\";\n    my $vowels_20 = \"AEIOUYT\";\n    my $vowels_21 = \"AEIOUYT\";\n    my $vowels_22 = \"AEIOUYT\";\n    my $vowels_23 = \"AEIOUYT\";\n    my $vowels_24 = \"AEIOUYT\";\n    my $vowels_25 = \"AEIOUYT\";\n    my $vowels_26 = \"AEIOUYT\";\n    my $vowels_27 = \"AEIOUYT\";\n    my $vowels_28 = \"AEIOUYT\";\n    my $vowels_29 = \"AEIOUYT\";\n    my $vowels_30 = \"AEIOUYT\";\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpmrz__olv.pl line 72, at end of line\nsyntax error at /tmp/tmpmrz__olv.pl line 72, at EOF\nExecution of /tmp/tmpmrz__olv.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUAEIOU\";\n    my $vowels_4 = \"AEIOUAEIOUAEIOU\";\n    my $vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpd11bx2kl.pl line 30, at end of line\nsyntax error at /tmp/tmpd11bx2kl.pl line 30, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpd11bx2kl.pl line 57, at end of line\nsyntax error at /tmp/tmpd11bx2kl.pl line 57, at EOF\nExecution of /tmp/tmpd11bx2kl.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->index($c) + 2;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c->swapcase()->swapcase();\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr(2,1) . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[AEIOU]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/ $message[$i + 2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)}->{2};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp81sd45zt.pl line 43, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 43, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp81sd45zt.pl line 70, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 70, at EOF\nExecution of /tmp/tmp81sd45zt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $letter (@$message) {\n        if ($vowels->index($letter) >= 0) {\n            $encoded .= $letter->[2];\n        } else {\n            $encoded .= $letter->[0];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[a-z]/[A-Z]/g;\n        $encoded =~ s/[A-Z]/[a-z]/g;\n        $encoded =~ s/[0-9]/[0-9]/g;\n        $encoded =~ s/[^a-zA-Z0-9]/[^a-zA-Z0-9]/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->substr($vowels->index($c), 2) . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        my $letter = $message[$i];\n        if ($letter == \" \") {\n            $encoded .= \" \";\n        } else {\n            $encoded .= $letter;\n        }\n        if ($letter == \"a\" || $letter == \"e\" || $letter == \"i\" || $letter == \"o\" || $letter == \"u\") {\n            $encoded .= $message[$i+2];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c;\n            $encoded .= $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->index($c) + 2;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $message =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i+2];\n    }\n    $encoded .= $message[length($message)];\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)) {\n        $encoded .= $message[$i];\n        $encoded .= $message[$i] =~ /[aeiou]/ ? $message[$i+2] : $message[$i];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        $encoded =~ s/[AEIOU]/ $char;\n        $encoded =~ s/[a-z]/ $char;\n        $encoded =~ s/[A-Z]/ $char;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp1sxl_5wv.pl line 17, near \"$encoded =~ s/[\"\n  (Might be a runaway multi-line // string starting on line 16)\nSubstitution replacement not terminated at /tmp/tmp1sxl_5wv.pl line 18.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for $i (0..length($message)) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[aeiou]/ $message[$i+2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for $i (0..length($message)) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"a\" || $message[$i] == \"e\" || $message[$i] == \"i\" || $message[$i] == \"o\" || $message[$i] == \"u\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"a\" || $message[$i] == \"e\" || $message[$i] == \"i\" || $message[$i] == \"o\" || $message[$i] == \"u\") {\n            $encoded .= $message[$i + 2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..$message->length-1) {\n        $encoded .= $message->substr($i,1)->downcase;\n        $encoded .= $message->substr($i+2,1)->downcase;\n    }\n    $encoded .= $message->substr($message->length-1,1)->downcase;\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Can't locate object method \"length\" via package \"TEST\" (perhaps you forgot to load \"TEST\"?) at /tmp/tmpsw49trfc.pl line 14.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        $encoded .= $c if $vowels .= $c;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUY\";\n    my $vowels_5 = \"AEIOUY\";\n    my $vowels_6 = \"AEIOUY\";\n    my $vowels_7 = \"AEIOUY\";\n    my $vowels_8 = \"AEIOUY\";\n    my $vowels_9 = \"AEIOUY\";\n    my $vowels_10 = \"AEIOUY\";\n    my $vowels_11 = \"AEIOUY\";\n    my $vowels_12 = \"AEIOUY\";\n    my $vowels_13 = \"AEIOUY\";\n    my $vowels_14 = \"AEIOUY\";\n    my $vowels_15 = \"AEIOUY\";\n    my $vowels_16 = \"AEIOUY\";\n    my $vowels_17 = \"AEIOUY\";\n    my $vowels_18 = \"AEIOUY\";\n    my $vowels_19 = \"AEIOUY\";\n    my $vowels_20 = \"AEIOUY\";\n    my $vowels_21 = \"AEIOUY\";\n    my $vowels_22 = \"AEIOUY\";\n    my $vowels_23 = \"AEIOUY\";\n    my $vowels_24 = \"AEIOUY\";\n    my $vowels_25 = \"AEIOUY\";\n    my $vowels_26 = \"AEIOUY\";\n    my $vowels_27 = \"AEIOUY\";\n    my $vowels_28 = \"AEIOUY\";\n    my $vowels_29 = \"AEIOUY\";\n    my $vowels_30 = \"AEIOUY\";\n    my $vowels_31 = \"AEIOUY\";\n    my $vowels_32 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 45)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 51, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 51)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmpcoej8tnv.pl line 52, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXW\";\n    my $vowels_5 = \"AEIOUYXWZ\";\n    my $vowels_6 = \"AEIOUYXWZS\";\n    my $vowels_7 = \"AEIOUYXWZSX\";\n    my $vowels_8 = \"AEIOUYXWZSXT\";\n    my $vowels_9 = \"AEIOUYXWZSXT\";\n    my $vowels_10 = \"AEIOUYXWZSXTU\";\n    my $vowels_11 = \"AEIOUYXWZSXTUW\";\n    my $vowels_12 = \"AEIOUYXWZSXTUWX\";\n    my $vowels_13 = \"AEIOUYXWZSXTUWXS\";\n    my $vowels_14 = \"AEIOUYXWZSXTUWXSX\";\n    my $vowels_15 = \"AEIOUYXWZSXTUWXSXT\";\n    my $vowels_16 = \"AEIOUYXWZSXTUWXSXTU\";\n    my $vowels_17 = \"AEIOUYXWZSXTUWXSXTUW\";\n    my $vowels_18 = \"AEIOUYXWZSXTUWXSXTUWX\";\n    my $vowels_19 = \"AEIOUYXWZSXTUWXSXTUWXS\";\n    my $vowels_20 = \"AEIOUYXWZSXTUWXSXTUWXSX\";\n    my $vowels_21 = \"AEIOUYXWZSXTUWXSXTUWXSXT\";\n    my $vowels_22 = \"AEIOU\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp0rdig2bp.pl line 41, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 35)\nString found where operator expected at /tmp/tmp0rdig2bp.pl line 41, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp0rdig2bp.pl line 41, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp0rdig2bp.pl line 41, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp0rdig2bp.pl line 42, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 41)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp0rdig2bp.pl line 42, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp0rdig2bp.pl line 42, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp0rdig2bp.pl line 42, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = (\"a\",\"e\",\"i\",\"o\",\"u\");\n    my @vowels_2 = (\"A\",\"E\",\"I\",\"O\",\"U\");\n    my @new_message = \"\";\n    foreach my $letter (@$message) {\n        if (index(@vowels,$letter) >= 0) {\n            $new_message .= $letter . $vowels_2[index(@vowels,$letter)];\n        } else {\n            $new_message .= $letter;\n        }\n    }\n    return $new_message;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c;\n            $encoded .= $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $letter (@$message) {\n        if ($vowels->index($letter) >= 0) {\n            $encoded .= $letter->swapcase();\n        } else {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_in_order = \"AEIOUY\";\n    my $vowels_in_order_swapped = \"YAEIOU\";\n    my $vowels_in_order_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed = \"AEIOUY\";\n    my $vowels_in_order_reversed_reversed = \"AEIOUY\";\n    my $vowels_in_order_reversed_swapped = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_swapped = \"YAEIOU\";\n    my $vowels_in_order_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed = \"AEIOUY\";\n    my $vowels_in_order_reversed_reversed = \"AEIOUY\";\n    my $vowels_in_order_reversed_swapped = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_swapped_reversed_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed_reversed = \"YAEIOU\";\n    my $vowels_in_order_reversed_swapped_reversed_reversed_re\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpl08iqo51.pl line 34, at end of line\nsyntax error at /tmp/tmpl08iqo51.pl line 34, near \"$vowels_in_order_reversed_swapped_reversed_reversed_re\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpl08iqo51.pl line 61, at end of line\nsyntax error at /tmp/tmpl08iqo51.pl line 61, at EOF\nExecution of /tmp/tmpl08iqo51.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        $encoded =~ s/[aeiou]/ $char . $char /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/\\$&\\$2/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowel_pos = {};\n    for my $i (0..length($message)) {\n        if ($message[$i] == \" \") {\n            $encoded .= \" \";\n        } else {\n            $encoded .= $message[$i];\n            if ($vowels .= $message[$i]) {\n                $vowel_pos{$vowels} = $i;\n            }\n        }\n    }\n    for my $vowel (sort { $a <=> $b } keys %$vowel_pos) {\n        $encoded .= $message[$vowel_pos{$vowel} + 2];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_pos = $vowels.sort();\n    for ($i = 0; $i < length($message); $i++) {\n        if ($message[$i] == \" \") {\n            $encoded .= \" \";\n        } else {\n            $encoded .= $message[$i];\n            if ($message[$i] == $vowels[0]) {\n                $encoded .= $vowels_pos[0];\n            } else if ($message[$i] == $vowels[1]) {\n                $encoded .= $vowels_pos[1];\n            } else if ($message[$i] == $vowels[2]) {\n                $encoded .= $vowels_pos[2];\n            } else if ($message[$i] == $vowels[3]) {\n                $encoded .= $vowels_pos[3];\n            } else if ($message[$i] == $vowels[4]) {\n                $encoded .= $vowels_pos[4];\n            } else if ($message[$i] == $vowels[5]) {\n                $encoded .= $vowels_pos[5];\n            } else if ($message[$i] == $vowels[6]) {\n                $encoded .= $vowels_pos[6];\n            } else if ($message[$i] == $vowels[7]) {\n                $encoded .= $vowels_pos[7];\n            } else if ($message[$i] == $vowels[8]) {\n                $encoded .= $vowels_pos[8];\n            } else if ($message[$i] == $vowels[9]) {\n                $encoded .= $vowels_pos[9];\n            }\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpioqg_2y0.pl line 23, near \"else if\"\nsyntax error at /tmp/tmpioqg_2y0.pl line 25, near \"} else\"\nsyntax error at /tmp/tmpioqg_2y0.pl line 27, near \"} else\"\nsyntax error at /tmp/tmpioqg_2y0.pl line 29, near \"} else\"\nExecution of /tmp/tmpioqg_2y0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"a\" || $message[$i] == \"e\" || $message[$i] == \"i\" || $message[$i] == \"o\" || $message[$i] == \"u\") {\n            $encoded .= $message[$i + 2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $letter (@$message) {\n        if ($vowels->index($letter) >= 0) {\n            $encoded .= $letter->[0]->uc;\n            $encoded .= $letter->[0]->lc;\n        } else {\n            $encoded .= $letter->[0]->lc;\n            $encoded .= $letter->[0]->uc;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUAEIOU\";\n    my $vowels_4 = \"AEIOUAEIOUAEIOU\";\n    my $vowels_5 = \"AEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_6 = \"AEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_7 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_8 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_9 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_10 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_11 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_12 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_13 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_14 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_15 = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpd11bx2kl.pl line 30, at end of line\nsyntax error at /tmp/tmpd11bx2kl.pl line 30, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpd11bx2kl.pl line 57, at end of line\nsyntax error at /tmp/tmpd11bx2kl.pl line 57, at EOF\nExecution of /tmp/tmpd11bx2kl.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for (my $i = 0; $i < length($message); $i++) {\n        $encoded .= $message[$i];\n        $encoded =~ s/[AEIOU]/2/g;\n        $encoded =~ s/[aeiou]/2/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c->swapcase()->swapcase();\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= substr($message, 0, 1) . chr(ord(substr($message, 1)) + 2);\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowel_pos = $vowels.sort();\n    for ($i = 0; $i < length($message); $i++) {\n        $c = $message[$i];\n        if ($vowels.index($c) >= 0) {\n            $encoded .= $vowel_pos[$vowels.index($c)];\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Not enough arguments for index at /tmp/tmpvyvf4oaa.pl line 18, near \"$c) \"\nNot enough arguments for index at /tmp/tmpvyvf4oaa.pl line 19, near \"$c)\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpvyvf4oaa.pl line 26.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_replaced = \"\";\n    my $vowels_replaced_count = 0;\n    my $vowels_replaced_index = 0;\n    my $vowels_replaced_index_count = 0;\n    my $vowels_replaced_index_count_2 = 0;\n    my $vowels_replaced_index_count_3 = 0;\n    my $vowels_replaced_index_count_4 = 0;\n    my $vowels_replaced_index_count_5 = 0;\n    my $vowels_replaced_index_count_6 = 0;\n    my $vowels_replaced_index_count_7 = 0;\n    my $vowels_replaced_index_count_8 = 0;\n    my $vowels_replaced_index_count_9 = 0;\n    my $vowels_replaced_index_count_10 = 0;\n    my $vowels_replaced_index_count_11 = 0;\n    my $vowels_replaced_index_count_12 = 0;\n    my $vowels_replaced_index_count_13 = 0;\n    my $vowels_replaced_index_count_14 = 0;\n    my $vowels_replaced_index_count_15 = 0;\n    my $vowels_replaced_index_count_16 = 0;\n    my $vowels_replaced_index_count_17 = 0;\n    my $vowels_replaced_index_count_18 = 0;\n    my $vowels_replaced_index_count_19 = 0;\n    my $vowels_replaced_index_count_20 = 0;\n    my $vowels_replaced_index_count_21 = 0;\n    my $vowels_replaced_index_count_22 = 0;\n    my $vowels_replaced_index_count_23 = 0;\n    my $vowels_replaced_index_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmphinf8h1n.pl line 42, at end of line\nsyntax error at /tmp/tmphinf8h1n.pl line 42, near \"$vowels_replaced_index_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmphinf8h1n.pl line 69, at end of line\nsyntax error at /tmp/tmphinf8h1n.pl line 69, at EOF\nExecution of /tmp/tmphinf8h1n.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowel_pos = {};\n    for my $i (0..length($message)) {\n        if ($message[$i] =~ /[aeiou]/) {\n            $vowel_pos{$message[$i]} = $i;\n        }\n    }\n    for my $i (0..length($message)) {\n        if ($message[$i] =~ /[aeiou]/) {\n            $encoded .= $message[$i];\n            $encoded .= $message[$vowel_pos{$message[$i]} + 2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $char ( @$message ) {\n        $encoded .= $char;\n        $encoded =~ s/[aeiou]/ $char . $char /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $c->swapcase();\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    my $vowels_2 = \"AEIOUY\";\n    my $vowels_3 = \"AEIOUYX\";\n    my $vowels_4 = \"AEIOUYXZ\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp81sd45zt.pl line 43, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 43, near \"$vowels_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp81sd45zt.pl line 70, at end of line\nsyntax error at /tmp/tmp81sd45zt.pl line 70, at EOF\nExecution of /tmp/tmp81sd45zt.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $message =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"AEIOU\";\n    foreach $c (@$message) {\n        $encoded .= $c;\n        if ($vowels .= $c) {\n            $encoded .= $vowels . $vowels;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZV\";\n    my $vowels_7 = \"AEIOUYXZVX\";\n    my $vowels_8 = \"AEIOUYXZVXC\";\n    my $vowels_9 = \"AEIOUYXZVXCD\";\n    my $vowels_10 = \"AEIOUYXZVXCDG\";\n    my $vowels_11 = \"AEIOUYXZVXCDGX\";\n    my $vowels_12 = \"AEIOUYXZVXCDGXD\";\n    my $vowels_13 = \"AEIOUYXZVXCDGXDZ\";\n    my $vowels_14 = \"AEIOUYXZVXCDGXDZV\";\n    my $vowels_15 = \"AEIOUYXZVXCDGXDZVX\";\n    my $vowels_16 = \"AEIOUYXZVXCDGXDZVXC\";\n    my $vowels_17 = \"AEIOUYXZVXCDGXDZVXCD\";\n    my $vowels_18 = \"AEIOUYXZVXCDGXDZVXCDG\";\n    my $vowels_19 = \"AEIOUYXZVXCDGXDZVXCDGX\";\n    my $vowels_20 = \"AEIOUYXZVXCDGXDZVXCDGXD\";\n    my $vowels_21 = \"AEIOUYXZVXCDGXDZVXCDGXDZ\";\n    my $vowels_22 = \"AEIOUYXZVX\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 35)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 41, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 41)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmpul7bkcba.pl line 42, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] . $message[0];\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "Substitution replacement not terminated at /tmp/tmp0lq07sx8.pl line 16.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->index($c) + 2;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach $c (@$message) {\n        if ($vowels .= $c) {\n            $encoded .= $c . $c;\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[AEIOU]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    foreach my $letter (@$message) {\n        if ($vowels->index($letter) >= 0) {\n            $encoded .= $letter->[1];\n        } else {\n            $encoded .= $letter->[0];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowel_count = 0;\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[$vowels]/$vowels[$vowel_count++]//g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Illegal division by zero at /tmp/tmp1iq0irnw.pl line 18.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $message =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    foreach my $c (@$message) {\n        if ($vowels->index($c) >= 0) {\n            $encoded .= $vowels_2->{$vowels->index($c)};\n        } else {\n            $encoded .= $c;\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..$message->length-1) {\n        $encoded .= $message->substr($i,1)->downcase();\n        $encoded .= $message->substr($i+2,1)->downcase();\n    }\n    $encoded .= $message->substr($message->length,1)->downcase();\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Can't locate object method \"length\" via package \"TEST\" (perhaps you forgot to load \"TEST\"?) at /tmp/tmpn1uj54it.pl line 14.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $message =~ s/[aeiou]/ $& 2, $& 2/g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUY\";\n    my $vowels_4 = \"AEIOUYX\";\n    my $vowels_5 = \"AEIOUYXZ\";\n    my $vowels_6 = \"AEIOUYXZ\";\n    my $vowels_7 = \"AEIOUYXZ\";\n    my $vowels_8 = \"AEIOUYXZ\";\n    my $vowels_9 = \"AEIOUYXZ\";\n    my $vowels_10 = \"AEIOUYXZ\";\n    my $vowels_11 = \"AEIOUYXZ\";\n    my $vowels_12 = \"AEIOUYXZ\";\n    my $vowels_13 = \"AEIOUYXZ\";\n    my $vowels_14 = \"AEIOUYXZ\";\n    my $vowels_15 = \"AEIOUYXZ\";\n    my $vowels_16 = \"AEIOUYXZ\";\n    my $vowels_17 = \"AEIOUYXZ\";\n    my $vowels_18 = \"AEIOUYXZ\";\n    my $vowels_19 = \"AEIOUYXZ\";\n    my $vowels_20 = \"AEIOUYXZ\";\n    my $vowels_21 = \"AEIOUYXZ\";\n    my $vowels_22 = \"AEIOUYXZ\";\n    my $vowels_23 = \"AEIOUYXZ\";\n    my $vowels_24 = \"AEIOUYXZ\";\n    my $vowels_25 = \"AEIOUYXZ\";\n    my $vowels_26 = \"AEIOUYXZ\";\n    my $vowels_27 = \"AEIOUYXZ\";\n    my $vowels_28 = \"AEIOUYXZ\";\n    my $vowels_29 = \"\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"if(eq_deeply($candidate->(\"TEST\"\n  (Might be a runaway multi-line \"\" string starting on line 42)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"TEST\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"\"),\"tgst\"\n\t(Missing operator before tgst?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 48, near \"print \"\"\n\t(Missing semicolon on previous line?)\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"ok\"\n  (Might be a runaway multi-line \"\" string starting on line 48)\n\t(Do you need to predeclare print?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"Mudasir\"),\"\"\nBareword found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"\"),\"mWDCSKR\"\n\t(Missing operator before mWDCSKR?)\nString found where operator expected at /tmp/tmp7diutk74.pl line 49, near \"print \"\"\n\t(Missing semicolon on previous line",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for ($message) {\n        $encoded .= $message;\n        $encoded =~ s/[aeiou]/ $message[2] /g;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my @vowels = \"aeiou\";\n    my @swapped = \"\";\n    my @encoded = \"\";\n    for ($message) {\n        if (index($message,$vowels) > -1) {\n            $swapped = $message;\n            $swapped =~ s/($vowels)/$vowels[2]/g;\n            $swapped =~ s/($vowels)/$vowels[1]/g;\n            $swapped =~ s/($vowels)/$vowels[0]/g;\n            $message = $swapped;\n        }\n        $encoded .= $message;\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    for my $i (0..length($message)-1) {\n        $encoded .= $message[$i];\n        if ($message[$i] == \"A\" || $message[$i] == \"E\" || $message[$i] == \"I\" || $message[$i] == \"O\" || $message[$i] == \"U\") {\n            $encoded .= $message[$i+2];\n        } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return $encoded;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_regex = \"a|e|i|o|u\";\n    my $vowels_count = 0;\n    my $vowels_index = 0;\n    my $vowels_index_regex = \"\";\n    my $vowels_index_count = 0;\n    my $vowels_index_index = 0;\n    my $vowels_index_index_regex = \"\";\n    my $vowels_index_index_count = 0;\n    my $vowels_index_index_index = 0;\n    my $vowels_index_index_index_regex = \"\";\n    my $vowels_index_index_index_count = 0;\n    my $vowels_index_index_index_index = 0;\n    my $vowels_index_index_index_index_regex = \"\";\n    my $vowels_index_index_index_index_count = 0;\n    my $vowels_index_index_index_index_index = 0;\n    my $vowels_index_index_index_index_index_regex = \"\";\n    my $vowels_index_index_index_index_index_count = 0;\n    my $vowels_index_index_index_index_index_index = 0;\n    my $vowels_index_index_index_index_index_index_regex = \"\";\n    my $vowels_index_index_index_index_index_index_count = 0;\n    my $vowels_index_index_index_index_index_index_index = 0;\n    my $vowels_index_index_index_index_index_index_index_regex = \"\";\n    my $vowels_index_index_index_index_index_index_index_count = 0;\n    my $vowels_index_index_index_index_index_index_index_index = 0;\n    my $vowels_index_index_index_index_index_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpu8c1kbi9.pl line 40, at end of line\nsyntax error at /tmp/tmpu8c1kbi9.pl line 40, near \"$vowels_index_index_index_index_index_\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpu8c1kbi9.pl line 67, at end of line\nsyntax error at /tmp/tmpu8c1kbi9.pl line 67, at EOF\nExecution of /tmp/tmpu8c1kbi9.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}