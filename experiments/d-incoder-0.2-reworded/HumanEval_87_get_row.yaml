name: HumanEval_87_get_row
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested arrays,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the array,\n    and return array of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    >>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L,\
  \ 4L, 5L, 1L]], 1L)\n    [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L,\
  \ 5L), tuple(2L, 0L)]\n    >>> get_row([], 1L)\n    []\n    >>> get_row([[], [1L],\
  \ [1L, 2L, 3L]], 3L)\n    [tuple(2L, 2L)]\n    \n*/\nTuple!(long, long)[] get_row(long[][]\
  \ lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n\
    \    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n\
    \            Tuple!(long, long)[] coord = new Tuple!(long, long)[] {i, j};\n \
    \           foreach(k -> foreach(l -> \n            {\n                if(lst[k][l]\
    \ == x)\n                {\n                    Tuple!(long, long)[] coord2 =\
    \ new Tuple!(long, long)[] {k, l};\n                    foreach(m -> foreach(n\
    \ -> \n                    {\n                        if(lst[m][n] == x)\n   \
    \                     {\n                            Tuple!(long, long)[] coord3\
    \ = new Tuple!(long, long)[] {m, n};\n                            foreach(o ->\
    \ foreach(p -> \n                            {\n                             \
    \   if(lst[o][p] == x)\n                                {\n                  \
    \                  Tuple!(long, long)[] coord4 = new Tuple!(long, long)[] {o,\
    \ p};\n                                    foreach(q -> foreach(r -> \n      \
    \                              {\n                                        if(lst[r][q]\
    \ == x)\n                                        {\n                         \
    \                   Tuple!(long, long)[] coord5 = new Tuple!(long, long)[] {r,\
    \ q};\n                                            foreach(s -> foreach(t -> \n\
    \                                            {\n                             \
    \                   if(lst[t][s] == x)\n                                     \
    \           {\n                                                    Tuple!(long,\
    \ long)[] coord6 = new Tuple!(long, long)[] {t, s};\n                        \
    \                            foreach(u -> foreach(v -> \n                    \
    \                                {\n                                         \
    \               if(lst[u][v] == x)\n                                         \
    \               {\n                                                          \
    \  Tuple!(long, long)[] coord7 = new Tuple!(long, long)[] {u, v};\n          \
    \                                                  foreach(w -> foreach(x -> \n\
    \                                                            {\n             \
    \                                                   if(lst[x][w] == x)\n     \
    \                                                           {\n              \
    \                                                      Tuple!(long, long)[] coord8\
    \ = new Tuple!(long, long)[] {x, w};\n                                       \
    \                             foreach(y -> foreach(z -> \n                   \
    \                                                 {\n                        \
    \                                                if(lst[z][y] == x)\n        \
    \                                                                {\n         \
    \                                                                   Tuple!(long,\
    \ long)[] coord9 = new Tuple!(long, long)[] {z, y};\n                        \
    \                                                    foreach(a -> foreach(b ->\
    \ \n                                                                         \
    \   {\n                                                                      \
    \          if(lst[a][b] == x)\n                                              \
    \                                  {\n                                       \
    \                                             Tuple!(long, long)[] coord10 = new\
    \ Tuple!(long, long)[] {a, b};\n                                             \
    \                                       foreach(c -> foreach(d -> \n         \
    \                                                                           {\n\
    \                                                                            \
    \            if(lst[d][c] == x)\n                                            \
    \                                            {\n                             \
    \                                                               Tuple!(long, long)[]\
    \ coord11 = new Tuple!(long, long)[] {d, c};\n                               \
    \                                                             foreach(e -> foreach(f\
    \ -> \n                                                                      \
    \                      {", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row)\
    \ do\n    {\n        foreach(col) do\n        {\n            if(col == x)\n  \
    \          {\n                result ~= Tuple!(row, col);\n            }\n   \
    \     }\n    }\n    \n    sort(result);\n    sort(result, descending);\n    \n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j] == x)\n\
    \            {\n                row.push((i, j));\n            }\n        });\n\
    \        res.push(row);\n    }), 0);\n    \n    foreach(i -> foreach(j -> {\n\
    \        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(lst[i][j] == x)\n            {\n                row.push((i,\
    \ j));\n            }\n        });\n        res.push(row);\n    }), 1);\n    \n\
    \    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            if(lst[i][j] == x)\n         \
    \   {\n                row.push((i, j));\n            }\n        });\n       \
    \ res.push(row);\n    }), 2);\n    \n    foreach(i -> foreach(j -> {\n       \
    \ Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k -> {\n\
    \            if(lst[i][j] == x)\n            {\n                row.push((i, j));\n\
    \            }\n        });\n        res.push(row);\n    }), 3);\n    \n    foreach(i\
    \ -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \        foreach(k -> {\n            if(lst[i][j] == x)\n            {\n     \
    \           row.push((i, j));\n            }\n        });\n        res.push(row);\n\
    \    }), 4);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j]\
    \ == x)\n            {\n                row.push((i, j));\n            }\n   \
    \     });\n        res.push(row);\n    }), 5);\n    \n    foreach(i -> foreach(j\
    \ -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n       \
    \ foreach(k -> {\n            if(lst[i][j] == x)\n            {\n            \
    \    row.push((i, j));\n            }\n        });\n        res.push(row);\n \
    \   }), 6);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j]\
    \ == x)\n            {\n                row.push((i, j));\n            }\n   \
    \     });\n        res.push(row);\n    }), 7);\n", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n\
    \            if(col == x)\n            {\n                res = Tuple!(long, long)[](row,col);\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row,lst) \n    {\n\
    \        foreach(col,row) \n        {\n            if(col == x) \n           \
    \ {\n                res.push(Tuple!(long, long)((row,col)));\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    sort(res,true);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst) \n    {\n        foreach(column: row) \n        {\n\
    \            if(column == x) \n            {\n                result.push(Tuple!(long,\
    \ long)((row, column)));\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, (a, b) => a.first > b.first);\n    \n    return result;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n    sort(res, (a, b) ->\
    \ {\n        if(a.i > b.i)\n            return 1;\n        if(a.i < b.i)\n   \
    \         return -1;\n        return 0;\n    });\n    \n    sort(res, (a, b) ->\
    \ {\n        if(a.c > b.c)\n            return 1;\n        if(a.c < b.c)\n   \
    \         return -1;\n        return 0;\n    });\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if (lst[i][j] == x) \n            res[res.length]\
    \ = Tuple!(i, j);\n    }), std.range(0, lst.length));\n    \n    sort(res, (a,\
    \ b) => a.first > b.first);\n    sort(res, (a, b) => a.second > b.second);\n \
    \   \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                res.add((i, j));\n            }\n        }\n   \
    \ }\n    \n    sort(res);\n    sort(res, true);\n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            ret.push((i,\
    \ j));\n        }\n    }), std.range(0, lst.length));\n    \n    ret.sort(function(a,\
    \ b) {\n        return a[0] - b[0];\n    });\n    \n    ret.sort(function(a, b)\
    \ {\n        return a[1] - b[1];\n    });\n    \n    return ret;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res.push(Tuple!(long, long)((row, col)));\n  \
    \          }\n        }\n    }\n    \n    res.sort();\n    foreach(row::lst) \n\
    \    {\n        foreach(col::row) \n        {\n            if(col > x) \n    \
    \        {\n                res.push(Tuple!(long, long)((row, col)));\n      \
    \      }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n   \
    \     foreach(column: row)\n        {\n            if(column == x)\n         \
    \   {\n                result.push(Tuple!(long, long)((row, column)));\n     \
    \       }\n        }\n    }\n    \n    result.sort(function(a, b) -> a.first >\
    \ b.first);\n    result.sort(function(a, b) -> a.second > b.second);\n    \n \
    \   return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst) {\n        foreach(col: row) {\n            if (col == x) {\n         \
    \       res = Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; i++){\n        if(lst[i].length == x){\n \
    \           for(int j = 0; j < lst[i].length; j++){\n                if(lst[i][j]\
    \ == x){\n                    res.push(new Tuple!(i, j));\n                }\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n            res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n\
    \    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n \
    \   \n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j: int)\
    \ \n        {\n            if (col == x) \n            {\n                Tuple!(long,\
    \ long)[] coord = Tuple!(i, j);\n                sort(coord, (x, y) => y - x);\n\
    \                sort(coord, (x, y) => y - x);\n                foreach(coord\
    \ : coord, i : int ) \n                {\n                    result = append(result,\
    \ coord);\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    sort(res, (i, j) ->\
    \ {\n        if(i < j)\n            return 1;\n        else if(i > j)\n      \
    \      return -1;\n        else\n            return 0;\n    });\n    \n    sort(res,\
    \ (i, j) -> {\n        if(i < j)\n            return -1;\n        else if(i >\
    \ j)\n            return 1;\n        else\n            return 0;\n    });\n  \
    \  \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> ", "{\n    int[] row =\
    \ new int[lst.Length];\n    int[] col = new int[lst.Length];\n    \n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > 0)\n        {\n\
    \            row[i] = i;\n            col[i] = lst[i].Length - 1;\n        }\n\
    \    }\n    \n    Array.Sort(row);\n    Array.Sort(col);\n    \n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.Length];\n    \n    for(int i =\
    \ 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > 0)\n        {\n \
    \           for(int j = 0; j < lst[i].Length; j++)\n            {\n          \
    \      if(lst[i][j] == x)\n                {\n                    result[i] =\
    \ Tuple!(i, j);\n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0 .. lst.length - 1);\n    \n    sort(res);\n    sort(res, (a, b) -> -cmp(a.1,\
    \ b.1));\n    \n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
