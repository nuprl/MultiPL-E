name: HumanEval_87_get_row
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested arrays,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the array,\n    and return array of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    >>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L,\
  \ 4L, 5L, 1L]], 1L)\n    [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L,\
  \ 5L), tuple(2L, 0L)]\n    >>> get_row([], 1L)\n    []\n    >>> get_row([[], [1L],\
  \ [1L, 2L, 3L]], 3L)\n    [tuple(2L, 2L)]\n    \n*/\nTuple!(long, long)[] get_row(long[][]\
  \ lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n\
    \    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n\
    \            Tuple!(long, long)[] coord = new Tuple!(long, long)[] {i, j};\n \
    \           foreach(k -> foreach(l -> \n            {\n                if(lst[k][l]\
    \ == x)\n                {\n                    Tuple!(long, long)[] coord2 =\
    \ new Tuple!(long, long)[] {k, l};\n                    foreach(m -> foreach(n\
    \ -> \n                    {\n                        if(lst[m][n] == x)\n   \
    \                     {\n                            Tuple!(long, long)[] coord3\
    \ = new Tuple!(long, long)[] {m, n};\n                            foreach(o ->\
    \ foreach(p -> \n                            {\n                             \
    \   if(lst[o][p] == x)\n                                {\n                  \
    \                  Tuple!(long, long)[] coord4 = new Tuple!(long, long)[] {o,\
    \ p};\n                                    foreach(q -> foreach(r -> \n      \
    \                              {\n                                        if(lst[r][q]\
    \ == x)\n                                        {\n                         \
    \                   Tuple!(long, long)[] coord5 = new Tuple!(long, long)[] {r,\
    \ q};\n                                            foreach(s -> foreach(t -> \n\
    \                                            {\n                             \
    \                   if(lst[t][s] == x)\n                                     \
    \           {\n                                                    Tuple!(long,\
    \ long)[] coord6 = new Tuple!(long, long)[] {t, s};\n                        \
    \                            foreach(u -> foreach(v -> \n                    \
    \                                {\n                                         \
    \               if(lst[u][v] == x)\n                                         \
    \               {\n                                                          \
    \  Tuple!(long, long)[] coord7 = new Tuple!(long, long)[] {u, v};\n          \
    \                                                  foreach(w -> foreach(x -> \n\
    \                                                            {\n             \
    \                                                   if(lst[x][w] == x)\n     \
    \                                                           {\n              \
    \                                                      Tuple!(long, long)[] coord8\
    \ = new Tuple!(long, long)[] {x, w};\n                                       \
    \                             foreach(y -> foreach(z -> \n                   \
    \                                                 {\n                        \
    \                                                if(lst[z][y] == x)\n        \
    \                                                                {\n         \
    \                                                                   Tuple!(long,\
    \ long)[] coord9 = new Tuple!(long, long)[] {z, y};\n                        \
    \                                                    foreach(a -> foreach(b ->\
    \ \n                                                                         \
    \   {\n                                                                      \
    \          if(lst[a][b] == x)\n                                              \
    \                                  {\n                                       \
    \                                             Tuple!(long, long)[] coord10 = new\
    \ Tuple!(long, long)[] {a, b};\n                                             \
    \                                       foreach(c -> foreach(d -> \n         \
    \                                                                           {\n\
    \                                                                            \
    \            if(lst[d][c] == x)\n                                            \
    \                                            {\n                             \
    \                                                               Tuple!(long, long)[]\
    \ coord11 = new Tuple!(long, long)[] {d, c};\n                               \
    \                                                             foreach(e -> foreach(f\
    \ -> \n                                                                      \
    \                      {", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row)\
    \ do\n    {\n        foreach(col) do\n        {\n            if(col == x)\n  \
    \          {\n                result ~= Tuple!(row, col);\n            }\n   \
    \     }\n    }\n    \n    sort(result);\n    sort(result, descending);\n    \n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j] == x)\n\
    \            {\n                row.push((i, j));\n            }\n        });\n\
    \        res.push(row);\n    }), 0);\n    \n    foreach(i -> foreach(j -> {\n\
    \        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(lst[i][j] == x)\n            {\n                row.push((i,\
    \ j));\n            }\n        });\n        res.push(row);\n    }), 1);\n    \n\
    \    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            if(lst[i][j] == x)\n         \
    \   {\n                row.push((i, j));\n            }\n        });\n       \
    \ res.push(row);\n    }), 2);\n    \n    foreach(i -> foreach(j -> {\n       \
    \ Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k -> {\n\
    \            if(lst[i][j] == x)\n            {\n                row.push((i, j));\n\
    \            }\n        });\n        res.push(row);\n    }), 3);\n    \n    foreach(i\
    \ -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \        foreach(k -> {\n            if(lst[i][j] == x)\n            {\n     \
    \           row.push((i, j));\n            }\n        });\n        res.push(row);\n\
    \    }), 4);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j]\
    \ == x)\n            {\n                row.push((i, j));\n            }\n   \
    \     });\n        res.push(row);\n    }), 5);\n    \n    foreach(i -> foreach(j\
    \ -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n       \
    \ foreach(k -> {\n            if(lst[i][j] == x)\n            {\n            \
    \    row.push((i, j));\n            }\n        });\n        res.push(row);\n \
    \   }), 6);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(lst[i][j]\
    \ == x)\n            {\n                row.push((i, j));\n            }\n   \
    \     });\n        res.push(row);\n    }), 7);\n", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n\
    \            if(col == x)\n            {\n                res = Tuple!(long, long)[](row,col);\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row,lst) \n    {\n\
    \        foreach(col,row) \n        {\n            if(col == x) \n           \
    \ {\n                res.push(Tuple!(long, long)((row,col)));\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    sort(res,true);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst) \n    {\n        foreach(column: row) \n        {\n\
    \            if(column == x) \n            {\n                result.push(Tuple!(long,\
    \ long)((row, column)));\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, (a, b) => a.first > b.first);\n    \n    return result;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n    sort(res, (a, b) ->\
    \ {\n        if(a.i > b.i)\n            return 1;\n        if(a.i < b.i)\n   \
    \         return -1;\n        return 0;\n    });\n    \n    sort(res, (a, b) ->\
    \ {\n        if(a.c > b.c)\n            return 1;\n        if(a.c < b.c)\n   \
    \         return -1;\n        return 0;\n    });\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if (lst[i][j] == x) \n            res[res.length]\
    \ = Tuple!(i, j);\n    }), std.range(0, lst.length));\n    \n    sort(res, (a,\
    \ b) => a.first > b.first);\n    sort(res, (a, b) => a.second > b.second);\n \
    \   \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                res.add((i, j));\n            }\n        }\n   \
    \ }\n    \n    sort(res);\n    sort(res, true);\n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            ret.push((i,\
    \ j));\n        }\n    }), std.range(0, lst.length));\n    \n    ret.sort(function(a,\
    \ b) {\n        return a[0] - b[0];\n    });\n    \n    ret.sort(function(a, b)\
    \ {\n        return a[1] - b[1];\n    });\n    \n    return ret;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res.push(Tuple!(long, long)((row, col)));\n  \
    \          }\n        }\n    }\n    \n    res.sort();\n    foreach(row::lst) \n\
    \    {\n        foreach(col::row) \n        {\n            if(col > x) \n    \
    \        {\n                res.push(Tuple!(long, long)((row, col)));\n      \
    \      }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n   \
    \     foreach(column: row)\n        {\n            if(column == x)\n         \
    \   {\n                result.push(Tuple!(long, long)((row, column)));\n     \
    \       }\n        }\n    }\n    \n    result.sort(function(a, b) -> a.first >\
    \ b.first);\n    result.sort(function(a, b) -> a.second > b.second);\n    \n \
    \   return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst) {\n        foreach(col: row) {\n            if (col == x) {\n         \
    \       res = Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; i++){\n        if(lst[i].length == x){\n \
    \           for(int j = 0; j < lst[i].length; j++){\n                if(lst[i][j]\
    \ == x){\n                    res.push(new Tuple!(i, j));\n                }\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n            res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n\
    \    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n \
    \   \n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j: int)\
    \ \n        {\n            if (col == x) \n            {\n                Tuple!(long,\
    \ long)[] coord = Tuple!(i, j);\n                sort(coord, (x, y) => y - x);\n\
    \                sort(coord, (x, y) => y - x);\n                foreach(coord\
    \ : coord, i : int ) \n                {\n                    result = append(result,\
    \ coord);\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    sort(res, (i, j) ->\
    \ {\n        if(i < j)\n            return 1;\n        else if(i > j)\n      \
    \      return -1;\n        else\n            return 0;\n    });\n    \n    sort(res,\
    \ (i, j) -> {\n        if(i < j)\n            return -1;\n        else if(i >\
    \ j)\n            return 1;\n        else\n            return 0;\n    });\n  \
    \  \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.first = i;\n                coord.second = j;\n                col.first\
    \ = k;\n                col.second = l;\n                row.push(coord);\n  \
    \          });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> ", "{\n    int[] row =\
    \ new int[lst.Length];\n    int[] col = new int[lst.Length];\n    \n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > 0)\n        {\n\
    \            row[i] = i;\n            col[i] = lst[i].Length - 1;\n        }\n\
    \    }\n    \n    Array.Sort(row);\n    Array.Sort(col);\n    \n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.Length];\n    \n    for(int i =\
    \ 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > 0)\n        {\n \
    \           for(int j = 0; j < lst[i].Length; j++)\n            {\n          \
    \      if(lst[i][j] == x)\n                {\n                    result[i] =\
    \ Tuple!(i, j);\n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0 .. lst.length - 1);\n    \n    sort(res);\n    sort(res, (a, b) -> -cmp(a.1,\
    \ b.1));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        long row = i / lst[0].length;\n\
    \        long col = i % lst[0].length;\n        if(lst[row][col] == x)\n     \
    \   {\n            res.add(Tuple!(row, col));\n        }\n    }), range(0, lst.length));\n\
    \    \n    sort(res);\n    sort(res, (a, b) -> -cmp(a.first, b.first));\n    \n\
    \    return res;\n}\n/*", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].length; ++j)\n     \
    \       {\n                if(lst[i][j] == x)\n                {\n           \
    \         res.add(new Tuple!(i, j));\n                }\n            }\n     \
    \   }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(i : 0..lst.len) \n    {\n        foreach(j : 0..lst[i].len) \n  \
    \      {\n            if(lst[i][j] == x) \n            {\n                if(res\
    \ == null) \n                {\n                    res = Tuple!(long, long)[](j,\
    \ i);\n                }\n                else\n                {\n          \
    \          res = Tuple!(long, long)[](j, i); \n                }\n           \
    \ }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res =\
    \ new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n        if\
    \ (lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n\
    \    \n    sort(res);\n    sort(res, (a, b) => a.1 < b.1 ? 1 : -1);\n    \n  \
    \  return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] ==\
    \ x)\n        {\n            for(int j = 0; j < lst[i].length; j++)\n        \
    \    {\n                if(lst[i][j] == x)\n                {\n              \
    \      res.add(new Tuple!(i, j));\n                }\n            }\n        }\n\
    \    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] tuple = new Tuple!(long,\
    \ long)[] {Tuple!(i + 1, j + 1)};\n            foreach(k -> \n            {\n\
    \                if(lst[i][k] > lst[i][j])\n                {\n              \
    \      Tuple!(long, long)[] tuple2 = new Tuple!(long, long)[] {Tuple!(i, k)};\n\
    \                    res = append(res, tuple2);\n                }\n         \
    \   });\n        }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long,\
    \ long)[] tuple = new Tuple!(long, long)[] {Tuple!(i + 1, j + 1)};\n         \
    \   foreach(k -> \n            {\n                if(lst[i][k] < lst[i][j])\n\
    \                {\n                    Tuple!(long, long)[] tuple2 = new Tuple!(long,\
    \ long)[] {Tuple!(i, k)};\n                    res = append(res, tuple2);\n  \
    \              }\n            });\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {Tuple!(i\
    \ + 1, j + 1)};\n            foreach(k -> \n            {\n                if(lst[i][k]\
    \ == lst[i][j])\n                {\n                    Tuple!(long, long)[] tuple2\
    \ = new Tuple!(long, long)[] {Tuple!(i, j)};\n                    res = append(res,\
    \ tuple2);\n                }\n            });\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {Tuple!(i\
    \ + 1, j + 1)};\n            foreach(k -> \n            {\n                if(lst[i][k]\
    \ != lst[i][j])\n                {\n                    Tuple!(long, long)[] tuple2\
    \ = new Tuple!(long, long)[] {Tuple!(i, j)};\n                    res = append(res,\
    \ tuple2);\n                }\n            });\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {Tuple!(i\
    \ + 1, j + 1)};\n            foreach(k -> \n            {\n                if(lst[i][k]\
    \ == lst[i][j])\n                {\n                    Tuple!(long, long)[] tuple2\
    \ = new Tuple!(long, long)[] {Tuple!(", "{\n    Tuple!(long, long)[] result =\
    \ new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length; i++)\n \
    \   {\n        if(lst[i] == x)\n        {\n            for(int j = 0; j < lst[i].length;\
    \ j++)\n            {\n                result.add((i, j));\n            }\n  \
    \      }\n    }\n    \n    result.sort(function(a, b){return b._1 - a._1});\n\
    \    result.sort(function(a, b){return a._2 - b._2});\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n    sort(res);\n    \n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   result ~= Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    sort(result);\n\
    \    sort(result, (a, b) -> {\n        if(a > b)\n            return 1;\n    \
    \    else if(a < b)\n            return -1;\n        else\n            return\
    \ 0;\n    });\n    \n    return result;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: int)\n    {\n  \
    \      foreach(col: row, j: int)\n        {\n            if(col == x)\n      \
    \      {\n                res.add((i, j));\n            }\n        }\n    }\n\
    \    \n    sort(res);\n    sort(res, (a, b) => b._1 - a._1);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(row::lst) \n    {\n        foreach(col::row) \n        {\n   \
    \         if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i : 0..lst.Length-1,\
    \ j : 0..lst[i].Length-1, k : 0..lst[i][j].Length-1)\n    {\n        if(lst[i][j][k]\
    \ == x)\n        {\n            res[res.Length-1] = new Tuple!(i, j);\n      \
    \  }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j\
    \ < lst[i].length; j++){\n            if(lst[i][j] == x){\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) -> -cmp(a.first, b.first));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0 .. lst.length - 1);\n    \n    sort(res);\n    sort(res, (a, b) -> -cmp(a.i,\
    \ b.i));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst){\n        foreach(col,row){\n            if(col == x){\n\
    \                res = Tuple!(long, long)[](row,col);\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \            res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n\
    \    \n    sort(res, (i, j) -> {\n        if(i < j)\n            return -1;\n\
    \        else if(i > j)\n            return 1;\n        else\n            return\
    \ 0;\n    });\n    \n    sort(res, (i, j) -> {\n        if(i < j)\n          \
    \  return 1;\n        else if(i > j)\n            return -1;\n        else\n \
    \           return 0;\n    });\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; j++)\n            {\n                res[lst[i][j][0]]\
    \ = new Tuple!(lst[i][j][0], lst[i][j][1]);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < res.length; i++)\n    {\n        for(int j = 0;\
    \ j < res[i].length; j++)\n        {\n            if(res[i][j].first < res[i].first)\n\
    \            {\n                Tuple!(long, long)[] temp = new Tuple!(long, long)[];\n\
    \                for(int k = 0; k < res.length; k++)\n                {\n    \
    \                temp[k] = res[k];\n                }\n                res = temp;\n\
    \                break;\n            }\n        }\n    }\n    \n    for(int i\
    \ = 0; i < res.length; i++)\n    {\n        for(int j = 0; j < res[i].length;\
    \ j++)\n        {\n            if(res[i][j].first > res[i].first)\n          \
    \  {\n                Tuple!(long, long)[] temp = new Tuple!(long, long)[];\n\
    \                for(int k = 0; k < res.length; k++)\n                {\n    \
    \                temp[k] = res[k];\n                }\n                res = temp;\n\
    \                break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.push(Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    sort(res, (a, b) => a.second\
    \ > b.second);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res =\
    \ null;\n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j: int)\
    \ \n        {\n            if(col == x) \n            {\n                if(res\
    \ == null) \n                {\n                    res = new Tuple!(long, long)[];\n\
    \                }\n                res[i] = new Tuple!(long, long)((i, j));\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n      \
    \  foreach(col: row)\n        {\n            if(col == x)\n            {\n   \
    \             res.push(Tuple!(long, long)((row, col)));\n            }\n     \
    \   }\n    }\n    \n    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.x = i;\n                coord.y = j;\n                col.x = k;\n\
    \                col.y = l;\n                row.push(coord);\n            });\n\
    \            result.push(row);\n        });\n    }));\n    \n    foreach(i ->\
    \ foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \        foreach(k -> {\n            Tuple!(long, long)[] col = new Tuple!(long,\
    \ long)[];\n            foreach(l -> {\n                Tuple!(long, long)[] coord\
    \ = new Tuple!(long, long)[];\n                coord.x = i;\n                coord.y\
    \ = j;\n                col.x = k;\n                col.y = l;\n             \
    \   row.push(coord);\n            });\n            result.push(row);\n       \
    \ });\n    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.x = i;\n                coord.y = j;\n                col.x = k;\n\
    \                col.y = l;\n                row.push(coord);\n            });\n\
    \            result.push(row);\n        });\n    }));\n    \n    foreach(i ->\
    \ foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \        foreach(k -> {\n            Tuple!(long, long)[] col = new Tuple!(long,\
    \ long)[];\n            foreach(l -> {\n                Tuple!(long, long)[] coord\
    \ = new Tuple!(long, long)[];\n                coord.x = i;\n                coord.y\
    \ = j;\n                col.x = k;\n                col.y = l;\n             \
    \   row.push(coord);\n            });\n            result.push(row);\n       \
    \ });\n    }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(l -> {\n      \
    \          ", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst) {\n\
    \        foreach(col,row) {\n            if(col == x) {\n                res =\
    \ Tuple!(long, long)[](row,col);\n            }\n        }\n    }\n    sort(res);\n\
    \    sort(res,1,-1);\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ result.push(Tuple!(long, long)(0, col));\n            }\n        }\n    }\n\
    \    \n    result.sort(function(a, b) -> a.first > b.first);\n    result.sort(function(a,\
    \ b) -> a.second > b.second);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), range(0, lst.length));\n    \n    sort(res, (a, b) -> {\n        if(a.i\
    \ > b.i)\n            return 1;\n        if(a.i < b.i)\n            return -1;\n\
    \        return 0;\n    });\n    \n    sort(res, (a, b) -> {\n        if(a.c >\
    \ b.c)\n            return 1;\n        if(a.c < b.c)\n            return -1;\n\
    \        return 0;\n    });\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    foreach(i -> foreach(j -> res = append(res, Tuple!(i, j), Tuple!(i,\
    \ j))), 0 .. length(lst - 1));\n    \n    sort(res, (a, b) -> compare(lst[a],\
    \ lst[b]));\n    sort(res, (a, b) -> compare(lst[b], lst[a]));\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res;\n    for(int i = 0; i < lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            Tuple!(long, long)[] row = get_row(lst[i],\
    \ x);\n            for(int j = 0; j < row.length; j++){\n                res.push(Tuple!(long,\
    \ long)(i,j));\n            }\n        }\n    }\n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long,\
    \ long)[] coord = new Tuple!(long, long)[] {i, j};\n            foreach(k -> foreach(l\
    \ -> \n            {\n                if(lst[i][k] == x && lst[k][j] == x)\n \
    \               {\n                    Tuple!(long, long)[] coord2 = new Tuple!(long,\
    \ long)[] {k, j};\n                    foreach(m -> foreach(n -> \n          \
    \          {\n                        if(lst[i][m] == x && lst[m][n] == x)\n \
    \                       {\n                            Tuple!(long, long)[] coord3\
    \ = new Tuple!(long, long)[] {m, n};\n                            foreach(o ->\
    \ foreach(p -> \n                            {\n                             \
    \   if(lst[i][o] == x && lst[o][p] == x)\n                                {\n\
    \                                    Tuple!(long, long)[] coord4 = new Tuple!(long,\
    \ long)[] {o, p};\n                                    foreach(q -> foreach(r\
    \ -> \n                                    {\n                               \
    \         if(lst[i][r] == x && lst[r][q] == x)\n                             \
    \           {\n                                            Tuple!(long, long)[]\
    \ coord5 = new Tuple!(long, long)[] {r, q};\n                                \
    \            foreach(s -> foreach(t -> \n                                    \
    \        {\n                                                if(lst[i][s] == x\
    \ && lst[s][t] == x)\n                                                {\n    \
    \                                                Tuple!(long, long)[] coord6 =\
    \ new Tuple!(long, long)[] {s, t};\n                                         \
    \           foreach(u -> foreach(w -> \n                                     \
    \               {\n                                                        if(lst[i][u]\
    \ == x && lst[u][w] == x)\n                                                  \
    \      {\n                                                            Tuple!(long,\
    \ long)[] coord7 = new Tuple!(long, long)[] {u, w};\n                        \
    \                                    foreach(x -> foreach(y -> \n            \
    \                                                {\n                         \
    \                                       if(lst[i][x] == x && lst[x][y] == x)\n\
    \                                                                {\n         \
    \                                                           Tuple!(long, long)[]\
    \ coord8 = new Tuple!(long, long)[] {x, y};\n                                \
    \                                    foreach(z -> foreach(w -> \n            \
    \                                                        {\n                 \
    \                                                       if(lst[i][z] == x && lst[z][w]\
    \ == x)\n                                                                    \
    \    {\n                                                                     \
    \       Tuple!(long, long)[] coord9 = new Tuple!(long, long)[] {z, w};\n     \
    \                                                                       foreach(x\
    \ -> foreach(y -> \n                                                         \
    \                   {\n                                                      \
    \                          if(lst[i][y] == x && lst[y][x] == x)\n            \
    \                                                                    {\n     \
    \                                                                            \
    \   Tuple!(long, long)[] coord10 = new Tuple!(long, long)[] {y, x};\n        \
    \                                                                            foreach(z\
    \ -> ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.add((i, j));\n            }\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            for(int j = 0; j < lst[i].length; j++)\n            {\n\
    \                result.add((i, j));\n            }\n        }\n    }\n    result.sort(function(a,\
    \ b){return a.0 < b.0;});\n    result.sort(function(a, b){return b.1 < a.1;});\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, row_index: long row_index) \n    {\n        foreach(col: row, col_index:\
    \ long col_index) \n        {\n            if(col_index == x) \n            {\n\
    \                res = Tuple!(long, long)[](row_index, col_index);\n         \
    \   }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: int)\n    {\n  \
    \      foreach(col: row, j: int)\n        {\n            if(col == x)\n      \
    \      {\n                res.push(Tuple!(i, j));\n            }\n        }\n\
    \    }\n    \n    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n  \
    \  \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \            row.push_back(i);\n            row.push_back(j);\n            res.push_back(row);\n\
    \        }\n    }), range(0, lst.size()));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            row.push_back(i);\n           \
    \ row.push_back(j);\n            res.push_back(row);\n        }\n    }), range(1,\
    \ lst.size()));\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \            row.push_back(i);\n            row.push_back(j);\n            res.push_back(row);\n\
    \        }\n    }), range(2, lst.size()));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            row.push_back(i);\n           \
    \ row.push_back(j);\n            res.push_back(row);\n        }\n    }), range(3,\
    \ lst.size()));\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \            row.push_back(i);\n            row.push_back(j);\n            res.push_back(row);\n\
    \        }\n    }), range(4, lst.size()));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            row.push_back(i);\n           \
    \ row.push_back(j);\n            res.push_back(row);\n        }\n    }), range(5,\
    \ lst.size()));\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \            row.push_back(i);\n            row.push_back(j);\n            res.push_back(row);\n\
    \        }\n    }), range(6, lst.size()));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            row.push_back(i);\n           \
    \ row.push_back(j);\n            res.push_back(", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i : 0..lst.length - 1, j : 0..lst[i].length\
    \ - 1)\n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n            foreach(j : 0..lst[i].length\
    \ - 1)\n            {\n                row.push(Tuple!(long, long)[i, j]);\n \
    \           }\n            foreach(j : 0..lst[i].length - 1)\n            {\n\
    \                row.push(Tuple!(long, long)[i, j]);\n            }\n        \
    \    res.push(row);\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i <\
    \ lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length; ++j)\n  \
    \      {\n            if(lst[i][j] == x)\n            {\n                result[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    Arrays.sort(result);\n    Arrays.sort(result, (x, y) -> -x._1 - y._1);\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    foreach(row,lst){\n        foreach(col,row){\n            if(col == x)\n\
    \                res.push(Tuple!(long, long)((row,col)));\n        }\n    }\n\
    \    sort(res);\n    sort(res,true);\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x) \n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            foreach(k -> {\n              \
    \  row.push((i, j));\n            });\n            res.push(row);\n        }\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] == x) \n        {\n            Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n            foreach(k -> {\n                row.push((i,\
    \ j));\n            });\n            res.push(row);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x) \n        {\n            Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n\
    \            tt.push((i, j));\n            res.push(tt);\n        }\n    }), range(0,\
    \ lst.length));\n    sort(res, (a, b) -> {\n        if(a[0] > b[0]) return 1;\n\
    \        if(a[0] < b[0]) return -1;\n        return 0;\n    });\n    sort(res,\
    \ (a, b) -> {\n        if(a[1] > b[1]) return 1;\n        if(a[1] < b[1]) return\
    \ -1;\n        return 0;\n    });\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length; i++)\n \
    \   {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n           \
    \ if(lst[i][j] == x)\n            {\n                res.add((i, j));\n      \
    \      }\n        }\n    }\n    \n    sort(res, (a, b) => a.first > b.first);\n\
    \    sort(res, (a, b) => a.second > b.second);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst) \n    {\n\
    \        foreach(column: row) \n        {\n            if(column == x) \n    \
    \        {\n                result = Tuple!(long, long)[](row, column);\n    \
    \            break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.push(Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    \n    for(int i = 0; i < res.length; ++i)\n    {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        \n        for(int j = 0; j < res[i]._1.length;\
    \ ++j)\n        {\n            row.push(Tuple!(res[i]._1._1 + j, res[i]._1._2\
    \ + j));\n        }\n        \n        sort(row);\n        \n        for(int j\
    \ = 0; j < row.length; ++j)\n        {\n            row.push(Tuple!(row[j]._1\
    \ + res[i]._1, row[j]._2 + res[i]._2));\n        }\n        \n        sort(row);\n\
    \        \n        res.push(row);\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                res.add(new Tuple!(i, j));\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n    \
    \    {\n            if(col == x)\n            {\n                res.push(Tuple!(long,\
    \ long)((row,col)));\n            }\n        }\n    }\n    \n    sort(res,fun(x1,x2)->x1._1\
    \ > x2._1);\n    sort(res,fun(x1,x2)->x1._2 > x2._2);\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n\
    \        foreach(col::row) \n        {\n            if(col == x) \n          \
    \  {\n                res = Tuple!(long, long)[Tuple!(long, long)[row, col]];\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    \n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ res = Tuple!(long, long)[](row, col);\n                break;\n            }\n\
    \        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row: lst) \n    {\n        foreach(col: row) \n       \
    \ {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n     \
    \   if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n\
    \        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] t = new\
    \ Tuple!(long, long)[]; \n            t.push((i, j));\n            res.push(t);\n\
    \        }\n    }), std.range(0, lst.length));\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n        }\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] > x)\n        {\n            result = [(i, j)];\n        }\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] < x)\n        {\n            result = [(i, j)];\n        }\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n        }\n\
    \    }), range(0, lst.length));\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == x){\n            for(int j = 0; j < lst[i].length;\
    \ j++){\n                res.add((i, j));\n            }\n        }\n    }\n \
    \   sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n    \
    \        res[res.length] = Tuple!(i, j);\n    }), std.range(0, lst.length));\n\
    \    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n            res[res.length]\
    \ = Tuple!(i, j);\n    }), std.range(0, lst.length));\n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] < x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), std.range(0, lst.length));\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; ++j)\n            {\n                res[lst[i][j][0]]\
    \ = new Tuple!(long, long)((i, j));\n            }\n        }\n    }\n    \n \
    \   for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(j > 0)\n            {\n                if(lst[i][j][0]\
    \ > lst[i][j-1][0])\n                {\n                    Tuple!(long, long)[]\
    \ temp = new Tuple!(long, long)[];\n                    for(int k = 0; k < lst[i].length;\
    \ ++k)\n                    {\n                        temp[lst[i][j][0]] = new\
    \ Tuple!(long, long)((i, k));\n                    }\n                    for(int\
    \ k = 0; k < lst[i].length; ++k)\n                    {\n                    \
    \    temp[lst[i][j][0]] = new Tuple!(long, long)((k, j));\n                  \
    \  }\n                    res = merge_two_tups(res, temp);\n                }\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i].length; ++j)\n        {\n          \
    \  if(j > 0)\n            {\n                if(lst[i][j][0] > lst[i][j-1][0])\n\
    \                {\n                    Tuple!(long, long)[] temp = new Tuple!(long,\
    \ long)[];\n                    for(int k = 0; k < lst[i].length; ++k)\n     \
    \               {\n                        temp[lst[i][j][0]] = new Tuple!(long,\
    \ long)((i, k));\n                    }\n                    for(int k = 0; k\
    \ < lst[i].length; ++k)\n                    {\n                        temp[lst[i][j][0]]\
    \ = new Tuple!(long, long)((k, j));\n                    }\n                 \
    \   res = merge_two_tups(res, temp);\n                }\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(j > 0)\n         \
    \   {\n                if(lst[i][j][0] > lst[i][j-1][0])\n                {\n\
    \                    Tuple!(long, long)[] temp = new Tuple!(long, long)[];\n \
    \                   for(int k = 0; k < lst[i].length; ++k)\n                 \
    \   {\n                        temp[lst[i][j][0]] = new Tuple!(long, long)((i,\
    \ k));\n                    }\n                    for(int k = 0; k < lst[i].length;\
    \ ++k)\n                    {\n                        temp[lst[i][j][0]] = new\
    \ Tuple!(long, long)((k, j));\n                    }\n                    res\
    \ = merge_two_tups(res, temp);\n                }\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n       \
    \ if(lst[i][j] == x) \n        {\n            Tuple!(long, long)[] tt = new Tuple!(long,\
    \ long)[];\n            tt.push((i, j));\n            res.push(tt);\n        }\n\
    \    }), range(0, lst.length));\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[](row, col);\n                break;\n            }\n   \
    \     }\n        if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row::lst) \n    {\n        foreach(col::row)\
    \ \n        {\n            if(col == x) \n            {\n                if(res\
    \ == null) \n                {\n                    res = Tuple!(long, long)[](row,\
    \ col);\n                }\n                else\n                {\n        \
    \            res = Tuple!(long, long)[](row, col);\n                    foreach(tuple::res)\
    \ \n                    {\n                        if(tuple.0 > row) \n      \
    \                  {\n                            res = Tuple!(long, long)[](tuple.0,\
    \ row);\n                        }\n                        if(tuple.1 < col)\
    \ \n                        {\n                            res = Tuple!(long,\
    \ long)[](row, tuple.1);\n                        }\n                    }\n \
    \               }\n            }\n        }\n    }\n    return res;\n}\n/*", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n       \
    \     for(int j = 0; j < lst[i].length; ++j)\n            {\n                if(lst[i][j]\
    \ == x)\n                {\n                    res.add((i, j));\n           \
    \     }\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res,\
    \ (a, b) -> a.first > b.first ? 1 : -1);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; ++j)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    \n    sort(res, (a, b) -> a.first > b.first);\n\
    \    sort(res, (a, b) -> a.second > b.second);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        for(int j = 0; j < lst[i].length; ++j)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) ->\
    \ a.first > b.first ? 1 : -1);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(i : 0..lst.len())\n    {\n        foreach(j\
    \ : 0..lst[i].len())\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                res = Tuple!(long, long)[](Tuple!(long, long)[](i, j), Tuple!(long,\
    \ long)[](i, j+1));\n                break;\n            }\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n\
    \    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                ret.add(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(ret);\n    \n    return\
    \ ret;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ foreach(row: lst, i: int)\n    {\n        foreach(col: row, j: int)\n      \
    \  {\n            if(col == x)\n            {\n                res.push(Tuple!(long,\
    \ long)(i + 1, j + 1));\n            }\n        }\n    }\n    sort(res);\n   \
    \ sort(res, (a, b) => b.first - a.first);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n  \
    \  {\n        foreach(col: row)\n        {\n            if(col == x)\n       \
    \     {\n                result.push(Tuple!(long, long)((row, col)));\n      \
    \      }\n        }\n    }\n    \n    result.sort(function(a, b) \n    {\n   \
    \     if(a.row < b.row)\n        {\n            return -1;\n        }\n      \
    \  if(a.row > b.row)\n        {\n            return 1;\n        }\n        if(a.col\
    \ < b.col)\n        {\n            return -1;\n        }\n        if(a.col > b.col)\n\
    \        {\n            return 1;\n        }\n        return 0;\n    });\n   \
    \ \n    result.sort(function(a, b) \n    {\n        if(a.row < b.row)\n      \
    \  {\n            return 1;\n        }\n        if(a.row > b.row)\n        {\n\
    \            return -1;\n        }\n        if(a.col < b.col)\n        {\n   \
    \         return 1;\n        }\n        if(a.col > b.col)\n        {\n       \
    \     return -1;\n        }\n        return 0;\n    });\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    sort(res, (a, b) =>\
    \ a.first > b.first);\n    sort(res, (a, b) => a.second > b.second);\n    \n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    foreach(row,lst){\n        foreach(col,row){\n            if(col == x){\n\
    \                res.push(Tuple!(long, long)((row,col)));\n            }\n   \
    \     }\n    }\n    sort(res);\n    sort(res,true);\n    return res;\n}\n/*",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n       \
    \ {\n            if(lst[i][j] == x)\n            {\n                res.push(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) => a.first > b.first);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n        foreach(k -> {\n          \
    \  Tuple!(long, long)[] col = new Tuple!(long, long)[];\n            foreach(l\
    \ -> {\n                Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n\
    \                coord.0 = i;\n                coord.1 = j;\n                coord.2\
    \ = k;\n                coord.3 = l;\n                col.push(coord);\n     \
    \       });\n            row.push(col);\n        });\n        res.push(row);\n\
    \    });\n    sort(res);\n    sort(res, (a, b) -> {\n        Tuple!(long, long)[]\
    \ aRow = a;\n        Tuple!(long, long)[] bRow = b;\n        foreach(i -> foreach(j\
    \ -> {\n            Tuple!(long, long)[] aCol = aRow[i];\n            Tuple!(long,\
    \ long)[] bCol = bRow[j];\n            foreach(k -> {\n                Tuple!(long,\
    \ long)[] aCoord = aCol[k];\n                Tuple!(long, long)[] bCoord = bCol[k];\n\
    \                if(aCoord.0 > bCoord.0)\n                    return 1;\n    \
    \            if(aCoord.0 < bCoord.0)\n                    return -1;\n       \
    \         if(aCoord.1 > bCoord.1)\n                    return 1;\n           \
    \     if(aCoord.1 < bCoord.1)\n                    return -1;\n              \
    \  if(aCoord.2 > bCoord.2)\n                    return 1;\n                if(aCoord.2\
    \ < bCoord.2)\n                    return -1;\n                if(aCoord.3 > bCoord.3)\n\
    \                    return 1;\n                if(aCoord.3 < bCoord.3)\n    \
    \                return -1;\n            });\n        }));\n        return 0;\n\
    \    });\n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] aRow =\
    \ res[i];\n        Tuple!(long, long)[] bRow = res[j];\n        foreach(k -> {\n\
    \            Tuple!(long, long)[] aCol = aRow[k];\n            Tuple!(long, long)[]\
    \ bCol = bRow[k];\n            foreach(l -> {\n                Tuple!(long, long)[]\
    \ aCoord = aCol[l];\n                Tuple!(long, long)[] bCoord = bCol[l];\n\
    \                if(aCoord.0 > bCoord.0)\n                    aCoord.0 = bCoord.0;\n\
    \                if(aCoord.0 < bCoord.0)\n                    aCoord.0 = bCoord.0;\n\
    \                if(aCoord.1 > bCoord", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n          \
    \  if(col == x)\n            {\n                if(res == null)\n            \
    \    {\n                    res = Tuple!(long, long)[];\n                }\n \
    \               res[res.length] = Tuple!(row,col);\n            }\n        }\n\
    \    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x) \n            res[res.length] = Tuple!(i, j);\n    }), 0 .. lst.length\
    \ - 1);\n    sort(res);\n    sort(res, (a, b) -> -cmp(a.1, b.1));\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ foreach(i, row) foreach(j, col) \n    {\n        if(row[j] == x)\n        {\n\
    \            res[res.length] = Tuple!(i, j);\n        }\n    }\n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    return res;\n}\n/*", "{\n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i :\
    \ 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n        {\n\
    \            if(lst[i][j] == x)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    \n    foreach(i : 0..lst.length-1)\n   \
    \ {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res.add((i, j));\n            }\n     \
    \   }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result =\
    \ new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] >\
    \ x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ < x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] >\
    \ x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ < x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ > x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ < x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ > x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ < x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n        {\n            result.add((i, j));\n        }\n    }), range(0,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ > x)\n        {\n            result.add((i, j));\n        }\n    }), range(1,\
    \ lst.length - 1));\n    \n    foreach(i -> foreach(j -> {\n        if(lst", "{\n\
    \    Tuple!(long, long)[] result = null;\n    foreach(row: lst)\n    {\n     \
    \   foreach(column: row)\n        {\n            if(column == x)\n           \
    \ {\n                if(result == null)\n                {\n                 \
    \   result = Tuple!(long, long)[];\n                }\n                result.push((row,\
    \ column));\n            }\n        }\n    }\n    \n    foreach(row: lst)\n  \
    \  {\n        foreach(column: row)\n        {\n            if(column != x)\n \
    \           {\n                if(result == null)\n                {\n       \
    \             result = Tuple!(long, long)[];\n                }\n            \
    \    result.push((row, column));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst)\n    {\n        foreach(column: row)\n        {\n            if(column\
    \ == x)\n            {\n                if(result == null)\n                {\n\
    \                    result = Tuple!(long, long)[];\n                }\n     \
    \           result.push((row, column));\n            }\n        }\n    }\n   \
    \ \n    foreach(row: lst)\n    {\n        foreach(column: row)\n        {\n  \
    \          if(column != x)\n            {\n                if(result == null)\n\
    \                {\n                    result = Tuple!(long, long)[];\n     \
    \           }\n                result.push((row, column));\n            }\n  \
    \      }\n    }\n    \n    foreach(row: lst)\n    {\n        foreach(column: row)\n\
    \        {\n            if(column == x)\n            {\n                if(result\
    \ == null)\n                {\n                    result = Tuple!(long, long)[];\n\
    \                }\n                result.push((row, column));\n            }\n\
    \        }\n    }\n    \n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column != x)\n            {\n              \
    \  if(result == null)\n                {\n                    result = Tuple!(long,\
    \ long)[];\n                }\n                result.push((row, column));\n \
    \           }\n        }\n    }\n    \n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column == x)\n            {\n              \
    \  if(result == null)\n                {\n                    result = Tuple!(long,\
    \ long)[];\n                }\n                result.push((row, column));\n \
    \           }\n        }\n    }\n    \n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column != x)\n            {\n              \
    \  if(result == null)\n                {\n                    result = Tuple!(long,\
    \ long)[];\n                }\n                result.push((row, column));\n \
    \           }\n        }\n    }\n    \n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column == x)\n            {\n              \
    \  if(result == null)\n                {\n                    result = Tuple!(long, ",
  "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] t = (i, j);\n        \n        if(lst[i][j] == x)\n \
    \       {\n            res.append(t);\n        }\n    }), range(0, lst.len));\n\
    \    \n    sort(res);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n\
    \        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] t = new\
    \ Tuple!(long, long)[];\n            t.push((i, j));\n            res.push(t);\n\
    \        }\n    }), range(0, lst.length));\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] result;\n    \n    foreach(row: lst, row_index: 0) \n\
    \    {\n        foreach(column: row, column_index: 0) \n        {\n          \
    \  if(column == x) \n            {\n                foreach(coord: row, coord_index:\
    \ 0) \n                {\n                    if(coord == row_index) \n      \
    \              {\n                        foreach(coord2: row, coord2_index: 0)\
    \ \n                        {\n                            if(coord2 == column_index)\
    \ \n                            {\n                                result = append(result,\
    \ Tuple!(long, long)((row_index, column_index)));\n                          \
    \      break;\n                            }\n                        }\n    \
    \                    break;\n                    }\n                }\n      \
    \          break;\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, 1, descending);\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ range(0, lst.length));\n    sort(res);\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if (lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), 0..length(lst));\n    \n    sort(res);\n    sort(res, (a, b) -> a.1 <\
    \ b.1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n   \
    \ \n    foreach(i -> foreach(j -> {\n        long row = 0;\n        long col =\
    \ 0;\n        foreach(k -> {\n            if(lst[i][k] == x) \n            {\n\
    \                row = i;\n                col = k;\n            }\n        });\n\
    \        result.push((row, col));\n    }), range(0, lst.length));\n    \n    sort(result,\
    \ (a, b) -> {\n        long rowA = a[0];\n        long rowB = b[0];\n        long\
    \ colA = a[1];\n        long colB = b[1];\n        if(rowA < rowB) return -1;\n\
    \        if(rowA > rowB) return 1;\n        if(colA < colB) return -1;\n     \
    \   if(colA > colB) return 1;\n        return 0;\n    });\n    \n    sort(result,\
    \ (a, b) -> {\n        long rowA = a[0];\n        long rowB = b[0];\n        long\
    \ colA = a[1];\n        long colB = b[1];\n        if(rowA < rowB) return -1;\n\
    \        if(rowA > rowB) return 1;\n        if(colA < colB) return -1;\n     \
    \   if(colA > colB) return 1;\n        return 0;\n    });\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.add((i, j));\n            }\n        }\n    }\n    \n    sort(res, (a,\
    \ b) -> a.first > b.first ? 1 : -1);\n    sort(res, (a, b) -> a.second > b.second\
    \ ? 1 : -1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst) \n    {\n        foreach(col,row) \n        {\n        \
    \    if(col == x) \n            {\n                if(res == null) \n        \
    \        {\n                    res = Tuple!(long, long)[](row, col);\n      \
    \          }\n                else\n                {\n                    res\
    \ = Tuple!(long, long)[](row, col);\n                    foreach(tuple,res)\n\
    \                    {\n                        if(tuple._1 > tuple._2) \n   \
    \                     {\n                            res = Tuple!(long, long)[](tuple._1,\
    \ tuple._2);\n                        }\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n  \
    \  {\n        foreach(column: row)\n        {\n            if(column == x)\n \
    \           {\n                result.push(Tuple!(long, long)((row, column)));\n\
    \            }\n        }\n    }\n    \n    sort(result);\n    sort(result, (a,\
    \ b) => a.first > b.first);\n    \n    return result;\n}", "{\n    int[] row =\
    \ new int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int i =\
    \ 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = i;\n \
    \   }\n    Array.Sort(row, col, (x, y) => { return x > y; });\n    Array.Sort(col,\
    \ row, (x, y) => { return y > x; });\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n       \
    \ if(lst[i][col[i]] == x)\n        {\n            res[i] = Tuple!(long, long)[i,\
    \ col[i]];\n        }\n    }\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[]\
    \ result;\n    \n    foreach(row: lst) \n    {\n        foreach(col: row) \n \
    \       {\n            if(col == x) \n            {\n                foreach(coord:\
    \ Tuple!(long, long)[]) \n                {\n                    coord.push(Tuple!(row,\
    \ col));\n                }\n                sort(coord);\n                sort(coord,\
    \ (x, y) => -cmp(x, y));\n                foreach(coord: Tuple!(long, long)[])\
    \ \n                {\n                    foreach(tuple: coord) \n          \
    \          {\n                        if(tuple.0 == row) \n                  \
    \      {\n                            foreach(tuple2: coord) \n              \
    \              {\n                                if(tuple2.0 == col) \n     \
    \                           {\n                                    result.push(tuple);\n\
    \                                    break;\n                                }\n\
    \                            }\n                            break;\n         \
    \               }\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst, row_index: long) {\n        foreach(col:\
    \ row, col_index: long) {\n            if (col == x) {\n                if (res\
    \ == null) {\n                    res = Tuple!(long, long)[];\n              \
    \  }\n                res[row_index] = col_index;\n            }\n        }\n\
    \    }\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst, i: int) \n    {\n        foreach(col:\
    \ row, j: int) \n        {\n            if(col == x) \n            {\n       \
    \         result.push((i, j));\n            }\n        }\n    }\n    \n    result.sort(compare(compare(compare(compare(compare(x,\
    \ 0L), 0L), 0L), 0L), 0L));\n    \n    foreach(coord: result, i: int) \n    {\n\
    \        foreach(j: int) \n        {\n            foreach(row: lst, j: int) \n\
    \            {\n                foreach(col: row, i: int) \n                {\n\
    \                    if(col == coord) \n                    {\n              \
    \          result.push((i, j));\n                    }\n                }\n  \
    \          }\n        }\n    }\n    \n    result.sort(compare(compare(compare(compare(compare(x,\
    \ 0L), 0L), 0L), 0L), 0L));\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].Length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                result.Add(Tuple!(long,\
    \ long)(i + 1, j + 1));\n            }\n        }\n    }\n    \n    result.Sort();\n\
    \    \n    for(int i = 0; i < result.Length; i++)\n    {\n        result[i].Sort();\n\
    \    }\n    \n    return result;\n}\n/*", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    \n    foreach(row,lst) {\n        foreach(col,row)\
    \ {\n            if(col == x) {\n                res.push(Tuple!(long, long)((row,col)));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res, Tuple!(long,\
    \ long)((0,0),1));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n       \
    \ if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0,\
    \ lst.length));\n    \n    sort(res, (a, b) -> {\n        if(a.first < b.first)\n\
    \            return -1;\n        if(a.first > b.first)\n            return 1;\n\
    \        if(a.second < b.second)\n            return -1;\n        if(a.second\
    \ > b.second)\n            return 1;\n        return 0;\n    });\n    \n    return\
    \ res;\n}\n/*", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst) \n    {\n        foreach(col: row) \n        {\n\
    \            if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n       \
    \ {\n            if(lst[i][j] == x)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res.add((i, j));\n            }\n     \
    \   }\n    }\n    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j\
    \ : 0..lst[i].length-1)\n        {\n            if(lst[i][j] < x)\n          \
    \  {\n                res.add((i, j));\n            }\n        }\n    }\n    \n\
    \    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res.add((i, j));\n            }\n     \
    \   }\n    }\n    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j\
    \ : 0..lst[i].length-1)\n        {\n            if(lst[i][j] < x)\n          \
    \  {\n                res.add((i, j));\n            }\n        }\n    }\n    \n\
    \    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res.add((i, j));\n            }\n     \
    \   }\n    }\n    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j\
    \ : 0..lst[i].length-1)\n        {\n            if(lst[i][j] < x)\n          \
    \  {\n                res.add((i, j));\n            }\n        }\n    }\n    \n\
    \    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; j++)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) ->\
    \ -cmp(a, b));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column == x)\n            {\n              \
    \  result.push(Tuple!(long, long)((row, column)));\n            }\n        }\n\
    \    }\n    \n    result.sort(function(a, b) -> a.first < b.first ? 1 : -1);\n\
    \    result.sort(function(a, b) -> a.second > b.second ? 1 : -1);\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    foreach(row: lst, row_index: 0) \n    {\n        foreach(col: row, col_index:\
    \ 0) \n        {\n            if(col == x) \n            {\n                foreach(coord:\
    \ row, coord_index: 0) \n                {\n                    res[coord_index]\
    \ = Tuple!(row_index, col_index);\n                }\n            }\n        }\n\
    \    }\n    sort(res);\n    sort(res, Tuple!(long, long)[], (Tuple!(long, long)[],\
    \ (Tuple!(long, long)[]) -> bool));\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x)\n            result.push((i, j));\n    }),\
    \ range(0, lst.length));\n    \n    result.sort(byRow);\n    result.sort(byCol);\n\
    \    \n    return result;\n}", "{\n    int[] row = new int[lst.Length];\n    int[]\
    \ col = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(row[i] == x)\n        {\n   \
    \         res[i] = Tuple!(long, long)[Tuple!(long, long)[Tuple!(long, long)[Tuple!(long,\
    \ long)[Tuple!(long, long)[Tuple!(long, long)[Tuple!(long, long)[]]]]]]]];\n \
    \       }\n    }\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[] res =\
    \ null;\n    foreach(row,lst) \n    {\n        foreach(col,row) \n        {\n\
    \            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if\
    \ (lst[i][j] == x) {\n            res.add(new Tuple!(i, j));\n        }\n    }),\
    \ range(0, lst.length));\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; ++j)\n            {\n                res[lst[i].length\
    \ - 1 - j].first = i;\n                res[lst[i].length - 1 - j].second = j;\n\
    \            }\n        }\n    }\n    Arrays.sort(res);\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), 0..lst.length-1);\n    sort(res);\n    sort(res, (i, j) -> -cmp(lst[i][j],\
    \ x));\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    \n\
    \    foreach(row: lst) {\n        foreach(col: row) {\n            if(col == x)\
    \ {\n                if(res == null) {\n                    res = Tuple!(long,\
    \ long)[](row, col);\n                } else {\n                    res = Tuple!(long,\
    \ long)[](row, col);\n                    foreach(tuple: res) {\n            \
    \            if(tuple._1 < tuple._2) {\n                            res = Tuple!(long,\
    \ long)[](tuple._1, tuple._2);\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n\
    \        foreach(col::row) \n        {\n            if(col == x) \n          \
    \  {\n                if(res == null) \n                {\n                  \
    \  res = Tuple!(long, long)[];\n                }\n                res[res.length]\
    \ = Tuple!(row, col);\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n           \
    \ Tuple!(long, long)[] row = new Tuple!(long, long)[];\n            foreach(k\
    \ -> \n            {\n                row.push((i, k));\n            });\n   \
    \         foreach(k -> \n            {\n                row.push((k, j));\n  \
    \          });\n            res.push(row);\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[];\n  \
    \          foreach(k -> \n            {\n                row.push((i, k));\n \
    \           });\n            foreach(k -> \n            {\n                row.push((k,\
    \ j));\n            });\n            res.push(row);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n            res[res.length] = Tuple!(i, j);\n    }), std.range(0, lst.length));\n\
    \    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n \
    \   \n    foreach(row: lst, i: int) \n    {\n        foreach(col: row, j: int)\
    \ \n        {\n            if (col == x) \n            {\n                result\
    \ ~= Tuple!(i, j);\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, (a, b) => a.1 < b.1);\n    \n    return result;\n}", "{\n  \
    \  Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n    \n    foreach(i :\
    \ 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n        {\n    \
    \        if(lst[i][j] == x)\n            {\n                ret.push((i, j));\n\
    \            }\n        }\n    }\n    \n    sort(ret);\n    sort(ret, (a, b) =>\
    \ b._1 - a._1);\n    sort(ret, (a, b) => b._2 - a._2);\n    \n    return ret;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res.add(Tuple!(long, long)((row, col)));\n   \
    \         }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) => a.first\
    \ > b.first);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row::lst) \n    {\n        foreach(col::row) \n        {\n      \
    \      if(col == x) \n            {\n                res = Tuple!(long, long)[](row,\
    \ col);\n                break;\n            }\n        }\n        if(res != null)\
    \ break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n \
    \   \n    foreach(row: lst, i: int)\n    {\n        foreach(col: row, j: int)\n\
    \        {\n            if(col == x)\n            {\n                Tuple!(long,\
    \ long)[] coord = Tuple!(i, j);\n                sort(coord, (x, y) => -cmp(x,\
    \ y));\n                sort(coord, (x, y) => -cmp(y, x));\n                result.push(coord);\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    \n    foreach(rowIndex, row) do\n    {\n        foreach(colIndex,\
    \ col) do\n        {\n            if(col == x)\n            {\n              \
    \  result ~= Tuple!(rowIndex, colIndex);\n            }\n        }\n    }\n  \
    \  \n    sort(result);\n    sort(result, descending);\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, i: int) \n    {\n        foreach(col: row, j: int) \n        {\n      \
    \      if(col == x) \n            {\n                res.push(Tuple!(i, j));\n\
    \            }\n        }\n    }\n    \n    res.sort();\n    foreach(tuple: res,\
    \ i: int) \n    {\n        tuple.sort();\n    }\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> \n        {\n            if(lst[i][j] == x)\n            {\n\
    \                res.push(Tuple!(i, j));\n            }\n        }), range(0,\
    \ lst.length));\n    \n    sort(res, (a, b) -> a.first > b.first ? 1 : a.first\
    \ < b.first ? -1 : 0);\n    sort(res, (a, b) -> a.second > b.second ? 1 : a.second\
    \ < b.second ? -1 : 0);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> \n    {\n   \
    \     if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] tt = new\
    \ Tuple!(long, long)[];\n            tt.push((i, j));\n            res.push(tt);\n\
    \        }\n    }), range(0, lst.length));\n    sort(res);\n    sort(res, (a,\
    \ b) -> a.first > b.first);\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n   \
    \     foreach(column: row)\n        {\n            if(column == x)\n         \
    \   {\n                result.push(Tuple!(long, long)((row, column)));\n     \
    \       }\n        }\n    }\n    \n    result.sort(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare",
  "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        long row = 0;\n        long col = 0;\n        \n\
    \        if(lst[i][j] == x)\n        {\n            row = i;\n            col\
    \ = j;\n        }\n        \n        result.push(Tuple!(row, col));\n    }), range(0,\
    \ lst.length));\n    \n    sort(result, (a, b) -> {\n        long rowA = a.item1;\n\
    \        long rowB = b.item1;\n        \n        long colA = a.item2;\n      \
    \  long colB = b.item2;\n        \n        if(rowA < rowB)\n            return\
    \ -1;\n        else if(rowA > rowB)\n            return 1;\n        \n       \
    \ if(colA < colB)\n            return -1;\n        else if(colA > colB)\n    \
    \        return 1;\n        \n        return 0;\n    });\n    \n    sort(result,\
    \ (a, b) -> {\n        long rowA = a.item1;\n        long rowB = b.item1;\n  \
    \      \n        long colA = a.item2;\n        long colB = b.item2;\n        \n\
    \        if(rowA < rowB)\n            return -1;\n        else if(rowA > rowB)\n\
    \            return 1;\n        \n        if(colA < colB)\n            return\
    \ -1;\n        else if(colA > colB)\n            return 1;\n        \n       \
    \ return 0;\n    });\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> \n    {\n   \
    \     if(lst[i][j] == x)\n        {\n            res.add(new Tuple!(i, j));\n\
    \        }\n    }), std.range(0, lst.length));\n    sort(res);\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            for(int\
    \ j = 0; j < lst[i].length; j++){\n                res.add((i, j));\n        \
    \    }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n\
    \            if(col == x)\n            {\n                res = Tuple!(long, long)[Tuple!(long,\
    \ long)[row, col]];\n            }\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] > x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), 0 .. lst.length - 1);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    \n    sort(res, (a, b) -> a.first > b.first\
    \ ? 1 : -1);\n    sort(res, (a, b) -> a.second > b.second ? 1 : -1);\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst) \n\
    \    {\n        foreach(col: row) \n        {\n            if(col == x) \n   \
    \         {\n                res = Tuple!(long, long)[](row, col);\n         \
    \       break;\n            }\n        }\n        if(res != null) break;\n   \
    \ }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].length; ++j)\n     \
    \       {\n                if(lst[i][j] == x)\n                {\n           \
    \         res.add(new Tuple!(i, j));\n                }\n            }\n     \
    \   }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; i++){\n        for(int j\
    \ = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n           \
    \     res.push(Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    sort(res, (a, b) => a.second\
    \ > b.second);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res =\
    \ null;\n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    \
    \    if(res != null)\n            break;\n    }\n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i,\
    \ j);\n    }), 0..lst.length-1);\n    \n    foreach(i -> foreach(j -> {\n    \
    \    if(lst[i][j] > x)\n            res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n          \
    \  res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i,\
    \ j);\n    }), 0 .. lst.length - 1);\n    \n    sort(res, (a, b) -> a.first <\
    \ b.first ? 1 : -1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = null;\n    \n    foreach(row,lst)\n    {\n        foreach(column,row)\n\
    \        {\n            if(column == x)\n            {\n                if(result\
    \ == null)\n                {\n                    result = Tuple!(long, long)[Tuple!(0,\
    \ column)];\n                }\n                else\n                {\n    \
    \                result = Tuple!(long, long)[Tuple!(result[result.length-1].first,\
    \ column), Tuple!(result[result.length-1].second, column)];\n                }\n\
    \            }\n        }\n    }\n    \n    foreach(row,result)\n    {\n     \
    \   foreach(column,row)\n        {\n            foreach(coord,row)\n         \
    \   {\n                coord.first = coord.first + 1;\n                coord.second\
    \ = coord.second + 1;\n            }\n        }\n    }\n    \n    foreach(row,result)\n\
    \    {\n        foreach(column,row)\n        {\n            foreach(coord,row)\n\
    \            {\n                coord.first = coord.first - 1;\n             \
    \   coord.second = coord.second - 1;\n            }\n        }\n    }\n    \n\
    \    foreach(row,result)\n    {\n        foreach(column,row)\n        {\n    \
    \        foreach(coord,row)\n            {\n                coord.first = coord.first\
    \ + 1;\n                coord.second = coord.second + 1;\n            }\n    \
    \    }\n    }\n    \n    foreach(row,result)\n    {\n        foreach(column,row)\n\
    \        {\n            foreach(coord,row)\n            {\n                coord.first\
    \ = coord.first - 1;\n                coord.second = coord.second - 1;\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i].length == x)\n        {\n            for(int\
    \ j = 0; j < lst[i].length; j++)\n            {\n                if(lst[i][j]\
    \ == x)\n                {\n                    res[res.length] = Tuple!(i, j);\n\
    \                }\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(lst[i].length == x)\n        {\n   \
    \         for(int j = 0; j < lst[i].length; j++)\n            {\n            \
    \    res[lst[i][j]].x = i;\n                res[lst[i][j]].y = j;\n          \
    \  }\n        }\n    }\n    \n    for(int i = 0; i < res.length; i++)\n    {\n\
    \        for(int j = 0; j < res[i].x; j++)\n        {\n            for(int k =\
    \ 0; k < res[i].y; k++)\n            {\n                res[i].x = j;\n      \
    \          res[i].y = k;\n            }\n        }\n    }\n    \n    for(int i\
    \ = 0; i < res.length; i++)\n    {\n        for(int j = 0; j < res[i].x; j++)\n\
    \        {\n            for(int k = 0; k < res[i].y; k++)\n            {\n   \
    \             res[i].x = j;\n                res[i].y = k;\n            }\n  \
    \      }\n    }\n    \n    for(int i = 0; i < res.length; i++)\n    {\n      \
    \  for(int j = 0; j < res[i].x; j++)\n        {\n            for(int k = 0; k\
    \ < res[i].y; k++)\n            {\n                res[i].x = j;\n           \
    \     res[i].y = k;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < res.length; i++)\n    {\n        for(int j = 0; j < res[i].x; j++)\n   \
    \     {\n            for(int k = 0; k < res[i].y; k++)\n            {\n      \
    \          res[i].x = j;\n                res[i].y = k;\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < res.length; i++)\n    {\n        for(int\
    \ j = 0; j < res[i].x; j++)\n        {\n            for(int k = 0; k < res[i].y;\
    \ k++)\n            {\n                res[i].x = j;\n                res[i].y\
    \ = k;\n            }\n        }\n    }\n    \n    for(int i = 0; i < res.length;\
    \ i++)\n    {\n        for(int j = 0; j < res[i].x; j++)\n        {\n        \
    \    for(int k = 0; k < res[i].y; k++)\n            {\n                res[i].x\
    \ = j;\n                res[i].y = k;\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < res.length; i++)\n    {\n        for(int j = 0; j < res[i].x;\
    \ j++)\n        {\n            for(int k = 0; k < res[i].y; k++)\n           \
    \ {\n                res[i].x = j;\n                res[i].y = k;\n          \
    \  }\n        }\n    }\n    \n    for(int i = 0; i < res.length; i++)\n    {\n\
    \        for(int j = 0; j < res[i].x; j++)\n        {\n            for(int k =\
    \ 0; k < res[i].y; k++)\n            {\n                res[i].x = j;\n      \
    \          res[i].y = k;\n            }\n        }\n    }\n", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res.push(Tuple!(long,\
    \ long)(i + 1, j + 1));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.second > b.second);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x) {\n            Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n            foreach(k -> {\n                if(lst[i][k]\
    \ == x) {\n                    row.add(k);\n                }\n            });\n\
    \            res.add(row);\n        }\n    }), range(0, lst.length));\n    \n\
    \    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n            foreach(k -> {\n      \
    \          if(lst[i][k] == x) {\n                    row.add(k);\n           \
    \     }\n            });\n            res.add(row);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n \
    \       if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] row =\
    \ new Tuple!(long, long)[];\n            foreach(k -> \n            {\n      \
    \          row.push((i, k));\n            });\n            res.push(row);\n  \
    \      }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] > x)\n        {\n            foreach(k -> \n \
    \           {\n                Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \                foreach(l -> \n                {\n                    row.push((i,\
    \ l));\n                });\n                res.push(row);\n            });\n\
    \        }\n    }), range(0, lst.length));\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            res.add(new\
    \ Tuple!(i, j));\n        }\n    }), range(0, lst.length));\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n            res.add(new\
    \ Tuple!(i, j));\n        }\n    }), range(0, lst.length));\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] < x)\n        {\n            res.add(new\
    \ Tuple!(i, j));\n        }\n    }), range(0, lst.length));\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            res.add(new\
    \ Tuple!(i, j));\n        }\n    }), range(0, lst.length));\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length]\
    \ = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] > x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] < x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] ==\
    \ x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n          \
    \  res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n   \
    \ foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n            res[res.length]\
    \ = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] > x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] <\
    \ x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n  \
    \  foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n            res[res.length]\
    \ = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] < x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }), range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int i\
    \ = 0; i < lst.length; ++i)\n    {\n        if(lst[i].length == x)\n        {\n\
    \            for(int j = 0; j < lst[i].length; ++j)\n            {\n         \
    \       if(lst[i][j] == x)\n                {\n                    res[res.length]\
    \ = Tuple!(i, j);\n                }\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < res.length; ++i)\n    {\n        for(int j = 0; j < res.length;\
    \ ++j)\n        {\n            if(res[i]._1 == j)\n            {\n           \
    \     res[i]._2 = res[j]._2;\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] coord = new Tuple!(long,\
    \ long)[];\n            coord.push_back(i);\n            coord.push_back(j);\n\
    \            res.push_back(coord);\n        }\n    }), range(0, lst.size()));\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \            res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n\
    \    \n    sort(res, (a, b) -> {\n        if(a.first < b.first)\n            return\
    \ -1;\n        if(a.first > b.first)\n            return 1;\n        return 0;\n\
    \    });\n    \n    sort(res, (a, b) -> {\n        if(a.second < b.second)\n \
    \           return -1;\n        if(a.second > b.second)\n            return 1;\n\
    \        return 0;\n    });\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n   \
    \     foreach(column: row)\n        {\n            if(column == x)\n         \
    \   {\n                result.add(new Tuple!(row, column));\n            }\n \
    \       }\n    }\n    \n    result.sort(function(a, b) -> a.first < b.first);\n\
    \    result.sort(function(a, b) -> a.second > b.second);\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            for(int j = 0; j < lst[i].length; j++)\n            {\n         \
    \       res.add((i, j));\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] tmp;\n        foreach(k -> {\n            if(i == k)\
    \ continue;\n            if(j == k) continue;\n            tmp += [Tuple!(long,\
    \ long)!(x, i, j, k)];\n        });\n        res += tmp;\n    }), lst);\n    \n\
    \    sort(res);\n    sort(res, (a, b) -> b._1 - a._1);\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n  \
    \  for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n  \
    \      {\n            for(int j = 0; j < lst[i].length; ++j)\n            {\n\
    \                result.add(Tuple!(long, long)(i + 1, j + 1));\n            }\n\
    \        }\n    }\n    \n    result.sort(function(a, b) -> a.first < b.first ?\
    \ 1 : -1);\n    \n    for(int i = 0; i < result.length; ++i)\n    {\n        result[i].sort(function(a,\
    \ b) -> a.second < b.second ? 1 : -1);\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length; ++j)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res.add(new\
    \ Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res,\
    \ (a, b) -> a.first > b.first);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    \n    foreach(row,lst) \n    {\n        foreach(col,row) \n\
    \        {\n            if(col == x) \n            {\n                if(res ==\
    \ null) \n                {\n                    res = Tuple!(long, long)[];\n\
    \                }\n                \n                res[res.length] = Tuple!(long,\
    \ long)((row,col));\n            }\n        }\n    }\n    \n    sort(res);\n \
    \   sort(res,1,-1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(i : 0..lst.len()) \n    {\n        foreach(j : 0..lst[i].len())\
    \ \n        {\n            if(lst[i][j] == x) \n            {\n              \
    \  res = Tuple!(long, long)[](Tuple!(long, long)[](i, j), Tuple!(long, long)[](i,\
    \ j+1));\n                break;\n            }\n        }\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(row: lst) \n    {\n        foreach(col: row) \n        {\n   \
    \         if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst) \n    {\n        foreach(col: row) \n        {\n            if(col != x)\
    \ \n            {\n                res.push(Tuple!(long, long)((row, col)));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> res\
    \ = append(res, Tuple!(i, j), Tuple!(i, j)), lst), \n            0 .. lst.length\
    \ - 1);\n    \n    sort(res);\n    \n    foreach(i -> foreach(j -> res = append(res,\
    \ Tuple!(i, j), Tuple!(i, j)), res), \n            0 .. res.length - 1);\n   \
    \ \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length;\
    \ j++){\n            if(lst[i][j] == x){\n                res.add((i, j));\n \
    \           }\n        }\n    }\n    \n    sort(res, (a, b) -> a.first > b.first\
    \ ? 1 : -1);\n    sort(res, (a, b) -> a.second > b.second ? 1 : -1);\n    \n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) => -cmp(b, a));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                result.add(new Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    result.sort(function(a, b){return\
    \ a.first > b.first;});\n    result.sort(function(a, b){return a.second > b.second;});\n\
    \    \n    return result;\n}", "{\n    int[] row = new int[lst.length];\n    int[]\
    \ col = new int[lst[0].length];\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i].length; ++j)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                row[i] = j;\n          \
    \      col[j] = i;\n                break;\n            }\n        }\n    }\n\
    \    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n  \
    \  \n    for(int i = 0; i < lst.length; ++i)\n    {\n        res[i] = new Tuple!(long,\
    \ long)((row[i]), col[i]);\n    }\n    \n    Arrays.sort(res);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(row::lst) \n    {\n        foreach(col::row) \n        {\n   \
    \         if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) -> a.first < b.first ? -1 : a.first > b.first ? 1 : 0);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++){\n        if(lst[i][0] ==\
    \ x){\n            for(int j = 0; j < lst[i].length; j++){\n                if(lst[i][j]\
    \ == x){\n                    res.add((i, j));\n                }\n          \
    \  }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst, row_index: long in\
    \  0 .. row.length - 1)\n    {\n        foreach(column: row[0..row.length - 1],\
    \ column_index: long in  0 .. column.length - 1)\n        {\n            if(column[column_index]\
    \ == x)\n            {\n                result.add((row_index, column_index));\n\
    \            }\n        }\n    }\n    \n    result.sort(by=<);\n    result.sort(by=>(desc));\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(row,\
    \ resize(lst.length, Tuple!(long, long)[])) \n    {\n        foreach(col, row)\
    \ \n        {\n            if(col == x) \n            {\n                foreach(coord,\
    \ resize(row.length, Tuple!(long, long)[])) \n                {\n            \
    \        foreach(coord, row) \n                    {\n                       \
    \ if(coord[0] == row.length) \n                        {\n                   \
    \         coord[0] = coord[0] + 1; \n                            break;\n    \
    \                    }\n                        else \n                      \
    \  {\n                            coord[0] = coord[0] + 1; \n                \
    \        }\n                    }\n                    res[coord[0]] = Tuple!(row.length,\
    \ col);\n                }\n                break;\n            }\n        }\n\
    \    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord, res) \n\
    \        {\n            if(coord[0] == coord[1]) \n            {\n           \
    \     res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n      \
    \  }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord, res)\
    \ \n        {\n            if(coord[0] == coord[1]) \n            {\n        \
    \        res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n   \
    \     }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == coord[1]) \n            {\n   \
    \             res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n\
    \        }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == coord[1]) \n            {\n   \
    \             res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n\
    \        }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == coord[1]) \n            {\n   \
    \             res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n\
    \        }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == coord[1]) \n            {\n   \
    \             res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n\
    \        }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == coord[1]) \n            {\n   \
    \             res[coord[0]] = Tuple!(coord[0], coord[0] + 1); \n            }\n\
    \        }\n    }\n    \n    foreach(coord, res) \n    {\n        foreach(coord,\
    \ res) \n        {\n            if(coord[0] == ", "{\n    Tuple!(long, long)[]\
    \ result;\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \        {\n            result = [(i, j)];\n        }\n    }), range(0, lst.len));\n\
    \    \n    sort(result);\n    sort(result, (x, y) -> -cmp(x, y));\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    foreach(row: lst) \n    {\n        foreach(col: row) \n        {\n      \
    \      if(col == x) \n            {\n                res.push(Tuple!(long, long)((row,\
    \ col)));\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i, row) foreach(j, col)\
    \ \n    {\n        if (row[j] == x) \n        {\n            res[res.length] =\
    \ Tuple!(i, j);\n        }\n    }\n    sort(res);\n    sort(res, (a, b) => a[1]\
    \ < b[1] ? -1 : a[1] > b[1] ? 1 : 0);\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: int)\n\
    \    {\n        foreach(col: row, j: int)\n        {\n            if(col == x)\n\
    \            {\n                res[res.length] = Tuple!(i, j);\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) => a.1 < b.1);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                res.add(new Tuple!(i, j));\n            }\n    \
    \    }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(row,lst)\n    {\n       \
    \ foreach(col,row)\n        {\n            if(col == x)\n            {\n     \
    \           res.push(Tuple!(long, long)((row,col)));\n            }\n        }\n\
    \    }\n    \n    sort(res);\n    sort(res, true);\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n       \
    \     for(int j = 0; j < lst[i].length; j++)\n            {\n                res[lst[i][j]]\
    \ = (i, j);\n            }\n        }\n    }\n    sort(res);\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(row,lst) {\n        foreach(col,row)\
    \ {\n            if(col == x) {\n                res = Tuple!(long, long)[Tuple!(0,\
    \ col), Tuple!(1, col)];\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res,1,-1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n\
    \        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] row =\
    \ new Tuple!(long, long)[];\n            foreach(k -> \n            {\n      \
    \          if(lst[i][k] == x)\n                {\n                    row.push(Tuple!(long,\
    \ long)((i, j), k));\n                }\n            });\n            res.push(row);\n\
    \        }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            foreach(k -> \n            {\n\
    \                if(lst[i][k] == x)\n                {\n                    row.push(Tuple!(long,\
    \ long)((i, j), k));\n                }\n            });\n            res.push(row);\n\
    \        }\n    }), range(0, lst[0].length));\n    \n    foreach(i -> foreach(j\
    \ -> \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n            foreach(k -> \n       \
    \     {\n                if(lst[i][k] == x)\n                {\n             \
    \       row.push(Tuple!(long, long)((i, j), k));\n                }\n        \
    \    });\n            res.push(row);\n        }\n    }), range(0, lst.length));\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row:\
    \ lst, i: int)\n    {\n        foreach(col: row, j: int)\n        {\n        \
    \    if(col == x)\n            {\n                Tuple!(long, long)[] coord =\
    \ Tuple!(i, j);\n                \n                if(coord.Length > 0)\n    \
    \            {\n                    result = coord;\n                }\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                res.add((i, j));\n            }\n        }\n    }\n\
    \    sort(res);\n    sort(res, (a, b) -> -cmp(b._1, a._1));\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            for(int j = 0; j < lst[i].length; j++)\n            {\n         \
    \       res[lst[i][j]].x = i;\n                res[lst[i][j]].y = j;\n       \
    \     }\n        }\n    }\n    \n    sort(res);\n    \n    for(int i = 0; i <\
    \ res.length; i++)\n    {\n        res[i].x = res[i].x - lst[res[i].x].length;\n\
    \        res[i].y = res[i].y - lst[res[i].y].length;\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] ==\
    \ x)\n        {\n            for(int j = 0; j < lst[i].length; j++)\n        \
    \    {\n                result.add((i, j));\n            }\n        }\n    }\n\
    \    \n    result.sort(function(a, b){return b._1 - a._1});\n    result.sort(function(a,\
    \ b){return a._2 - b._2});\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n                break;\n            }\n        }\n      \
    \  if(res != null)\n            break;\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row: lst) \n    {\n\
    \        foreach(col: row) \n        {\n            if(col == x) \n          \
    \  {\n                res.push(Tuple!(long, long)(x-1, row-1));\n            }\n\
    \        }\n    }\n    \n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col != x) \n            {\n                res.push(Tuple!(long,\
    \ long)(x-1, row-1));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst) \n    {\n        foreach(col: row) \n        {\n            if(col != x)\
    \ \n            {\n                res.push(Tuple!(long, long)(x-1, row-1));\n\
    \            }\n        }\n    }\n    \n    foreach(row: lst) \n    {\n      \
    \  foreach(col: row) \n        {\n            if(col != x) \n            {\n \
    \               res.push(Tuple!(long, long)(x-1, row-1));\n            }\n   \
    \     }\n    }\n    \n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col != x) \n            {\n                res.push(Tuple!(long,\
    \ long)(x-1, row-1));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst) \n    {\n        foreach(col: row) \n        {\n            if(col != x)\
    \ \n            {\n                res.push(Tuple!(long, long)(x-1, row-1));\n\
    \            }\n        }\n    }\n    \n    foreach(row: lst) \n    {\n      \
    \  foreach(col: row) \n        {\n            if(col != x) \n            {\n \
    \               res.push(Tuple!(long, long)(x-1, row-1));\n            }\n   \
    \     }\n    }\n    \n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col != x) \n            {\n                res.push(Tuple!(long,\
    \ long)(x-1, row-1));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst) \n    {\n        foreach(col: row) \n        {\n            if(col != x)\
    \ \n            {\n                res.push(Tuple!(long, long)(x-1, row-1));\n\
    \            }\n        }\n    }\n    \n    foreach(row: lst) \n    {\n      \
    \  foreach(col: row) \n        {\n            if(col != x) \n            {\n \
    \               res.push(Tuple!(long, long)(x-1, row-1));\n            }\n   \
    \     }\n    }\n    \n    foreach(row: lst) \n    {\n        foreach(col", "{\n\
    \    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst, i: int) \n    {\n        foreach(col: row, j: int) \n        {\n      \
    \      if(col == x) \n            {\n                result.add((i, j));\n   \
    \         }\n        }\n    }\n    \n    result.sort(compareByDescending);\n \
    \   result.sort(compareByDescending);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[]\
    \ tt = new Tuple!(long, long)[];\n            tt.push((i, j));\n            res.push(tt);\n\
    \        }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] > x)\n        {\n            Tuple!(long, long)[]\
    \ tt = new Tuple!(long, long)[];\n            tt.push((i, j));\n            res.push(tt);\n\
    \        }\n    }), range(0, lst.length));\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i :\
    \ 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n        {\n\
    \            if(lst[i][j] == x)\n            {\n                res.push(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) => a.first > b.first ? 1 : -1);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                result.add((i, j));\n\
    \            }\n        }\n    }\n    \n    result.sort(function(a, b) -> a.first\
    \ > b.first);\n    result.sort(function(a, b) -> a.second > b.second);\n    \n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.push(new Tuple!(i, j));\n            }\n        }\n    }\n    \n   \
    \ sort(res);\n    sort(res, (a, b) => a.first > b.first);\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n      \
    \  foreach(col::row) \n        {\n            if(col == x) \n            {\n \
    \               res = Tuple!(long, long)[](row, col);\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n  \
    \  \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                if(res\
    \ == null)\n                {\n                    res = Tuple!(long, long)[](Tuple!(long,\
    \ long)[](i, j));\n                }\n                else\n                {\n\
    \                    res = Tuple!(long, long)[](Tuple!(long, long)[](i, j), res);\n\
    \                }\n            }\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(i : 0..lst.len())\n    {\n\
    \        foreach(j : 0..lst[i].len())\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res = new Tuple!(i, j);\n               \
    \ break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst)\n    {\n        foreach(column: row)\n\
    \        {\n            if(column == x)\n            {\n                result.add(Tuple!(column,\
    \ row));\n            }\n        }\n    }\n    \n    sort(result);\n    sort(result,\
    \ (a, b) => a.first > b.first);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = null;\n    foreach(row: lst)\n\
    \    {\n        foreach(col: row)\n        {\n            if(col == x)\n     \
    \       {\n                result = Tuple!(long, long)[](row, col);\n        \
    \        break;\n            }\n        }\n        if(result != null)\n      \
    \      break;\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n\
    \    \n    foreach(row) \n    {\n        foreach(col) \n        {\n          \
    \  if(col == x) \n            {\n                res = Tuple!(long, long)[](row,\
    \ col);\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row,lst) \n    {\n        foreach(col,row) \n  \
    \      {\n            if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)(x-1, col));\n            }\n        }\n    }\n    \n    sort(res);\n \
    \   sort(res,1,-1);\n    \n    return res;\n}\n/*"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
