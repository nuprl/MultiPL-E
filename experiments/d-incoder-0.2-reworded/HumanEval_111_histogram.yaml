name: HumanEval_111_histogram
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return an associative array\n    of the letter\
  \ with the most repetition and containing the corresponding count.\n    If several\
  \ letters have the same occurrence, return all of them.\n    \n    Example:\n  \
  \  >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n  \
  \  >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
  a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\"\
  )\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n  \
  \  \n*/\nNullable!(long[string]) histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n\
    \    \n    foreach(test, function(letter) {\n        \n        if(!isNull(result))\
    \ {\n            result[letter] = result[letter] + 1L;\n        } else {\n   \
    \         result[letter] = 1L;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test, char);\n        \n        if(result\
    \ == null) {\n            result = make!(char: char, count: count);\n        }\
    \ else {\n            result[char] = count;\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char c : char[])\n    {\n        Nullable!(long[string]) subResult = histogram(c);\n\
    \        \n        if(subResult.hasValue)\n        {\n            Nullable!(long[string])\
    \ subResultValue = subResult.value;\n            \n            foreach(subResultValue,\
    \ string s : string)\n            {\n                Nullable!(long[string]) subSubResult\
    \ = histogram(s);\n                \n                if(subSubResult.hasValue)\n\
    \                {\n                    Nullable!(long[string]) subSubResultValue\
    \ = subSubResult.value;\n                    \n                    foreach(subSubResultValue,\
    \ string s2 : string)\n                    {\n                        Nullable!(long[string])\
    \ subSubSubResult = histogram(s2);\n                        \n               \
    \         if(subSubSubResult.hasValue)\n                        {\n          \
    \                  Nullable!(long[string]) subSubSubResultValue = subSubSubResult.value;\n\
    \                            \n                            foreach(subSubSubResultValue,\
    \ string s3 : string)\n                            {\n                       \
    \         Nullable!(long[string]) subSubSubSubResult = histogram(s3);\n      \
    \                          \n                                if(subSubSubSubResult.hasValue)\n\
    \                                {\n                                    Nullable!(long[string])\
    \ subSubSubSubResultValue = subSubSubSubResult.value;\n                      \
    \              \n                                    foreach(subSubSubSubResultValue,\
    \ string s4 : string)\n                                    {\n               \
    \                         Nullable!(long[string]) subSubSubSubSubResult = histogram(s4);\n\
    \                                        \n                                  \
    \      if(subSubSubSubSubResult.hasValue)\n                                  \
    \      {\n                                            Nullable!(long[string])\
    \ subSubSubSubSubResultValue = subSubSubSubSubResult.value;\n                \
    \                            \n                                            foreach(subSubSubSubSubResultValue,\
    \ string s5 : string)\n                                            {\n       \
    \                                         Nullable!(long[string]) subSubSubSubSubSubResult\
    \ = histogram(s5);\n                                                \n       \
    \                                         if(subSubSubSubSubSubResult.hasValue)\n\
    \                                                {\n                         \
    \                           Nullable!(long[string]) subSubSubSubSubSubResultValue\
    \ = subSubSubSubSubSubResult.value;\n                                        \
    \            \n                                                    foreach(subSubSubSubSubSubResultValue,\
    \ string s6 : string)\n                                                    {\n\
    \                                                        Nullable!(long[string])\
    \ subSubSubSubSubSubSubResult = histogram(s6);\n                             \
    \                           \n                                               \
    \         if(subSubSubSubSubSubResult.hasValue)\n                            \
    \                            {\n                                             \
    \               Nullable!(long[string]) subSubSubSubSubSubSubResultValue = subSubSubSubSub",
  "{\n    var result = ___nullable_dict___;\n    foreach(test, function(char) {\n\
    \        var count = result[char];\n        if(count == null) {\n            result[char]\
    \ = 1;\n        } else {\n            result[char] = count + 1;\n        }\n \
    \   });\n    return result;\n}\n/*\nGiven a string representing a space separated\
    \ lowercase letters, return an associative array\n    of the letter with the most\
    \ repetition and containing the corresponding count.\n    If several letters have\
    \ the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
    a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"\
    a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
    )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n   \
    \ [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___", "{\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = 1;\n        \n        foreach(test, char => {\n            if(char == char)\
    \ {\n                count++;\n            }\n        });\n        \n        if(result\
    \ == null) {\n            result = __dict_add(result, char, count);\n        }\
    \ else {\n            result = __dict_add(result, char, count);\n        }\n \
    \   });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    foreach(char\
    \ c in test) {\n        Nullable!(long[string]) sub = histogram(c.toString());\n\
    \        if(sub != null)\n            result = sub;\n    }\n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test, char);\n        \n        if(result\
    \ == null) {\n            result = __dict_add(result, char, count);\n        }\
    \ else {\n            \n            Nullable!(long) max = __dict_max(result);\n\
    \            \n            if(count > max) {\n                result = __dict_add(result,\
    \ char, count);\n            }\n        }\n    });\n    \n    return result;\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(char c in test)\n    {\n        Nullable!(long)\
    \ count = get(test, c);\n        \n        if(count == null)\n        {\n    \
    \        count = long.zero;\n        }\n        \n        if(result == null)\n\
    \        {\n            result = count;\n        }\n        else\n        {\n\
    \            result = max(result, count);\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    foreach(char\
    \ c in test) {\n        Nullable!(long) count = count(test);\n        Nullable!(long)\
    \ maxCount = count.max;\n        Nullable!(long) maxChar = count.max.key;\n  \
    \      Nullable!(long) maxCharCount = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxCharCountValue = count.max.value;\n        Nullable!(long)\
    \ maxCharCountIndex = count.max.index;\n        Nullable!(long) maxCharCountValue\
    \ = count.max.value;\n        Nullable!(long) maxCharCountIndex = count.max.index;\n\
    \        Nullable!(long) maxChar", "{\n    var result = new Nullable<long[string]>(null);\n\
    \    \n    foreach(char c in test)\n    {\n        long count = count(test.split(c));\n\
    \        \n        if(result.value == null)\n        {\n            result.value\
    \ = count;\n        }\n        else\n        {\n            result.value += count;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test.split());\n        \n        if(result == null) {\n           \
    \ result = dict();\n        }\n        \n        foreach(result, char => {\n \
    \           result[char] = result.getOrElse(char, 0) + count;\n        });\n \
    \   });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    foreach(char c in test) {\n        Nullable!(long[string]) sub\
    \ = histogram(c + test);\n        if (sub != null)\n            result = sub;\n\
    \    }\n    if (result == null)\n        result = ___null_dict___;\n    return\
    \ result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        long count = count(test);\n        \n        if(result == null\
    \ || count > result[char])\n        {\n            result[char] = count;\n   \
    \     }\n    });\n    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
