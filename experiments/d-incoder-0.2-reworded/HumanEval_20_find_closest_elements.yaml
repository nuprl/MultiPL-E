name: HumanEval_20_find_closest_elements
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
  \ find_closest_elements(float[] numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if(number < smallest) {\n         \
    \   smallest = number;\n        }\n        if(number > largest) {\n          \
    \  largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n  \
    \  float smallest_diff = smallest;\n    float largest_diff = largest;\n    \n\
    \    for (int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]\
    \ - smallest;\n        if (diff < smallest_diff)\n        {\n            smallest_diff\
    \ = diff;\n            smallest = numbers[i];\n        }\n        \n        diff\
    \ = numbers[i] - largest;\n        if (diff > largest_diff)\n        {\n     \
    \       largest_diff = diff;\n            largest = numbers[i];\n        }\n \
    \   }\n    \n    return Tuple!(smallest, largest);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if(number < smallest) {\n            smallest = number;\n       \
    \ }\n        if(number > largest) {\n            largest = number;\n        }\n\
    \    }\n    return Tuple!(smallest, largest);\n}", "{\n\tfloat min = numbers[0];\n\
    \tfloat max = numbers[0];\n\tfloat closest = numbers[0];\n\tfloat closest2 = numbers[0];\n\
    \tfloat closest3 = numbers[0];\n\tfloat closest4 = numbers[0];\n\tfloat closest5\
    \ = numbers[0];\n\tfloat closest6 = numbers[0];\n\tfloat closest7 = numbers[0];\n\
    \tfloat closest8 = numbers[0];\n\tfloat closest9 = numbers[0];\n\tfloat closest10\
    \ = numbers[0];\n\tfloat closest11 = numbers[0];\n\tfloat closest12 = numbers[0];\n\
    \tfloat closest13 = numbers[0];\n\tfloat closest14 = numbers[0];\n\tfloat closest15\
    \ = numbers[0];\n\tfloat closest16 = numbers[0];\n\tfloat closest17 = numbers[0];\n\
    \tfloat closest18 = numbers[0];\n\tfloat closest19 = numbers[0];\n\tfloat closest20\
    \ = numbers[0];\n\tfloat closest21 = numbers[0];\n\tfloat closest22 = numbers[0];\n\
    \tfloat closest23 = numbers[0];\n\tfloat closest24 = numbers[0];\n\tfloat closest25\
    \ = numbers[0];\n\tfloat closest26 = numbers[0];\n\tfloat closest27 = numbers[0];\n\
    \tfloat closest28 = numbers[0];\n\tfloat closest29 = numbers[0];\n\tfloat closest30\
    \ = numbers[0];\n\tfloat closest31 = numbers[0];\n\tfloat closest32 = numbers[0];\n\
    \tfloat closest33 = numbers[0];\n\tfloat closest34 = numbers[0];\n\tfloat closest35\
    \ = numbers[0];\n\tfloat closest36 = numbers[0];\n\tfloat closest37 = numbers[0];\n\
    \tfloat closest38 = numbers[0];\n\tfloat closest39 = numbers[0];\n\tfloat closest40\
    \ = numbers[0];\n\tfloat closest41 = numbers[0];\n\tfloat closest42 = numbers[0];\n\
    \tfloat closest43 = numbers[0];\n\tfloat closest44 = numbers[0];\n\tfloat closest45\
    \ = numbers[0];\n\tfloat closest46 = numbers[0];\n\tfloat closest47 = numbers[0];\n\
    \tfloat closest48 = numbers[0];\n\tfloat closest49 = numbers[0];\n\tfloat closest50\
    \ = numbers[0];\n\tfloat closest51 = numbers[0];\n\tfloat closest52 = numbers[0];\n\
    \tfloat closest53 = numbers[0];\n\tfloat closest54 = numbers[0];\n\tfloat closest55\
    \ = numbers[0];\n\tfloat closest56 = numbers[0];\n\tfloat closest57 = numbers[0];\n\
    \tfloat closest58 = numbers[0];\n\tfloat closest59 = numbers[0];\n\tfloat closest60\
    \ = numbers[0];\n\tfloat closest61 = numbers[0];\n\tfloat closest62 = numbers[0];\n\
    \tfloat closest63 = numbers[0];\n\tfloat closest64 = number", "{\n\tfloat min\
    \ = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\t\t}\n\
    \t\telse if(numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\t\n\
    \treturn Tuple!(min, max);\n}", "{\n    float min1, min2;\n    float max1, max2;\n\
    \    float temp;\n    \n    min1 = max1 = numbers[0];\n    min2 = max2 = numbers[0];\n\
    \    \n    foreach(i : numbers) {\n        if (i < min1) {\n            min1 =\
    \ i;\n        }\n        if (i > max1) {\n            max1 = i;\n        }\n \
    \       if (i < min2) {\n            min2 = i;\n        }\n        if (i > max2)\
    \ {\n            max2 = i;\n        }\n    }\n    \n    temp = min1;\n    min1\
    \ = min2;\n    min2 = temp;\n    \n    temp = max1;\n    max1 = max2;\n    max2\
    \ = temp;\n    \n    foreach(i : numbers) {\n        if (i < min1) {\n       \
    \     min1 = i;\n        }\n        if (i > max1) {\n            max1 = i;\n \
    \       }\n        if (i < min2) {\n            min2 = i;\n        }\n       \
    \ if (i > max2) {\n            max2 = i;\n        }\n    }\n    \n    return Tuple!(min1,\
    \ min2);\n}", "{\n    float smallest;\n    float largest;\n    float smallest_element;\n\
    \    float largest_element;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_element = numbers[0];\n    largest_element = numbers[0];\n    \n\
    \    foreach(number in numbers)\n    {\n        if(number < smallest)\n      \
    \  {\n            smallest = number;\n            smallest_element = number;\n\
    \        }\n        else if(number > largest)\n        {\n            largest\
    \ = number;\n            largest_element = number;\n        }\n    }\n    \n \
    \   return Tuple!(smallest_element, largest_element);\n}", "{\n    float min1\
    \ = numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n\
    \    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length; ++i)\n \
    \   {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float tolerance) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n        {\n\
    \            min1 = numbers[i];\n        }\n        if(numbers[i] > max1)\n  \
    \      {\n            max1 = numbers[i];\n        }\n        if(numbers[i] > max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n        if(numbers[i] <\
    \ min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min1, max1);\n}\n/*\n From a supplied array of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float tolerance, float epsilon) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat max1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max1)\n\t\t\
    {\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\
    \t\tmax2 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] < min2)\n\t\t{\n\t\t\t\
    min2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1, min2, max2);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\
    \tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat mid1 = numbers[0];\n\
    \tfloat mid2 = numbers[0];\n\tfloat mid3 = numbers[0];\n\tfloat mid4 = numbers[0];\n\
    \tfloat mid5 = numbers[0];\n\tfloat mid6 = numbers[0];\n\tfloat mid7 = numbers[0];\n\
    \tfloat mid8 = numbers[0];\n\tfloat mid9 = numbers[0];\n\tfloat mid10 = numbers[0];\n\
    \tfloat mid11 = numbers[0];\n\tfloat mid12 = numbers[0];\n\tfloat mid13 = numbers[0];\n\
    \tfloat mid14 = numbers[0];\n\tfloat mid15 = numbers[0];\n\tfloat mid16 = numbers[0];\n\
    \tfloat mid17 = numbers[0];\n\tfloat mid18 = numbers[0];\n\tfloat mid19 = numbers[0];\n\
    \tfloat mid20 = numbers[0];\n\tfloat mid21 = numbers[0];\n\tfloat mid22 = numbers[0];\n\
    \tfloat mid23 = numbers[0];\n\tfloat mid24 = numbers[0];\n\tfloat mid25 = numbers[0];\n\
    \tfloat mid26 = numbers[0];\n\tfloat mid27 = numbers[0];\n\tfloat mid28 = numbers[0];\n\
    \tfloat mid29 = numbers[0];\n\tfloat mid30 = numbers[0];\n\tfloat mid31 = numbers[0];\n\
    \tfloat mid32 = numbers[0];\n\tfloat mid33 = numbers[0];\n\tfloat mid34 = numbers[0];\n\
    \tfloat mid35 = numbers[0];\n\tfloat mid36 = numbers[0];\n\tfloat mid37 = numbers[0];\n\
    \tfloat mid38 = numbers[0];\n\tfloat mid39 = numbers[0];\n\tfloat mid40 = numbers[0];\n\
    \tfloat mid41 = numbers[0];\n\tfloat mid42 = numbers[0];\n\tfloat mid43 = numbers[0];\n\
    \tfloat mid44 = numbers[0];\n\tfloat mid45 = numbers[0];\n\tfloat mid46 = numbers[0];\n\
    \tfloat mid47 = numbers[0];\n\tfloat mid48 = numbers[0];\n\tfloat mid49 = numbers[0];\n\
    \tfloat mid50 = numbers[0];\n\tfloat mid51 = numbers[0];\n\tfloat mid52 = numbers[0];\n\
    \tfloat mid53 = numbers[0];\n\tfloat mid54 = numbers[0];\n\tfloat mid55 = numbers[0];\n\
    \tfloat mid56 = numbers[0];\n\tfloat mid57 = numbers[0];\n\tfloat mid58 = numbers[0];\n\
    \tfloat mid59 = numbers[0];\n\tfloat mid60 = numbers[0];\n\tfloat mid61 = numbers[0];\n\
    \tfloat mid62 = number", "{\n    float smallest;\n    float largest;\n    float\
    \ smallest_diff;\n    float largest_diff;\n    float smallest_element;\n    float\
    \ largest_element;\n    float smallest_distance;\n    float largest_distance;\n\
    \    float smallest_distance2;\n    float largest_distance2;\n    float smallest_distance3;\n\
    \    float largest_distance3;\n    float smallest_distance4;\n    float largest_distance4;\n\
    \    float smallest_distance5;\n    float largest_distance5;\n    float smallest_distance6;\n\
    \    float largest_distance6;\n    float smallest_distance7;\n    float largest_distance7;\n\
    \    float smallest_distance8;\n    float largest_distance8;\n    float smallest_distance9;\n\
    \    float largest_distance9;\n    float smallest_distance10;\n    float largest_distance10;\n\
    \    float smallest_distance11;\n    float largest_distance11;\n    float smallest_distance12;\n\
    \    float largest_distance12;\n    float smallest_distance13;\n    float largest_distance13;\n\
    \    float smallest_distance14;\n    float largest_distance14;\n    float smallest_distance15;\n\
    \    float largest_distance15;\n    float smallest_distance16;\n    float largest_distance16;\n\
    \    float smallest_distance17;\n    float largest_distance17;\n    float smallest_distance18;\n\
    \    float largest_distance18;\n    float smallest_distance19;\n    float largest_distance19;\n\
    \    float smallest_distance20;\n    float largest_distance20;\n    float smallest_distance21;\n\
    \    float largest_distance21;\n    float smallest_distance22;\n    float largest_distance22;\n\
    \    float smallest_distance23;\n    float largest_distance23;\n    float smallest_distance24;\n\
    \    float largest_distance24;\n    float smallest_distance25;\n    float largest_distance25;\n\
    \    float smallest_distance26;\n    float largest_distance26;\n    float smallest_distance27;\n\
    \    float largest_distance27;\n    float smallest_distance28;\n    float largest_distance28;\n\
    \    float smallest_distance29;\n    float largest_distance29;\n    float smallest_distance30;\n\
    \    float largest_distance30;\n    float smallest_distance31;\n    float largest_distance31;\n\
    \    float smallest_distance32;\n    ", "{\n\tlet len = numbers.length;\n\tif\
    \ (len < 2) {\n\t\tthrow new Exception(\"find_closest_elements: array too small\"\
    );\n\t}\n\tlet min1 = numbers[0];\n\tlet max1 = numbers[0];\n\tlet min2 = numbers[0];\n\
    \tlet max2 = numbers[0];\n\tfor (let i = 1; i < len; i++) {\n\t\tlet cur = numbers[i];\n\
    \t\tif (cur < min1) {\n\t\t\tmin1 = cur;\n\t\t}\n\t\tif (cur > max1) {\n\t\t\t\
    max1 = cur;\n\t\t}\n\t\tif (cur < min2) {\n\t\t\tmin2 = cur;\n\t\t}\n\t\tif (cur\
    \ > max2) {\n\t\t\tmax2 = cur;\n\t\t}\n\t}\n\treturn Tuple!(min1, max1, min2,\
    \ max2);\n}", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int\
    \ i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n    \
    \    {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        \n  \
    \      if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n    \
    \    }\n        else if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n\tfloat min1\
    \ = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat\
    \ max2 = numbers[0];\n\tfloat temp;\n\tfloat temp2;\n\tfloat temp3;\n\tfloat temp4;\n\
    \tfloat temp5;\n\tfloat temp6;\n\tfloat temp7;\n\tfloat temp8;\n\tfloat temp9;\n\
    \tfloat temp10;\n\tfloat temp11;\n\tfloat temp12;\n\tfloat temp13;\n\tfloat temp14;\n\
    \tfloat temp15;\n\tfloat temp16;\n\tfloat temp17;\n\tfloat temp18;\n\tfloat temp19;\n\
    \tfloat temp20;\n\tfloat temp21;\n\tfloat temp22;\n\tfloat temp23;\n\tfloat temp24;\n\
    \tfloat temp25;\n\tfloat temp26;\n\tfloat temp27;\n\tfloat temp28;\n\tfloat temp29;\n\
    \tfloat temp30;\n\tfloat temp31;\n\tfloat temp32;\n\tfloat temp33;\n\tfloat temp34;\n\
    \tfloat temp35;\n\tfloat temp36;\n\tfloat temp37;\n\tfloat temp38;\n\tfloat temp39;\n\
    \tfloat temp40;\n\tfloat temp41;\n\tfloat temp42;\n\tfloat temp43;\n\tfloat temp44;\n\
    \tfloat temp45;\n\tfloat temp46;\n\tfloat temp47;\n\tfloat temp48;\n\tfloat temp49;\n\
    \tfloat temp50;\n\tfloat temp51;\n\tfloat temp52;\n\tfloat temp53;\n\tfloat temp54;\n\
    \tfloat temp55;\n\tfloat temp56;\n\tfloat temp57;\n\tfloat temp58;\n\tfloat temp59;\n\
    \tfloat temp60;\n\tfloat temp61;\n\tfloat temp62;\n\tfloat temp63;\n\tfloat temp64;\n\
    \tfloat temp65;\n\tfloat temp66;\n\tfloat temp67;\n\tfloat temp68;\n\tfloat temp69;\n\
    \tfloat temp70;\n\tfloat temp71;\n\tfloat temp72;\n\tfloat temp73;\n\tfloat temp74;\n\
    \tfloat temp75;\n\tfloat temp76;\n\tfloat temp77;\n\tfloat temp78;\n\tfloat temp79;\n\
    \tfloat temp80;\n\tfloat temp81;\n\tfloat temp82;\n\tfloat temp83;\n\tfloat temp84",
  "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n  \
    \  foreach(number in numbers) {\n        if(number < smallest) {\n           \
    \ smallest = number;\n        }\n        if(number > largest) {\n            largest\
    \ = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \   {\n            min = numbers[i];\n        }\n        else if(numbers[i] >\
    \ max)\n        {\n            max = numbers[i];\n        }\n    }\n    \n   \
    \ return Tuple!(min, max);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 =\
    \ numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\t\
    for (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t\
    {\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\
    \t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\t\
    max2 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    \n    foreach(number in numbers)\n    {\n        if(number < smallest)\n\
    \        {\n            smallest = number;\n        }\n        else if(number\
    \ > largest)\n        {\n            largest = number;\n        }\n    }\n   \
    \ \n    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    foreach(number in numbers) {\n   \
    \     if(number < smallest) {\n            smallest = number;\n        }\n   \
    \     if(number > largest) {\n            largest = number;\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}", "{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        if(numbers[i]\
    \ > max2)\n        {\n            max2 = numbers[i];\n        }\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min1, max1);\n}\n/*\n From a supplied array of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, int start) \n{\n    float min1 = numbers[start];\n\
    \    float min2 = numbers[start];\n    float max1 = numbers[start];\n    float\
    \ max2 = numbers[start];\n    for(int i = start; i < numbers.length; ++i)\n  \
    \  {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ int start, int end) \n{\n    float min1 = numbers[start];\n    float min2 =\
    \ numbers[start];\n    float max1 = numbers[start];\n    float max2 = numbers[start];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        if(numbers[i] < min1)\n\
    \        {\n            min1 = numbers[i];\n        }\n        if(numbers[i] > ",
  "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\t\
    largest = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\
    \tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t\
    {\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i]\
    \ > min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] < max2)\n\
    \t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor (int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\
    \t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\t\
    return Tuple!(min1, max1);\n}", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    foreach(number in numbers) {\n        if (number\
    \ < smallest) {\n            smallest = number;\n        }\n        if (number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if(number < smallest) {\n         \
    \   smallest = number;\n        }\n        if(number > largest) {\n          \
    \  largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n  \
    \  foreach(number in numbers) {\n        if(number < smallest) {\n           \
    \ smallest = number;\n        }\n        if(number > largest) {\n            largest\
    \ = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float closest;\n\
    \    \n    for (float number : numbers) {\n        if (number < min) {\n     \
    \       min = number;\n        } else if (number > max) {\n            max = number;\n\
    \        }\n    }\n    \n    closest = (min + max) / 2;\n    \n    return Tuple!(float,\
    \ float)(min, closest);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if (number < smallest)\
    \ {\n            smallest = number;\n        }\n        if (number > largest)\
    \ {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if (number < smallest) {\n            smallest = number;\n      \
    \  }\n        if (number > largest) {\n            largest = number;\n       \
    \ }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon, float delta) \n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    foreach(number in numbers) {\n        if (number\
    \ < smallest) {\n            smallest = number;\n        }\n        if (number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float min_distance)\
    \ \n{\n    float smallest = numbers[0];\n    float largest", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t\
    }\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\tfloat smallest;\n\tfloat\
    \ largest;\n\tfloat smallest_element;\n\tfloat largest_element;\n\t\n\tsmallest\
    \ = numbers[0];\n\tlargest = numbers[0];\n\tsmallest_element = numbers[0];\n\t\
    largest_element = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length; ++i)\n\
    \t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t\
    \tsmallest_element = numbers[i];\n\t\t}\n\t\t\n\t\tif (numbers[i] > largest)\n\
    \t\t{\n\t\t\tlargest = numbers[i];\n\t\t\tlargest_element = numbers[i];\n\t\t\
    }\n\t}\n\t\n\treturn Tuple!(smallest_element, largest_element);\n}", "{\n    float\
    \ min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n\
    \    float max2 = numbers[0];\n    \n    for(int i = 0; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if(number < smallest) {\n            smallest = number;\n       \
    \ }\n        if(number > largest) {\n            largest = number;\n        }\n\
    \    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_difference = largest-smallest;\n\
    \    float largest_difference = largest-smallest;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        float current_number = numbers[i];\n        float current_difference\
    \ = current_number-smallest;\n        if(current_difference < smallest_difference)\n\
    \        {\n            smallest_difference = current_difference;\n          \
    \  smallest = current_number;\n        }\n        else if(current_difference >\
    \ largest_difference)\n        {\n            largest_difference = current_difference;\n\
    \            largest = current_number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_difference\
    \ = largest-smallest;\n    float largest_difference = largest-smallest;\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        float current_number = numbers[i];\n\
    \        float current_difference = current_number-smallest;\n        if(current_difference\
    \ < smallest_difference)\n        {\n            smallest_difference = current_difference;\n\
    \            smallest = current_number;\n        }\n        else if(current_difference\
    \ > largest_difference)\n        {\n            largest_difference = current_difference;\n\
    \            largest = current_number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float min_difference)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_difference = largest-", "{\n    float min1 = numbers[0];\n  \
    \  float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    foreach(i : numbers) {\n        if (i < min1) {\n            min1 =\
    \ i;\n        } else if (i > max1) {\n            max1 = i;\n        }\n     \
    \   if (i < min2) {\n            min2 = i;\n        } else if (i > max2) {\n \
    \           max2 = i;\n        }\n    }\n    \n    return Tuple!(min1, min2);\n\
    }", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\t\
    for (int i = 1; i < numbers.length; i++)\n\t{\n\t\tif (numbers[i] < smallest)\n\
    \t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\
    \t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\
    \t\n\tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\
    \t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\
    \t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n\t\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\
    \t\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfloat temp;\n\
    \t\n\tfor(int i = 0; i < numbers.length; i++)\n\t{\n\t\ttemp = numbers[i];\n\t\
    \t\n\t\tif(temp < min1)\n\t\t{\n\t\t\tmin1 = temp;\n\t\t}\n\t\t\n\t\tif(temp >\
    \ max1)\n\t\t{\n\t\t\tmax1 = temp;\n\t\t}\n\t\t\n\t\tif(temp < min2)\n\t\t{\n\t\
    \t\tmin2 = temp;\n\t\t}\n\t\t\n\t\tif(temp > max2)\n\t\t{\n\t\t\tmax2 = temp;\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(min1, min2);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_difference = largest;\n \
    \   float largest_difference = smallest;\n    \n    for (float number : numbers)\
    \ {\n        if (number < smallest) {\n            smallest = number;\n      \
    \      smallest_difference = largest;\n        } else if (number > largest) {\n\
    \            largest = number;\n            largest_difference = smallest;\n \
    \       }\n    }\n    \n    return Tuple!(smallest, largest);\n}", "{\n    float\
    \ smallest;\n    float largest;\n    \n    smallest = numbers[0];\n    largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n        }\n        if(number > largest) {\n\
    \            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(i\
    \ : numbers)\n    {\n        if (i < min1)\n        {\n            min1 = i;\n\
    \        }\n        else if (i > max1)\n        {\n            max1 = i;\n   \
    \     }\n    }\n    \n    foreach(i : numbers)\n    {\n        if (i < min2)\n\
    \        {\n            min2 = i;\n        }\n        else if (i > max2)\n   \
    \     {\n            max2 = i;\n        }\n    }\n    \n    return Tuple!(min1,\
    \ min2);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if(number < smallest - epsilon) {\n            smallest = number;\n\
    \        }\n        if(number > largest + epsilon) {\n            largest = number;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  \
    \  tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if(number\
    \ < smallest - delta && number > smallest + delta) {\n            smallest = number;\n\
    \        }\n        if(number > largest + delta && number < largest - delta) {\n\
    \            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float gamma",
  "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] < max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, min2);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n        }\n        if(number > largest) {\n\
    \            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\
    \t\n\tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\
    \t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\
    \t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for(float number : numbers) {\n        if(number < smallest) {\n        \
    \    smallest = number;\n        }\n        if(number > largest) {\n         \
    \   largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n  \
    \  foreach(number in numbers) {\n        if (number < smallest) {\n          \
    \  smallest = number;\n        }\n        if (number > largest) {\n          \
    \  largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float\
    \ max1 = numbers[0];\n    float max2 = numbers[0];\n    float mid1 = numbers[0];\n\
    \    float mid2 = numbers[0];\n    float minDiff = float.max;\n    float maxDiff\
    \ = float.min;\n    \n    foreach(i : numbers) {\n        float diff = abs(i -\
    \ min1);\n        if (diff < minDiff) {\n            minDiff = diff;\n       \
    \     min1 = i;\n        }\n        diff = abs(i - min2);\n        if (diff <\
    \ minDiff) {\n            minDiff = diff;\n            min2 = i;\n        }\n\
    \        diff = abs(i - max1);\n        if (diff > maxDiff) {\n            maxDiff\
    \ = diff;\n            max1 = i;\n        }\n        diff = abs(i - max2);\n \
    \       if (diff > maxDiff) {\n            maxDiff = diff;\n            max2 =\
    \ i;\n        }\n        diff = abs(i - mid1);\n        if (diff < minDiff) {\n\
    \            minDiff = diff;\n            mid1 = i;\n        }\n        diff =\
    \ abs(i - mid2);\n        if (diff < minDiff) {\n            minDiff = diff;\n\
    \            mid2 = i;\n        }\n    }\n    \n    return Tuple!(min1, min2);\n\
    }", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float\
    \ max1 = numbers[0];\n    float max2 = numbers[0];\n    float diff;\n    float\
    \ temp;\n    float temp2;\n    int i;\n    \n    for (i = 1; i < numbers.length;\
    \ ++i)\n    {\n        diff = numbers[i] - min1;\n        if (diff < 0)\n    \
    \    {\n            diff = diff * -1;\n        }\n        if (diff > max1)\n \
    \       {\n            max2 = max1;\n            max1 = min1;\n            min2\
    \ = min1;\n            min1 = diff;\n        }\n        else\n        {\n    \
    \        diff = diff * -1;\n            temp = min2;\n            min2 = min1;\n\
    \            min1 = temp;\n        }\n    }\n    \n    return Tuple!(min1, max1);\n\
    }", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n  \
    \  \n    foreach(number in numbers)\n    {\n        if(number < smallest)\n  \
    \      {\n            smallest = number;\n        }\n        if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    foreach(number in numbers) {\n        if(number <\
    \ smallest) {\n            smallest = number;\n        }\n        if(number >\
    \ largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat temp;\n\tfor (int\
    \ i = 0; i < numbers.length; ++i)\n\t{\n\t\ttemp = numbers[i];\n\t\tif (temp <\
    \ min1)\n\t\t{\n\t\t\tmin1 = temp;\n\t\t}\n\t\telse if (temp > max1)\n\t\t{\n\t\
    \t\tmax1 = temp;\n\t\t}\n\t\telse if (temp < min2)\n\t\t{\n\t\t\tmin2 = temp;\n\
    \t\t}\n\t\telse if (temp > max2)\n\t\t{\n\t\t\tmax2 = temp;\n\t\t}\n\t}\n\treturn\
    \ Tuple!(min1, min2);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if (number < smallest)\
    \ {\n            smallest = number;\n        }\n        if (number > largest)\
    \ {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat mid1 = numbers[0];\n\
    \tfloat mid2 = numbers[0];\n\tfloat mid3 = numbers[0];\n\tfloat mid4 = numbers[0];\n\
    \tfloat mid5 = numbers[0];\n\tfloat mid6 = numbers[0];\n\tfloat mid7 = numbers[0];\n\
    \tfloat mid8 = numbers[0];\n\tfloat mid9 = numbers[0];\n\tfloat mid10 = numbers[0];\n\
    \tfloat mid11 = numbers[0];\n\tfloat mid12 = numbers[0];\n\tfloat mid13 = numbers[0];\n\
    \tfloat mid14 = numbers[0];\n\tfloat mid15 = numbers[0];\n\tfloat mid16 = numbers[0];\n\
    \tfloat mid17 = numbers[0];\n\tfloat mid18 = numbers[0];\n\tfloat mid19 = numbers[0];\n\
    \tfloat mid20 = numbers[0];\n\tfloat mid21 = numbers[0];\n\tfloat mid22 = numbers[0];\n\
    \tfloat mid23 = numbers[0];\n\tfloat mid24 = numbers[0];\n\tfloat mid25 = numbers[0];\n\
    \tfloat mid26 = numbers[0];\n\tfloat mid27 = numbers[0];\n\tfloat mid28 = numbers[0];\n\
    \tfloat mid29 = numbers[0];\n\tfloat mid30 = numbers[0];\n\tfloat mid31 = numbers[0];\n\
    \tfloat mid32 = numbers[0];\n\tfloat mid33 = numbers[0];\n\tfloat mid34 = numbers[0];\n\
    \tfloat mid35 = numbers[0];\n\tfloat mid36 = numbers[0];\n\tfloat mid37 = numbers[0];\n\
    \tfloat mid38 = numbers[0];\n\tfloat mid39 = numbers[0];\n\tfloat mid40 = numbers[0];\n\
    \tfloat mid41 = numbers[0];\n\tfloat mid42 = numbers[0];\n\tfloat mid43 = numbers[0];\n\
    \tfloat mid44 = numbers[0];\n\tfloat mid45 = numbers[0];\n\tfloat mid46 = numbers[0];\n\
    \tfloat mid47 = numbers[0];\n\tfloat mid48 = numbers[0];\n\tfloat mid49 = numbers[0];\n\
    \tfloat mid50 = numbers[0];\n\tfloat mid51 = numbers[0];\n\tfloat mid52 = numbers[0];\n\
    \tfloat mid53 = numbers[0];\n\tfloat mid54 = numbers[0];\n\tfloat mid55 = numbers[0];\n\
    \tfloat mid56 = numbers[0];\n\tfloat mid57 = numbers[0];\n\tfloat mid58 = numbers[0];\n\
    \tfloat mid59 = numbers[0];\n\tfloat mid60 = numbers[0];\n\tfloat mid61 = numbers[0];\n\
    \tfloat mid62 = number", "{\n\tfloat smallest = numbers[0];\n\tfloat largest =\
    \ numbers[0];\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i]\
    \ < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
    \ > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if (number < smallest) {\n        \
    \    smallest = number;\n        }\n        if (number > largest) {\n        \
    \    largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfloat\
    \ smallest_index = -1;\n\tfloat largest_index = -1;\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t\tsmallest_index = i;\n\t\t}\n\t\telse if(numbers[i] > largest)\n\t\t{\n\t\
    \t\tlargest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest;\n    float largest;\n    float smallest_index;\n\
    \    float largest_index;\n    float smallest_diff;\n    float largest_diff;\n\
    \    float temp;\n    float temp_diff;\n    \n    smallest_diff = largest = numbers[0];\n\
    \    smallest_index = largest_index = smallest_index = 0;\n    \n    for(float\
    \ number : numbers) {\n        temp = number;\n        temp_diff = temp - largest;\n\
    \        \n        if(temp_diff < smallest_diff) {\n            smallest_diff\
    \ = temp_diff;\n            smallest_index = smallest_index;\n            smallest\
    \ = temp;\n        }\n        \n        if(temp_diff > largest_diff) {\n     \
    \       largest_diff = temp_diff;\n            largest_index = largest_index;\n\
    \            largest = temp;\n        }\n        \n        smallest_index++;\n\
    \        largest_index++;\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }", "{\n    float smallest;\n    float largest;\n    float midpoint;\n    \n \
    \   smallest = numbers[0];\n    largest = numbers[0];\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        midpoint = numbers[i]/2;\n        if(numbers[i]\
    \ < smallest || numbers[i] > largest)\n        {\n            smallest = numbers[i];\n\
    \            largest = numbers[i];\n        }\n        else if(numbers[i] < midpoint)\n\
    \        {\n            smallest = midpoint;\n        }\n        else\n      \
    \  {\n            largest = midpoint;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest;\n    float largest;\n    float smallest_diff;\n\
    \    float largest_diff;\n    float smallest_element;\n    float largest_element;\n\
    \    float smallest_element_diff;\n    float largest_element_diff;\n    \n   \
    \ smallest_element = numbers[0];\n    largest_element = numbers[0];\n    smallest_element_diff\
    \ = smallest_element;\n    largest_element_diff = largest_element;\n    \n   \
    \ foreach(number in numbers) {\n        smallest_element_diff = min(smallest_element_diff,\
    \ number - smallest_element);\n        largest_element_diff = max(largest_element_diff,\
    \ number - largest_element);\n        \n        smallest_element = number;\n \
    \       largest_element = number;\n    }\n    \n    smallest_diff = min(smallest_element_diff,\
    \ largest_element_diff);\n    largest = max(smallest_element, largest_element);\n\
    \    \n    return Tuple!(smallest_diff, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\
    \t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > min2)\n\t\t{\n\t\t\t\
    min2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] < max2)\n\t\t{\n\t\t\tmax2 =\
    \ numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, min2);\n}", "{\n\tfloat min1\
    \ = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat\
    \ max2 = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\t\
    float curr = numbers[i];\n\t\tfloat diff = curr - min1;\n\t\tfloat diff2 = curr\
    \ - min2;\n\t\t\n\t\tif (diff < diff2)\n\t\t{\n\t\t\tmin2 = min1;\n\t\t\tmin1\
    \ = curr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1 = curr;\n\t\t\
    }\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    foreach(number in numbers) {\n   \
    \     if(number < smallest) {\n            smallest = number;\n        }\n   \
    \     if(number > largest) {\n            largest = number;\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max1)\n\t\t{\n\t\t\
    \tmax1 = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\
    }\n\treturn Tuple!(min1, max1);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2\
    \ = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\t\
    for (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t\
    {\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\
    \t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\t\
    max2 = numbers[i];\n\t\t}\n\t\telse if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1, min2, max2);\n}",
  "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\tfloat temp;\n\tfor (int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\ttemp = numbers[i];\n\t\tif (temp < min1)\n\t\t{\n\t\t\tmin1 =\
    \ temp;\n\t\t}\n\t\tif (temp > max1)\n\t\t{\n\t\t\tmax1 = temp;\n\t\t}\n\t\tif\
    \ (temp < min2)\n\t\t{\n\t\t\tmin2 = temp;\n\t\t}\n\t\tif (temp > max2)\n\t\t\
    {\n\t\t\tmax2 = temp;\n\t\t}\n\t}\n\treturn Tuple!(min1, max1);\n}", "{\n\tfloat\
    \ min = numbers[0];\n\tfloat max = numbers[0];\n\tfloat closest = numbers[0];\n\
    \tfloat closest2 = numbers[0];\n\tfloat closest3 = numbers[0];\n\tfloat closest4\
    \ = numbers[0];\n\tfloat closest5 = numbers[0];\n\tfloat closest6 = numbers[0];\n\
    \tfloat closest7 = numbers[0];\n\tfloat closest8 = numbers[0];\n\tfloat closest9\
    \ = numbers[0];\n\tfloat closest10 = numbers[0];\n\tfloat closest11 = numbers[0];\n\
    \tfloat closest12 = numbers[0];\n\tfloat closest13 = numbers[0];\n\tfloat closest14\
    \ = numbers[0];\n\tfloat closest15 = numbers[0];\n\tfloat closest16 = numbers[0];\n\
    \tfloat closest17 = numbers[0];\n\tfloat closest18 = numbers[0];\n\tfloat closest19\
    \ = numbers[0];\n\tfloat closest20 = numbers[0];\n\tfloat closest21 = numbers[0];\n\
    \tfloat closest22 = numbers[0];\n\tfloat closest23 = numbers[0];\n\tfloat closest24\
    \ = numbers[0];\n\tfloat closest25 = numbers[0];\n\tfloat closest26 = numbers[0];\n\
    \tfloat closest27 = numbers[0];\n\tfloat closest28 = numbers[0];\n\tfloat closest29\
    \ = numbers[0];\n\tfloat closest30 = numbers[0];\n\tfloat closest31 = numbers[0];\n\
    \tfloat closest32 = numbers[0];\n\tfloat closest33 = numbers[0];\n\tfloat closest34\
    \ = numbers[0];\n\tfloat closest35 = numbers[0];\n\tfloat closest36 = numbers[0];\n\
    \tfloat closest37 = numbers[0];\n\tfloat closest38 = numbers[0];\n\tfloat closest39\
    \ = numbers[0];\n\tfloat closest40 = numbers[0];\n\tfloat closest41 = numbers[0];\n\
    \tfloat closest42 = numbers[0];\n\tfloat closest43 = numbers[0];\n\tfloat closest44\
    \ = numbers[0];\n\tfloat closest45 = numbers[0];\n\tfloat closest46 = numbers[0];\n\
    \tfloat closest47 = numbers[0];\n\tfloat closest48 = numbers[0];\n\tfloat closest49\
    \ = numbers[0];\n\tfloat closest50 = numbers[0];\n\tfloat closest51 = numbers[0];\n\
    \tfloat closest52 = numbers[0];\n\tfloat closest53 = numbers[0];\n\tfloat closest54\
    \ = numbers[0];\n\tfloat closest55 = numbers[0];\n\tfloat closest56 = numbers[0];\n\
    \tfloat closest57 = numbers[0];\n\tfloat closest58 = numbers[0];\n\tfloat closest59\
    \ = numbers[0];\n\tfloat closest60 = numbers[0];\n\tfloat closest61 = numbers[0];\n\
    \tfloat closest62 = numbers[0];\n\tfloat closest63 = numbers[0];\n\tfloat closest64\
    \ = number", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if (number < smallest) {\n        \
    \    smallest = number;\n        }\n        if (number > largest) {\n        \
    \    largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float smallest;\n    float largest;\n    float smallest_index;\n \
    \   float largest_index;\n    float smallest_diff;\n    float largest_diff;\n\
    \    float smallest_square;\n    float largest_square;\n    float smallest_square_index;\n\
    \    float largest_square_index;\n    float smallest_square_diff;\n    float largest_square_diff;\n\
    \    float smallest_square_sq;\n    float largest_square_sq;\n    float smallest_square_sq_index;\n\
    \    float largest_square_sq_index;\n    float smallest_square_sq_diff;\n    float\
    \ largest_square_sq_diff;\n    float smallest_square_sq_sq;\n    float largest_square_sq_sq;\n\
    \    float smallest_square_sq_sq_index;\n    float largest_square_sq_sq_index;\n\
    \    float smallest_square_sq_sq_diff;\n    float largest_square_sq_sq_diff;\n\
    \    float smallest_square_sq_sq_sq;\n    float largest_square_sq_sq_sq;\n   \
    \ float smallest_square_sq_sq_sq_index;\n    float largest_square_sq_sq_sq_index;\n\
    \    float smallest_square_sq_sq_sq_diff;\n    float largest_square_sq_sq_sq_diff;\n\
    \    float smallest_square_sq_sq_sq_sq;\n    float largest_square_sq_sq_sq_sq;\n\
    \    float smallest_square_sq_sq_sq_sq_index;\n    float largest_square_sq_sq_sq_sq_index;\n\
    \    float smallest_square_sq_sq_sq_sq_diff;\n    float largest_square_sq_sq_sq_sq_diff;\n\
    \    float smallest_square_sq_sq_sq_sq_sq;\n    float largest_square_sq_sq_sq_sq;\n\
    \    float smallest_square_sq_sq_sq_sq_index;\n    float largest_square_sq_sq_sq_sq_index;\n\
    \    float smallest_square_sq_sq_sq_sq_diff;\n    float largest_square_sq_sq_sq_sq_diff;\n\
    \    float smallest_square_sq_sq_sq_sq_sq;\n    float largest_square_sq_sq_sq_sq;\n\
    \    float smallest_square_sq_sq_sq_sq_index;\n    float largest_square_sq_sq_sq_sq_index;\n\
    \    float smallest_square_sq_sq_sq_sq_diff;\n    float largest_square_sq_sq_sq_sq_diff;\n\
    \    float ", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\
    \t\n\tfor (float number : numbers) {\n\t\tif (number < smallest) {\n\t\t\tsmallest\
    \ = number;\n\t\t}\n\t\tif (number > largest) {\n\t\t\tlargest = number;\n\t\t\
    }\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max1)\n\t\t{\n\t\t\
    \tmax1 = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\
    }\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat\
    \ max1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tfloat curr = numbers[i];\n\
    \t\tfloat diff = curr - min1;\n\t\tif(diff < 0)\n\t\t{\n\t\t\tmin2 = min1;\n\t\
    \t\tmax2 = max1;\n\t\t\tmin1 = curr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmin2 = min1;\n\
    \t\t\tmax2 = max1;\n\t\t\tmin1 = curr;\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1,\
    \ max1);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    foreach(number in numbers) {\n        if(number < smallest) {\n   \
    \         smallest = number;\n        }\n        if(number > largest) {\n    \
    \        largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    float closest1\
    \ = numbers[0];\n    float closest2 = numbers[0];\n    float closest3 = numbers[0];\n\
    \    float closest4 = numbers[0];\n    float closest5 = numbers[0];\n    float\
    \ closest6 = numbers[0];\n    float closest7 = numbers[0];\n    float closest8\
    \ = numbers[0];\n    float closest9 = numbers[0];\n    float closest10 = numbers[0];\n\
    \    float closest11 = numbers[0];\n    float closest12 = numbers[0];\n    float\
    \ closest13 = numbers[0];\n    float closest14 = numbers[0];\n    float closest15\
    \ = numbers[0];\n    float closest16 = numbers[0];\n    float closest17 = numbers[0];\n\
    \    float closest18 = numbers[0];\n    float closest19 = numbers[0];\n    float\
    \ closest20 = numbers[0];\n    float closest21 = numbers[0];\n    float closest22\
    \ = numbers[0];\n    float closest23 = numbers[0];\n    float closest24 = numbers[0];\n\
    \    float closest25 = numbers[0];\n    float closest26 = numbers[0];\n    float\
    \ closest27 = numbers[0];\n    float closest28 = numbers[0];\n    float closest29\
    \ = numbers[0];\n    float closest30 = numbers[0];\n    float closest31 = numbers[0];\n\
    \    float closest32 = numbers[0];\n    float closest33 = numbers[0];\n    float\
    \ closest34 = numbers[0];\n    float closest35 = numbers[0];\n    float closest36\
    \ = numbers[0];\n    float closest37 = numbers[0];\n    float closest38 = numbers[0];\n\
    \    float closest39 = numbers[0];\n    float closest40 = numbers[0];\n    float\
    \ closest41 = numbers[0];\n    float closest42 = numbers[0];\n    float closest43\
    \ = numbers[0];\n    float closest44 = numbers[0];\n    float closest45 = numbers[0];\n\
    \    float closest46 = numbers[0];\n    float closest47 = numbers[0];\n    float\
    \ closest48 = numbers[0];\n    float closest49 = numbers[0];\n    float closest50\
    \ = numbers[0];\n    float closest51 = numbers[0];\n    float closest52 = numbers[0];\n\
    \    float closest53 = numbers[0];\n    float closest54 = numbers[0];\n    float\
    \ closest55 = numbers[0];\n    float closest56 = numbers[0];\n    float closest57\
    \ = numbers[0];\n    float closest58 = numbers[0];\n    float closest59 = numbers[0];\n\
    \    float closest60 = numbers[0];\n    float closest61 = numbers[0];\n    float\
    \ closest62 = number", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n    \
    \    {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        \n  \
    \      if(numbers[i] > min2)\n        {\n            min2 = numbers[i];\n    \
    \    }\n        else if(numbers[i] < max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n\tfloat min1,\
    \ min2;\n\tfloat max1, max2;\n\tfloat mid1, mid2;\n\tfloat diff1, diff2;\n\tfloat\
    \ diff;\n\tfloat sum1, sum2;\n\tfloat sum;\n\tfloat average;\n\tfloat average2;\n\
    \tfloat average3;\n\tfloat average4;\n\tfloat average5;\n\tfloat average6;\n\t\
    float average7;\n\tfloat average8;\n\tfloat average9;\n\tfloat average10;\n\t\
    float average11;\n\tfloat average12;\n\tfloat average13;\n\tfloat average14;\n\
    \tfloat average15;\n\tfloat average16;\n\tfloat average17;\n\tfloat average18;\n\
    \tfloat average19;\n\tfloat average20;\n\tfloat average21;\n\tfloat average22;\n\
    \tfloat average23;\n\tfloat average24;\n\tfloat average25;\n\tfloat average26;\n\
    \tfloat average27;\n\tfloat average28;\n\tfloat average29;\n\tfloat average30;\n\
    \tfloat average31;\n\tfloat average32;\n\tfloat average33;\n\tfloat average34;\n\
    \tfloat average35;\n\tfloat average36;\n\tfloat average37;\n\tfloat average38;\n\
    \tfloat average39;\n\tfloat average40;\n\tfloat average41;\n\tfloat average42;\n\
    \tfloat average43;\n\tfloat average44;\n\tfloat average45;\n\tfloat average46;\n\
    \tfloat average47;\n\tfloat average48;\n\tfloat average49;\n\tfloat average50;\n\
    \tfloat average51;\n\tfloat average52;\n\tfloat average53;\n\tfloat average54;\n\
    \tfloat average55;\n\tfloat average56;\n\tfloat average57;\n\tfloat average58;\n\
    \tfloat average59;\n\tfloat average60;\n\tfloat average61;\n\tfloat average62;\n\
    \tfloat average63;\n\tfloat average64;\n\tfloat average65;\n\tfloat average66;\n\
    \tfloat average67;\n\tfloat average68;\n\tfloat average69;\n\tfloat average70;\n\
    \tfloat average71;\n\tfloat average72;\n\tfloat average73;\n\tfloat average74;\n\
    \tfloat average75;\n\tfloat average76;\n\tfloat average77;\n\tfloat average78;\n\
    \tfloat average79;\n\tfloat average80;\n\tfloat average81;", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    \n    foreach(number in numbers) {\n        if(number < smallest) {\n   \
    \         smallest = number;\n        }\n        if(number > largest) {\n    \
    \        largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor (int i = 0; i\
    \ < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 =\
    \ numbers[i];\n\t\t}\n\t\tif (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\t\
    if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1, min2, max2);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        }\n        if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    for (int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if (numbers[i] < smallest)\n        {\n            smallest =\
    \ numbers[i];\n        }\n        else if (numbers[i] > largest)\n        {\n\
    \            largest = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\
    \t\n\tfor (int i = 0; i < numbers.length; i++)\n\t{\n\t\tif (numbers[i] < smallest)\n\
    \t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\
    \t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n    float min1 = numbers[0];\n    float max1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(i\
    \ : numbers)\n    {\n        if(min1 > i)\n        {\n            min1 = i;\n\
    \        }\n        if(max1 < i)\n        {\n            max1 = i;\n        }\n\
    \        if(min2 > i)\n        {\n            min2 = i;\n        }\n        if(max2\
    \ < i)\n        {\n            max2 = i;\n        }\n    }\n    \n    return Tuple!(min1,\
    \ max1);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n \
    \   \n    foreach(number in numbers) {\n        if(number < min) {\n         \
    \   min = number;\n        }\n        if(number > max) {\n            max = number;\n\
    \        }\n    }\n    \n    return Tuple!(min, max);\n}", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n    float min1 =\
    \ numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n  \
    \  float max2 = numbers[0];\n    \n    foreach(i : numbers) {\n        if (i <\
    \ min1) {\n            min1 = i;\n        } else if (i > max1) {\n           \
    \ max1 = i;\n        }\n        if (i < min2) {\n            min2 = i;\n     \
    \   } else if (i > max2) {\n            max2 = i;\n        }\n    }\n    \n  \
    \  return Tuple!(min1, min2);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat\
    \ largest = numbers[0];\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\t\
    if(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    return Tuple!(smallest, largest);\n}", "{\n\tfloat smallest;\n\tfloat largest;\n\
    \tfloat smallest_index;\n\tfloat largest_index;\n\tfloat smallest_diff;\n\tfloat\
    \ largest_diff;\n\tfloat temp;\n\t\n\tsmallest_diff = numbers[0];\n\tlargest_diff\
    \ = numbers[0];\n\tsmallest_index = numbers[0];\n\tlargest_index = numbers[0];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tsmallest_diff = min(smallest_diff,\
    \ numbers[i]);\n\t\tlargest_diff = max(largest_diff, numbers[i]);\n\t\tsmallest_index\
    \ = min(smallest_index, numbers[i]);\n\t\tlargest_index = max(largest_index, numbers[i]);\n\
    \t}\n\t\n\tsmallest = numbers[smallest_index];\n\tlargest = numbers[largest_index];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\ttemp = numbers[i];\n\t\
    \t\n\t\tif(temp < smallest)\n\t\t{\n\t\t\tsmallest = temp;\n\t\t\tsmallest_index\
    \ = i;\n\t\t}\n\t\t\n\t\tif(temp > largest)\n\t\t{\n\t\t\tlargest = temp;\n\t\t\
    \tlargest_index = i;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}",
  "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor (int i = 1;\
    \ i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min)\n\t\t{\n\t\t\tmin =\
    \ numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(min, max);\n}", "{\n\tfloat smallest = numbers[0];\n\
    \tfloat largest = numbers[0];\n\tfor (int i = 1; i < numbers.length; ++i)\n\t\
    {\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    foreach(number in numbers) {\n   \
    \     if(number < smallest) {\n            smallest = number;\n        }\n   \
    \     if(number > largest) {\n            largest = number;\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    for (float number : numbers) {\n \
    \       if (number < smallest) {\n            smallest = number;\n        }\n\
    \        if (number > largest) {\n            largest = number;\n        }\n \
    \   }\n    \n    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    float smallest_2;\n    float largest_2;\n    float smallest_3;\n\
    \    float largest_3;\n    float smallest_4;\n    float largest_4;\n    float\
    \ smallest_5;\n    float largest_5;\n    float smallest_6;\n    float largest_6;\n\
    \    float smallest_7;\n    float largest_7;\n    float smallest_8;\n    float\
    \ largest_8;\n    float smallest_9;\n    float largest_9;\n    float smallest_10;\n\
    \    float largest_10;\n    float smallest_11;\n    float largest_11;\n    float\
    \ smallest_12;\n    float largest_12;\n    float smallest_13;\n    float largest_13;\n\
    \    float smallest_14;\n    float largest_14;\n    float smallest_15;\n    float\
    \ largest_15;\n    float smallest_16;\n    float largest_16;\n    float smallest_17;\n\
    \    float largest_17;\n    float smallest_18;\n    float largest_18;\n    float\
    \ smallest_19;\n    float largest_19;\n    float smallest_20;\n    float largest_20;\n\
    \    float smallest_21;\n    float largest_21;\n    float smallest_22;\n    float\
    \ largest_22;\n    float smallest_23;\n    float largest_23;\n    float smallest_24;\n\
    \    float largest_24;\n    float smallest_25;\n    float largest_25;\n    float\
    \ smallest_26;\n    float largest_26;\n    float smallest_27;\n    float largest_27;\n\
    \    float smallest_28;\n    float largest_28;\n    float smallest_29;\n    float\
    \ largest_29;\n    float smallest_30;\n    float largest_30;\n    float smallest_31;\n\
    \    float largest_31;\n    float smallest_32;\n    float largest_32;\n    float\
    \ smallest_33;\n    float largest_33;\n    float smallest_34;\n    float largest_34;\n\
    \    float smallest_35;\n    float largest_35;\n    float smallest_36;\n    float\
    \ largest_36;\n    float smallest_37;\n    float largest_37;\n    float smallest_38;\n\
    \    float largest_38;\n    float smallest_39;\n    float largest_39;\n    float ",
  "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if (number < smallest) {\n            smallest = number;\n      \
    \  }\n        if (number > largest) {\n            largest = number;\n       \
    \ }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \tfloat mid1 = numbers[0];\n\tfloat mid2 = numbers[0];\n\tfloat mid3 = numbers[0];\n\
    \tfloat mid4 = numbers[0];\n\tfloat mid5 = numbers[0];\n\tfloat mid6 = numbers[0];\n\
    \tfloat mid7 = numbers[0];\n\tfloat mid8 = numbers[0];\n\tfloat mid9 = numbers[0];\n\
    \tfloat mid10 = numbers[0];\n\tfloat mid11 = numbers[0];\n\tfloat mid12 = numbers[0];\n\
    \tfloat mid13 = numbers[0];\n\tfloat mid14 = numbers[0];\n\tfloat mid15 = numbers[0];\n\
    \tfloat mid16 = numbers[0];\n\tfloat mid17 = numbers[0];\n\tfloat mid18 = numbers[0];\n\
    \tfloat mid19 = numbers[0];\n\tfloat mid20 = numbers[0];\n\tfloat mid21 = numbers[0];\n\
    \tfloat mid22 = numbers[0];\n\tfloat mid23 = numbers[0];\n\tfloat mid24 = numbers[0];\n\
    \tfloat mid25 = numbers[0];\n\tfloat mid26 = numbers[0];\n\tfloat mid27 = numbers[0];\n\
    \tfloat mid28 = numbers[0];\n\tfloat mid29 = numbers[0];\n\tfloat mid30 = numbers[0];\n\
    \tfloat mid31 = numbers[0];\n\tfloat mid32 = numbers[0];\n\tfloat mid33 = numbers[0];\n\
    \tfloat mid34 = numbers[0];\n\tfloat mid35 = numbers[0];\n\tfloat mid36 = numbers[0];\n\
    \tfloat mid37 = numbers[0];\n\tfloat mid38 = numbers[0];\n\tfloat mid39 = numbers[0];\n\
    \tfloat mid40 = numbers[0];\n\tfloat mid41 = numbers[0];\n\tfloat mid42 = numbers[0];\n\
    \tfloat mid43 = numbers[0];\n\tfloat mid44 = numbers[0];\n\tfloat mid45 = numbers[0];\n\
    \tfloat mid46 = numbers[0];\n\tfloat mid47 = numbers[0];\n\tfloat mid48 = numbers[0];\n\
    \tfloat mid49 = numbers[0];\n\tfloat mid50 = numbers[0];\n\tfloat mid51 = numbers[0];\n\
    \tfloat mid52 = numbers[0];\n\tfloat mid53 = numbers[0];\n\tfloat mid54 = numbers[0];\n\
    \tfloat mid55 = numbers[0];\n\tfloat mid56 = numbers[0];\n\tfloat mid57 = numbers[0];\n\
    \tfloat mid58 = numbers[0];\n\tfloat mid59 = numbers[0];\n\tfloat mid60 = numbers[0];\n\
    \tfloat mid61 = numbers[0];\n\tfloat mid62 = number", "{\n    float smallest =\
    \ numbers[0];\n    float largest = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < smallest)\n            smallest = numbers[i];\n\
    \        if(numbers[i] > largest)\n            largest = numbers[i];\n    }\n\
    \    return Tuple!(smallest, largest);\n}", "{\n\tfloat smallest = numbers[0];\n\
    \tfloat largest = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\
    \t{\n\t\tif(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t\
    }\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n   \
    \     if (numbers[i] < min1)\n        {\n            min1 = numbers[i];\n    \
    \    }\n        else if (numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n    }\n    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n\
    \        if (numbers[i] < min2)\n        {\n            min2 = numbers[i];\n \
    \       }\n        else if (numbers[i] > max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, min2);\n}", "{\n\
    \    float smallest;\n    float largest;\n    \n    smallest = numbers[0];\n \
    \   largest = numbers[0];\n    \n    foreach(number in numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        }\n        if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}", "{\n\tfloat min = numbers[0];\n\t\
    float max = numbers[0];\n\tfloat result = numbers[0];\n\t\n\tfor(int i = 0; i\
    \ < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\t\t}\n\t\
    }\n\t\n\tfor(int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min)\n\
    \t\t{\n\t\t\tresult = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max)\n\t\t\
    {\n\t\t\tresult = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(float, float) result,result;\n\
    }", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n  \
    \  \n    foreach(number in numbers) {\n        if(number < smallest) {\n     \
    \       smallest = number;\n        }\n        if(number > largest) {\n      \
    \      largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int\
    \ i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n    \
    \    {\n            min1 = numbers[i];\n        }\n        if(numbers[i] > max1)\n\
    \        {\n            max1 = numbers[i];\n        }\n        if(numbers[i] >\
    \ max2)\n        {\n            max2 = numbers[i];\n        }\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    \n\
    \    return Tuple!(min1, max1);\n}", "{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \        \n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        else if(numbers[i] < min2)\n        {\n            min2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n\
    \tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i =\
    \ 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\
    \tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\t\
    largest = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for (float number : numbers) {\n        if (number < smallest) {\n         \
    \   smallest = number;\n        }\n        if (number > largest) {\n         \
    \   largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }", "{\n\tfloat smallest;\n\tfloat largest;\n\t\n\tsmallest = numbers[0];\n\t\
    largest = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\t\
    if(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\
    \n\treturn Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i <\
    \ numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\
    \t\t\n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\t\
    else if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\t\
    return Tuple!(min1, max1);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat largest\
    \ = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i]\
    \ < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i]\
    \ > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i <\
    \ numbers.length; ++i)\n\t{\n\t\tfloat curr = numbers[i];\n\t\tfloat diff = curr\
    \ - min1;\n\t\t\n\t\tif(diff < 0)\n\t\t{\n\t\t\tmin2 = min1;\n\t\t\tmin1 = curr;\n\
    \t\t}\n\t\telse if(diff > 0)\n\t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1 = curr;\n\t\
    \t}\n\t\telse\n\t\t{\n\t\t\tmin2 = curr;\n\t\t\tmax2 = curr;\n\t\t}\n\t}\n\t\n\
    \treturn Tuple!(min1, max1);\n}", "{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \        \n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        else if(numbers[i] < min2)\n        {\n            min2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, min2);\n}", "{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    float smallest_index;\n    float largest_index;\n   \
    \ float smallest_diff;\n    float largest_diff;\n    float smallest_square;\n\
    \    float largest_square;\n    float square;\n    float square_diff;\n    float\
    \ square_diff2;\n    float square_diff3;\n    float square_diff4;\n    float square_diff5;\n\
    \    float square_diff6;\n    float square_diff7;\n    float square_diff8;\n \
    \   float square_diff9;\n    float square_diff10;\n    float square_diff11;\n\
    \    float square_diff12;\n    float square_diff13;\n    float square_diff14;\n\
    \    float square_diff15;\n    float square_diff16;\n    float square_diff17;\n\
    \    float square_diff18;\n    float square_diff19;\n    float square_diff20;\n\
    \    float square_diff21;\n    float square_diff22;\n    float square_diff23;\n\
    \    float square_diff24;\n    float square_diff25;\n    float square_diff26;\n\
    \    float square_diff27;\n    float square_diff28;\n    float square_diff29;\n\
    \    float square_diff30;\n    float square_diff31;\n    float square_diff32;\n\
    \    float square_diff33;\n    float square_diff34;\n    float square_diff35;\n\
    \    float square_diff36;\n    float square_diff37;\n    float square_diff38;\n\
    \    float square_diff39;\n    float square_diff40;\n    float square_diff41;\n\
    \    float square_diff42;\n    float square_diff43;\n    float square_diff44;\n\
    \    float square_diff45;\n    float square_diff46;\n    float square_diff47;\n\
    \    float square_diff48;\n    float square_diff49;\n    float square_diff50;\n\
    \    float square_diff51;\n    float square_diff52;\n    float square_diff53;\n\
    \    float square_diff54;\n    float square_diff55;\n    float square_diff56;\n\
    \    float square_diff57;\n    float square_diff58;\n    float square_diff59;\n",
  "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n    float\
    \ largest;\n    float smallest_index;\n    float largest_index;\n    \n    smallest\
    \ = numbers[0];\n    largest = numbers[0];\n    smallest_index = 0;\n    largest_index\
    \ = 0;\n    \n    foreach(i : numbers) {\n        if (i < smallest) {\n      \
    \      smallest = i;\n            smallest_index = i;\n        }\n        if (i\
    \ > largest) {\n            largest = i;\n            largest_index = i;\n   \
    \     }\n    }\n    \n    return Tuple!(smallest, largest);\n}", "{\n    float\
    \ min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n\
    \    float max2 = numbers[0];\n    \n    foreach(number in numbers) {\n      \
    \  if (number < min1) {\n            min1 = number;\n        } else if (number\
    \ > max1) {\n            max1 = number;\n        }\n        if (number > max2)\
    \ {\n            max2 = number;\n        } else if (number < min2) {\n       \
    \     min2 = number;\n        }\n    }\n    \n    return Tuple!(min1, max2);\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \   {\n            min = numbers[i];\n        }\n        else if(numbers[i] >\
    \ max)\n        {\n            max = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min, max);\n}", "{\n\tfloat smallest;\n\tfloat largest;\n\tfloat temp;\n\
    \t\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\t\n\tfor (int i = 1; i\
    \ < numbers.length; ++i)\n\t{\n\t\ttemp = numbers[i];\n\t\tif (temp < smallest)\n\
    \t\t{\n\t\t\tsmallest = temp;\n\t\t}\n\t\telse if (temp > largest)\n\t\t{\n\t\t\
    \tlargest = temp;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n\
    \    float min1, min2, max1, max2;\n    min1 = max1 = numbers[0];\n    min2 =\
    \ max2 = numbers[0];\n    foreach(i : numbers) {\n        if (i < min1)\n    \
    \        min1 = i;\n        else if (i > max1)\n            max1 = i;\n      \
    \  if (i < min2)\n            min2 = i;\n        else if (i > max2)\n        \
    \    max2 = i;\n    }\n    return Tuple!(min1, max1);\n}", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\t\t\
    }\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\tfloat smallest = numbers[0];\n\
    \tfloat largest = numbers[0];\n\tfloat smallest_diff = FLT_MAX;\n\tfloat largest_diff\
    \ = FLT_MAX;\n\tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tfloat diff\
    \ = numbers[i] - smallest;\n\t\tif (diff < smallest_diff)\n\t\t{\n\t\t\tsmallest_diff\
    \ = diff;\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tdiff = largest - numbers[i];\n\
    \t\tif (diff > largest_diff)\n\t\t{\n\t\t\tlargest_diff = diff;\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n   \
    \ float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if (number < smallest) {\n            smallest = number;\n\
    \        }\n        if (number > largest) {\n            largest = number;\n \
    \       }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float min1\
    \ = numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n\
    \    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    float smallest_distance = Float.nan;\n    float largest_distance\
    \ = Float.nan;\n    \n    foreach(number in numbers) {\n        float distance\
    \ = abs(number - smallest);\n        if (distance < smallest_distance) {\n   \
    \         smallest_distance = distance;\n            smallest = number;\n    \
    \    }\n        distance = abs(number - largest);\n        if (distance > largest_distance)\
    \ {\n            largest_distance = distance;\n            largest = number;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n    float min1 =\
    \ numbers[0];\n    float max1 = numbers[0];\n    float min2 = numbers[0];\n  \
    \  float max2 = numbers[0];\n    foreach(number in numbers) {\n        if (number\
    \ < min1) {\n            min1 = number;\n        } else if (number > max1) {\n\
    \            max1 = number;\n        }\n        if (number < min2) {\n       \
    \     min2 = number;\n        } else if (number > max2) {\n            max2 =\
    \ number;\n        }\n    }\n    return Tuple!(min1, max1, min2, max2);\n}", "{\n\
    \tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int\
    \ i = 0; i < numbers.length; i++)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t\
    {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, min2);\n}", "{\n\tfloat smallest=numbers[0];\n\tfloat largest=numbers[0];\n\
    \tfloat smallest_index=0;\n\tfloat largest_index=0;\n\tfor(int i=1; i<numbers.length;\
    \ i++)\n\t{\n\t\tif(numbers[i]<smallest)\n\t\t{\n\t\t\tsmallest=numbers[i];\n\t\
    \t\tsmallest_index=i;\n\t\t}\n\t\telse if(numbers[i]>largest)\n\t\t{\n\t\t\tlargest=numbers[i];\n\
    \t\t\tlargest_index=i;\n\t\t}\n\t}\n\treturn Tuple!(smallest,largest);\n}", "{\n\
    \    float min1 = numbers[0];\n    float max1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        else if(numbers[i] < min2)\n        {\n    \
    \        min2 = numbers[i];\n        }\n        else if(numbers[i] > max2)\n \
    \       {\n            max2 = numbers[i];\n        }\n    }\n    return Tuple!(min1,\
    \ max1);\n}\n/*\n From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float tolerance) \n{\n    float min1 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float min2 = numbers[0];\n    float max2 = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n\
    \        {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n        }\n\
    \        else if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float tolerance, float epsilon) \n{\n    float min1 = numbers[0];\n    float\
    \ max1 = numbers[0];\n    float min2 = numbers[0];\n    float max2 = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n\
    \        {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = ", "{\n\tfloat smallest;\n\tfloat largest;\n\
    \tfloat smallest_index;\n\tfloat largest_index;\n\tfloat temp;\n\tfloat temp2;\n\
    \tfloat temp3;\n\tfloat temp4;\n\tfloat temp5;\n\tfloat temp6;\n\tfloat temp7;\n\
    \tfloat temp8;\n\tfloat temp9;\n\tfloat temp10;\n\tfloat temp11;\n\tfloat temp12;\n\
    \tfloat temp13;\n\tfloat temp14;\n\tfloat temp15;\n\tfloat temp16;\n\tfloat temp17;\n\
    \tfloat temp18;\n\tfloat temp19;\n\tfloat temp20;\n\tfloat temp21;\n\tfloat temp22;\n\
    \tfloat temp23;\n\tfloat temp24;\n\tfloat temp25;\n\tfloat temp26;\n\tfloat temp27;\n\
    \tfloat temp28;\n\tfloat temp29;\n\tfloat temp30;\n\tfloat temp31;\n\tfloat temp32;\n\
    \tfloat temp33;\n\tfloat temp34;\n\tfloat temp35;\n\tfloat temp36;\n\tfloat temp37;\n\
    \tfloat temp38;\n\tfloat temp39;\n\tfloat temp40;\n\tfloat temp41;\n\tfloat temp42;\n\
    \tfloat temp43;\n\tfloat temp44;\n\tfloat temp45;\n\tfloat temp46;\n\tfloat temp47;\n\
    \tfloat temp48;\n\tfloat temp49;\n\tfloat temp50;\n\tfloat temp51;\n\tfloat temp52;\n\
    \tfloat temp53;\n\tfloat temp54;\n\tfloat temp55;\n\tfloat temp56;\n\tfloat temp57;\n\
    \tfloat temp58;\n\tfloat temp59;\n\tfloat temp60;\n\tfloat temp61;\n\tfloat temp62;\n\
    \tfloat temp63;\n\tfloat temp64;\n\tfloat temp65;\n\tfloat temp66;\n\tfloat temp67;\n\
    \tfloat temp68;\n\tfloat temp69;\n\tfloat temp70;\n\tfloat temp71;\n\tfloat temp72;\n\
    \tfloat temp73;\n\tfloat temp74;\n\tfloat temp75;\n\tfloat temp76;\n\tfloat temp77;\n\
    \tfloat temp78;\n\tfloat temp79;\n\tfloat temp80;\n\tfloat temp81;\n\tfloat temp82;\n\
    \tfloat temp83;\n\tfloat temp84;\n\tfloat ", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        }\n        if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}", "{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n        if (numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        if (numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        if (numbers[i]\
    \ > max2)\n        {\n            max2 = numbers[i];\n        }\n        if (numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    \n\
    \    return Tuple!(min1, max1);\n}", "{\n\tfloat smallest;\n\tfloat largest;\n\
    \tfloat smallest_2;\n\tfloat largest_2;\n\tfloat smallest_3;\n\tfloat largest_3;\n\
    \tfloat smallest_4;\n\tfloat largest_4;\n\tfloat smallest_5;\n\tfloat largest_5;\n\
    \tfloat smallest_6;\n\tfloat largest_6;\n\tfloat smallest_7;\n\tfloat largest_7;\n\
    \tfloat smallest_8;\n\tfloat largest_8;\n\tfloat smallest_9;\n\tfloat largest_9;\n\
    \tfloat smallest_10;\n\tfloat largest_10;\n\tfloat smallest_11;\n\tfloat largest_11;\n\
    \tfloat smallest_12;\n\tfloat largest_12;\n\tfloat smallest_13;\n\tfloat largest_13;\n\
    \tfloat smallest_14;\n\tfloat largest_14;\n\tfloat smallest_15;\n\tfloat largest_15;\n\
    \tfloat smallest_16;\n\tfloat largest_16;\n\tfloat smallest_17;\n\tfloat largest_17;\n\
    \tfloat smallest_18;\n\tfloat largest_18;\n\tfloat smallest_19;\n\tfloat largest_19;\n\
    \tfloat smallest_20;\n\tfloat largest_20;\n\tfloat smallest_21;\n\tfloat largest_21;\n\
    \tfloat smallest_22;\n\tfloat largest_22;\n\tfloat smallest_23;\n\tfloat largest_23;\n\
    \tfloat smallest_24;\n\tfloat largest_24;\n\tfloat smallest_25;\n\tfloat largest_25;\n\
    \tfloat smallest_26;\n\tfloat largest_26;\n\tfloat smallest_27;\n\tfloat largest_27;\n\
    \tfloat smallest_28;\n\tfloat largest_28;\n\tfloat smallest_29;\n\tfloat largest_29;\n\
    \tfloat smallest_30;\n\tfloat largest_30;\n\tfloat smallest_31;\n\tfloat largest_31;\n\
    \tfloat smallest_32;\n\tfloat largest_32;\n\tfloat smallest_33;\n\tfloat largest_33;\n\
    \tfloat smallest_34;\n\tfloat largest_34;\n\tfloat smallest_35;\n\tfloat largest_35;\n\
    \tfloat smallest_36;\n\tfloat largest_36;\n\tfloat smallest_37;\n\tfloat largest_37;\n\
    \tfloat smallest_38;\n\tfloat largest_38;\n\tfloat smallest_39;\n\tfloat largest_39;\n\
    \tfloat ", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfloat closest;\n\
    \tfloat closest2;\n\t\n\tfor (float number : numbers) {\n\t\tif (number < min)\
    \ {\n\t\t\tmin = number;\n\t\t}\n\t\tif (number > max) {\n\t\t\tmax = number;\n\
    \t\t}\n\t}\n\t\n\tclosest2 = min;\n\tfor (float number : numbers) {\n\t\tif (number\
    \ < closest2) {\n\t\t\tclosest2 = number;\n\t\t}\n\t}\n\t\n\tclosest = (closest2\
    \ < closest) ? closest2 : closest;\n\t\n\treturn Tuple!(closest, closest2);\n}",
  "{\n\tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\t\
    largest = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\
    \tfloat smallest;\n\tfloat largest;\n\tfloat smallest_index;\n\tfloat largest_index;\n\
    \tfloat smallest_diff;\n\tfloat largest_diff;\n\tfloat temp;\n\tfloat temp_diff;\n\
    \t\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\tsmallest_index = -1;\n\
    \tlargest_index = -1;\n\tsmallest_diff = smallest;\n\tlargest_diff = largest;\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\ttemp = numbers[i];\n\t\
    \ttemp_diff = temp - smallest;\n\t\t\n\t\tif(temp_diff < smallest_diff)\n\t\t\
    {\n\t\t\tsmallest_diff = temp_diff;\n\t\t\tsmallest_index = i;\n\t\t}\n\t\t\n\t\
    \tif(temp_diff > largest_diff)\n\t\t{\n\t\t\tlargest_diff = temp_diff;\n\t\t\t\
    largest_index = i;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n}", "{\n\
    \tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\t\n\tfor (int i = 0; i < numbers.length; i++)\n\t\
    {\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse\
    \ if (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif\
    \ (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse if (numbers[i]\
    \ < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1,\
    \ max1, min2, max2);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n        }\n    \
    \    else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    \n    for (int i = 1; i\
    \ < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n        }\n        if (numbers[i] > largest)\n\
    \        {\n            largest = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}", "{\n\tfloat smallest = numbers[0];\n\tfloat\
    \ largest = numbers[0];\n\t\n\tfor (float number : numbers) {\n\t\tif (number\
    \ < smallest) {\n\t\t\tsmallest = number;\n\t\t}\n\t\tif (number > largest) {\n\
    \t\t\tlargest = number;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \   {\n            min = numbers[i];\n        }\n        if(numbers[i] > max)\n\
    \        {\n            max = numbers[i];\n        }\n    }\n    return Tuple!(min,\
    \ max);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if (number < smallest) {\n        \
    \    smallest = number;\n        }\n        if (number > largest) {\n        \
    \    largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied array of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if (number < smallest)\
    \ {\n            smallest = number;\n        }\n        if (number > largest)\
    \ {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta) \n{\n   \
    \ float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if (number < smallest) {\n            smallest = number;\n\
    \        }\n        if (number > largest) {\n            largest = number;\n \
    \       }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  \
    \  tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float gamma) \n{\n    float smallest =\
    \ numbers[0];\n    float largest = ", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n    \
    \    if(numbers[i] < min)\n        {\n            min = numbers[i];\n        }\n\
    \        else if(numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min, max);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min, max);\n}\n/*\n From a supplied array of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta) \n{\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n        {\n     \
    \       min = numbers[i];\n        }\n        else if(numbers[i] > max)\n    \
    \    {\n            max = numbers[i];\n        }\n    }\n    return Tuple!(min,\
    \ max);\n}\n/*\n From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float min_distance) \n{\n    float min\
    \ = numbers[0];\n    float ", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2\
    \ = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\tfor(int\
    \ i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\
    \tmin1 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\
    \treturn Tuple!(min1, max1);\n}", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    float smallest2 = numbers[0];\n    float largest2\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if (number <\
    \ smallest) {\n            smallest = number;\n        }\n        if (number >\
    \ largest) {\n            largest = number;\n        }\n        if (number < smallest2)\
    \ {\n            smallest2 = number;\n        }\n        if (number > largest2)\
    \ {\n            largest2 = number;\n        }\n    }\n    \n    return Tuple!(smallest2,\
    \ largest2);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    for (float number : numbers) {\n        if (number < smallest) {\n\
    \            smallest = number;\n        }\n        if (number > largest) {\n\
    \            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1, min2;\n\tfloat max1, max2;\n\tfloat mindiff\
    \ = FLT_MAX;\n\tfloat maxdiff = FLT_MIN;\n\tfloat midpoint;\n\tfloat diff;\n\t\
    float diff2;\n\tfloat diff3;\n\tfloat diff4;\n\tfloat diff5;\n\tfloat diff6;\n\
    \tfloat diff7;\n\tfloat diff8;\n\tfloat diff9;\n\tfloat diff10;\n\tfloat diff11;\n\
    \tfloat diff12;\n\tfloat diff13;\n\tfloat diff14;\n\tfloat diff15;\n\tfloat diff16;\n\
    \tfloat diff17;\n\tfloat diff18;\n\tfloat diff19;\n\tfloat diff20;\n\tfloat diff21;\n\
    \tfloat diff22;\n\tfloat diff23;\n\tfloat diff24;\n\tfloat diff25;\n\tfloat diff26;\n\
    \tfloat diff27;\n\tfloat diff28;\n\tfloat diff29;\n\tfloat diff30;\n\tfloat diff31;\n\
    \tfloat diff32;\n\tfloat diff33;\n\tfloat diff34;\n\tfloat diff35;\n\tfloat diff36;\n\
    \tfloat diff37;\n\tfloat diff38;\n\tfloat diff39;\n\tfloat diff40;\n\tfloat diff41;\n\
    \tfloat diff42;\n\tfloat diff43;\n\tfloat diff44;\n\tfloat diff45;\n\tfloat diff46;\n\
    \tfloat diff47;\n\tfloat diff48;\n\tfloat diff49;\n\tfloat diff50;\n\tfloat diff51;\n\
    \tfloat diff52;\n\tfloat diff53;\n\tfloat diff54;\n\tfloat diff55;\n\tfloat diff56;\n\
    \tfloat diff57;\n\tfloat diff58;\n\tfloat diff59;\n\tfloat diff60;\n\tfloat diff61;\n\
    \tfloat diff62;\n\tfloat diff63;\n\tfloat diff64;\n\tfloat diff65;\n\tfloat diff66;\n\
    \tfloat diff67;\n\tfloat diff68;\n\tfloat diff69;\n\tfloat diff70;\n\tfloat diff71;\n\
    \tfloat diff72;\n\tfloat diff73;\n\tfloat diff74;\n\tfloat diff75;\n\tfloat diff76;\n\
    \tfloat diff77;\n\tfloat diff78;\n\tfloat diff79;\n\tfloat diff80;\n\tfloat diff81;\n\
    \tfloat diff82;\n", "{\n    float smallest;\n    float largest;\n    float closest;\n\
    \    float closest2;\n    float closest3;\n    float closest4;\n    float closest5;\n\
    \    float closest6;\n    float closest7;\n    float closest8;\n    float closest9;\n\
    \    float closest10;\n    float closest11;\n    float closest12;\n    float closest13;\n\
    \    float closest14;\n    float closest15;\n    float closest16;\n    float closest17;\n\
    \    float closest18;\n    float closest19;\n    float closest20;\n    float closest21;\n\
    \    float closest22;\n    float closest23;\n    float closest24;\n    float closest25;\n\
    \    float closest26;\n    float closest27;\n    float closest28;\n    float closest29;\n\
    \    float closest30;\n    float closest31;\n    float closest32;\n    float closest33;\n\
    \    float closest34;\n    float closest35;\n    float closest36;\n    float closest37;\n\
    \    float closest38;\n    float closest39;\n    float closest40;\n    float closest41;\n\
    \    float closest42;\n    float closest43;\n    float closest44;\n    float closest45;\n\
    \    float closest46;\n    float closest47;\n    float closest48;\n    float closest49;\n\
    \    float closest50;\n    float closest51;\n    float closest52;\n    float closest53;\n\
    \    float closest54;\n    float closest55;\n    float closest56;\n    float closest57;\n\
    \    float closest58;\n    float closest59;\n    float closest60;\n    float closest61;\n\
    \    float closest62;\n    float closest63;\n    float closest64;\n    float closest65;\n\
    \    float closest66;\n    float closest67;\n    float closest68;\n    float closest69;\n\
    \    float closest70;\n    float closest71;\n    float closest72;\n    float closest73;\n\
    \    float closest74;\n    float closest75;\n    float closest76;\n    float closest77;\n\
    \    float closest78;\n    float closest79;\n    float closest80;\n    float closest81;\n\
    \    float closest82;\n    float closest83;\n    float closest84;\n    float closest85;\n\
    \    float closest86;\n    float ", "{\n\tfloat min = numbers[0];\n\tfloat max\
    \ = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i]\
    \ < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max)\n\
    \t\t{\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min, max);\n}",
  "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1);\n}", "{\n    float min1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n  \
    \  float mid1 = numbers[0];\n    float mid2 = numbers[0];\n    float diff1 = numbers[0];\n\
    \    float diff2 = numbers[0];\n    float diff3 = numbers[0];\n    float diff4\
    \ = numbers[0];\n    float diff5 = numbers[0];\n    float diff6 = numbers[0];\n\
    \    float diff7 = numbers[0];\n    float diff8 = numbers[0];\n    float diff9\
    \ = numbers[0];\n    float diff10 = numbers[0];\n    float diff11 = numbers[0];\n\
    \    float diff12 = numbers[0];\n    float diff13 = numbers[0];\n    float diff14\
    \ = numbers[0];\n    float diff15 = numbers[0];\n    float diff16 = numbers[0];\n\
    \    float diff17 = numbers[0];\n    float diff18 = numbers[0];\n    float diff19\
    \ = numbers[0];\n    float diff20 = numbers[0];\n    float diff21 = numbers[0];\n\
    \    float diff22 = numbers[0];\n    float diff23 = numbers[0];\n    float diff24\
    \ = numbers[0];\n    float diff25 = numbers[0];\n    float diff26 = numbers[0];\n\
    \    float diff27 = numbers[0];\n    float diff28 = numbers[0];\n    float diff29\
    \ = numbers[0];\n    float diff30 = numbers[0];\n    float diff31 = numbers[0];\n\
    \    float diff32 = numbers[0];\n    float diff33 = numbers[0];\n    float diff34\
    \ = numbers[0];\n    float diff35 = numbers[0];\n    float diff36 = numbers[0];\n\
    \    float diff37 = numbers[0];\n    float diff38 = numbers[0];\n    float diff39\
    \ = numbers[0];\n    float diff40 = numbers[0];\n    float diff41 = numbers[0];\n\
    \    float diff42 = numbers[0];\n    float diff43 = numbers[0];\n    float diff44\
    \ = numbers[0];\n    float diff45 = numbers[0];\n    float diff46 = numbers[0];\n\
    \    float diff47 = numbers[0];\n    float diff48 = numbers[0];\n    float diff49\
    \ = numbers[0];\n    float diff50 = numbers[0];\n    float diff51 = numbers[0];\n\
    \    float diff52 = numbers[0];\n    float diff53 = numbers[0];\n    float diff54\
    \ = numbers[0];\n    float diff55 = numbers[0];\n    float diff56 = numbers[0];\n\
    \    float diff57 = numbers[0];\n    float diff58 = numbers[0];\n    float diff59\
    \ = numbers[0];\n    float diff60 = numbers[0];\n", "{\n    float smallest;\n\
    \    float largest;\n    float smallest_number;\n    float largest_number;\n \
    \   \n    smallest = numbers[0];\n    largest = numbers[0];\n    smallest_number\
    \ = numbers[0];\n    largest_number = numbers[0];\n    \n    foreach(number in\
    \ numbers) {\n        if (number < smallest) {\n            smallest = number;\n\
    \            smallest_number = number;\n        }\n        if (number > largest)\
    \ {\n            largest = number;\n            largest_number = number;\n   \
    \     }\n    }\n    \n    return Tuple!(smallest_number, largest_number);\n}",
  "{\n    float smallest;\n    float largest;\n    float temp;\n    float temp2;\n\
    \    float temp3;\n    float temp4;\n    float temp5;\n    float temp6;\n    float\
    \ temp7;\n    float temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n\
    \    float temp12;\n    float temp13;\n    float temp14;\n    float temp15;\n\
    \    float temp16;\n    float temp17;\n    float temp18;\n    float temp19;\n\
    \    float temp20;\n    float temp21;\n    float temp22;\n    float temp23;\n\
    \    float temp24;\n    float temp25;\n    float temp26;\n    float temp27;\n\
    \    float temp28;\n    float temp29;\n    float temp30;\n    float temp31;\n\
    \    float temp32;\n    float temp33;\n    float temp34;\n    float temp35;\n\
    \    float temp36;\n    float temp37;\n    float temp38;\n    float temp39;\n\
    \    float temp40;\n    float temp41;\n    float temp42;\n    float temp43;\n\
    \    float temp44;\n    float temp45;\n    float temp46;\n    float temp47;\n\
    \    float temp48;\n    float temp49;\n    float temp50;\n    float temp51;\n\
    \    float temp52;\n    float temp53;\n    float temp54;\n    float temp55;\n\
    \    float temp56;\n    float temp57;\n    float temp58;\n    float temp59;\n\
    \    float temp60;\n    float temp61;\n    float temp62;\n    float temp63;\n\
    \    float temp64;\n    float temp65;\n    float temp66;\n    float temp67;\n\
    \    float temp68;\n    float temp69;\n    float temp70;\n    float temp71;\n\
    \    float temp72;\n    float temp73;\n    float temp74;\n    float temp75;\n\
    \    float temp76;\n    float temp77;\n    float temp78;\n    float temp79;\n\
    \    float temp80;\n    float temp81;\n    float temp82;\n    float temp83;\n\
    \    float temp84;\n    float temp85;\n    float temp86;\n    float ", "{\n\t\
    float min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\t\n\tfor(int i = 0; i < numbers.length; ++i)\n\t\
    {\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i]\
    \ > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] < min2)\n\
    \t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat min2 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1, min2, max2);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    for (float number : numbers) {\n \
    \       if (number < smallest) {\n            smallest = number;\n        } else\
    \ if (number > largest) {\n            largest = number;\n        }\n    }\n \
    \   \n    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        }\n        if\
    \ (number > largest) {\n            largest = number;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied array of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if (number < smallest - epsilon) {\n            smallest = number;\n\
    \        }\n        if (number > largest + epsilon) {\n            largest = number;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  \
    \  tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if\
    \ (number < smallest - delta && number > smallest + delta) {\n            smallest\
    \ = number;\n        }\n        if (number > largest + delta && number < largest\
    \ - delta) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float epsilon",
  "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied array of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon)\n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest\
    \ + epsilon)\n        {\n            smallest = numbers[i];\n        }\n     \
    \   if(numbers[i] > largest - epsilon)\n        {\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  \
    \  tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta)\n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + delta)\n        {\n            smallest\
    \ = numbers[i];\n        }\n        if(numbers[i] > largest - delta)\n       \
    \ {\n            largest = numbers[i];\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied array of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n", "{\n\tfloat min1 =\
    \ numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat\
    \ max2 = numbers[0];\n\tfloat diff1 = max1 - min1;\n\tfloat diff2 = max2 - min2;\n\
    \t\n\tfor(int i = 1; i < numbers.length; i++)\n\t{\n\t\tfloat curr = numbers[i];\n\
    \t\tfloat diff = curr - min1;\n\t\t\n\t\tif(diff < diff1)\n\t\t{\n\t\t\tmin2 =\
    \ min1;\n\t\t\tmin1 = curr;\n\t\t\tdiff1 = diff;\n\t\t}\n\t\telse if(diff > diff2)\n\
    \t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1 = curr;\n\t\t\tdiff2 = diff;\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tmin2 = curr;\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tfloat curr = numbers[i];\n\t\tfloat diff = curr - min1;\n\t\t\
    \n\t\tif(diff < 0)\n\t\t{\n\t\t\tmin2 = min1;\n\t\t\tmin1 = curr;\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tmin2 = curr;\n\t\t}\n\t\t\n\t\tdiff = curr - max1;\n\t\t\n\t\
    \tif(diff < 0)\n\t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1 = curr;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tmax2 = curr;\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, min2);\n}", "{\n\
    \tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\tfloat minDiff = float.max;\n\tfloat maxDiff = float.min;\n\
    \tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tfloat diff = numbers[i] -\
    \ min1;\n\t\tif (diff < minDiff)\n\t\t{\n\t\t\tminDiff = diff;\n\t\t\tmin1 = numbers[i];\n\
    \t\t}\n\t\tdiff = numbers[i] - min2;\n\t\tif (diff < minDiff)\n\t\t{\n\t\t\tminDiff\
    \ = diff;\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\tdiff = numbers[i] - max1;\n\t\t\
    if (diff > maxDiff)\n\t\t{\n\t\t\tmaxDiff = diff;\n\t\t\tmax1 = numbers[i];\n\t\
    \t}\n\t\tdiff = numbers[i] - max2;\n\t\tif (diff > maxDiff)\n\t\t{\n\t\t\tmaxDiff\
    \ = diff;\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(min1, min2);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1);\n}", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\
    \tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min)\n\t\
    \t{\n\t\t\tmin = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\
    \t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(min, max);\n}", "{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    float smallest_index\
    \ = -1;\n    float largest_index = -1;\n    \n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        \n      \
    \  if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n  \
    \          largest_index = i;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for(float number : numbers) {\n        if(number < smallest) {\n        \
    \    smallest = number;\n        }\n        if(number > largest) {\n         \
    \   largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float\
    \ max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(i : numbers)\
    \ {\n        if (i < min1) {\n            min1 = i;\n        } else if (i > max1)\
    \ {\n            max1 = i;\n        }\n        if (i < min2) {\n            min2\
    \ = i;\n        } else if (i > max2) {\n            max2 = i;\n        }\n   \
    \ }\n    \n    return Tuple!(min1, min2);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat max1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\
    \t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] < min2)\n\t\t{\n\t\t\t\
    min2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 =\
    \ numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float closest;\n    float\
    \ closest2;\n    float closest3;\n    float closest4;\n    float closest5;\n \
    \   float closest6;\n    float closest7;\n    float closest8;\n    float closest9;\n\
    \    float closest10;\n    float closest11;\n    float closest12;\n    float closest13;\n\
    \    float closest14;\n    float closest15;\n    float closest16;\n    float closest17;\n\
    \    float closest18;\n    float closest19;\n    float closest20;\n    float closest21;\n\
    \    float closest22;\n    float closest23;\n    float closest24;\n    float closest25;\n\
    \    float closest26;\n    float closest27;\n    float closest28;\n    float closest29;\n\
    \    float closest30;\n    float closest31;\n    float closest32;\n    float closest33;\n\
    \    float closest34;\n    float closest35;\n    float closest36;\n    float closest37;\n\
    \    float closest38;\n    float closest39;\n    float closest40;\n    float closest41;\n\
    \    float closest42;\n    float closest43;\n    float closest44;\n    float closest45;\n\
    \    float closest46;\n    float closest47;\n    float closest48;\n    float closest49;\n\
    \    float closest50;\n    float closest51;\n    float closest52;\n    float closest53;\n\
    \    float closest54;\n    float closest55;\n    float closest56;\n    float closest57;\n\
    \    float closest58;\n    float closest59;\n    float closest60;\n    float closest61;\n\
    \    float closest62;\n    float closest63;\n    float closest64;\n    float closest65;\n\
    \    float closest66;\n    float closest67;\n    float closest68;\n    float closest69;\n\
    \    float closest70;\n    float closest71;\n    float closest72;\n    float closest73;\n\
    \    float closest74;\n    float closest75;\n    float closest76;\n    float closest77;\n\
    \    float closest78;\n    float closest79;\n    float closest80;\n    float closest81;\n\
    \    float closest82;\n    float closest83;\n    float closest84;\n    float closest85;\n\
    \    float closest86;\n    float ", "{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n\
    \        {\n            min1 = numbers[i];\n        }\n        if(numbers[i] >\
    \ max1)\n        {\n            max1 = numbers[i];\n        }\n        if(numbers[i]\
    \ > max2)\n        {\n            max2 = numbers[i];\n        }\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min1, max1);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\
    \tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat diff = numbers[0];\n\
    \tfloat diff2 = numbers[0];\n\tfloat diff3 = numbers[0];\n\tfloat diff4 = numbers[0];\n\
    \tfloat diff5 = numbers[0];\n\tfloat diff6 = numbers[0];\n\tfloat diff7 = numbers[0];\n\
    \tfloat diff8 = numbers[0];\n\tfloat diff9 = numbers[0];\n\tfloat diff10 = numbers[0];\n\
    \tfloat diff11 = numbers[0];\n\tfloat diff12 = numbers[0];\n\tfloat diff13 = numbers[0];\n\
    \tfloat diff14 = numbers[0];\n\tfloat diff15 = numbers[0];\n\tfloat diff16 = numbers[0];\n\
    \tfloat diff17 = numbers[0];\n\tfloat diff18 = numbers[0];\n\tfloat diff19 = numbers[0];\n\
    \tfloat diff20 = numbers[0];\n\tfloat diff21 = numbers[0];\n\tfloat diff22 = numbers[0];\n\
    \tfloat diff23 = numbers[0];\n\tfloat diff24 = numbers[0];\n\tfloat diff25 = numbers[0];\n\
    \tfloat diff26 = numbers[0];\n\tfloat diff27 = numbers[0];\n\tfloat diff28 = numbers[0];\n\
    \tfloat diff29 = numbers[0];\n\tfloat diff30 = numbers[0];\n\tfloat diff31 = numbers[0];\n\
    \tfloat diff32 = numbers[0];\n\tfloat diff33 = numbers[0];\n\tfloat diff34 = numbers[0];\n\
    \tfloat diff35 = numbers[0];\n\tfloat diff36 = numbers[0];\n\tfloat diff37 = numbers[0];\n\
    \tfloat diff38 = numbers[0];\n\tfloat diff39 = numbers[0];\n\tfloat diff40 = numbers[0];\n\
    \tfloat diff41 = numbers[0];\n\tfloat diff42 = numbers[0];\n\tfloat diff43 = numbers[0];\n\
    \tfloat diff44 = numbers[0];\n\tfloat diff45 = numbers[0];\n\tfloat diff46 = numbers[0];\n\
    \tfloat diff47 = numbers[0];\n\tfloat diff48 = numbers[0];\n\tfloat diff49 = numbers[0];\n\
    \tfloat diff50 = numbers[0];\n\tfloat diff51 = numbers[0];\n\tfloat diff52 = numbers[0];\n\
    \tfloat diff53 = numbers[0];\n\tfloat diff54 = numbers[0];\n\tfloat diff55 = numbers[0];\n\
    \tfloat diff56 = numbers[0];\n\tfloat diff57 = numbers[0];\n\tfloat diff58 = numbers[0];\n\
    \tfloat diff59 = numbers[0];\n\tfloat diff60 = numbers[0];\n\tfloat diff61 = numbers[0];\n\
    \tfloat diff62 = numbers[0];", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}", "{\n\tfloat min = numbers[0];\n\tfloat max =\
    \ numbers[0];\n\tfloat closest;\n\tfloat closest2;\n\tfloat closest3;\n\tfloat\
    \ closest4;\n\tfloat closest5;\n\tfloat closest6;\n\tfloat closest7;\n\tfloat\
    \ closest8;\n\tfloat closest9;\n\tfloat closest10;\n\tfloat closest11;\n\tfloat\
    \ closest12;\n\tfloat closest13;\n\tfloat closest14;\n\tfloat closest15;\n\tfloat\
    \ closest16;\n\tfloat closest17;\n\tfloat closest18;\n\tfloat closest19;\n\tfloat\
    \ closest20;\n\tfloat closest21;\n\tfloat closest22;\n\tfloat closest23;\n\tfloat\
    \ closest24;\n\tfloat closest25;\n\tfloat closest26;\n\tfloat closest27;\n\tfloat\
    \ closest28;\n\tfloat closest29;\n\tfloat closest30;\n\tfloat closest31;\n\tfloat\
    \ closest32;\n\tfloat closest33;\n\tfloat closest34;\n\tfloat closest35;\n\tfloat\
    \ closest36;\n\tfloat closest37;\n\tfloat closest38;\n\tfloat closest39;\n\tfloat\
    \ closest40;\n\tfloat closest41;\n\tfloat closest42;\n\tfloat closest43;\n\tfloat\
    \ closest44;\n\tfloat closest45;\n\tfloat closest46;\n\tfloat closest47;\n\tfloat\
    \ closest48;\n\tfloat closest49;\n\tfloat closest50;\n\tfloat closest51;\n\tfloat\
    \ closest52;\n\tfloat closest53;\n\tfloat closest54;\n\tfloat closest55;\n\tfloat\
    \ closest56;\n\tfloat closest57;\n\tfloat closest58;\n\tfloat closest59;\n\tfloat\
    \ closest60;\n\tfloat closest61;\n\tfloat closest62;\n\tfloat closest63;\n\tfloat\
    \ closest64;\n\tfloat closest65;\n\tfloat closest66;\n\tfloat closest67;\n\tfloat\
    \ closest68;\n\tfloat closest69;\n\tfloat closest70;\n\tfloat closest71;\n\tfloat\
    \ closest72;\n\tfloat closest73;\n\tfloat closest74;\n\tfloat closest75;\n\tfloat\
    \ closest76;\n\tfloat closest77;\n\tfloat closest78;\n\tfloat closest79;\n\tfloat\
    \ closest80;\n\tfloat closest81;\n\tfloat closest82;\n\tfloat closest83;\n\tfloat\
    \ closest84;\n\tfloat closest85;\n\tfloat closest86;\n\tfloat ", "{\n\tfloat min1\
    \ = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat\
    \ max2 = numbers[0];\n\tfloat min3 = numbers[0];\n\tfloat max3 = numbers[0];\n\
    \tfloat min4 = numbers[0];\n\tfloat max4 = numbers[0];\n\tfloat min5 = numbers[0];\n\
    \tfloat max5 = numbers[0];\n\tfloat min6 = numbers[0];\n\tfloat max6 = numbers[0];\n\
    \tfloat min7 = numbers[0];\n\tfloat max7 = numbers[0];\n\tfloat min8 = numbers[0];\n\
    \tfloat max8 = numbers[0];\n\tfloat min9 = numbers[0];\n\tfloat max9 = numbers[0];\n\
    \tfloat min10 = numbers[0];\n\tfloat max10 = numbers[0];\n\tfloat min11 = numbers[0];\n\
    \tfloat max11 = numbers[0];\n\tfloat min12 = numbers[0];\n\tfloat max12 = numbers[0];\n\
    \tfloat min13 = numbers[0];\n\tfloat max13 = numbers[0];\n\tfloat min14 = numbers[0];\n\
    \tfloat max14 = numbers[0];\n\tfloat min15 = numbers[0];\n\tfloat max15 = numbers[0];\n\
    \tfloat min16 = numbers[0];\n\tfloat max16 = numbers[0];\n\tfloat min17 = numbers[0];\n\
    \tfloat max17 = numbers[0];\n\tfloat min18 = numbers[0];\n\tfloat max18 = numbers[0];\n\
    \tfloat min19 = numbers[0];\n\tfloat max19 = numbers[0];\n\tfloat min20 = numbers[0];\n\
    \tfloat max20 = numbers[0];\n\tfloat min21 = numbers[0];\n\tfloat max21 = numbers[0];\n\
    \tfloat min22 = numbers[0];\n\tfloat max22 = numbers[0];\n\tfloat min23 = numbers[0];\n\
    \tfloat max23 = numbers[0];\n\tfloat min24 = numbers[0];\n\tfloat max24 = numbers[0];\n\
    \tfloat min25 = numbers[0];\n\tfloat max25 = numbers[0];\n\tfloat min26 = numbers[0];\n\
    \tfloat max26 = numbers[0];\n\tfloat min27 = numbers[0];\n\tfloat max27 = numbers[0];\n\
    \tfloat min28 = numbers[0];\n\tfloat max28 = numbers[0];\n\tfloat min29 = numbers[0];\n\
    \tfloat max29 = numbers[0];\n\tfloat min30 = numbers[0];\n\tfloat max30 = numbers[0];\n\
    \tfloat min31 = numbers[0];\n\tfloat max31 = numbers[0];\n\tfloat min32 = numbers[0];\n\
    \tfloat max32 = numbers[0];\n\tfloat min33 = numbers[0];\n\tfloat max33 = numbers[0];\n\
    \tfloat min34 = number", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\
    \tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i\
    \ < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 =\
    \ numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\
    \t\t}\n\t\t\n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\
    }\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n    float min1, min2;\n    float\
    \ max1, max2;\n    float mid1, mid2;\n    float minDiff = FLT_MAX;\n    float\
    \ maxDiff = FLT_MIN;\n    \n    for(float number : numbers) {\n        min1 =\
    \ max1 = number;\n        min2 = max2 = number;\n        \n        for(float number\
    \ : numbers) {\n            mid1 = (number + min1) / 2;\n            mid2 = (number\
    \ + max1) / 2;\n            \n            float diff1 = abs(mid1 - number);\n\
    \            float diff2 = abs(mid2 - number);\n            \n            if(diff1\
    \ < minDiff) {\n                minDiff = diff1;\n                min1 = mid1;\n\
    \            }\n            if(diff2 < minDiff) {\n                minDiff = diff2;\n\
    \                min2 = mid2;\n            }\n            \n            if(diff1\
    \ > diff2) {\n                max1 = mid1;\n                max2 = mid2;\n   \
    \         }\n        }\n        \n        if(min1 < min2) {\n            min1\
    \ = min2;\n            min2 = min1;\n        }\n        \n        if(max1 > max2)\
    \ {\n            max1 = max2;\n            max2 = max1;\n        }\n    }\n  \
    \  \n    return Tuple!(min1, min2);\n}", "{\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i]\
    \ < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i] > max)\n\t\
    \t{\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(min, max);\n}", "{\n\
    \tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor (int i = 1; i\
    \ < numbers.length; i++)\n\t{\n\t\tif (numbers[i] < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\t\t}\n\
    \t}\n\t\n\treturn Tuple!(min, max);\n}", "{\n    float min1 = numbers[0];\n  \
    \  float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \        \n        if(numbers[i] > min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        else if(numbers[i] < max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float closest =\
    \ numbers[0];\n    float closest2 = numbers[0];\n    \n    foreach(number in numbers)\
    \ {\n        if(number < min) {\n            min = number;\n        }\n      \
    \  if(number > max) {\n            max = number;\n        }\n    }\n    \n   \
    \ foreach(number in numbers) {\n        if(number < closest) {\n            closest\
    \ = number;\n        }\n        if(number > closest2) {\n            closest2\
    \ = number;\n        }\n    }\n    \n    return Tuple!(closest, closest2);\n}",
  "{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n  \
    \  foreach(number in numbers) {\n        if (number < smallest) {\n          \
    \  smallest = number;\n        }\n        if (number > largest) {\n          \
    \  largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }", "{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1;\
    \ i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min)\n\t\t{\n\t\t\tmin =\
    \ numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\treturn Tuple!(min, max);\n}", "{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \    }\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n        }\n\
    \    }\n    return Tuple!(min1, min2);\n}\n/*\n From a supplied array of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n    }\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    return Tuple!(min1, min2);\n}\n/*\n From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
    \    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n \
    \   float max1 = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n        {\n\
    \            min1 = ", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers)\n    {\n        if(number\
    \ < smallest || smallest == 0.0f)\n        {\n            smallest = number;\n\
    \        }\n        if(number > largest || largest == 0.0f)\n        {\n     \
    \       largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat smallest;\n\tfloat largest;\n\tfloat smallest_index;\n\
    \tfloat largest_index;\n\t\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\
    \tsmallest_index = 0;\n\tlargest_index = 0;\n\t\n\tfor (int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t\tsmallest_index = i;\n\t\t}\n\t\t\n\t\tif (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(smallest, largest);\n}", "{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \        \n        if(numbers[i] > min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        else if(numbers[i] < max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, min2);\n}", "{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest)\n        {\n            smallest = numbers[i];\n\
    \            smallest_index = i;\n        }\n        if(numbers[i] > largest)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float result = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n        if(numbers[i] >\
    \ max)\n        {\n            max = numbers[i];\n        }\n    }\n    for(int\
    \ i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \   {\n            min = numbers[i];\n        }\n        if(numbers[i] > max)\n\
    \        {\n            max = numbers[i];\n        }\n    }\n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] > max)\n        {\n \
    \           result = numbers[i];\n        }\n    }\n    return Tuple!(float, float)\
    \ result,result;\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n        }\n        if(number > largest) {\n\
    \            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\t\
    float max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i <\
    \ numbers.length; ++i)\n\t{\n\t\tfloat curr = numbers[i];\n\t\tfloat diff = curr\
    \ - min1;\n\t\tfloat diff2 = curr - min2;\n\t\t\n\t\tif(diff < diff2)\n\t\t{\n\
    \t\t\tmin2 = min1;\n\t\t\tmin1 = curr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax2 = max1;\n\
    \t\t\tmax1 = curr;\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n   \
    \ float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if (number < smallest) {\n            smallest = number;\n\
    \        }\n        if (number > largest) {\n            largest = number;\n \
    \       }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if (number < smallest) {\n            smallest = number;\n      \
    \  }\n        if (number > largest) {\n            largest = number;\n       \
    \ }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    float smallest_index;\n    float largest_index;\n   \
    \ \n    smallest = numbers[0];\n    largest = numbers[0];\n    smallest_index\
    \ = 0;\n    largest_index = 0;\n    \n    for (int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if (numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        \n      \
    \  if (numbers[i] > largest)\n        {\n            largest = numbers[i];\n \
    \           largest_index = i;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}", "{\n    float smallest;\n    float largest;\n    float mid;\n\
    \    float temp;\n    float temp2;\n    \n    smallest = numbers[0];\n    largest\
    \ = numbers[0];\n    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n  \
    \      mid = numbers[i] + numbers[i-1];\n        \n        if(mid < smallest)\n\
    \        {\n            smallest = mid;\n        }\n        \n        if(mid >\
    \ largest)\n        {\n            largest = mid;\n        }\n    }\n    \n  \
    \  temp = smallest;\n    temp2 = largest;\n    \n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < temp)\n        {\n            temp = numbers[i];\n\
    \        }\n        \n        if(numbers[i] > temp2)\n        {\n            temp2\
    \ = numbers[i];\n        }\n    }\n    \n    return Tuple!(temp, temp2);\n}\n\
    /*\n From a supplied array of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, int start) \n{\n    float smallest;\n    float largest;\n    float\
    \ mid;\n    float temp;\n    float temp2;\n    \n    smallest = numbers[start];\n\
    \    largest = numbers[start];\n    \n    for(int i = start; i < numbers.length;\
    \ ++i)\n    {\n        mid = numbers[i] + numbers[i-1];\n        \n        if(mid\
    \ < smallest)\n        {\n            smallest = mid;\n        }\n        \n \
    \       if(mid > largest)\n        {\n            largest = mid;\n        }\n\
    \    }\n    \n    temp = smallest;\n    temp2 = largest;\n    \n    for(int i\
    \ = start; i < numbers.length; ++i)\n    {\n        if(numbers[i] < temp)\n  \
    \      {\n            temp = numbers[i];\n        }\n        \n        if(numbers[i]\
    \ > temp2)\n        {\n            temp2 = numbers[i];\n        }\n    }\n   \
    \ \n    return Tuple!(temp, temp2);\n}\n/*\n From a supplied array of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_element"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
