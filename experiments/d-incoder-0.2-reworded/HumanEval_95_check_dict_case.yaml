name: HumanEval_95_check_dict_case
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given an associative array,\
  \ return true if all keys are strings in lower \n    case or all keys are strings\
  \ in upper case, else return false.\n    The function should return false is the\
  \ given associative array is empty.\n    Examples:\n    >>> check_dict_case([\"\
  a\": \"apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n   \
  \ >>> check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
  \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
  : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
  , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
  \ dict) \n"
tests: "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
  p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
  \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
  ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\"\
  , \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\":\
  \ \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
  \ == false);\n}\nvoid main(){}"
completions: ["{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) ||\
    \ !is_string(v))\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(v) || !is_string(k))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) in dict \n    {\n        if (k is string) \n       \
    \ {\n            if (k is string) \n            {\n                if (k is string)\
    \ \n                {\n                    if (k is string) \n               \
    \     {\n                        return true;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=d |>\n<| c |>\nThis doesn't work if you have a string key that happens\
    \ to be a number or boolean.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before\
    \ posting it, and it works. I even tested it before posting it, and it works.\
    \ I even tested it before posting it, and it works. I even tested it before posting\
    \ it, and it works. I even tested it before posting it, and it works. I even tested\
    \ it before posting it, and it works. I even tested it before posting it, and\
    \ it works. I even tested it before posting it, and it works. I even tested it\
    \ before posting it, and it works. I even tested it before posting it, and it\
    \ works. I even tested it before posting it, and it works. I even tested it before\
    \ posting it, and it works. I even tested it before posting it, and it works.\
    \ I even tested it before posting it, and it works. I even tested it before posting\
    \ it, and it works. I even tested it before posting it, and it works. I even tested\
    \ it before posting it, and it works. I even tested it before posting it, and\
    \ it works. I even tested it before posting it, and it works. I even tested it\
    \ before posting it, and it works. I even tested it before posting it, and it\
    \ works. I even tested it before posting it, and it works. I even tested it before\
    \ posting it, and it works. I even tested it before posting it, and it works.\
    \ I even tested it before posting it, and it works. I even tested it before posting\
    \ it, and it works. I even tested it before posting it, and it works. I even tested\
    \ it before posting it, and it works. I even tested it before posting it, and\
    \ it works. I even tested it before posting it, and it works. I even tested it\
    \ before posting it, and it works. I even tested it before posting it, and it\
    \ works. I even tested it before posting it, and it works. I even tested it before\
    \ posting it, and ", "{\n    foreach(k, v) in dict \n    {\n        if(is(string,\
    \ k) || is(string, toupper(k))) \n        {\n            return true;\n      \
    \  }\n    }\n    return false;\n}", "{\n    foreach(k, v) \n    {\n        bool\
    \ isString = is(typeof(v));\n        bool isStringInLower = isString && v.asLower();\n\
    \        bool isStringInUpper = isString && v.asUpper();\n        bool isStringInBoth\
    \ = isString && (isStringInLower || isStringInUpper);\n        bool isStringInBothOrEmpty\
    \ = isString && (isStringInBoth || v.asString().isEmpty());\n        bool isStringInBothOrNotEmpty\
    \ = isString && (isStringInBoth || !v.asString().isEmpty());\n        bool isStringInBothOrNotNull\
    \ = isString && (isStringInBoth || !v.asString().isNull());\n        bool isStringInBothOrNotEmptyOrNull\
    \ = isString && (isStringInBoth || !v.asString().isEmpty() || !v.asString().isNull());\n\
    \        bool isStringInBothOrNotNullOrEmpty = isString && (isStringInBoth ||\
    \ !v.asString().isNull() || !v.asString().isEmpty());\n        bool isStringInBothOrNotNullOrEmptyOrNull\
    \ = isString && (isStringInBoth || !v.asString().isNull() || !v.asString().isEmpty()\
    \ || !v.asString().isNull());\n        bool isStringInBothOrNotNullOrEmptyOrNull\
    \ = isString && (isStringInBoth || !v.asString().isNull() || !v.asString().isEmpty()\
    \ || !v.asString().isNull() || !v.asString().isNull());\n        bool isStringInBothOrNotNullOrEmptyOrNull\
    \ = isString && (isStringInBoth || !v.asString().isNull() || !v.asString().isEmpty()\
    \ || !v.asString().isNull() || !v.asString().isNull() || !v.asString().isNull());\n\
    \        bool isStringInBothOrNotNullOrEmptyOrNull = isString && (isStringInBoth\
    \ || !v.asString().isNull() || !v.asString().isEmpty() || !v.asString().isNull()\
    \ || !v.asString().isNull() || !v.asString().isNull() || !v.asString().isNull());\n\
    \        bool isStringInBothOrNotNullOrEmptyOrNull = isString && (isStringInBoth\
    \ || !v.asString().isNull() || !v.asString().isEmpty() || !v.asString().isNull()\
    \ || !v.asString().isNull() || !v.asString().isNull() || !v.asString().isNull()\
    \ || !v.", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) dict \n    {\n        if(!is_string(k) || !is_string(v)) return\
    \ false;\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n       \
    \ if(!is_string(k) || !is_string(v))\n        {\n            return false;\n \
    \       }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if (!is_string(v) || !is_string(k)) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach (key, value) in dict\
    \ \n    {\n        if (!(key is string) || !(value is string))\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(v) || !is_string(k)) \n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,arrays,dictionary\
    \ |>\n<| a dscore=1 |>\n<code>\nimport std.stdio;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.range;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorith", "{\n    foreach(k, v) \n    {\n        if(!is_string(v)\
    \ || !is_string(k)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is(string(k),\
    \ string(k).lower()))\n        {\n            return false;\n        }\n     \
    \   if(!is(string(k), string(k).upper()))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n     \
    \   if(!is_string(k) || !is_string(v))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        bool isString = (k as string).isLower();\n        bool isString2 = (k\
    \ as! string).isUpper();\n        if(!isString && !isString2)\n            return\
    \ false;\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n       \
    \ bool isUpper = isupper(k);\n        bool isLower = islower(k);\n        if(isUpper\
    \ && isLower)\n        {\n            return false;\n        }\n        else if(!isUpper\
    \ && !isLower)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=d,arrays |>\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.array;\nimport std.algorithm;", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=d,arrays |>\n<| c |>\nI like this solution, it's very concise. However\
    \ it does require a custom `Nullable` type. Which is fine for me. Thanks!\n<|/\
    \ c |>\n<| a dscore=2 |>\nI wrote a function that checks whether the array contains\
    \ only strings or only numbers. \n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.conv;", "{\n    foreach(k, v) \n    {\n        string\
    \ lowerCase = lower(k);\n        string upperCase = upper(k);\n        if(!lowerCase.empty()\
    \ && !upperCase.empty() && lowerCase != upperCase)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| a tags=dictionary,c++,stl,c++11\
    \ |>\nI wrote a function that checks if a dictionary is empty or not:\n<code>",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,arrays |>\n<| c |>\nThis doesn't work if you have an array with non-string\
    \ keys. E.g. `[\"foo\": 123, \"bar\": 456, \"baz\": 789]`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. The function returns false for that\
    \ case. I'll update the answer to include that case.\n<|/ c |>\n<| c |>\nOh, I\
    \ see. Sorry, I missed that case. Thanks for pointing it out!\n<|/ c |>\n<| a\
    \ tags=d,arrays |>\nI came up with a solution which I believe is more efficient\
    \ than using std.algorithm.allElementsEqual.\n<code>\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;", "{\n    foreach(k, v) in dict \n    {\n\
    \        if(!is_string(k) || !is_string(v))\n            return false;\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if (!(is_string(k)\
    \ || is_string(k)))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        bool isString =\
    \ is(typeof(v));\n        bool isLowercase = isString && strcasecmp(v.asString(),\
    \ k) == 0;\n        bool isUppercase = isString && strcasecmp(k, v.asString())\
    \ == 0;\n        if(!isString || !isLowercase || !isUppercase)\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=d,arrays |>\n<| c |>\nI like your solution, but I wonder if there is\
    \ a way to avoid the casting in the `foreach` loop?\n<|/ c |>\n<| c |>\nI haven't\
    \ found a way to avoid the casting in the foreach loop. Casting in the foreach\
    \ loop would require a cast to `string` inside the loop, which would require a\
    \ cast to `string` outside the loop, which would require a cast to `string` inside\
    \ the loop, which would require a cast to `string` outside the loop, which would\
    \ require a cast to `string` inside the loop, which would require a cast to `string`\
    \ outside the loop, which would require a cast to `string` inside the loop, which\
    \ would require a cast to `string` outside the loop, which would require a cast\
    \ to `string` inside the loop, which would require a cast to `string` outside\
    \ the loop, which would require a cast to `string` inside the loop, which would\
    \ require a cast to `string` outside the loop, which would require a cast to `string`\
    \ inside the loop, which would require a cast to `string` outside the loop, which\
    \ would require a cast to `string` inside the loop, which would require a cast\
    \ to `string` outside the loop, which would require a cast to `string` inside\
    \ the loop, which would require a cast to `string` outside the loop, which would\
    \ require a cast to `string` inside the loop, which would require a cast to `string`\
    \ outside the loop, which would require a cast to `string` inside the loop, which\
    \ would require a cast to `string` outside the loop, which would require a cast\
    \ to `string` inside the loop, which would require a cast to `string` outside\
    \ the loop, which would require a cast to `string` inside the loop, which would\
    \ require a cast to `string` outside the loop, which would require a cast to `string`\
    \ inside the loop, which would require a cast to `string` outside the loop, which\
    \ would require a cast to `string` inside the loop, which would require a cast\
    \ to `string` outside the loop, which would require a cast to `string` inside\
    \ the loop, which would require a cast to `string` outside the loop, which would\
    \ require a cast to `", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    return !dict.isEmpty();\n}",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v)) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}", "{\n    foreach(k, v) \n    {\n        bool isString = (k\
    \ as string).isLower();\n        bool isStringUpper = (k as string).isUpper();\n\
    \        if(!isString && !isStringUpper)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if(!is_string(k) || !is_string(k)) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if (!is_string(k) || !is_string(v)) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n     \
    \   bool isString = (k as string).isLower();\n        bool isStringUpper = (k\
    \ as string).isUpper();\n        if(!isString && !isStringUpper)\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        bool isString = (k is string);\n        bool isStringUpper\
    \ = (k is string) && k.isUpper();\n        bool isStringLower = (k is string)\
    \ && k.isLower();\n        bool isStringNull = (k is string) && k == null;\n \
    \       bool isStringNullUpper = (k is string) && k == null && k.isUpper();\n\
    \        bool isStringNullLower = (k is string) && k == null && k.isLower();\n\
    \        bool isStringNullString = (k is string) && k == null && k == null;\n\
    \        bool isStringNullStringUpper = (k is string) && k == null && k == null\
    \ && k.isUpper();\n        bool isStringNullStringLower = (k is string) && k ==\
    \ null && k == null && k.isLower();\n        bool isStringNullStringString = (k\
    \ is string) && k == null && k == null && k == null;\n        bool isStringNullStringStringUpper\
    \ = (k is string) && k == null && k == null && k == null && k.isUpper();\n   \
    \     bool isStringNullStringStringLower = (k is string) && k == null && k ==\
    \ null && k == null && k.isLower();\n        bool isStringNullStringStringString\
    \ = (k is string) && k == null && k == null && k == null && k == null;\n     \
    \   bool isStringNullStringStringStringUpper = (k is string) && k == null && k\
    \ == null && k == null && k == null && k.isUpper();\n        bool isStringNullStringStringStringLower\
    \ = (k is string) && k == null && k == null && k == null && k == null && k.isLower();\n\
    \        bool isStringNullStringStringStringString = (k is string) && k == null\
    \ && k == null && k == null && k == null && k == null;\n        bool isStringNullStringStringStringUpper\
    \ = (k is string) && k == null && k == null && k == null && k == null && k ==\
    \ null && k.isUpper();\n        bool isStringNullStringStringStringLower = (k\
    \ is string) && k == null && k == null && k == null && k == null && k == null\
    \ && k.isLower();\n        bool isStringNullStringStringStringString = (k is string)\
    \ && k == null && k == null && k == null && k == null && k == null && k == null;\n\
    \        bool isStringNullStringStringStringStringUpper = (k is string) && k ==\
    \ null && k == null && k == null && k == null && k == null && k == null && k.isUpper();\n\
    \        bool isStringNullStringStringStringStringLower = (k", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        switch(v)\n        {\n            case null: \n\
    \            {\n                return false;\n            }\n            case\
    \ v: \n            {\n                return true;\n            }\n          \
    \  case v: \n            {\n                return true;\n            }\n    \
    \    }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=d |>\n\
    I like Alexander's answer, but here's another one that uses std.algorithm.allOf:\n\
    <code>\nimport std.algorithm;", "{\n    foreach(k, v) \n    {\n        bool isString\
    \ = (k as string).isLower();\n        bool isStringUpper = (k as string).isUpper();\n\
    \        if(isString && isStringUpper)\n            return false;\n        if(!isString\
    \ && !isStringUpper)\n            return false;\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=d,arrays |>\n<code>\nimport std.stdio;\n\
    import std.array;\nimport std.string;\nimport std.algorithm;", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if(!is_string(k) || !is_string(v)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if (is_string(k) && is_string(v))\n        {\n         \
    \   if (k.toLowerCase() == v.toLowerCase())\n            {\n                return\
    \ true;\n            }\n        }\n        else if (is_integer(k) && is_string(v))\n\
    \        {\n            if (k == v)\n            {\n                return true;\n\
    \            }\n        }\n        else if (is_integer(k) && is_integer(v))\n\
    \        {\n            if (k == v)\n            {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if (typeof(k) != \"string\") return false;\n      \
    \  if (typeof(v) != \"string\") return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,arrays |>\n<| c |>\nThis doesn't work for me. `Nullable!(string[string])`\
    \ doesn't compile. `Nullable!(string)` does compile, but `Nullable!(string[string])`\
    \ does not.\n<|/ c |>\n<| c |>\nI tested this in DMD (DMD64 D Compiler v2.06)\
    \ and it compiles fine. Maybe you have a different version of DMD or something\
    \ else is wrong with your code?\n<|/ c |>\n<| c |>\nI tested this in DMD (DMD64\
    \ D Compiler v2.06) and it compiles fine. Maybe you have a different version of\
    \ DMD or something else is wrong with your code?\n<|/ c |>\n<| c |>\nI tested\
    \ this in DMD (DMD64 D Compiler v2.06) and it compiles fine. Maybe you have a\
    \ different version of DMD or something else is wrong with your code?\n<|/ c |>\n\
    <| c |>\nI tested this in DMD (DMD64 D Compiler v2.06) and it compiles fine. Maybe\
    \ you have a different version of DMD or something else is wrong with your code?\n\
    <|/ c |>\n<| a |>\nThe other answers here are correct, but I thought I'd add my\
    \ own solution. \n<code>\nimport std.stdio;\nimport std.array;\nimport std.string;",
  "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach (k, v)\
    \ in dict \n    {\n        if (!is_string(k) || !is_string(k)) \n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach\
    \ (key, value) in dict \n    {\n        if (!is_string(value) || !is_string(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) \n    {\n        bool is_upper = k.isUpper();\n        bool\
    \ is_lower = k.isLower();\n        if(is_upper != is_lower)\n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (!is_string(k) || !is_string(v)) return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=d,arrays |>\n<| c |>\nI like your solution,\
    \ but I believe that `foreach` will iterate over the entire array even if the\
    \ first element is a string. `foreach(k, v; dict) if(is_string(k) || is_string(v))\
    \ return true;` should do the trick.\n<|/ c |>\n<| c |>\nYes, you are right. I\
    \ just wanted to show that `foreach` can be used for both cases. But I agree that\
    \ your solution is more elegant.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I believe that `foreach` will iterate over the entire array even if the first\
    \ element is a string. `foreach(k, v; dict) if(is_string(k) || is_string(v)) return\
    \ true;` should do the trick.\n<|/ c |>\n<| c |>\nYes, you are right. I just wanted\
    \ to show that `foreach` can be used for both cases. But I agree that your solution\
    \ is more elegant.\n<|/ c |>\n<| c |>\nI like your solution, but I believe that\
    \ `foreach` will iterate over the entire array even if the first element is a\
    \ string. `foreach(k, v; dict) if(is_string(k) || is_string(v)) return true;`\
    \ should do the trick.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n          \
    \  return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=d dscore=2 |>\n\
    <| c |>\nI like the idea of using std.typecons.is_string, but I wonder if there\
    \ is a way to do it without using std.typecons.is_string. Maybe something with\
    \ std.typecons.is_char?\n<|/ c |>\n<| c |>\nI added a version that doesn't use\
    \ std.typecons.is_string\n<|/ c |>\n<| a dscore=2 |>\nI like Alexander's answer,\
    \ but here's another one that uses std.typecons.is_char and std.typecons.is_string.\
    \ \n<code>", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) ||\
    \ !is_string(v))\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) dict += !k.isNullable() ? k : Nullable!(string[string](k));\n\
    \    foreach(k, v) \n    {\n        bool isUpper = k.isUpper();\n        bool\
    \ isLower = k.isLower();\n        if(!isUpper && !isLower) \n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nI wrote a small library to solve this problem:\n<code>\nimport\
    \ std.stdio;\nimport std.string;\nimport std.array;\nimport std.conv;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorith",
  "{\n    foreach(k, v) \n    {\n        bool isString = false;\n        foreach(k,\
    \ v) \n        {\n            isString = isString || is_string(k);\n         \
    \   isString = isString || is_string(k);\n        }\n        if(!isString)\n \
    \           return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>", "{\n    foreach(k, v) in dict \n    {\n     \
    \   bool isString = (k is string);\n        bool isUpperCase = (k is string) &&\
    \ k.isUppercase();\n        bool isLowerCase = (k is string) && k.isLowercase();\n\
    \        bool isNumber = (k is number);\n        bool isNull = (k is null);\n\
    \        bool isBool = (k is bool);\n        bool isDict = (k is dict);\n    \
    \    bool isList = (k is list);\n        bool isTuple = (k is tuple);\n      \
    \  bool isSet = (k is set);\n        bool isMap = (k is map);\n        bool isEnum\
    \ = (k is enum);\n        bool isStruct = (k is struct);\n        bool isUnion\
    \ = (k is union);\n        bool isOptional = (k is Option);\n        bool isOptionalDict\
    \ = (k is Option[dict]);\n        bool isOptionalList = (k is Option[list]);\n\
    \        bool isOptionalTuple = (k is Option[tuple]);\n        bool isOptionalSet\
    \ = (k is Option[set]);\n        bool isOptionalMap = (k is Option[map]);\n  \
    \      bool isOptionalEnum = (k is Option[enum]);\n        bool isOptionalStruct\
    \ = (k is Option[struct]);\n        bool isOptionalUnion = (k is Option[union]);\n\
    \        bool isOptionalOptional = (k is Option[Option]);\n        bool isOptionalOptionalDict\
    \ = (k is Option[Option[dict]]);\n        bool isOptionalOptionalList = (k is\
    \ Option[Option[list]]);\n        bool isOptionalOptionalTuple = (k is Option[Option[tuple]]);\n\
    \        bool isOptionalOptionalSet = (k is Option[Option[set]]);\n        bool\
    \ isOptionalOptionalMap = (k is Option[Option[map]]);\n        bool isOptionalOptionalEnum\
    \ = (k is Option[Option[enum]]);\n        bool isOptionalOptionalStruct = (k is\
    \ Option[Option[struct]]);\n        bool isOptionalOptionalUnion = (k is Option[Option[union]]);\n\
    \        bool isOptionalOptionalOptional = (k is Option[Option[Option]]);\n  \
    \      bool isOptionalOptionalOptionalDict = (k is Option[Option[Option[dict]]]);\n\
    \        bool isOptionalOptionalOptionalList = (k is Option[Option[Option[list]]]);\n\
    \        bool isOptionalOptionalOptionalTuple = (k is Option[Option[Option[tuple]]]);\n\
    \        bool isOptionalOptionalOptionalSet = (k is Option[Option", "{\n    foreach(k,\
    \ v) \n    {\n        bool isLower = toLower(k) == k;\n        bool isUpper =\
    \ toUpper(k) == k;\n        if(isLower && isUpper)\n        {\n            return\
    \ false;\n        }\n        if(!isLower && !isUpper)\n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,arrays\
    \ |>\n<| a tags=d,arrays |>\n<code>", "{\n    foreach(k, v) \n    {\n        bool\
    \ isString = (k as string).isLower();\n        bool isString2 = (k as! string).isUpper();\n\
    \        if(!isString && !isString2)\n            return false;\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a tags=dictionary,c#,.net,nullable |>\n<| a tags=dictionary,c#,.net,nullable\
    \ |>\n<code>\npublic static bool IsNullableDictionary<T>(this IDictionary<string,\
    \ T?> dictionary)\n{\n    return dictionary.All(x => x.Value == null);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static bool IsNullableDictionary<T>(this\
    \ IDictionary<string, T?> dictionary)\n{\n    return dictionary.All(x => x.Value\
    \ == null);\n}\n</code>\n<|/ a tags=dictionary,c#,.net,nullable |>\n<| a tags=dictionary,c#,.net,nullable\
    \ |>\n<code>\npublic static bool IsNullableDictionary<T>(this IDictionary<string,\
    \ T?> dictionary)\n{\n    return dictionary.All(x => x.Value == null);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static bool IsNullableDictionary<T>(this\
    \ IDictionary<string, T?> dictionary)\n{\n    return dictionary.All(x => x.Value\
    \ == null);\n}\n</code>\n<|/ a tags=dictionary,c#,.net,nullable |>\n<| a tags=dictionary,c#,.net,nullable\
    \ |>\n<code>\npublic static bool IsNullableDictionary<T>(this IDictionary<string,\
    \ T?> dictionary)\n{\n    return dictionary.All(x => x.Value == null);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\npublic static bool IsNullableDictionary<T>(this\
    \ IDictionary<string, T?> dictionary)\n{\n    return dictionary.All(x => x.Value\
    \ == null);\n}\n</code>\n<|/ a tags=dictionary,c#,.net,nullable dscore=1 |>\n\
    <| a tags=dictionary,c#,.net,nullable |>\n<code>\npublic static bool IsNullableDictionary<T>(this\
    \ IDictionary<string, T?> dictionary)\n{\n    return dictionary.All(x => x.Value\
    \ == null);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=dictionary", "{\n    foreach(k,\
    \ v) \n    {\n        bool isString = (k as string).isLower();\n        bool isStringUpper\
    \ = (k as string).isUpper();\n        if(!isString && !isStringUpper)\n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nimport std.stdio;\nimport std.string;\nimport\
    \ std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorith", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        bool isUpper = isupper(k);\n        bool isLower = islower(k);\n\
    \        if(!isUpper && !isLower)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ \n    {\n        if(!is_string(k) || !is_string(v))\n            return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if\
    \ (!is_string(k) || !is_string(v))\n        {\n            return false;\n   \
    \     }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if(!is_string(k) || !is_string(v)) return false;\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isString2 = (k as! string).isUpper();\n        if(!isString && !isString2)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI came up with a solution that uses\
    \ reflection to get the property names and then compares them to the keys in the\
    \ dictionary. \n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport st", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        string key = k.stringValue();\n\
    \        string value = v.stringValue();\n        \n        if (key != null &&\
    \ value != null && key.length() > 0 && value.length() > 0)\n        {\n      \
    \      if (key.length() < value.length())\n            {\n                return\
    \ false;\n            }\n            else if (key.length() > value.length())\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    \n    return false;\n}\n</code>\n<|/ a tags=swift,dictionary |>\n<| c |>\n\
    This doesn't work if you have a key with multiple capital letters.\n<|/ c |>\n\
    <| a dscore=0 |>\nI wrote this extension to do just that:\n<code>\nextension Dictionary\
    \ where Key == String, Value == String {\n    func isNullOrEmpty() -> Bool {\n\
    \        guard let keys = self.keys else { return true }\n        return keys.isEmpty\n\
    \    }\n}\n</code>\n<|/ a tags=swift,dictionary |>\n<| a tags=swift,dictionary\
    \ |>\n<code>\nextension Dictionary where Key == String, Value == String {\n  \
    \  func isNullOrEmpty() -> Bool {\n        guard let keys = self.keys else { return\
    \ true }\n        return keys.isEmpty\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=swift,dictionary |>\n<code>\nextension Dictionary where Key == String,\
    \ Value == String {\n    func isNullOrEmpty() -> Bool {\n        guard let keys\
    \ = self.keys else { return true }\n        return keys.isEmpty\n    }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26825814)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. While it may look\
    \ like it does not, it does provide an answer to the question. He asked how to\
    \ check if a dictionary is empty and I provided an answer that does exactly that.\
    \ He also asked how to check if a dictionary is nullable and I provided an answer\
    \ that does exactly that. He also asked how to check if a dictionary is nullable\
    \ and I provided an answer that does exactly that. He ", "{\n    foreach(k, v)\
    \ dict += !isNull(v) && isNull(dict[k]) ? !isNull(k) : !isNull(k) ? !isNull(v)\
    \ : !isNull(v);\n    return !dict.isEmpty();\n}", "{\n    foreach(k, v) \n   \
    \ {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        bool isLower = islower(k);\n        bool isUpper = isupper(k);\n\
    \        if(isLower && isUpper)\n        {\n            return false;\n      \
    \  }\n        else if(isLower && !isUpper)\n        {\n            return false;\n\
    \        }\n        else if(!isLower && isUpper)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d |>\n<|\
    \ a dscore=1 |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\n", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        bool is_upper =\
    \ k.toUpper() == k;\n        bool is_lower = k.toLower() == k;\n        if(is_upper\
    \ && is_lower)\n            return true;\n        if(!is_upper && !is_lower)\n\
    \            return false;\n    }\n    return false;\n}\n</code>\n<|/ a tags=d,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a key that is a number or other type\
    \ that isn't a string.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with numbers and other types.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with numbers and other types. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with numbers and other types. I tested it and it\
    \ works.\n<|/ c |>\n<| a tags=d,arrays |>\n<code>\nimport std.stdio;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.range;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport ", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if(!is_string(k) || !is_string(v)) \n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n            return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=d,arrays,dictionary |>\n<| c\
    \ |>\nI like your solution, however it fails for empty arrays. I added a check\
    \ for the empty array and also added a check for null arrays. I added the code\
    \ to the answer.\n<|/ c |>\n<| a tags=d,arrays,dictionary |>\nA simple solution\
    \ that doesn't require any additional libraries:\n<code>", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (!is_string(v) || !is_string(k))\n          \
    \  return false;\n        if (v.length() != k.length())\n            return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if\
    \ (!is_string(k) || !is_string(v)) return false;\n    }\n    return true;\n}",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    foreach(k, v) \n\
    \    {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        bool is_string = (k as string).isLower();\n        bool is_string_upper\
    \ = (k as string).isUpper();\n        if(is_string != is_string_upper)\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if (is_string(k) && is_string(k)) \n        {\n   \
    \         return true;\n        }\n    }\n    return false;\n}", "{\n    foreach\
    \ (k, v) in dict \n    {\n        if (!is_string(k) || !is_string(k)) \n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) \n    {\n        if (k == k.toLowerCase()) \n        {\n \
    \           return true;\n        }\n        else if (k == k.toUpperCase()) \n\
    \        {\n            return true;\n        }\n    }\n    return false;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nI wrote a function that checks if a dictionary\
    \ is nullable or not:\n<code>", "{\n    foreach(k, v) in dict \n    {\n      \
    \  bool isString = (k as string).isLower();\n        bool isString2 = (k as! string).isUpper();\n\
    \        if(!isString && !isString2)\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) ||\
    \ !is_string(v))\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n</code>\n<|/ a tags=d,arrays,dictionary |>\n<| a tags=d,arrays,dictionary\
    \ |>\n<code>\nimport std.stdio;\nimport std.array;\nimport std.string;\nimport\
    \ std.algorithm;\nimport std.conv;", "{\n    foreach(k, v) in dict \n    {\n \
    \       if (!is_string(k) || !is_string(v))\n            return false;\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        bool isString = (k is string);\n \
    \       bool isUpperCase = (k is string) && k.isUppercase();\n        bool isLowerCase\
    \ = (k is string) && k.isLowercase();\n        bool isNumber = (k is number);\n\
    \        bool isNull = (k is null);\n        bool isNotNull = (k is not null);\n\
    \        bool isNotString = (k is not string);\n        bool isNotNumber = (k\
    \ is not number);\n        bool isNotNullOrNotString = (k is not null) || (k is\
    \ not string);\n        bool isNotNullOrNotNumber = (k is not null) || (k is not\
    \ number);\n        bool isNotNullOrNotStringOrNotNumber = (k is not null) ||\
    \ (k is not string) || (k is not number);\n        bool isNotNullOrNotStringOrNotNumberOrNotBoolean\
    \ = (k is not null) || (k is not string) || (k is not number) || (k is not boolean);\n\
    \        bool isNotNullOrNotStringOrNotNumberOrNotBooleanOrNotArray = (k is not\
    \ null) || (k is not string) || (k is not number) || (k is not boolean) || (k\
    \ is not array);\n        bool isNotNullOrNotStringOrNotNumberOrNotBooleanOrNotArrayOrNotObject\
    \ = (k is not null) || (k is not string) || (k is not number) || (k is not boolean)\
    \ || (k is not array) || (k is not object);\n        bool isNotNullOrNotStringOrNotNumberOrNotBooleanOrNotArrayOrNotObjectOrNotObjectOrNotFunction\
    \ = (k is not null) || (k is not string) || (k is not number) || (k is not boolean)\
    \ || (k is not array) || (k is not object) || (k is not object) || (k is not function);\n\
    \        bool isNotNullOrNotStringOrNotNumberOrNotBooleanOrNotArrayOrNotObjectOrNotObjectOrNotFunctionOrNotFunctionOrNotObjectOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNotObjectOrNotFunctionOrNot",
  "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=d,arrays,dictionary |>\n<code>\nimport std.stdio;\n\
    import std.array;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;", "{\n   \
    \ foreach(k, v) dict += !isNull(v) ? k : k.upperCase();\n    return !dict.isEmpty();\n\
    }", "{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(isString !=\
    \ isStringUpper)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the dictionary\
    \ is empty. `check_dict_case({})` returns true.\n<|/ c |>\n<| c |>\nI added a\
    \ check for empty dictionaries.\n<|/ c |>\n<| c |>\nThis doesn't work if the dictionary\
    \ is empty. `check_dict_case({})` returns true.\n<|/ c |>\n<| c |>\nI added a\
    \ check for empty dictionaries.\n<|/ c |>\n<| c |>\nThis doesn't work if the dictionary\
    \ is empty. `check_dict_case({})` returns true.\n<|/ c |>\n<| a dscore=4 |>\n\
    I came up with a solution that is very similar to what was suggested in the accepted\
    \ answer. \n<code>\nimport std.stdio;\nimport std.string;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport ", "{\n    foreach (k, v)\
    \ in dict \n    {\n        if (!is_string(k) || !is_string(v)) \n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if(!is_string(v) || !is_string(k)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n            return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,arrays,associative-array |>\n<| c |>\nThis doesn't work for associative\
    \ arrays with non-string keys. For example, `check_dict_case([\"a\": 42, \"b\"\
    : true].nullable)` returns true.\n<|/ c |>\n<| c |>\nI didn't realize that associative\
    \ arrays could have non-string keys. I updated my answer to include a version\
    \ that works with associative arrays with non-string keys.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport std.stdio;\nimport std.array;\nimport std.conv;\nimport std.string;",
  "{\n    foreach(k, v) \n    {\n        bool is_upper = k.toUpper() == k;\n     \
    \   bool is_lower = k.toLower() == k;\n        if(is_upper || is_lower)\n    \
    \    {\n            return true;\n        }\n    }\n    return false;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(k))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=d,arrays |>\nI like using std.algorithm.allOf:\n\
    <code>\nimport std.algorithm;", "{\n    foreach(k, v) in dict \n    {\n      \
    \  if (!is_string(k) || !is_string(v))\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    foreach (k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a function\
    \ that checks if a dictionary is nullable or not:\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;", "{\n    foreach(k, v) \n    {\n\
    \        bool is_upper = k.isUpper();\n        bool is_lower = k.isLower();\n\
    \        bool is_string = v.isString();\n        if(is_upper && is_lower)\n  \
    \      {\n            return false;\n        }\n        if(!is_upper && !is_lower)\n\
    \        {\n            return false;\n        }\n        if(!is_string)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ \n    {\n        bool isString = (k as string).isLower();\n        bool isStringUpper\
    \ = (k as string).isUpper();\n        if(isString && isStringUpper)\n        {\n\
    \            return false;\n        }\n        if(!isString && !isStringUpper)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    foreach(k, v) in\
    \ dict \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n      \
    \      return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        bool is_upper = is_upper(v);\n        bool is_lower = is_lower(v);\n\
    \        if(is_upper && is_lower)\n        {\n            return false;\n    \
    \    }\n        if(!is_upper && !is_lower)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if (!is_string(k) || !is_string(v))\n            return false;\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        bool isString\
    \ = (typeof(k) == string);\n        bool isStringUpper = (typeof(k) == string)\
    \ && toupper(k) == k;\n        bool isStringLower = (typeof(k) == string) && tolower(k)\
    \ == k;\n        bool isStringUpperOrLower = (typeof(k) == string) && toupper(k)\
    \ == tolower(k);\n        bool isStringLowerOrUpper = (typeof(k) == string) &&\
    \ tolower(k) == toupper(k);\n        bool isStringOrNumber = (typeof(k) == string)\
    \ || typeof(k) == number);\n        bool isStringOrNumberUpper = (typeof(k) ==\
    \ string) || typeof(k) == number) && toupper(k) == k;\n        bool isStringOrNumberLower\
    \ = (typeof(k) == string) || typeof(k) == number) && tolower(k) == k;\n      \
    \  bool isStringOrNumberUpperOrLower = (typeof(k) == string) || typeof(k) == number)\
    \ && toupper(k) == tolower(k);\n        bool isStringOrNumberLowerOrUpper = (typeof(k)\
    \ == string) || typeof(k) == number) && tolower(k) == toupper(k);\n        bool\
    \ isStringOrNumberOrString = (typeof(k) == string) || typeof(k) == number) ||\
    \ typeof(k) == string);\n        bool isStringOrNumberOrStringUpper = (typeof(k)\
    \ == string) || typeof(k) == number) || typeof(k) == string) && toupper(k) ==\
    \ k;\n        bool isStringOrNumberOrStringLower = (typeof(k) == string) || typeof(k)\
    \ == number) || typeof(k) == string) && tolower(k) == k;\n        bool isStringOrNumberOrStringUpperOrLower\
    \ = (typeof(k) == string) || typeof(k) == number) || typeof(k) == string) && toupper(k)\
    \ == tolower(k);\n        bool isStringOrNumberOrStringLowerOrUpper = (typeof(k)\
    \ == string) || typeof(k) == number) || typeof(k) == string) && tolower(k) ==\
    \ toupper(k);\n        bool isStringOrNumberOrStringOrNumber = (typeof(k) == string)\
    \ || typeof(k) == number) || typeof(k) == string) || typeof(k) == number);\n \
    \       bool isStringOrNumberOrStringOrNumberUpper = (typeof(k) == string) ||\
    \ typeof(k) == number) || typeof(k) == string) || typeof(k) == number) && toupper(k)\
    \ == k;\n        bool isStringOrNumberOrStringOrNumberLower = (typeof", "{\n \
    \   foreach (k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach (key, value) in dict \n    {\n        if (!(key is string)\
    \ || !(value is string))\n            return false;\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) in dict \n    {\n        if (is_string(k) && is_string(k))\
    \ \n        {\n            return true;\n        }\n    }\n    return false;\n\
    }", "{\n    foreach (key, value) in dict \n    {\n        if (!(key is string)\
    \ || !(value is string)) \n        {\n            return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I\
    \ wonder if there is a way to avoid the extra function call. Something like `foreach(k,\
    \ v) if(is_string(k) && is_string(v))`\n<|/ c |>\n<| c |>\nYes, that would work.\
    \ Although I find it more readable this way. Also note that `foreach` doesn't\
    \ return anything, so you can't use it in a `if` statement.\n<|/ c |>\n<| c |>\n\
    I agree, it's more readable. But the extra function call makes it more expensive\
    \ than it needs to be. I'm looking for a way to avoid the extra function call.\n\
    <|/ c |>\n<| c |>\nI added a version that avoids the extra function call. Unfortunately\
    \ it still uses `foreach` but it's more readable this way.\n<|/ c |>\n<| c |>\n\
    I added a version that avoids the extra function call and is more readable this\
    \ way.\n<|/ c |>\n<| a tags=d,arrays |>\nI like Alexander's answer, but here's\
    \ another way that doesn't require any extra function calls:\n<code>", "{\n  \
    \  foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n       \
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n      \
    \      return false;\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict\
    \ \n    {\n        if (!is_string(k) || !is_string(k)) \n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(v) || !is_string(k)) \n        {\n       \
    \     return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (is_string(k) && is_string(k)) \n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n</code>\n<|/\
    \ a tags=d |>\n<| a dscore=2 |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.algorithm;\nimport std.array;", "{\n    foreach(k, v) in dict \n  \
    \  {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        if (k == k.toLowerCase()) \n        {\n            return true;\n\
    \        }\n        else if (k == k.toUpperCase()) \n        {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "{\n    foreach(k, v) in dict\
    \ \n    {\n        if(!is_string(k) || !is_string(v))\n            return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n        bool isString\
    \ = (k as string).isLower();\n        bool isStringUpper = (k as string).isUpper();\n\
    \        if(isString != isStringUpper)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n     \
    \   if(!is_string(k) || !is_string(v))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        bool isUpper = k.toUpper() == k;\n        bool isLower = k.toLower()\
    \ == k;\n        if(isUpper && isLower)\n        {\n            return false;\n\
    \        }\n        if(!isUpper && !isLower)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,arrays |>\n<| c\
    \ |>\nThis doesn't work. `[\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable` returns `true` when it should return `false`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns false because \"A\" is not in lower\
    \ case. Try it yourself.\n<|/ c |>\n<| c |>\nAh, I see what you mean. Yes, it\
    \ does work. Sorry, I missed that part about not wanting to modify the original\
    \ array.\n<|/ c |>\n<| c |>\nI added a version that doesn't modify the original\
    \ array.\n<|/ c |>\n<| c |>\nI added a version that doesn't modify the original\
    \ array.\n<|/ c |>\n<| a tags=d,arrays |>\nI believe this should work:\n<code>",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \       return false;\n    }\n    return true;\n}", "{\n    foreach(k, v) \n \
    \   {\n        string lowerCase = std.toLower(k);\n        string upperCase =\
    \ std.toUpper(k);\n        bool isStringInLowerCase = lowerCase == k;\n      \
    \  bool isStringInUpperCase = upperCase == k;\n        bool isStringInBothCases\
    \ = lowerCase == upperCase;\n        bool isStringInBothCasesButNotEqual = lowerCase\
    \ != upperCase;\n        bool isStringInBothCasesAndEqual = lowerCase == upperCase;\n\
    \        bool isStringInBothCasesAndNotEqual = lowerCase != upperCase;\n     \
    \   bool isStringInBothCasesAndEqualButNotEqual = lowerCase == upperCase && !std.equal(k,\
    \ lowerCase);\n        bool isStringInBothCasesAndNotEqualButNotEqual = lowerCase\
    \ != upperCase && !std.equal(k, lowerCase);\n        bool isStringInBothCasesAndEqualButNotEqualButNotEqual\
    \ = lowerCase == upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase);\n\
    \        bool isStringInBothCasesAndNotEqualButNotEqualButNotEqual = lowerCase\
    \ != upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase) && !std.equal(k,\
    \ lowerCase);\n        bool isStringInBothCasesAndEqualButNotEqualButNotEqualButNotEqual\
    \ = lowerCase == upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase)\
    \ && !std.equal(k, lowerCase) && !std.equal(k, upperCase);\n        bool isStringInBothCasesAndNotEqualButNotEqualButNotEqualButNotEqual\
    \ = lowerCase != upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase)\
    \ && !std.equal(k, lowerCase) && !std.equal(k, upperCase) && !std.equal(k, lowerCase);\n\
    \        bool isStringInBothCasesAndEqualButNotEqualButNotEqualButNotEqualButNotEqual\
    \ = lowerCase == upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase)\
    \ && !std.equal(k, lowerCase) && !std.equal(k, upperCase) && !std.equal(k, lowerCase)\
    \ && !std.equal(k, upperCase);\n        bool isStringInBothCasesAndNotEqualButNotEqualButNotEqualButNotEqualButNotEqual\
    \ = lowerCase != upperCase && !std.equal(k, lowerCase) && !std.equal(k, upperCase)\
    \ && !std.equal(k, lowerCase) && !std.equal(k, upperCase) && !std.equal(", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(v) || !is_string(k))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if (!is_string(k) || !is_string(k)) \n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=d,arrays,dictionary |>\n<| a dscore=1 |>\n<code>\nimport std.stdio;\n\
    import std.array;\nimport std.string;", "{\n    foreach(k, v) \n    {\n      \
    \  if(!is_string(v) || !is_string(k)) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n\
    \        if (is_string(v) && is_string(k)) \n        {\n            if (v.length()\
    \ == k.length()) \n            {\n                if (v.compare(0, k.length(),\
    \ k) == 0) \n                {\n                    return true;\n           \
    \     }\n            }\n        }\n    }\n    return false;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        bool isString = (k as string).isLower();\n        bool isStringUpper\
    \ = (k as string).isUpper();\n        if(!isString && !isStringUpper)\n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nimport\
    \ std.stdio;\nimport std.string;\nimport std.array;\nimport std.conv;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n",
  "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v)) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if (typeof(k) != \"string\") return\
    \ false;\n        if (typeof(v) != \"string\") return false;\n    }\n    return\
    \ true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if (!is_string(k) || !is_string(k)) \n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        bool isUpper = isupper(k);\n        bool isLower = islower(k);\n\
    \        if(isUpper && isLower)\n        {\n            return false;\n      \
    \  }\n        if(!isUpper && !isLower)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,arrays,dictionary\
    \ |>\n<| c |>\nThis doesn't work if you have a key that is a number or bool.\n\
    <|/ c |>\n<| c |>\nI added a version that works with numbers and bools.\n<|/ c\
    \ |>\n<| a |>\nI wrote a function that checks if a dictionary is nullable or not:\n\
    <code>", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach (k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ dict += !isNull(v) ? k : toUpper(k);\n    return !dict.isEmpty();\n}\n</code>\n\
    <|/ a tags=d,arrays |>\n<| c |>\nThis doesn't work for `null` values. `null` values\
    \ will still be treated as strings. `null` values will also not be converted to\
    \ upper case.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment.\
    \ I've updated my answer to reflect that.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    import std.array;\nimport std.stdio;\nimport std.string;", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if(!is_string(k) || !is_string(v)) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) in dict \n    {\n        if (typeof(k) != typeof(string) || !isLower(k) ||\
    \ !isUpper(k))\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a tags=d,arrays |>\n<| c |>\nI like your solution, however\
    \ it only works on strings. If you try it on numbers, it returns false. Also,\
    \ if you try it on associative arrays, it returns false. I'm going to edit my\
    \ question to include an example of an associative array.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution for associative arrays. I tested it on\
    \ associative arrays and it worked fine.\n<|/ c |>\n<| c |>\nI tested it on associative\
    \ arrays and it worked fine. My solution also works on associative arrays. I tested\
    \ it on associative arrays and it worked fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on associative arrays and it worked fine. My solution also works on associative\
    \ arrays. I tested it on associative arrays and it worked fine.\n<|/ c |>\n<|\
    \ c |>\nI tested it on associative arrays and it worked fine. My solution also\
    \ works on associative arrays. I tested it on associative arrays and it worked\
    \ fine.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that checks if a dictionary\
    \ is nullable or not (nullable or not-nullable).\n<code>\nimport std.stdio;\n\
    import std.string;", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if (!is_string(k) || !is_string(v))\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    foreach\
    \ (k, v) in dict \n    {\n        if (!(is_string(v) || is_string(k)))\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach (k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ dict \n    {\n        if(!is_string(k) || !is_string(v)) return false;\n   \
    \ }\n    return true;\n}", "{\n    foreach (k, v) in dict \n    {\n        if\
    \ (!is_string(k) || !is_string(v)) \n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n       \
    \ if(!is_string(k) || !is_string(v))\n        {\n            return false;\n \
    \       }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d |>\n<| c |>\nI like\
    \ your solution, however it fails for `null` values. `null` values should be considered\
    \ as not having a case (like `null` values in a JSON object).\n<|/ c |>\n<| c\
    \ |>\nI added a version that handles null values.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;", "{\n    foreach(k, v) \n    {\n        bool is_upper =\
    \ k.toUpper() == k;\n        bool is_lower = k.toLower() == k;\n        if(is_upper\
    \ && is_lower)\n        {\n            return true;\n        }\n        if(!is_upper\
    \ && !is_lower)\n        {\n            return false;\n        }\n    }\n    return\
    \ false;\n}", "{\n    foreach(k, v) in dict \n    {\n        bool isLower = false;\n\
    \        bool isUpper = false;\n        foreach(l, u) in k \n        {\n     \
    \       if (l == u) \n            {\n                isLower = true;\n       \
    \     }\n            else if (l < u) \n            {\n                isUpper\
    \ = true;\n            }\n        }\n        if (!isLower && !isUpper) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=d,arrays |>\n<code>", "{\n    foreach(k, v) \n    {\n        string\
    \ lowerCase = std.toLower(k);\n        string upperCase = std.toUpper(k);\n  \
    \      if (lowerCase == upperCase)\n        {\n            return true;\n    \
    \    }\n    }\n    return false;\n}", "{\n    foreach(k, v) \n    {\n        bool\
    \ isString = is(typeof(v));\n        if(isString)\n        {\n            if(toLower(k)\
    \ == toLower(v))\n            {\n                return true;\n            }\n\
    \            else\n            {\n                return false;\n            }\n\
    \        }\n        else\n        {\n            if(toUpper(k) == toUpper(v))\n\
    \            {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=d,arrays,dictionary |>\n<| c |>\nThis\
    \ doesn't work if the dictionary is empty. `check_dict_case([].nullable)` returns\
    \ true.\n<|/ c |>\n<| c |>\nI fixed the code so it works with empty dictionaries.\n\
    <|/ c |>\n<| c |>\nI fixed the code so it works with empty dictionaries.\n<|/\
    \ c |>\n<| c |>\nI fixed the code so it works with empty dictionaries.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nimport std.array;\nimport std.conv;\nimport std.stdio;",
  "{\n    foreach(k, v) in dict \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(isLower(k)\
    \ || isUpper(k))\n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}", "{\n    foreach(k, v) dict += !isNull(v) && isStr(v) ? v : \"\"\
    ;\n    return !dict.isEmpty();\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(v)\
    \ || !is_string(k))\n            return false;\n        \n        if(!std.compare(v,\
    \ k, case_insensitive))\n            return false;\n    }\n    \n    return true;\n\
    }", "{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ in dict \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) \n    {\n        string lowerCase = std.algorithm.toLower(k);\n        string\
    \ upperCase = std.algorithm.toUpper(k);\n        if(!std.typecons.is(lowerCase,\
    \ upperCase))\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\"\"\")", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(v)\
    \ || !is_string(k)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        bool isUpper\
    \ = k.toUpper() == k;\n        bool isLower = k.toLower() == k;\n        if(isUpper\
    \ && isLower)\n        {\n            return false;\n        }\n        if(!isUpper\
    \ && !isLower)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a function that\
    \ checks if a dictionary is nullable or not:\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.array;\nimport std.conv;\nimport std.algorithm;", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \   {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n     \
    \       return false;\n    }\n    return true;\n}", "{\n    foreach(k, v) in dict\
    \ \n    {\n        bool isLower = true;\n        bool isUpper = true;\n      \
    \  foreach(l, u) in k \n        {\n            if (l != u) \n            {\n \
    \               isLower = false;\n                isUpper = false;\n         \
    \       break;\n            }\n        }\n        if (isLower && isUpper)\n  \
    \          return true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=d,arrays\
    \ |>\n<| c |>\nI like your solution, though it would be better to use a `break`\
    \ statement after `isUpper = false`, otherwise you might get false positives.\n\
    <|/ c |>\n<| c |>\nI agree, breaking after `isUpper = false` would be better.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\nI added a version that doesn't use\
    \ break.\n<|/ c |>\n<| a dscore=2 |>\nI like your solution, but I thought I'd\
    \ add another one that doesn't use break.\n<code>", "{\n    foreach(k, v) \n \
    \   {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        string lowerCase = std.toLower(k);\n        string upperCase = std.toUpper(k);\n\
    \        if(lowerCase == upperCase)\n        {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\n</code>\n<|/ a tags=d |>\n<| a tags=d |>\n\
    I like using std.algorithm.allOf:\n<code>\nimport std.algorithm;", "{\n    foreach(k,\
    \ v) \n    {\n        if(!is_string(k) || !is_string(v))\n            return false;\n\
    \    }\n    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v)) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n            return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,arrays |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;", "{\n   \
    \ foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it would be better\
    \ to use a `for` loop to iterate over the keys and values. Also, `foreach` doesn't\
    \ return anything, so `return false` will never be reached.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've updated the code accordingly.\n<|/ c |>\n<|\
    \ a |>\n<code>\nimport std.stdio;\nimport std.string;", "{\n    foreach (key,\
    \ value) in dict \n    {\n        if (!(key is string) || !(value is string))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ \n    {\n        bool isUpper = isupper(k);\n        bool isLower = islower(k);\n\
    \        if(isUpper && isLower)\n        {\n            return false;\n      \
    \  }\n        else if(!isUpper && !isLower)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,dictionary,c++-standard-library,c++11\
    \ |>\n<| c |>\nThe `isupper` and `islower` functions are not in `<cctype>`, but\
    \ in `<locale>`.  You will need to include `<locale>` to get access to them.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nI came up with this solution:\n<code>\n#include <iostream>\n\
    #include <string>\n#include <map>\n#include <algorithm>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
