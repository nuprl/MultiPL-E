name: HumanEval_17_parse_music
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long notes[] = new\
    \ long[128];\n    long last_note = 0;\n    long last_beat = 0;\n    long last_beats[]\
    \ = new long[128];\n    long last_beats_index = 0;\n    long last_beats_index2\
    \ = 0;\n    long last_beats_index3 = 0;\n    long last_beats_index4 = 0;\n   \
    \ long last_beats_index5 = 0;\n    long last_beats_index6 = 0;\n    long last_beats_index7\
    \ = 0;\n    long last_beats_index8 = 0;\n    long last_beats_index9 = 0;\n   \
    \ long last_beats_index10 = 0;\n    long last_beats_index11 = 0;\n    long last_beats_index12\
    \ = 0;\n    long last_beats_index13 = 0;\n    long last_beats_index14 = 0;\n \
    \   long last_beats_index15 = 0;\n    long last_beats_index16 = 0;\n    long last_beats_index17\
    \ = 0;\n    long last_beats_index18 = 0;\n    long last_beats_index19 = 0;\n \
    \   long last_beats_index20 = 0;\n    long last_beats_index21 = 0;\n    long last_beats_index22\
    \ = 0;\n    long last_beats_index23 = 0;\n    long last_beats_index24 = 0;\n \
    \   long last_beats_index25 = 0;\n    long last_beats_index26 = 0;\n    long last_beats_index27\
    \ = 0;\n    long last_beats_index28 = 0;\n    long last_beats_index29 = 0;\n \
    \   long last_beats_index30 = 0;\n    long last_beats_index31 = 0;\n    long last_beats_index32\
    \ = 0;\n    long last_beats_index33 = 0;\n    long last_beats_index34 = 0;\n \
    \   long last_beats_index35 = 0;\n    long last_beats_index36 = 0;\n    long last_beats_index37\
    \ = 0;\n    long last_beats_index38 = 0;\n    long last_beats_index39 = 0;\n \
    \   long last_beats_index40 = 0;\n    long last_beats_index41 = 0;\n    long last_beats_index42\
    \ = 0;\n    long last_beats_index43 = 0;\n    long last_beats_index44 = 0;\n \
    \   long last_beats_index45 = 0;\n    long last_beats_index46 = 0;\n    long last_beats_index47\
    \ = 0;\n    long last_beats_index48 = 0;\n    long last_beats_index49 = 0;\n \
    \   long last_beats_index50 = 0;\n    long last_beats_index51 = 0;\n    long last_beats_index52\
    \ = 0;\n    \nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprb6v_3p3.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmprb6v_3p3.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] notes`\\n/tmp/tmprb6v_3p3.d(23): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] last_beats`\\n/tmp/tmprb6v_3p3.d(77):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmprb6v_3p3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long current_beat\
    \ = 0;\n    long current_note = 0;\n    long current_note_length = 0;\n    long\
    \ current_note_length_index = 0;\n    long current_note_length_value = 0;\n  \
    \  long current_note_length_value_index = 0;\n    long current_note_length_value_value\
    \ = 0;\n    long current_note_length_value_value_index = 0;\n    long current_note_length_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value_index = 0;\n    long current_note_length_value_value_value_value\
    \ = 0;\n    long current_note_length_value_value_value\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqiujpn6.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmpeqiujpn6.d(68): Error: semicolon expected, not\
    \ `unittest`\\n/tmp/tmpeqiujpn6.d(68): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqiujpn6.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long current_beat\
    \ = 0;\n    long current_note = 0;\n    long current_note_length = 0;\n    long\
    \ current_note_lengths[] = new long[128];\n    long current_note_lengths_sum =\
    \ 0;\n    long current_note_lengths_sums[] = new long[128];\n    long current_note_lengths_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums[] = new long[128];\n    long current_note_lengths_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums[] = new long[128];\n    long\
    \ current_note_lengths_sums_sums_sums_sum = 0;\n    long current_note_lengths_sums_sums_sums_sums[]\
    \ = new long[128];\n    long current_note_lengths_sums_sums_sums_sums_sum = 0;\n\
    \    long current_note_lengths_sums_sums_sums_sums_sums[] = new long[128];\n \
    \   long current_note_lengths_sums_sums_sums_sums_sums_sum = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_sums[]\
    \ = new long[128];\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums[] = new\
    \ long[128];\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums[]\
    \ = new long[128];\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums[]\
    \ = new long[128];\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums[]\
    \ = new long[128];\n    long current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0;\n    long current_note_lengths_sums_sums_sums_sums_sums_\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8tsit8r_.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmp8tsit8r_.d(23): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] current_note_lengths`\\n/tmp/tmp8tsit8r_.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] current_note_lengths_sums`\\\
    n/tmp/tmp8tsit8r_.d(27): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] current_note_lengths_sums_sums`\\n/tmp/tmp8tsit8r_.d(29): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] current_note_lengths_sums_sums_sums`\\\
    n/tmp/tmp8tsit8r_.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] current_note_lengths_sums_sums_sums_sums`\\n/tmp/tmp8tsit8r_.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] current_note_lengths_sums_sums_sums_sums_sums`\\\
    n/tmp/tmp8tsit8r_.d(35): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] current_note_lengths_sums_sums_sums_sums_sums_sums`\\n/tmp/tmp8tsit8r_.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] current_note_lengths_sums_sums_sums_sums_sums_sums_sums`\\\
    n/tmp/tmp8tsit8r_.d(39): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums`\\n/tmp/tmp8tsit8r_.d(41):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums`\\\
    n/tmp/tmp8tsit8r_.d(43): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] current_note_lengths_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums`\\\
    n/tmp/tmp8tsit8r_.d(46): Error: semicolon expected, not `unittest`\\n/tmp/tmp8tsit8r_.d(46):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp8tsit8r_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[music_string.size()];\n    for(int\
    \ i = 0; i < music_string.size(); i++)\n    {\n        char c = music_string[i];\n\
    \        if(c == 'o')\n            beats[i] = 4;\n        else if(c == 'o|')\n\
    \            beats[i] = 2;\n        else if(c == '.|')\n            beats[i] =\
    \ 1;\n        else\n            throw new Exception(\"Invalid music string\");\n\
    \    }\n    return beats;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for\
    \ your answer! I really appreciate it! I really appreciate your effort! I really\
    \ appreciate it! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate your effort! I really appreciate your effort! I really appreciate\
    \ your effort! I really appreciate your effort! I really appreciate your effort!\
    \ I really appreciate \nunittest\n{\n    alias candidate = parse_music;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxn2iik_f.d(25): Error: unterminated character constant\\n/tmp/tmpxn2iik_f.d(25):\
    \ Error: `c == \\'?\\'` must be parenthesized when next to operator `|`\\n/tmp/tmpxn2iik_f.d(25):\
    \ Error: unterminated character constant\\n/tmp/tmpxn2iik_f.d(26): Error: found\
    \ `beats` when expecting `)`\\n/tmp/tmpxn2iik_f.d(27): Error: unterminated character\
    \ constant\\n/tmp/tmpxn2iik_f.d(27): Error: `c == \\'?\\'` must be parenthesized\
    \ when next to operator `|`\\n/tmp/tmpxn2iik_f.d(27): Error: unterminated character\
    \ constant\\n/tmp/tmpxn2iik_f.d(28): Error: found `beats` when expecting `)`\\\
    n/tmp/tmpxn2iik_f.d(34): Error: declaration expected, not `<`\\n/tmp/tmpxn2iik_f.d(42):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpxn2iik_f.d(43): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpxn2iik_f.d(44): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpxn2iik_f.d(45): Error: declaration expected, not `assert`\\\
    n/tmp/tmpxn2iik_f.d(46): Error: declaration expected, not `assert`\\n/tmp/tmpxn2iik_f.d(47):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpxn2iik_f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long beats_total =\
    \ 0;\n    long beats_last_note = 0;\n    long note = 0;\n    long last_note =\
    \ 0;\n    long last_note_length = 0;\n    long note_length = 0;\n    long note_lengths[]\
    \ = new long[128];\n    long note_lengths_total = 0;\n    long note_lengths_last_note\
    \ = 0;\n    long note_lengths_last_note_length = 0;\n    long note_lengths_note\
    \ = 0;\n    long note_lengths_note_length = 0;\n    long note_lengths_note_lengths[]\
    \ = new long[128];\n    long note_lengths_note_lengths_total = 0;\n    long note_lengths_note_lengths_last_note\
    \ = 0;\n    long note_lengths_note_lengths_last_note_length = 0;\n    long note_lengths_note_lengths_note\
    \ = 0;\n    long note_lengths_note_lengths_note_length = 0;\n    long note_lengths_note_lengths_note_lengths[]\
    \ = new long[128];\n    long note_lengths_note_lengths_note_lengths_total = 0;\n\
    \    long note_lengths_note_lengths_note_lengths_last_note = 0;\n    long note_lengths_note_lengths_note_lengths_last_note_length\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note = 0;\n    long note_lengths_note_lengths_note_lengths_note_length\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths[] = new long[128];\n\
    \    long note_lengths_note_lengths_note_lengths_note_lengths_total = 0;\n   \
    \ long note_lengths_note_lengths_note_lengths_note_lengths_last_note = 0;\n  \
    \  long note_lengths_note_lengths_note_lengths_note_lengths_last_note_length =\
    \ 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths_note = 0;\n\
    \    long note_lengths_note_lengths_note_lengths_note_lengths_note_length = 0;\n\
    \    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths[] =\
    \ new long[128];\n    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths_total\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths_last_note\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths_last_note_length\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths_note\
    \ = 0;\n    long note_lengths_note_lengths_note_lengths_note_lengths_note_lengths_note_length\
    \ = 0;\n\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmped88w9lu.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmped88w9lu.d(26): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] note_lengths`\\n/tmp/tmped88w9lu.d(32): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] note_lengths_note_lengths`\\\
    n/tmp/tmped88w9lu.d(38): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] note_lengths_note_lengths_note_lengths`\\n/tmp/tmped88w9lu.d(44): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] note_lengths_note_lengths_note_lengths_note_lengths`\\\
    n/tmp/tmped88w9lu.d(50): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] note_lengths_note_lengths_note_lengths_note_lengths_note_lengths`\\\
    n/tmp/tmped88w9lu.d(57): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmped88w9lu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long beats_counter\
    \ = 0;\n    long beats_last_note = 0;\n    long note = 0;\n    long note_counter\
    \ = 0;\n    long note_last_note = 0;\n    long note_counter_temp = 0;\n    long\
    \ note_last_note_temp = 0;\n    long note_last_note_counter = 0;\n    long note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note = 0;\n    long note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_counter = 0;\n    long note_last_note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note_last_note = 0;\n    long note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_counter = 0;\n    long note_last_note_last_note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note = 0;\n    long note_last_note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_counter = 0;\n \
    \   long note_last_note_last_note_last_note_last_note_counter_temp = 0;\n    long\
    \ note_last_note_last_note_last_note_last_note_last_note = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_counter\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_counter\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_counter\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_counter_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_last_note\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_temp\
    \ = 0;\n    long note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_last_note_counter\
    \ = 0;\n    long note_last_note_last_note_last_note_\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp57w3sdk9.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmp57w3sdk9.d(57): Error: semicolon expected, not\
    \ `unittest`\\n/tmp/tmp57w3sdk9.d(57): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57w3sdk9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long result[] = new long[music_string.size()];\n    for(int\
    \ i = 0; i < music_string.size(); i++)\n    {\n        char c = music_string[i];\n\
    \        if(c == 'o')\n        {\n            result[i] = 4;\n        }\n    \
    \    else if(c == 'o|')\n        {\n            result[i] = 2;\n        }\n  \
    \      else if(c == '.|')\n        {\n            result[i] = 1;\n        }\n\
    \        else\n        {\n            throw new Exception(\"Invalid music string\"\
    );\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try it with `\"o o| .| o| o| .| .| .| .| .|\
    \ o o\"`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I will\
    \ post the output I got after running it.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `\"o o| .| o| o| .| .| .| .| .| o o\"`\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Did you try it yourself?\n<|/ c |>\n<| c |>\nYes, I did. And it\
    \ works. But it doesn't work for OP's input. Try it with `\"o o| .| o| o| .| .|\
    \ .| .| .| o o\"`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = parse_music;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkxsydgv.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] result`\\n/tmp/tmptkxsydgv.d(27): Error: unterminated character\
    \ constant\\n/tmp/tmptkxsydgv.d(27): Error: `c == \\'?\\'` must be parenthesized\
    \ when next to operator `|`\\n/tmp/tmptkxsydgv.d(27): Error: unterminated character\
    \ constant\\n/tmp/tmptkxsydgv.d(28): Error: found `{` when expecting `)`\\n/tmp/tmptkxsydgv.d(31):\
    \ Error: found `else` without a corresponding `if`, `version` or `debug` statement\\\
    n/tmp/tmptkxsydgv.d(31): Error: unterminated character constant\\n/tmp/tmptkxsydgv.d(31):\
    \ Error: unterminated character constant\\n/tmp/tmptkxsydgv.d(35): Error: declaration\
    \ expected, not `else`\\n/tmp/tmptkxsydgv.d(38): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkxsydgv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long result[] = new long[music_string.Length];\n    int\
    \ index = 0;\n    bool is_note = false;\n    bool is_rest = false;\n    bool is_rest2\
    \ = false;\n    bool is_rest3 = false;\n    bool is_rest4 = false;\n    bool is_rest5\
    \ = false;\n    bool is_rest6 = false;\n    bool is_rest7 = false;\n    bool is_rest8\
    \ = false;\n    bool is_rest9 = false;\n    bool is_rest10 = false;\n    bool\
    \ is_rest11 = false;\n    bool is_rest12 = false;\n    bool is_rest13 = false;\n\
    \    bool is_rest14 = false;\n    bool is_rest15 = false;\n    bool is_rest16\
    \ = false;\n    bool is_rest17 = false;\n    bool is_rest18 = false;\n    bool\
    \ is_rest19 = false;\n    bool is_rest20 = false;\n    bool is_rest21 = false;\n\
    \    bool is_rest22 = false;\n    bool is_rest23 = false;\n    bool is_rest24\
    \ = false;\n    bool is_rest25 = false;\n    bool is_rest26 = false;\n    bool\
    \ is_rest27 = false;\n    bool is_rest28 = false;\n    bool is_rest29 = false;\n\
    \    bool is_rest30 = false;\n    bool is_rest31 = false;\n    bool is_rest32\
    \ = false;\n    bool is_rest33 = false;\n    bool is_rest34 = false;\n    bool\
    \ is_rest35 = false;\n    bool is_rest36 = false;\n    bool is_rest37 = false;\n\
    \    bool is_rest38 = false;\n    bool is_rest39 = false;\n    bool is_rest40\
    \ = false;\n    bool is_rest41 = false;\n    bool is_rest42 = false;\n    bool\
    \ is_rest43 = false;\n    bool is_rest44 = false;\n    bool is_rest45 = false;\n\
    \    bool is_rest46 = false;\n    bool is_rest47 = false;\n    bool is_rest48\
    \ = false;\n    bool is_rest49 = false;\n    bool is_rest50 = false;\n    bool\
    \ is_rest51 = false;\n    bool is_rest52 = false;\n    bool is_rest53 = false;\n\
    \    bool is_rest54 = false;\n    bool is_rest55 = false;\n    bool is_rest56\
    \ = false;\n    bool is_rest57 = false;\n    bool is_rest58 = false;\n    bool\
    \ is_rest59 = false;\n    bool is_rest60 = false;\n    bool is_rest61 = false;\n\
    \    bool is_rest62 = false;\n    bool is_rest63 = false;\n    bool is_rest64\
    \ = false;\n    bool is_rest65 = false;\n    bool is_rest66 = false;\n    bool\
    \ is_rest67 = false;\n    bool is_rest68 = false;\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporfalcpj.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] result`\\n/tmp/tmporfalcpj.d(90): Error: found `unittest` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporfalcpj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long result[] = new long[music_string.size()];\n    for(int\
    \ i = 0; i < music_string.size(); i++)\n    {\n        char c = music_string[i];\n\
    \        if(c == 'o')\n            result[i] = 4;\n        else if(c == 'o|')\n\
    \            result[i] = 2;\n        else if(c == '.|')\n            result[i]\
    \ = 1;\n        else\n            throw new Exception(\"Invalid music string\"\
    );\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,java |>\n<|\
    \ c |>\nThank you very much for your answer. I am going to try this out and see\
    \ how it goes.\n<|/ c |>\n<| c |>\nI added a solution in C#, hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you very much! I really appreciate your help.\n<|/ c\
    \ |>\n<| c |>\nI added a solution in C#, hope it helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI wrote a solution in C#, hope it helps.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyksng81.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] result`\\n/tmp/tmpyyksng81.d(25): Error: unterminated character\
    \ constant\\n/tmp/tmpyyksng81.d(25): Error: `c == \\'?\\'` must be parenthesized\
    \ when next to operator `|`\\n/tmp/tmpyyksng81.d(25): Error: unterminated character\
    \ constant\\n/tmp/tmpyyksng81.d(26): Error: found `result` when expecting `)`\\\
    n/tmp/tmpyyksng81.d(27): Error: unterminated character constant\\n/tmp/tmpyyksng81.d(27):\
    \ Error: `c == \\'?\\'` must be parenthesized when next to operator `|`\\n/tmp/tmpyyksng81.d(27):\
    \ Error: unterminated character constant\\n/tmp/tmpyyksng81.d(28): Error: found\
    \ `result` when expecting `)`\\n/tmp/tmpyyksng81.d(34): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpyyksng81.d(52): Error: semicolon expected, not `.`\\n/tmp/tmpyyksng81.d(52):\
    \ Error: no identifier for declarator `.Collections.Generic`\\n/tmp/tmpyyksng81.d(53):\
    \ Error: semicolon expected, not `.`\\n/tmp/tmpyyksng81.d(53): Error: no identifier\
    \ for declarator `.Linq`\\n/tmp/tmpyyksng81.d(54): Error: semicolon expected,\
    \ not `.`\\n/tmp/tmpyyksng81.d(54): Error: no identifier for declarator `.Text`\\\
    n/tmp/tmpyyksng81.d(55): Error: semicolon expected, not `.`\\n/tmp/tmpyyksng81.d(55):\
    \ Error: no identifier for declarator `.Threading.Tasks`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyksng81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[music_string.Length];\n    int\
    \ beat = 0;\n    int note = 0;\n    int last_note = 0;\n    bool is_note = false;\n\
    \    bool is_last_note = false;\n    bool is_last_beat = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool is_first_note = false;\n    bool is_last_note = false;\n\
    \    bool is_last_beat = false;\n    bool is_first_note = false;\n    bool is_first_beat\
    \ = false;\n    bool \nunittest\n{\n    alias candidate = parse_music;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L,\
    \ 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n   \
    \ assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n\
    \    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L,\
    \ 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzmt9c2k_.d(93): Error: no identifier for declarator `bool`\\\
    n/tmp/tmpzmt9c2k_.d(93): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmt9c2k_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[128];\n    string note;\n   \
    \ bool is_note = false;\n    bool is_rest = false;\n    bool is_rest2 = false;\n\
    \    bool is_rest3 = false;\n    bool is_rest4 = false;\n    bool is_rest5 = false;\n\
    \    bool is_rest6 = false;\n    bool is_rest7 = false;\n    bool is_rest8 = false;\n\
    \    bool is_rest9 = false;\n    bool is_rest10 = false;\n    bool is_rest11 =\
    \ false;\n    bool is_rest12 = false;\n    bool is_rest13 = false;\n    bool is_rest14\
    \ = false;\n    bool is_rest15 = false;\n    bool is_rest16 = false;\n    bool\
    \ is_rest17 = false;\n    bool is_rest18 = false;\n    bool is_rest19 = false;\n\
    \    bool is_rest20 = false;\n    bool is_rest21 = false;\n    bool is_rest22\
    \ = false;\n    bool is_rest23 = false;\n    bool is_rest24 = false;\n    bool\
    \ is_rest25 = false;\n    bool is_rest26 = false;\n    bool is_rest27 = false;\n\
    \    bool is_rest28 = false;\n    bool is_rest29 = false;\n    bool is_rest30\
    \ = false;\n    bool is_rest31 = false;\n    bool is_rest32 = false;\n    bool\
    \ is_rest33 = false;\n    bool is_rest34 = false;\n    bool is_rest35 = false;\n\
    \    bool is_rest36 = false;\n    bool is_rest37 = false;\n    bool is_rest38\
    \ = false;\n    bool is_rest39 = false;\n    bool is_rest40 = false;\n    bool\
    \ is_rest41 = false;\n    bool is_rest42 = false;\n    bool is_rest43 = false;\n\
    \    bool is_rest44 = false;\n    bool is_rest45 = false;\n    bool is_rest46\
    \ = false;\n    bool is_rest47 = false;\n    bool is_rest48 = false;\n    bool\
    \ is_rest49 = false;\n    bool is_rest50 = false;\n    bool is_rest51 = false;\n\
    \    bool is_rest52 = false;\n    bool is_rest53 = false;\n    bool is_rest54\
    \ = false;\n    bool is_rest55 = false;\n    bool is_rest56 = false;\n    bool\
    \ is_rest57 = false;\n    bool is_rest58 = false;\n    bool is_rest59 = false;\n\
    \    bool is_rest60 = false;\n    bool is_rest61 = false;\n    bool is_rest62\
    \ = false;\n    bool is_rest63 = false;\n    bool is_rest64 = false;\n    bool\
    \ is_rest65 = false;\n    bool is_rest66 = false;\n    bool is_rest67 = false;\n\
    \    bool is_rest68 = false;\n    \nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxe1wairh.d(91): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe1wairh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long notes[] = new long[128];\n    string note;\n   \
    \ int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int \nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxo6v0qvb.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] notes`\\n/tmp/tmpxo6v0qvb.d(149): Error: no identifier for declarator\
    \ `int`\\n/tmp/tmpxo6v0qvb.d(149): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxo6v0qvb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = new long[music_string.Length];\n    int\
    \ i = 0;\n    while(i < music_string.Length)\n    {\n        char c = music_string[i];\n\
    \        switch(c)\n        {\n            case 'o':\n                beats[i]\
    \ = 4;\n                break;\n            case 'o|':\n                beats[i]\
    \ = 2;\n                break;\n            case '.|':\n                beats[i]\
    \ = 1;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid music string\");\n        }\n        i++;\n    }\n    return\
    \ beats;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `parse_music(\"\
    o o| .| o| o| .| .| .| .| .| o o\")` returns `[4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running it on ideone.com\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running it\
    \ on ideone.com\n<|/ c |>\n<| a tags=c#,algorithm,string |>\n<code>\nstring input\
    \ = \"o o| .| o| o| .| .| .| .| .| o o\";\nstring[] notes = input.Split(new char[]\
    \ { '|', '.' }, StringSplitOptions.RemoveEmptyEntries);\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe820pu_6.d(29): Error: unterminated character constant\\n/tmp/tmpe820pu_6.d(29):\
    \ Error: unterminated character constant\\n/tmp/tmpe820pu_6.d(30): Error: found\
    \ `beats` when expecting `:`\\n/tmp/tmpe820pu_6.d(32): Error: unterminated character\
    \ constant\\n/tmp/tmpe820pu_6.d(32): Error: unterminated character constant\\\
    n/tmp/tmpe820pu_6.d(33): Error: found `beats` when expecting `:`\\n/tmp/tmpe820pu_6.d(42):\
    \ Error: declaration expected, not `<`\\n/tmp/tmpe820pu_6.d(45): Error: unterminated\
    \ character constant\\n/tmp/tmpe820pu_6.d(51): Error: unterminated character constant\\\
    n/tmp/tmpe820pu_6.d(57): Error: unterminated character constant\\n/tmp/tmpe820pu_6.d(62):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpe820pu_6.d(62): Error: found `}`\
    \ when expecting `,`\\n/tmp/tmpe820pu_6.d(62): Error: expression expected, not\
    \ `,`\\n/tmp/tmpe820pu_6.d(62): Error: found `StringSplitOptions` when expecting\
    \ `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe820pu_6.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long current_beat\
    \ = 0;\n    long current_note = 0;\n    long current_note_length = 0;\n    long\
    \ current_note_length_index = 0;\n    long current_note_length_index2 = 0;\n \
    \   long current_note_length_index3 = 0;\n    long current_note_length_index4\
    \ = 0;\n    long current_note_length_index5 = 0;\n    long current_note_length_index6\
    \ = 0;\n    long current_note_length_index7 = 0;\n    long current_note_length_index8\
    \ = 0;\n    long current_note_length_index9 = 0;\n    long current_note_length_index10\
    \ = 0;\n    long current_note_length_index11 = 0;\n    long current_note_length_index12\
    \ = 0;\n    long current_note_length_index13 = 0;\n    long current_note_length_index14\
    \ = 0;\n    long current_note_length_index15 = 0;\n    long current_note_length_index16\
    \ = 0;\n    long current_note_length_index17 = 0;\n    long current_note_length_index18\
    \ = 0;\n    long current_note_length_index19 = 0;\n    long current_note_length_index20\
    \ = 0;\n    long current_note_length_index21 = 0;\n    long current_note_length_index22\
    \ = 0;\n    long current_note_length_index23 = 0;\n    long current_note_length_index24\
    \ = 0;\n    long current_note_length_index25 = 0;\n    long current_note_length_index26\
    \ = 0;\n    long current_note_length_index27 = 0;\n    long current_note_length_index28\
    \ = 0;\n    long current_note_length_index29 = 0;\n    long current_note_length_index30\
    \ = 0;\n    long current_note_length_index31 = 0;\n    long current_note_length_index32\
    \ = 0;\n    long current_note_length_index33 = 0;\n    long current_note_length_index34\
    \ = 0;\n    long current_note_length_index35 = 0;\n    long current_note_length_index36\
    \ = 0;\n    long current_note_length_index37 = 0;\n    long current_note_length_index38\
    \ = 0;\n    long current_note_length_index39 = 0;\n    long current_note_length_index40\
    \ = 0;\n    long current_note_length_index41 = 0;\n    long current_note_length_index42\
    \ = 0;\n    long current_note_length_index43 = 0;\n    long current_note_length_index44\
    \ = 0;\n    long current_note_length_index45 = 0;\n    long current_note_length_index46\
    \ = 0;\n    long current_note_length_index47 = 0;\n    long current_note_length_index48\
    \ = 0;\n    long current_note_length_index49 = 0;\n    long current_note_length_index50\
    \ = 0;\n    long current_note_length_index51 = 0;\n    long current_note_length_index52\
    \ = 0;\n    long current_note_length_index53 = 0;\n    long current_note_length_index54\
    \ = 0;\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsz7r00a5.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmpsz7r00a5.d(77): Error: found `unittest` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz7r00a5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long notes[] = new long[128];\n    string note;\n   \
    \ int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int \nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6aq9bks2.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] notes`\\n/tmp/tmp6aq9bks2.d(149): Error: no identifier for declarator\
    \ `int`\\n/tmp/tmp6aq9bks2.d(149): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6aq9bks2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    int notes[] = new\
    \ int[128];\n    int notes_index = 0;\n    int notes_index2 = 0;\n    int notes_index3\
    \ = 0;\n    int notes_index4 = 0;\n    int notes_index5 = 0;\n    int notes_index6\
    \ = 0;\n    int notes_index7 = 0;\n    int notes_index8 = 0;\n    int notes_index9\
    \ = 0;\n    int notes_index10 = 0;\n    int notes_index11 = 0;\n    int notes_index12\
    \ = 0;\n    int notes_index13 = 0;\n    int notes_index14 = 0;\n    int notes_index15\
    \ = 0;\n    int notes_index16 = 0;\n    int notes_index17 = 0;\n    int notes_index18\
    \ = 0;\n    int notes_index19 = 0;\n    int notes_index20 = 0;\n    int notes_index21\
    \ = 0;\n    int notes_index22 = 0;\n    int notes_index23 = 0;\n    int notes_index24\
    \ = 0;\n    int notes_index25 = 0;\n    int notes_index26 = 0;\n    int notes_index27\
    \ = 0;\n    int notes_index28 = 0;\n    int notes_index29 = 0;\n    int notes_index30\
    \ = 0;\n    int notes_index31 = 0;\n    int notes_index32 = 0;\n    int notes_index33\
    \ = 0;\n    int notes_index34 = 0;\n    int notes_index35 = 0;\n    int notes_index36\
    \ = 0;\n    int notes_index37 = 0;\n    int notes_index38 = 0;\n    int notes_index39\
    \ = 0;\n    int notes_index40 = 0;\n    int notes_index41 = 0;\n    int notes_index42\
    \ = 0;\n    int notes_index43 = 0;\n    int notes_index44 = 0;\n    int notes_index45\
    \ = 0;\n    int notes_index46 = 0;\n    int notes_index47 = 0;\n    int notes_index48\
    \ = 0;\n    int notes_index49 = 0;\n    int notes_index50 = 0;\n    int notes_index51\
    \ = 0;\n    int notes_index52 = 0;\n    int notes_index53 = 0;\n    int notes_index54\
    \ = 0;\n    int notes_index55 = 0;\n    int notes_index56 = 0;\n    int notes_index57\
    \ = 0;\n    int notes_index58 = 0;\n    int notes_index59 = 0;\n    int notes_index60\
    \ = 0;\n    int notes_index61 = 0;\n    int notes_index62 = 0;\n    int notes_index63\
    \ = 0;\n    int notes_index64 = 0;\n    int notes_index65 = 0;\n    int notes_index66\
    \ = 0;\n    int notes_index67 = 0;\n    int notes_index68 = 0;\n    int notes_index69\
    \ = 0;\n    int notes_index70 = 0;\n    int notes_index\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0s83z9s.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmpn0s83z9s.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `int[] notes`\\n/tmp/tmpn0s83z9s.d(92): Error: semicolon\
    \ expected, not `unittest`\\n/tmp/tmpn0s83z9s.d(92): Error: found `unittest` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0s83z9s.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] notes = new long[128];\n    for(int i = 0; i <\
    \ music_string.length(); i++)\n    {\n        if(music_string[i] == 'o')\n   \
    \     {\n            notes[(int)'o'] = 4;\n        }\n        else if(music_string[i]\
    \ == 'o|')\n        {\n            notes[(int)'o'] = 2;\n        }\n        else\
    \ if(music_string[i] == '.|')\n        {\n            notes[(int)'.'] = 1;\n \
    \       }\n        else\n        {\n            throw new Exception(\"Invalid\
    \ music string\");\n        }\n    }\n    return notes;\n}\n</code>\n<|/ a tags=algorithm,c#,java\
    \ |>\n<| c |>\nI like your solution, but I think it would be better to use a `switch`\
    \ statement instead of `if` statements.\n<|/ c |>\n<| c |>\nI agree, switch statements\
    \ are much better in this case. Thanks!\n<|/ c |>\n<| c |>\nI agree, switch statements\
    \ are much better in this case. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static void main(String[] args) {\n    String[] notes = {\"o\", \"o|\"\
    , \".|\"};\n    String[] notesStrings = {\"o\", \"o|\", \".\"};\n    String[]\
    \ notesStringsArray = notesStrings.toArray(new String[notesStrings.length]);\n\
    \    String[] notesArray = notes.toArray(new String[notes.length]);\n    System.out.println(notesArray);\n\
    \    System.out.println(notesStringsArray);\n    System.out.println(notesStringsArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(notesArray.length);\n    System.out.println(notesArray.length);\n\
    \    System.out.println(\nunittest\n{\n    alias candidate = parse_music;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxwsmfhkv.d(24): Error: C style cast illegal, use `cast(int)\\\
    'o\\'`\\n/tmp/tmpxwsmfhkv.d(26): Error: unterminated character constant\\n/tmp/tmpxwsmfhkv.d(26):\
    \ Error: `music_string[i] == \\'?\\'` must be parenthesized when next to operator\
    \ `|`\\n/tmp/tmpxwsmfhkv.d(26): Error: unterminated character constant\\n/tmp/tmpxwsmfhkv.d(27):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpxwsmfhkv.d(28): Error: C style\
    \ cast illegal, use `cast(int)\\'o\\'`\\n/tmp/tmpxwsmfhkv.d(30): Error: found\
    \ `else` without a corresponding `if`, `version` or `debug` statement\\n/tmp/tmpxwsmfhkv.d(30):\
    \ Error: unterminated character constant\\n/tmp/tmpxwsmfhkv.d(30): Error: unterminated\
    \ character constant\\n/tmp/tmpxwsmfhkv.d(34): Error: declaration expected, not\
    \ `else`\\n/tmp/tmpxwsmfhkv.d(37): Error: unrecognized declaration\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwsmfhkv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    int notes[] = new\
    \ int[128];\n    string note;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dl6vo6w.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmp7dl6vo6w.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `int[] notes`\\n/tmp/tmp7dl6vo6w.d(173): Error: found\
    \ `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp7dl6vo6w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    long notes[] = new\
    \ long[128];\n    long last_notes[] = new long[128];\n    long last_beats[] =\
    \ new long[128];\n    long last_last_notes[] = new long[128];\n    long last_last_beats[]\
    \ = new long[128];\n    long last_last_last_notes[] = new long[128];\n    long\
    \ last_last_last_beats[] = new long[128];\n    long last_last_last_last_notes[]\
    \ = new long[128];\n    long last_last_last_last_beats[] = new long[128];\n  \
    \  long last_last_last_last_last_notes[] = new long[128];\n    long last_last_last_last_last_beats[]\
    \ = new long[128];\n    long last_last_last_last_last_last_notes[] = new long[128];\n\
    \    long last_last_last_last_last_last_beats[] = new long[128];\n    long last_last_last_last_last_last_last_notes[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_beats[] = new\
    \ long[128];\n    long last_last_last_last_last_last_last_last_notes[] = new long[128];\n\
    \    long last_last_last_last_last_last_last_last_beats[] = new long[128];\n \
    \   long last_last_last_last_last_last_last_last_last_notes[] = new long[128];\n\
    \    long last_last_last_last_last_last_last_last_last_beats[] = new long[128];\n\
    \    long last_last_last_last_last_last_last_last_last_last_notes[] = new long[128];\n\
    \    long last_last_last_last_last_last_last_last_last_last_beats[] = new long[128];\n\
    \    long last_last_last_last_last_last_last_last_last_last_last_notes[] = new\
    \ long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_beats[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_notes[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_beats[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_last_notes[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_last_beats[]\
    \ = new long[128];\n    long last_last_last_last_last_last_last_last_last_last_last_last_last_notes[]\
    \ = new long[128];\n\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwan4r2hg.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmpwan4r2hg.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] notes`\\n/tmp/tmpwan4r2hg.d(21): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] last_notes`\\n/tmp/tmpwan4r2hg.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] last_beats`\\\
    n/tmp/tmpwan4r2hg.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_notes`\\n/tmp/tmpwan4r2hg.d(24): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[] last_last_beats`\\n/tmp/tmpwan4r2hg.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] last_last_last_notes`\\\
    n/tmp/tmpwan4r2hg.d(26): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_last_beats`\\n/tmp/tmpwan4r2hg.d(27): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[] last_last_last_last_notes`\\n/tmp/tmpwan4r2hg.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] last_last_last_last_beats`\\\
    n/tmp/tmpwan4r2hg.d(29): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_last_last_last_notes`\\n/tmp/tmpwan4r2hg.d(30): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] last_last_last_last_last_beats`\\\
    n/tmp/tmpwan4r2hg.d(31): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_last_last_last_last_notes`\\n/tmp/tmpwan4r2hg.d(32): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[] last_last_last_last_last_last_beats`\\\
    n/tmp/tmpwan4r2hg.d(33): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_last_last_last_last_last_notes`\\n/tmp/tmpwan4r2hg.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[] last_last_last_last_last_last_last_beats`\\\
    n/tmp/tmpwan4r2hg.d(35): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[] last_last_last_last_last_last_last_last_notes`\\n/tmp/tmpwan4r2hg.d(36):\
    \ Deprecation: instea"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long beats[] = new long[128];\n    string notes[] = new\
    \ string[128];\n    string notes_string = \"\";\n    int note_index = 0;\n   \
    \ int note_index2 = 0;\n    int note_index3 = 0;\n    int note_index4 = 0;\n \
    \   int note_index5 = 0;\n    int note_index6 = 0;\n    int note_index7 = 0;\n\
    \    int note_index8 = 0;\n    int note_index9 = 0;\n    int note_index10 = 0;\n\
    \    int note_index11 = 0;\n    int note_index12 = 0;\n    int note_index13 =\
    \ 0;\n    int note_index14 = 0;\n    int note_index15 = 0;\n    int note_index16\
    \ = 0;\n    int note_index17 = 0;\n    int note_index18 = 0;\n    int note_index19\
    \ = 0;\n    int note_index20 = 0;\n    int note_index21 = 0;\n    int note_index22\
    \ = 0;\n    int note_index23 = 0;\n    int note_index24 = 0;\n    int note_index25\
    \ = 0;\n    int note_index26 = 0;\n    int note_index27 = 0;\n    int note_index28\
    \ = 0;\n    int note_index29 = 0;\n    int note_index30 = 0;\n    int note_index31\
    \ = 0;\n    int note_index32 = 0;\n    int note_index33 = 0;\n    int note_index34\
    \ = 0;\n    int note_index35 = 0;\n    int note_index36 = 0;\n    int note_index37\
    \ = 0;\n    int note_index38 = 0;\n    int note_index39 = 0;\n    int note_index40\
    \ = 0;\n    int note_index41 = 0;\n    int note_index42 = 0;\n    int note_index43\
    \ = 0;\n    int note_index44 = 0;\n    int note_index45 = 0;\n    int note_index46\
    \ = 0;\n    int note_index47 = 0;\n    int note_index48 = 0;\n    int note_index49\
    \ = 0;\n    int note_index50 = 0;\n    int note_index51 = 0;\n    int note_index52\
    \ = 0;\n    int note_index53 = 0;\n    int note_index54 = 0;\n    int note_index55\
    \ = 0;\n    int note_index56 = 0;\n    int note_index57 = 0;\n    int note_index58\
    \ = 0;\n    int note_index59 = 0;\n    int note_index60 = 0;\n    int note_index61\
    \ = 0;\n    int note_index62 = 0;\n    int note_index63 = 0;\n    int note_index64\
    \ = 0;\n    int note_index65 = 0;\n    int note_index66 = 0;\n    int note_index67\
    \ = 0;\n    int note_index68 = 0;\n    int note_index69 = 0;\n    int note_index70\
    \ = 0;\n    int note_index71 = 0;\n    int note_index72 = 0;\n    int note_index73\
    \ = 0;\n    int note_index74 = 0;\n    int note_index75 = 0;\n    int note_index76\
    \ = 0;\n    int note_index77 = 0;\n    int note_index78 = 0;\n    int note_index79\
    \ = 0;\n    int note_index80 = 0;\n    int note_index81 = 0;\n\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyx7wn_r2.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[] beats`\\n/tmp/tmpyx7wn_r2.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `string[] notes`\\n/tmp/tmpyx7wn_r2.d(104): Error:\
    \ found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpyx7wn_r2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
