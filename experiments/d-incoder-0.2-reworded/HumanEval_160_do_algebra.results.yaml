language: d
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == '+')\n        {\n            result +=\
    \ operand[i];\n        }\n        else if(operator[i] == '-')\n        {\n   \
    \         result -= operand[i];\n        }\n        else if(operator[i] == '*')\n\
    \        {\n            result *= operand[i];\n        }\n        else if(operator[i]\
    \ == '/')\n        {\n            result /= operand[i];\n        }\n        else\
    \ if(operator[i] == '**')\n        {\n            result **= operand[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. Your code is working fine. But the problem is that I cannot\
    \ use any loop or array methods. I must use only basic algebra operations. I cannot\
    \ use any loop or array methods. I must use only basic algebra operations. I cannot\
    \ use any loop or array methods. I must use only basic algebra operations. I cannot\
    \ use any loop or array methods. I must use only basic algebra operations.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution without loops or array\
    \ methods.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code is working fine.\
    \ But the problem is that I cannot use any loop or array methods. I must use only\
    \ basic algebra operations. I cannot use any loop or array methods. I must use\
    \ only basic algebra operations. I cannot use any loop or array methods. I must\
    \ use only basic algebra operations.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution without loops or array methods.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code is working fine. But the problem is that I cannot\
    \ use any loop or array methods. I must use only basic algebra operations. I cannot\
    \ use any loop or array methods. I must use only basic algebra operations. I cannot\
    \ use any loop or array methods. I must use only basic algebra operations.\n<|/\
    \ c |>\n<| a tags=java |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoh2c3z3b.d(50): Error: unterminated character constant\n/tmp/tmpoh2c3z3b.d(50):
    Error: unterminated character constant\n/tmp/tmpoh2c3z3b.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmpoh2c3z3b.d(52): Error: expression expected, not `*=`\n/tmp/tmpoh2c3z3b.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpoh2c3z3b.d(55):
    Error: declaration expected, not `return`\n/tmp/tmpoh2c3z3b.d(56): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoh2c3z3b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op1, op2;\n    long op1val, op2val;\n\
    \    long op1pos, op2pos;\n    long op1neg, op2neg;\n    long op1negval, op2negval;\n\
    \    long op1negpos, op2negpos;\n    long op1negneg, op2negneg;\n    long op1negnegval,\
    \ op2negnegval;\n    long op1negnegpos, op2negnegpos;\n    long op1negnegneg,\
    \ op2negnegneg;\n    long op1negnegnegval, op2negnegnegval;\n    long op1negnegnegpos,\
    \ op2negnegnegpos;\n    long op1negnegnegneg, op2negnegnegneg;\n    long op1negnegnegnegval,\
    \ op2negnegnegnegval;\n    long op1negnegnegnegpos, op2negnegnegnegpos;\n    long\
    \ op1negnegnegnegneg, op2negnegnegnegneg;\n    long op1negnegnegnegnegval, op2negnegnegnegnegval;\n\
    \    long op1negnegnegnegnegpos, op2negnegnegnegnegpos;\n    long op1negnegnegnegnegneg,\
    \ op2negnegnegnegnegneg;\n    long op1negnegnegnegnegnegval, op2negnegnegnegnegnegval;\n\
    \    long op1negnegnegnegnegnegpos, op2negnegnegnegnegnegpos;\n    long op1negnegnegnegnegnegneg,\
    \ op2negnegnegnegnegnegneg;\n    long op1negnegnegnegnegnegnegval, op2negnegnegnegnegnegnegval;\n\
    \    long op1negnegnegnegnegnegnegpos, op2negnegnegnegnegnegnegpos;\n    long\
    \ op1negnegnegnegnegnegnegneg, op2negnegnegnegnegnegnegneg;\n    long op1negnegnegnegnegnegnegnegval,\
    \ op2negnegnegnegnegnegnegnegval;\n    long op1negnegnegnegnegnegnegnegpos, op2negnegnegnegnegnegnegnegpos;\n\
    \    long op1negnegnegnegnegnegnegnegneg, op2negnegnegnegnegnegnegnegnegneg;\n\
    \    long op1negnegnegnegnegnegneg\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhiekeog.d(60): Error: semicolon expected, not `unittest`\n/tmp/tmpuhiekeog.d(60):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuhiekeog.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+':\n                result = result + operand[i];\n      \
    \          break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,java |>\n<| c |>\nI like your solution, but I believe that\
    \ it is more efficient to just use a single loop and do all the operations in\
    \ one go. Also, why do you think it is more efficient?\n<|/ c |>\n<| c |>\nI believe\
    \ that it is more efficient because you only have to loop through the array once.\
    \ Also, it is more efficient because you only have to loop through the array once.\n\
    <|/ c |>\n<| c |>\nI believe that it is more efficient because you only have to\
    \ loop through the array once. Also, it is more efficient because you only have\
    \ to loop through the array once.\n<|/ c |>\n<| c |>\nI believe that it is more\
    \ efficient because you only have to loop through the array once. Also, it is\
    \ more efficient because you only have to loop through the array once.\n<|/ c\
    \ |>\n<| c |>\nI believe that it is more efficient because you only have to loop\
    \ through the array once. Also, it is more efficient because you only have to\
    \ loop through the array once.\n<|/ c |>\n<| a tags=algorithm,java |>\n<code>\n\
    public class MathOperation {\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnicplpl1.d(49): Error: unterminated character constant\n/tmp/tmpnicplpl1.d(49):
    Error: unterminated character constant\n/tmp/tmpnicplpl1.d(50): Error: found `result`
    when expecting `:`\n/tmp/tmpnicplpl1.d(50): Error: found `=` instead of statement\n/tmp/tmpnicplpl1.d(52):
    Error: unterminated character constant\n/tmp/tmpnicplpl1.d(52): Error: unterminated
    character constant\n/tmp/tmpnicplpl1.d(53): Error: found `result` when expecting
    `:`\n/tmp/tmpnicplpl1.d(53): Error: found `=` instead of statement\n/tmp/tmpnicplpl1.d(62):
    Error: declaration expected, not `<`\n/tmp/tmpnicplpl1.d(86): Error: declaration
    expected, not `assert`\n/tmp/tmpnicplpl1.d(87): Error: declaration expected, not
    `assert`\n/tmp/tmpnicplpl1.d(88): Error: declaration expected, not `assert`\n/tmp/tmpnicplpl1.d(89):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnicplpl1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '^': result\
    \ ^= operand[i]; break;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nI appreciate your effort,\
    \ but this doesn't solve the problem of how to evaluate the expression. Your code\
    \ only evaluates the expression for a single operand.\n<|/ c |>\n<| c |>\nI edited\
    \ the answer to include a solution for evaluating the expression. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you for your effort! I appreciate it, but this doesn't\
    \ solve the problem of how to evaluate the expression. Your code only evaluates\
    \ the expression for a single operand.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to include a solution for evaluating the expression. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you for your effort! I appreciate it, but this doesn't solve the\
    \ problem of how to evaluate the expression. Your code only evaluates the expression\
    \ for a single operand.\n<|/ c |>\n<| a dscore=0 |>\nThe simplest way is to use\
    \ recursion.\n<code>\npublic int evaluate(String expression) {\n    int result\
    \ = 0;\n    String[] operators = expression.split(\" \");\n    for (int i = 0;\
    \ i < operators.length; i++) {\n        switch (operators[i]) {\n            case\
    \ \"+\": result += evaluate(operators[i + 1]);\n            case \"-\": result\
    \ -= evaluate(operators[i + 1]);\n            case \"*\": result *= evaluate(operators[i\
    \ + 1]);\n            case \"/\": result /= evaluate(operators[i + 1]);\n    \
    \        case \"^\": result ^= evaluate(operators[i + 1]);\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\n\
    Thank you for your effort! I appreciate it, but this doesn't solve the problem\
    \ of how to evaluate the expression. Your code only evaluates the expression for\
    \ a single operand.\n<|/ c |>\n<| c |>\nI edited the answer to include a solution\
    \ for evaluating the expression. Hope it helps.\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\nimport java.util.Array\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwu95d31s.d(46): Error: declaration expected, not `<`\n/tmp/tmpwu95d31s.d(49):
    Error: unterminated character constant\n/tmp/tmpwu95d31s.d(55): Error: unterminated
    character constant\n/tmp/tmpwu95d31s.d(61): Error: unterminated character constant\n/tmp/tmpwu95d31s.d(69):
    Error: declaration expected, not `for`\n/tmp/tmpwu95d31s.d(69): Error: no identifier
    for declarator `i`\n/tmp/tmpwu95d31s.d(69): Error: declaration expected, not `<`\n/tmp/tmpwu95d31s.d(69):
    Error: no identifier for declarator `i`\n/tmp/tmpwu95d31s.d(69): Error: declaration
    expected, not `++`\n/tmp/tmpwu95d31s.d(72): Error: declaration expected, not `case`\n/tmp/tmpwu95d31s.d(73):
    Error: declaration expected, not `case`\n/tmp/tmpwu95d31s.d(74): Error: declaration
    expected, not `case`\n/tmp/tmpwu95d31s.d(75): Error: declaration expected, not
    `case`\n/tmp/tmpwu95d31s.d(76): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwu95d31s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_w4q1dgf.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_w4q1dgf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op1, op2;\n    long op;\n    int\
    \ i;\n    for(i = 0; i < operator.length; i++)\n    {\n        op = std.math[operator[i]];\n\
    \        op1 = std.math[operator[i - 1]];\n        op2 = std.math[operator[i +\
    \ 1]];\n        result += op1(operand[i - 1]) * op2(operand[i]);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\nI appreciate\
    \ your efforts, but this doesn't solve the problem of how to evaluate the expression.\
    \ For example, `operator['+', '*', '-']` and `array = [2, 3, 4, 5]` should return\
    \ `9`, but your code returns `12`.\n<|/ c |>\n<| c |>\nI missed the part where\
    \ you said \"The basic algebra operations:\" I updated my answer to include that\
    \ part.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't solve\
    \ the problem of how to evaluate the expression. For example, `operator['+', '*',\
    \ '-']` and `array = [2, 3, 4, 5]` should return `9`, but your code returns `12`.\n\
    <|/ c |>\n<| c |>\nI missed the part where you said \"The basic algebra operations:\"\
    \ I updated my answer to include that part.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but this doesn't solve the problem of how to evaluate the expression.\
    \ For example, `operator['+', '*', '-']` and `array = [2, 3, 4, 5]` should return\
    \ `9`, but your code returns `12`.\n<|/ c |>\n<| a tags=arrays,c++,algorithm |>\n\
    I believe that your problem can be solved using recursion. \n<code>\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpel3tn1rd.d(43): Error: declaration expected, not `<`\n/tmp/tmpel3tn1rd.d(46):
    Error: unterminated character constant\n/tmp/tmpel3tn1rd.d(52): Error: unterminated
    character constant\n/tmp/tmpel3tn1rd.d(58): Error: unterminated character constant\n/tmp/tmpel3tn1rd.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpel3tn1rd.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpel3tn1rd.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpel3tn1rd.d(70): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpel3tn1rd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i\
    \ < operator.length; i++)\n    {\n        switch(operator[i])\n        {\n   \
    \         case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: return -1;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| c |>\nI believe that your solution does not work\
    \ correctly for negative operands. Try `operator['+', '*', '-']` and `array =\
    \ [2, 3, 4, -5]`.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nI believe that your solution does\
    \ not work correctly for negative operands. Try `operator['+', '*', '-']` and\
    \ `array = [2, 3, 4, -5]`.\n<|/ c |>\n<| c |>\nI believe that your solution does\
    \ not work correctly for negative operands. Try `operator['+', '*', '-']` and\
    \ `array = [2, 3, 4, -5]`.\n<|/ c |>\n<| c |>\nI believe that your solution does\
    \ not work correctly for negative operands. Try `operator['+', '*', '-']` and\
    \ `array = [2, 3, 4, -5]`.\n<|/ c |>\n<| a dscore=1 |>\nI believe that your solution\
    \ does not work correctly for negative operands. Try operator['+', '*', '-'] and\
    \ array = [2, 3, 4, -5]. \u2013 user3483203 3 hours ago\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb4agw9q.d(40): Error: unterminated character constant\n/tmp/tmpwb4agw9q.d(40):
    Error: unterminated character constant\n/tmp/tmpwb4agw9q.d(40): Error: found `result`
    when expecting `:`\n/tmp/tmpwb4agw9q.d(40): Error: found `/=` instead of statement\n/tmp/tmpwb4agw9q.d(41):
    Error: unterminated character constant\n/tmp/tmpwb4agw9q.d(41): Error: unterminated
    character constant\n/tmp/tmpwb4agw9q.d(41): Error: found `result` when expecting
    `:`\n/tmp/tmpwb4agw9q.d(41): Error: found `*=` instead of statement\n/tmp/tmpwb4agw9q.d(47):
    Error: declaration expected, not `<`\n/tmp/tmpwb4agw9q.d(65): Error: character
    0x2013 is not a valid token\n/tmp/tmpwb4agw9q.d(70): Error: declaration expected,
    not `assert`\n/tmp/tmpwb4agw9q.d(71): Error: declaration expected, not `assert`\n/tmp/tmpwb4agw9q.d(72):
    Error: declaration expected, not `assert`\n/tmp/tmpwb4agw9q.d(73): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb4agw9q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length) \n    {\n        switch(operator[i]) \n        {\n  \
    \          case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThis doesn't work if there\
    \ are more than 2 operands.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks\
    \ for pointing it out. I've updated the answer accordingly.\n<|/ c |>\n<| c |>\n\
    I believe this fails for negative operands.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for negative operands.\n<|/ c |>\n<| c |>\nI believe this fails for negative\
    \ operands.\n<|/ c |>\n<| a dscore=5 |>\nI wrote a C# library for solving this\
    \ problem called MathNet.Numerics.\n<code>\nvar result = MathNet.Numerics.LinearAlgebra.DenseMatrix.Multiply(\n\
    \    new MathNet.Numerics.LinearAlgebra.DenseMatrix(new double[] { 2, 3, 4, 5\
    \ }),\n    new MathNet.Numerics.LinearAlgebra.DenseMatrix(new double[] { 1, 2,\
    \ 3, 4 }));\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThis library is\
    \ awesome!\n<|/ c |>\n<| c |>\nI believe this fails for negative operands.\n<|/\
    \ c |>\n<| c |>\nI believe this fails for negative operands.\n<|/ c |>\n<| c |>\n\
    I believe this fails for negative operands.\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for negative operands.\n<|/ c |>\n<| a dscore=5 |>\nI wrote a C# library\
    \ for solving this problem called MathNet.Numerics.\n<code>\nvar result = MathNet.Numerics.LinearAlgebra.DenseMatrix.Multiply(\n\
    \    new MathNet.Numerics.LinearAlgebra.DenseMatrix(new double[] { 2, 3, 4, 5\
    \ }),\n    new MathNet.Numerics.LinearAlgebra.DenseMatrix\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4fek71qx.d(59): Error: declaration expected, not `<`\n/tmp/tmp4fek71qx.d(62):
    Error: unterminated character constant\n/tmp/tmp4fek71qx.d(65): Error: unterminated
    character constant\n/tmp/tmp4fek71qx.d(82): Error: declaration expected, not `<`\n/tmp/tmp4fek71qx.d(109):
    Error: declaration expected, not `assert`\n/tmp/tmp4fek71qx.d(110): Error: declaration
    expected, not `assert`\n/tmp/tmp4fek71qx.d(111): Error: declaration expected,
    not `assert`\n/tmp/tmp4fek71qx.d(112): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fek71qx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    \n \
    \   while(i < operator.length && j < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result += operand[j];\n   \
    \             break;\n            case '-':\n                result -= operand[j];\n\
    \                break;\n            case '*':\n                result *= operand[j];\n\
    \                break;\n            case '/':\n                result /= operand[j];\n\
    \                break;\n            case '^':\n                result ^= operand[j];\n\
    \                break;\n            default:\n                throw new RuntimeException(\"\
    Invalid operator\");\n        }\n        i++;\n        j++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays |>\n<| c |>\nI believe\
    \ this solution will fail for `operator = ['+', '*', '-']` and `operand = [2,\
    \ 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `operator\
    \ = ['+', '*', '-']` and `operand = [2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe\
    \ this solution will fail for `operator = ['+', '*', '-']` and `operand = [2,\
    \ 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `operator\
    \ = ['+', '*', '-']` and `operand = [2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI believe\
    \ this solution will fail for `operator = ['+', '*', '-']` and `operand = [2,\
    \ 3, 4, 5]`\n<|/ c |>\n<| a tags=java,algorithm,arrays |>\nI believe this solution\
    \ will work for all cases:\n<code>\npublic static int doMath(String[] operator,\
    \ int[] operand) {\n    int result = 0;\n    int i = 0;\n    int j = 0;\n    \n\
    \    while(i < operator.length && j < operand.length) {\n        switch(operator[i])\
    \ {\n            case '+':\n                result += operand[j];\n          \
    \      break;\n            case '-':\n                result -= operand[j];\n\
    \                break;\n            case '*':\n                result *= operand[j];\n\
    \                break;\n            case '/':\n                result /= operand[j];\n\
    \                break;\n            case '^':\n                result ^= operand[j];\n\
    \                break;\n            default:\n                throw new RuntimeException(\"\
    Invalid operator\");\n        }\n        i++;\n        j++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe this solution will\
    \ fail for `operator = ['+', '*', '-']` and `operand = [2, 3, 4, 5]`\n<|/ c |>\n\
    <| c |>\nI believe \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcpx5qe2w.d(61): Error: declaration expected, not `<`\n/tmp/tmpcpx5qe2w.d(86):
    Error: declaration expected, not `while`\n/tmp/tmpcpx5qe2w.d(90): Error: declaration
    expected, not `break`\n/tmp/tmpcpx5qe2w.d(91): Error: declaration expected, not
    `case`\n/tmp/tmpcpx5qe2w.d(93): Error: declaration expected, not `break`\n/tmp/tmpcpx5qe2w.d(94):
    Error: declaration expected, not `case`\n/tmp/tmpcpx5qe2w.d(96): Error: declaration
    expected, not `break`\n/tmp/tmpcpx5qe2w.d(97): Error: declaration expected, not
    `case`\n/tmp/tmpcpx5qe2w.d(99): Error: declaration expected, not `break`\n/tmp/tmpcpx5qe2w.d(100):
    Error: declaration expected, not `case`\n/tmp/tmpcpx5qe2w.d(102): Error: declaration
    expected, not `break`\n/tmp/tmpcpx5qe2w.d(103): Error: declaration expected, not
    `default`\n/tmp/tmpcpx5qe2w.d(105): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcpx5qe2w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXXX = 0;\n    long YYYY = 0;\n    long ZZZZ = 0;\n    long AAAAA\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4pqft5c9.d(128): Error: semicolon expected, not `unittest`\n/tmp/tmp4pqft5c9.d(128):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4pqft5c9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n\
    \    long Cc = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long\
    \ Gg = 0;\n    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk =\
    \ 0;\n    long Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n\
    \    long Pp = 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long\
    \ Tt = 0;\n    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx =\
    \ 0;\n    long Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n\
    \    long Ccc = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n\
    \    long Ggg = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n\
    \    long Kkk = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n\
    \    long Ooo = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n\
    \    long Sss = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpis751kja.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpis751kja.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpis751kja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9nr6yrw4.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9nr6yrw4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\":\n             \
    \   result += operand[i];\n                break;\n            case \"-\":\n \
    \               result -= operand[i];\n                break;\n            case\
    \ \"*\":\n                result *= operand[i];\n                break;\n    \
    \        case \"/\":\n                result /= operand[i];\n                break;\n\
    \            case \"**\":\n                result *= operand[i];\n           \
    \     break;\n            default:\n                throw new IllegalArgumentException(\"\
    Invalid operator: \" + operator[i]);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ how this works? I understand that `operator` array has all the operators and\
    \ `operand` array has all the operands. But how does it work?\n<|/ c |>\n<| c\
    \ |>\nThe `switch` statement will execute the code in the `case` statement that\
    \ matches the value of the `operator` array. For example, if the `operator` array\
    \ has `+` as the only value, then the `switch` statement will execute the code\
    \ in the `case` statement that matches `+`. So the `switch` statement will execute\
    \ the code in the `case` statement that matches `+` and the `result` variable\
    \ will be incremented by `operand[i]`.\n<|/ c |>\n<| c |>\nI understand that.\
    \ But how does it work? How does it know that `+` operator is to be executed and\
    \ `operand[i]` is to be incremented?\n<|/ c |>\n<| c |>\nThe `switch` statement\
    \ will execute the code in the `case` statement that matches the value of the\
    \ `operator` array. For example, if the `operator` array has `+` as the only value,\
    \ then the `switch` statement will execute the code in the `case` statement that\
    \ matches `+`. So the `switch` statement will execute the code in the `case` statement\
    \ that matches `+` and the `result` variable will be incremented by `operand[i]`.\n\
    <|/ c |>\n<| c |>\nI understand that. But how does it know that `+` operator is\
    \ to be executed and `operand[i]` is to be incremented?\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\nI wrote a solution in Java that uses recursion to solve the problem. \n\
    <code>\npublic class Main {\n    public static void main(String[] args) {\n  \
    \      String[] operators = {\"+\", \"-\", \"*\", \"/\", \"**\"};\n        long[]\
    \ operands = {1, 2, 3, 4, 5};\n        long result = doAlgebra(operators, operands);\n\
    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkwfi0vew.d(54): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwfi0vew.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0g5s28o.d(137): Error: no identifier for declarator `long`\n/tmp/tmpf0g5s28o.d(137):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf0g5s28o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadeo06sz.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadeo06sz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+':\n                result = result + operand[i];\n      \
    \          break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw new RuntimeException(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm,arrays,math |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd_zt2nge.d(48): Error: unterminated character constant\n/tmp/tmpd_zt2nge.d(48):
    Error: unterminated character constant\n/tmp/tmpd_zt2nge.d(49): Error: found `result`
    when expecting `:`\n/tmp/tmpd_zt2nge.d(49): Error: found `=` instead of statement\n/tmp/tmpd_zt2nge.d(51):
    Error: unterminated character constant\n/tmp/tmpd_zt2nge.d(51): Error: unterminated
    character constant\n/tmp/tmpd_zt2nge.d(52): Error: found `result` when expecting
    `:`\n/tmp/tmpd_zt2nge.d(52): Error: found `=` instead of statement\n/tmp/tmpd_zt2nge.d(61):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd_zt2nge.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Sq = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhifnr39.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpmhifnr39.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmhifnr39.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for addition, subtraction, multiplication and division but doesn't work for\
    \ exponentiation. Can you please help me with that?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include exponentiation as well. Hope this helps.\n<|/ c |>\n<|\
    \ c |>\nThanks a lot. Your code works perfectly for addition, subtraction, multiplication\
    \ and division but doesn't work for exponentiation. Can you please help me with\
    \ that?\n<|/ c |>\n<| c |>\nI edited my answer to include exponentiation as well.\
    \ Hope this helps.\n<|/ c |>\n<| c |>\nThanks a lot. Your code works perfectly\
    \ for addition, subtraction, multiplication and division but doesn't work for\
    \ exponentiation. Can you please help me with that?\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Scanner;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8b9uceyn.d(50): Error: unterminated character constant\n/tmp/tmp8b9uceyn.d(50):
    Error: unterminated character constant\n/tmp/tmp8b9uceyn.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmp8b9uceyn.d(52): Error: expression expected, not `*=`\n/tmp/tmp8b9uceyn.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmp8b9uceyn.d(56):
    Error: declaration expected, not `return`\n/tmp/tmp8b9uceyn.d(57): Error: unrecognized
    declaration\n/tmp/tmp8b9uceyn.d(61): Error: unterminated character constant\n/tmp/tmp8b9uceyn.d(67):
    Error: unterminated character constant\n/tmp/tmp8b9uceyn.d(73): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8b9uceyn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result **= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I already\
    \ tried this and I got an exception saying \"Invalid operator\" when I tried to\
    \ run it. I don't know why this happens.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a full working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your efforts, but I still get the same exception. Can you please tell me\
    \ what is the problem with my code?\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a full working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your efforts, but I still get the same exception. Can you please tell me what\
    \ is the problem with my code?\n<|/ c |>\n<| a tags=java,arrays |>\nI solved my\
    \ problem by changing the code like this:\n<code>\npublic class Main {\n    public\
    \ static void main(String[] args) {\n        String[] operator = {\"+\", \"-\"\
    , \"*\", \"/\", \"^\"};\n        long[] operand = {2, 3, 4, 5};\n        long\
    \ result = do_algebra(operator, operand);\n        System.out.println(result);\n\
    \    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjr_e6ky3.d(49): Error: expression expected, not `*=`\n/tmp/tmpjr_e6ky3.d(49):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpjr_e6ky3.d(58):
    Error: declaration expected, not `<`\n/tmp/tmpjr_e6ky3.d(61): Error: unterminated
    character constant\n/tmp/tmpjr_e6ky3.d(83): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmpjr_e6ky3.d(83): Error: no identifier for declarator
    `System`\n/tmp/tmpjr_e6ky3.d(83): Error: declaration expected, not `out`\n/tmp/tmpjr_e6ky3.d(84):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjr_e6ky3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length) \n    {\n        if(operator[i] == '+') \n        {\n\
    \            result += operand[i];\n        }\n        else if(operator[i] ==\
    \ '-') \n        {\n            result -= operand[i];\n        }\n        else\
    \ if(operator[i] == '*') \n        {\n            result *= operand[i];\n    \
    \    }\n        else if(operator[i] == '/') \n        {\n            result /=\
    \ operand[i];\n        }\n        else if(operator[i] == '//') \n        {\n \
    \           result /= operand[i];\n        }\n        else if(operator[i] == '**')\
    \ \n        {\n            result *= operand[i];\n        }\n        i++;\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays,math |>\n\
    <| a tags=java,algorithm,arrays,math |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppliieefk.d(51): Error: unterminated character constant\n/tmp/tmppliieefk.d(51):
    Error: unterminated character constant\n/tmp/tmppliieefk.d(52): Error: found `{`
    when expecting `)`\n/tmp/tmppliieefk.d(55): Error: found `else` without a corresponding
    `if`, `version` or `debug` statement\n/tmp/tmppliieefk.d(55): Error: unterminated
    character constant\n/tmp/tmppliieefk.d(55): Error: unterminated character constant\n/tmp/tmppliieefk.d(59):
    Error: no identifier for declarator `i`\n/tmp/tmppliieefk.d(59): Error: declaration
    expected, not `++`\n/tmp/tmppliieefk.d(60): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppliieefk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '//':\n            \
    \    result = result / operand[i];\n                break;\n            case '**':\n\
    \                result = result ** operand[i];\n                break;\n    \
    \        default:\n                throw new Exception(\"Invalid operator\");\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I'm sorry I didn't explain my question well. My question\
    \ was how to implement the algorithm to solve the problem I described. I don't\
    \ know how to use switch case to solve this problem. Can you give me some hints?\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that uses switch case.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ explain my question well. My question was how to implement the algorithm to\
    \ solve the problem I described. I don't know how to use switch case to solve\
    \ this problem. Can you give me some hints?\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that uses switch case. Hope it helps.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppto0bm63.d(47): Error: unterminated character constant\n/tmp/tmppto0bm63.d(47):
    Error: unterminated character constant\n/tmp/tmppto0bm63.d(48): Error: found `result`
    when expecting `:`\n/tmp/tmppto0bm63.d(48): Error: found `=` instead of statement\n/tmp/tmppto0bm63.d(50):
    Error: unterminated character constant\n/tmp/tmppto0bm63.d(50): Error: unterminated
    character constant\n/tmp/tmppto0bm63.d(51): Error: found `result` when expecting
    `:`\n/tmp/tmppto0bm63.d(51): Error: found `=` instead of statement\n/tmp/tmppto0bm63.d(59):
    Error: declaration expected, not `<`\n/tmp/tmppto0bm63.d(62): Error: unterminated
    character constant\n/tmp/tmppto0bm63.d(62): Error: unterminated character constant\n/tmp/tmppto0bm63.d(62):
    Error: unterminated character constant\n/tmp/tmppto0bm63.d(68): Error: unterminated
    character constant\n/tmp/tmppto0bm63.d(68): Error: unterminated character constant\n/tmp/tmppto0bm63.d(68):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppto0bm63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nI like your solution, but I\
    \ believe that your solution has some flaws. For example, `operator['+', '*',\
    \ '-']` will give `result = 2 + 3 * 4 - 5` instead of `result = 9`. Also, the\
    \ `while` loop will never terminate because `i < operator.length` will always\
    \ be true.\n<|/ c |>\n<| c |>\nI believe that your solution has some flaws. For\
    \ example, `operator['+', '*', '-']` will give `result = 2 + 3 * 4 - 5` instead\
    \ of `result = 9`. Also, the `while` loop will never terminate because `i < operator.length`\
    \ will always be true.\n<|/ c |>\n<| c |>\nI believe that your solution has some\
    \ flaws. For example, `operator['+', '*', '-']` will give `result = 2 + 3 * 4\
    \ - 5` instead of `result = 9`. Also, the `while` loop will never terminate because\
    \ `i < operator.length` will always be true.\n<|/ c |>\n<| c |>\nI believe that\
    \ your solution has some flaws. For example, `operator['+', '*', '-']` will give\
    \ `result = 2 + 3 * 4 - 5` instead of `result = 9`. Also, the `while` loop will\
    \ never terminate because `i < operator.length` will always be true.\n<|/ c |>\n\
    <| c |>\nI believe that your solution has some flaws. For example, `operator['+',\
    \ '*', '-']` will give `result = 2 + 3 * 4 - 5` instead of `result = 9`. Also,\
    \ the `while` loop will never terminate because `i < operator.length` will always\
    \ be true.\n<|/ c |>\n<| a tags=java,algorithm |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.List;\nimport java.util.stream.Collectors;\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp21w9gyh6.d(40): Error: unterminated character constant\n/tmp/tmp21w9gyh6.d(40):
    Error: unterminated character constant\n/tmp/tmp21w9gyh6.d(40): Error: found `result`
    when expecting `:`\n/tmp/tmp21w9gyh6.d(40): Error: found `/=` instead of statement\n/tmp/tmp21w9gyh6.d(41):
    Error: unterminated character constant\n/tmp/tmp21w9gyh6.d(41): Error: unterminated
    character constant\n/tmp/tmp21w9gyh6.d(41): Error: found `result` when expecting
    `:`\n/tmp/tmp21w9gyh6.d(41): Error: found `*=` instead of statement\n/tmp/tmp21w9gyh6.d(48):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp21w9gyh6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; result *=\
    \ operand[i]; break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThis doesn't work. Try `operator['+',\
    \ '*', '-']` and `array = [2, 3, 4, 5]`. You will get `result = -25` instead of\
    \ `result = 9`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `operator['+',\
    \ '*', '-']` and `array = [2, 3, 4, 5]` gives `result = 9`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. `operator['+', '*', '-']` and `array = [2, 3, 4,\
    \ 5]` gives `result = 9`\n<|/ c |>\n<| c |>\nI tested it and it works fine. `operator['+',\
    \ '*', '-']` and `array = [2, 3, 4, 5]` gives `result = 9`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. `operator['+', '*', '-']` and `array = [2, 3, 4,\
    \ 5]` gives `result = 9`\n<|/ c |>\n<| a dscore=1 |>\nThe simplest way is to convert\
    \ your array to a string and use String.Replace to replace each operator with\
    \ its corresponding value.\n<code>\nstring result = string.Join(\"\", array.Select(x\
    \ => x.ToString()).Replace(\"+\", \" + \").Replace(\"-\", \" - \").Replace(\"\
    *\", \" * \").Replace(\"/\", \" / \").Replace(\"//\", \"// \").Replace(\"**\"\
    , \" ** \"));\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThis doesn't\
    \ work. Try `operator['+', '*', '-']` and `array = [2, 3, 4, 5]`. You will get\
    \ `result = -25` instead of `result = 9`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. `operator['+', '*', '-']` and `array = [2, 3, 4, 5]` gives `result\
    \ = 9`\n<|/ c |>\n<| c |>\nI \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl7xkhit8.d(41): Error: unterminated character constant\n/tmp/tmpl7xkhit8.d(41):
    Error: unterminated character constant\n/tmp/tmpl7xkhit8.d(41): Error: found `result`
    when expecting `:`\n/tmp/tmpl7xkhit8.d(41): Error: found `/=` instead of statement\n/tmp/tmpl7xkhit8.d(42):
    Error: unterminated character constant\n/tmp/tmpl7xkhit8.d(42): Error: unterminated
    character constant\n/tmp/tmpl7xkhit8.d(42): Error: found `result` when expecting
    `:`\n/tmp/tmpl7xkhit8.d(42): Error: found `*=` instead of statement\n/tmp/tmpl7xkhit8.d(50):
    Error: declaration expected, not `<`\n/tmp/tmpl7xkhit8.d(53): Error: unterminated
    character constant\n/tmp/tmpl7xkhit8.d(71): Error: declaration expected, not `<`\n/tmp/tmpl7xkhit8.d(74):
    Error: unterminated character constant\n/tmp/tmpl7xkhit8.d(85): Error: declaration
    expected, not `assert`\n/tmp/tmpl7xkhit8.d(86): Error: declaration expected, not
    `assert`\n/tmp/tmpl7xkhit8.d(87): Error: declaration expected, not `assert`\n/tmp/tmpl7xkhit8.d(88):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7xkhit8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result = result + operand[i];\n                break;\n            case '-':\n\
    \                result = result - operand[i];\n                break;\n     \
    \       case '*':\n                result = result * operand[i];\n           \
    \     break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new RuntimeException(\"Invalid operator\");\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm,math\
    \ |>\n<| c |>\nThis solution works perfectly for me. Thank you very much!\n<|/\
    \ c |>\n<| a tags=java,arrays,algorithm,math |>\n<code>\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0mcps9e.d(46): Error: unterminated character constant\n/tmp/tmpq0mcps9e.d(46):
    Error: unterminated character constant\n/tmp/tmpq0mcps9e.d(47): Error: found `result`
    when expecting `:`\n/tmp/tmpq0mcps9e.d(47): Error: found `=` instead of statement\n/tmp/tmpq0mcps9e.d(49):
    Error: unterminated character constant\n/tmp/tmpq0mcps9e.d(49): Error: unterminated
    character constant\n/tmp/tmpq0mcps9e.d(50): Error: found `result` when expecting
    `:`\n/tmp/tmpq0mcps9e.d(50): Error: found `=` instead of statement\n/tmp/tmpq0mcps9e.d(58):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq0mcps9e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\
    \ result += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '^': result %= operand[i]; break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nI like this solution, though it requires you to write your own\
    \ `operator` array. Also, `operator` array is missing `^` operator. `^` operator\
    \ is `%` operator.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've added\
    \ the missing operator and fixed the missing `^` operator.\n<|/ c |>\n<| c |>\n\
    I like this solution, but I wonder how it performs compared to other solutions\
    \ posted here?\n<|/ c |>\n<| c |>\nI tested this solution and it works fine. However\
    \ I wonder how it performs compared to other solutions posted here?\n<|/ c |>\n\
    <| c |>\nI tested this solution and it works fine. However I wonder how it performs\
    \ compared to other solutions posted here?\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] operator = new\
    \ int[] { '+', '-', '*', '/', '^' };\n    int[] operand = new int[] {2, 3, 4,\
    \ 5};\n    System.out.println(do_algebra(operator, operand));\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv422r6iz.d(45): Error: declaration expected, not `<`\n/tmp/tmpv422r6iz.d(51):
    Error: unterminated character constant\n/tmp/tmpv422r6iz.d(66): Error: semicolon
    expected, not `{`\n/tmp/tmpv422r6iz.d(66): Error: declaration expected, not `{`\n/tmp/tmpv422r6iz.d(67):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpv422r6iz.d(67):
    Error: no identifier for declarator `System`\n/tmp/tmpv422r6iz.d(67): Error: declaration
    expected, not `out`\n/tmp/tmpv422r6iz.d(68): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv422r6iz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        if(operator[i] == '+')\n        {\n\
    \            result += operand[i];\n        }\n        else if(operator[i] ==\
    \ '-')\n        {\n            result -= operand[i];\n        }\n        else\
    \ if(operator[i] == '*')\n        {\n            result *= operand[i];\n     \
    \   }\n        else if(operator[i] == '/')\n        {\n            result /= operand[i];\n\
    \        }\n        else if(operator[i] == '**')\n        {\n            result\
    \ *= operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,math |>\n<| c |>\nI like your solution. Very elegant.\
    \ Thank you!\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `operator['+',\
    \ '*', '-']` and `array = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`\n<|/ c |>\n\
    <| c |>\nI added a note about negative numbers. I didn't want to complicate the\
    \ answer too much, but I thought it would be helpful to point out that negative\
    \ numbers are a special case.\n<|/ c |>\n<| c |>\nI added a note about negative\
    \ numbers. I didn't want to complicate the answer too much, but I thought it would\
    \ be helpful to point out that negative numbers are a special case.\n<|/ c |>\n\
    <| c |>\nI added a note about negative numbers. I didn't want to complicate the\
    \ answer too much, but I thought it would be helpful to point out that negative\
    \ numbers are a special case.\n<|/ c |>\n<| a |>\nI came up with a solution that\
    \ is very similar to what was suggested by Jonathan Wendelin, but I thought I'd\
    \ post it anyway. \nThe idea is to first convert the operands to strings and then\
    \ use String.Split to separate the operators from the operands. Then for each\
    \ operator, use String.Split to separate the operands from the operators. Then\
    \ for each operand, use String.Split to separate the operators from the operands.\
    \ \nThe code below is written in C#, but I hope it helps.\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Text.RegularExpressions;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxv5s6uz.d(50): Error: unterminated character constant\n/tmp/tmppxv5s6uz.d(50):
    Error: unterminated character constant\n/tmp/tmppxv5s6uz.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmppxv5s6uz.d(56): Error: declaration expected, not `return`\n/tmp/tmppxv5s6uz.d(57):
    Error: unrecognized declaration\n/tmp/tmppxv5s6uz.d(64): Error: unterminated character
    constant\n/tmp/tmppxv5s6uz.d(67): Error: unterminated character constant\n/tmp/tmppxv5s6uz.d(70):
    Error: unterminated character constant\n/tmp/tmppxv5s6uz.d(73): Error: unterminated
    character constant\n/tmp/tmppxv5s6uz.d(76): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxv5s6uz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0g5s28o.d(137): Error: no identifier for declarator `long`\n/tmp/tmpf0g5s28o.d(137):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf0g5s28o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    \n \
    \   while(i < operator.length && j < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result += operand[j];\n   \
    \             break;\n            case '-':\n                result -= operand[j];\n\
    \                break;\n            case '*':\n                result *= operand[j];\n\
    \                break;\n            case '/':\n                result /= operand[j];\n\
    \                break;\n            case '^':\n                result **= operand[j];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n        j++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain how you did this and why you did it this way? I understand\
    \ what you are doing but I don't understand how you did it.\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how you did this and why you did it\
    \ this way? I understand what you are doing but I don't understand how you did\
    \ it.\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how you did\
    \ this and why you did it this way? I understand what you are doing but I don't\
    \ understand how you did it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic class\
    \ Main {\n    public static void main(String[] args) {\n        String[] operators\
    \ = {\"+\", \"-\", \"*\", \"/\", \"^\"};\n        long[] operands = {1, 2, 3,\
    \ 4, 5};\n        long result = do_algebra(operators, operands);\n        System.out.println(result);\n\
    \    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaftl3l0w.d(51): Error: expression expected, not `*=`\n/tmp/tmpaftl3l0w.d(51):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpaftl3l0w.d(61):
    Error: declaration expected, not `<`\n/tmp/tmpaftl3l0w.d(64): Error: unterminated
    character constant\n/tmp/tmpaftl3l0w.d(70): Error: unterminated character constant\n/tmp/tmpaftl3l0w.d(76):
    Error: unterminated character constant\n/tmp/tmpaftl3l0w.d(85): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmpaftl3l0w.d(85): Error: no identifier
    for declarator `System`\n/tmp/tmpaftl3l0w.d(85): Error: declaration expected,
    not `out`\n/tmp/tmpaftl3l0w.d(86): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpaftl3l0w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. Unfortunately,\
    \ I cannot use any external libraries. I must implement it myself.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that does not use any external\
    \ libraries.\n<|/ c |>\n<| c |>\nThank you for your answer. Unfortunately, I cannot\
    \ use any external libraries. I must implement it myself.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that does not use any external libraries.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. Unfortunately, I cannot use any\
    \ external libraries. I must implement it myself.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\nI believe this can be done using recursion.\n<code>\npublic int doMath(String\
    \ operator, int[] operand) {\n    int result = 0;\n    switch(operator) {\n  \
    \      case \"+\":\n            result = doMath(operator, operand);\n        \
    \    break;\n        case \"-\":\n            result = doMath(operator, operand);\n\
    \            break;\n        case \"*\":\n            result = doMath(operator,\
    \ operand);\n            break;\n        case \"/\":\n            result = doMath(operator,\
    \ operand);\n            break;\n        case \"^\":\n            result = doMath(operator,\
    \ operand);\n            break;\n        default:\n            throw new Exception(\"\
    Invalid operator\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu585go36.d(58): Error: declaration expected, not `<`\n/tmp/tmpu585go36.d(80):
    Error: declaration expected, not `switch`\n/tmp/tmpu585go36.d(83): Error: declaration
    expected, not `break`\n/tmp/tmpu585go36.d(84): Error: declaration expected, not
    `case`\n/tmp/tmpu585go36.d(86): Error: declaration expected, not `break`\n/tmp/tmpu585go36.d(87):
    Error: declaration expected, not `case`\n/tmp/tmpu585go36.d(89): Error: declaration
    expected, not `break`\n/tmp/tmpu585go36.d(90): Error: declaration expected, not
    `case`\n/tmp/tmpu585go36.d(92): Error: declaration expected, not `break`\n/tmp/tmpu585go36.d(93):
    Error: declaration expected, not `case`\n/tmp/tmpu585go36.d(95): Error: declaration
    expected, not `break`\n/tmp/tmpu585go36.d(96): Error: declaration expected, not
    `default`\n/tmp/tmpu585go36.d(98): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu585go36.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long operator_index\
    \ = 0;\n    long operator_index2 = 0;\n    long operator_index3 = 0;\n    long\
    \ operator_index4 = 0;\n    long operator_index5 = 0;\n    long operator_index6\
    \ = 0;\n    long operator_index7 = 0;\n    long operator_index8 = 0;\n    long\
    \ operator_index9 = 0;\n    long operator_index10 = 0;\n    long operator_index11\
    \ = 0;\n    long operator_index12 = 0;\n    long operator_index13 = 0;\n    long\
    \ operator_index14 = 0;\n    long operator_index15 = 0;\n    long operator_index16\
    \ = 0;\n    long operator_index17 = 0;\n    long operator_index18 = 0;\n    long\
    \ operator_index19 = 0;\n    long operator_index20 = 0;\n    long operator_index21\
    \ = 0;\n    long operator_index22 = 0;\n    long operator_index23 = 0;\n    long\
    \ operator_index24 = 0;\n    long operator_index25 = 0;\n    long operator_index26\
    \ = 0;\n    long operator_index27 = 0;\n    long operator_index28 = 0;\n    long\
    \ operator_index29 = 0;\n    long operator_index30 = 0;\n    long operator_index31\
    \ = 0;\n    long operator_index32 = 0;\n    long operator_index33 = 0;\n    long\
    \ operator_index34 = 0;\n    long operator_index35 = 0;\n    long operator_index36\
    \ = 0;\n    long operator_index37 = 0;\n    long operator_index38 = 0;\n    long\
    \ operator_index39 = 0;\n    long operator_index40 = 0;\n    long operator_index41\
    \ = 0;\n    long operator_index42 = 0;\n    long operator_index43 = 0;\n    long\
    \ operator_index44 = 0;\n    long operator_index45 = 0;\n    long operator_index46\
    \ = 0;\n    long operator_index47 = 0;\n    long operator_index48 = 0;\n    long\
    \ operator_index49 = 0;\n    long operator_index50 = 0;\n    long operator_index51\
    \ = 0;\n    long operator_index52 = 0;\n    long operator_index53 = 0;\n    long\
    \ operator_index54 = 0;\n    long operator_index55 = 0;\n    long operator_index56\
    \ = 0;\n    long operator_index57 = 0;\n    long operator_index58 = 0;\n    long\
    \ operator_index59 = 0;\n    long operator_index60 = 0;\n    long operator_index61\
    \ = 0;\n    long operator_index62 = 0;\n    long operator_index63 = 0;\n    long\
    \ operator_index64 = 0;\n    long operator_index65 = 0;\n    long operator_index66\
    \ = 0;\n    long operator_index67 = 0;\n    long operator_index68 = 0;\n    long\
    \ operator_index69 = 0;\n    long operator_index70 = 0;\n    long operator_index71\
    \ = 0;\n    long operator_index72 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v_km31o.d(105): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8v_km31o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n\
    \    long C2 = 0;\n    long D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long\
    \ G2 = 0;\n    long H2 = 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 =\
    \ 0;\n    long L2 = 0;\n    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n\
    \    long P2 = 0;\n    long Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long\
    \ T2 = 0;\n    long U2 = 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 =\
    \ 0;\n    long Y2 = 0;\n    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n\
    \    long C3 = 0;\n    long D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long\
    \ G3 = 0;\n    long H3 = 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 =\
    \ 0;\n    long L3 = 0;\n    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n\
    \    long P3 = 0;\n    long Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long\
    \ T3 = 0;\n    long U3 = 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 =\
    \ 0;\n    long Y3 = 0;\n    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n\
    \    long C4 = 0;\n    long D4 = 0;\n    long E\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpoyhjw_.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmpqpoyhjw_.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqpoyhjw_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+': result += operand[i];\
    \ break;\n            case '-': result -= operand[i]; break;\n            case\
    \ '*': result *= operand[i]; break;\n            case '/': result /= operand[i];\
    \ break;\n            case '^': result %= operand[i]; break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. Your code is working but it is very slow for large arrays. I tested\
    \ it on arrays of size 10^6 and it took about 5 minutes to complete.\n<|/ c |>\n\
    <| c |>\nI tested it on arrays of size 10^6 and it took about 5 minutes to complete.\n\
    <|/ c |>\n<| c |>\nI tested it on arrays of size 10^6 and it took about 5 minutes\
    \ to complete.\n<|/ c |>\n<| c |>\nI tested it on arrays of size 10^6 and it took\
    \ about 5 minutes to complete.\n<|/ c |>\n<| c |>\nI tested it on arrays of size\
    \ 10^6 and it took about 5 minutes to complete.\n<|/ c |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp545r6dib.d(42): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp545r6dib.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n\
    \    long C2 = 0;\n    long D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long\
    \ G2 = 0;\n    long H2 = 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 =\
    \ 0;\n    long L2 = 0;\n    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n\
    \    long P2 = 0;\n    long Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long\
    \ T2 = 0;\n    long U2 = 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 =\
    \ 0;\n    long Y2 = 0;\n    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n\
    \    long C3 = 0;\n    long D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long\
    \ G3 = 0;\n    long H3 = 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 =\
    \ 0;\n    long L3 = 0;\n    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n\
    \    long P3 = 0;\n    long Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long\
    \ T3 = 0;\n    long U3 = 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 =\
    \ 0;\n    long Y3 = 0;\n    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n\
    \    long C4 = 0;\n    long D4 = 0;\n    long E4\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsuxjlj8c.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmpsuxjlj8c.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsuxjlj8c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Sq = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhifnr39.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpmhifnr39.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmhifnr39.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op1, op2;\n    long op1val, op2val;\n\
    \    long op1sign, op2sign;\n    long op1index, op2index;\n    long op1signbit,\
    \ op2signbit;\n    long op1bit, op2bit;\n    long op1bitmask, op2bitmask;\n  \
    \  long op1bitshift, op2bitshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n    long op1bitmaskshift, op2bitmaskshift;\n\
    \    long op1bitmaskshift, op2bitmaskshift;\n\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegkquyvs.d(68): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegkquyvs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long\
    \ D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 =\
    \ 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n\
    \    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long\
    \ Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 =\
    \ 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n\
    \    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long\
    \ D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 =\
    \ 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n\
    \    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long\
    \ Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 =\
    \ 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n\
    \    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long\
    \ D4 = 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rd8iz9m.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmp7rd8iz9m.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7rd8iz9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n   \
    \ \n    for(i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '^':\n                temp = result ^ operand[i];\n               \
    \ break;\n            default:\n                temp = result;\n             \
    \   break;\n        }\n        result = temp;\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis code works perfectly fine. Thanks a lot. Can\
    \ you please explain me the logic behind this code?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot for\
    \ the explanation. Now I understood how it works.\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic class Main {\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28_5z6d5.d(61): Error: declaration expected, not `<`\n/tmp/tmp28_5z6d5.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmp28_5z6d5.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmp28_5z6d5.d(81): Error: declaration expected, not
    `assert`\n/tmp/tmp28_5z6d5.d(82): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp28_5z6d5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n\
    \    long C2 = 0;\n    long D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long\
    \ G2 = 0;\n    long H2 = 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 =\
    \ 0;\n    long L2 = 0;\n    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n\
    \    long P2 = 0;\n    long Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long\
    \ T2 = 0;\n    long U2 = 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 =\
    \ 0;\n    long Y2 = 0;\n    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n\
    \    long C3 = 0;\n    long D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long\
    \ G3 = 0;\n    long H3 = 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 =\
    \ 0;\n    long L3 = 0;\n    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n\
    \    long P3 = 0;\n    long Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long\
    \ T3 = 0;\n    long U3 = 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 =\
    \ 0;\n    long Y3 = 0;\n    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n\
    \    long C4 = 0;\n    long D4 = 0;\n    long E\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpoyhjw_.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmpqpoyhjw_.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqpoyhjw_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n\
    \    long Cc = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long\
    \ Gg = 0;\n    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk =\
    \ 0;\n    long Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n\
    \    long Pp = 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long\
    \ Tt = 0;\n    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx =\
    \ 0;\n    long Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n\
    \    long Ccc = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n\
    \    long Ggg = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n\
    \    long Kkk = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n\
    \    long Ooo = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n\
    \    long Sss = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpis751kja.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpis751kja.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpis751kja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `operator` should be an array of `char`s,\
    \ not `String`s. `operand` should be an array of `long`s, not `int`s. `operator`\
    \ should be `['+', '-', '*', '/', '^']`, not `['+', '*', '-', '/', '^']`.\n<|/\
    \ c |>\n<| c |>\nI fixed the code now. Thanks for pointing out my mistake.\n<|/\
    \ c |>\n<| a |>\n<code>\npublic class Main {\n    public static void main(String[]\
    \ args) {\n        String[] operators = {\"+\", \"-\", \"*\", \"/\", \"^\"};\n\
    \        int[] operands = {2, 3, 4, 5};\n        System.out.println(do_algebra(operators,\
    \ operands));\n    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp46joq76w.d(54): Error: declaration expected, not `<`\n/tmp/tmp46joq76w.d(57):
    Error: unterminated character constant\n/tmp/tmp46joq76w.d(68): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmp46joq76w.d(68): Error: no identifier
    for declarator `System`\n/tmp/tmp46joq76w.d(68): Error: declaration expected,
    not `out`\n/tmp/tmp46joq76w.d(69): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp46joq76w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result = result + operand[i];\n          \
    \      break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '^':\n\
    \                result = result ^ operand[i];\n                break;\n     \
    \       default:\n                throw new Exception(\"Invalid operator\");\n\
    \        }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| a tags=java,algorithm |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6du2g6v6.d(59): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6du2g6v6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n   \
    \ \n    for(i = 0; i < operator.length; i++) \n    {\n        switch(operator[i])\
    \ \n        {\n            case \"+\": \n                temp = result + operand[i];\n\
    \                break;\n            case \"-\": \n                temp = result\
    \ - operand[i];\n                break;\n            case \"*\": \n          \
    \      temp = result * operand[i];\n                break;\n            case \"\
    /\": \n                temp = result / operand[i];\n                break;\n \
    \           case \"//\": \n                temp = result / operand[i];\n     \
    \           break;\n            case \"**\": \n                temp = result **\
    \ operand[i];\n                break;\n            default: \n               \
    \ temp = result;\n                break;\n        }\n        result = temp;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n\
    <| c |>\nThank you so much! This helped me a lot!\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9cmjofod.d(64): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cmjofod.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThe OP asked for C#, not Java.\n\
    <|/ c |>\n<| c |>\nThe OP asked for C#, not Java.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the question. My bad.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. My bad.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ My bad.\n<|/ c |>\n<| a dscore=2 |>\nI believe that your problem is that you\
    \ are trying to do too much at once. \nThe first thing you should do is break\
    \ down your problem into smaller pieces. \nFor example, let's say that you have\
    \ an array of numbers and you want to find the sum of all numbers in the array.\
    \ \n<code>\nvar numbers = new int[] { 1, 2, 3, 4, 5 };\nvar sum = numbers.Sum();\n\
    </code>\nNow let's say that you have an array of numbers and you want to find\
    \ the product of all numbers in the array. \n<code>\nvar numbers = new int[] {\
    \ 1, 2, 3, 4, 5 };\nvar product = numbers.Product();\n</code>\nNow let's say that\
    \ you have an array of numbers and you want to find the average of all numbers\
    \ in the array. \n<code>\nvar numbers = new int[] { 1, 2, 3, 4, 5 };\nvar average\
    \ = numbers.Average();\n</code>\nNow let's say that you have an array of numbers\
    \ and you want to find the sum of all numbers in the array that are greater than\
    \ or equal to 10. \n<code>\nvar numbers = new int[] { 1, 2, 3, 4, 5 };\nvar greaterThanTen\
    \ = numbers.Where(n => n > 10).Sum();\n</code>\nNow let's say that you have an\
    \ array of numbers and you want to find the sum of all numbers in the array that\
    \ are less than or equal to 10. \n<code>\nvar numbers = new int[] { 1, 2, 3, 4,\
    \ 5 };\nvar lessThanTen = numbers.Where(n => n < 10).Sum();\n</code>\nNow let's\
    \ say that you have an array of numbers and you want to \nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vtqic0x.d(59): Error: declaration expected, not `<`\n/tmp/tmp3vtqic0x.d(79):
    Error: unterminated character constant\n/tmp/tmp3vtqic0x.d(83): Error: declaration
    expected, not `<`\n/tmp/tmp3vtqic0x.d(84): Error: unterminated character constant\n/tmp/tmp3vtqic0x.d(88):
    Error: declaration expected, not `<`\n/tmp/tmp3vtqic0x.d(89): Error: unterminated
    character constant\n/tmp/tmp3vtqic0x.d(93): Error: declaration expected, not `<`\n/tmp/tmp3vtqic0x.d(94):
    Error: unterminated character constant\n/tmp/tmp3vtqic0x.d(98): Error: declaration
    expected, not `<`\n/tmp/tmp3vtqic0x.d(99): Error: unterminated character constant\n/tmp/tmp3vtqic0x.d(103):
    Error: declaration expected, not `<`\n/tmp/tmp3vtqic0x.d(104): Error: unterminated
    character constant\n/tmp/tmp3vtqic0x.d(109): Error: declaration expected, not
    `assert`\n/tmp/tmp3vtqic0x.d(110): Error: declaration expected, not `assert`\n/tmp/tmp3vtqic0x.d(111):
    Error: declaration expected, not `assert`\n/tmp/tmp3vtqic0x.d(112): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vtqic0x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result *= operand[i];\n\
    \                result *= operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n     \
    \   i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nThanks for your answer! I tested it and it works fine. However\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ it to me?\n<|/ c |>\n<| c |>\nI added some explanation to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks a lot! I understand it now!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Scanner;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0tg7at7.d(48): Error: unterminated character constant\n/tmp/tmpf0tg7at7.d(48):
    Error: unterminated character constant\n/tmp/tmpf0tg7at7.d(49): Error: found `result`
    when expecting `:`\n/tmp/tmpf0tg7at7.d(49): Error: found `*=` instead of statement\n/tmp/tmpf0tg7at7.d(59):
    Error: declaration expected, not `<`\n/tmp/tmpf0tg7at7.d(62): Error: unterminated
    character constant\n/tmp/tmpf0tg7at7.d(62): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0tg7at7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\
    \ result += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '^': result ^= operand[i]; break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis answer\
    \ would be better if you explained what was wrong with OP's code and how you fixed\
    \ it.\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm going to try it out and let you\
    \ know if it works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7nv8ykpr.d(45): Error: declaration expected, not `<`\n/tmp/tmp7nv8ykpr.d(48):
    Error: unterminated character constant\n/tmp/tmp7nv8ykpr.d(54): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7nv8ykpr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '//':\n            \
    \    result = result / operand[i];\n                break;\n            case '**':\n\
    \                result = result ** operand[i];\n                break;\n    \
    \        default:\n                throw new Exception(\"Invalid operator\");\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any library other than std.\n\
    <|/ c |>\n<| c |>\nI added a solution that does not use any library other than\
    \ std.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ library other than std.\n<|/ c |>\n<| c |>\nI added a solution that does not\
    \ use any library other than std.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    #include <iterator>\n#include <sstream>\n#include <cmath>\n#include <cstdlib>\n\
    #include <ctime>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp634_5jun.d(48): Error: unterminated character constant\n/tmp/tmp634_5jun.d(48):
    Error: unterminated character constant\n/tmp/tmp634_5jun.d(49): Error: found `result`
    when expecting `:`\n/tmp/tmp634_5jun.d(49): Error: found `=` instead of statement\n/tmp/tmp634_5jun.d(51):
    Error: unterminated character constant\n/tmp/tmp634_5jun.d(51): Error: unterminated
    character constant\n/tmp/tmp634_5jun.d(52): Error: found `result` when expecting
    `:`\n/tmp/tmp634_5jun.d(52): Error: found `=` instead of statement\n/tmp/tmp634_5jun.d(60):
    Error: declaration expected, not `<`\n/tmp/tmp634_5jun.d(89): Error: declaration
    expected, not `assert`\n/tmp/tmp634_5jun.d(90): Error: declaration expected, not
    `assert`\n/tmp/tmp634_5jun.d(91): Error: declaration expected, not `assert`\n/tmp/tmp634_5jun.d(92):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp634_5jun.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n\
    \    long Cc = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long\
    \ Gg = 0;\n    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk =\
    \ 0;\n    long Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n\
    \    long Pp = 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long\
    \ Tt = 0;\n    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx =\
    \ 0;\n    long Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n\
    \    long Ccc = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n\
    \    long Ggg = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n\
    \    long Kkk = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n\
    \    long Ooo = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n\
    \    long Sss = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpis751kja.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpis751kja.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpis751kja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n\
    \    long Cc = 0;\n    long Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long\
    \ Gg = 0;\n    long Hh = 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk =\
    \ 0;\n    long Ll = 0;\n    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n\
    \    long Pp = 0;\n    long Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long\
    \ Tt = 0;\n    long Uu = 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx =\
    \ 0;\n    long Yy = 0;\n    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n\
    \    long Ccc = 0;\n    long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n\
    \    long Ggg = 0;\n    long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n\
    \    long Kkk = 0;\n    long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n\
    \    long Ooo = 0;\n    long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n\
    \    long Sss = 0;\n    long Ttt = 0;\n    long Uuu = 0;\n    long Vvv\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpis751kja.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpis751kja.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpis751kja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for addition but fails for subtraction and multiplication.\
    \ Can you please help me with that?\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include subtraction and multiplication. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks again for your answer. Your code works perfectly for addition but fails\
    \ for subtraction and multiplication. Can you please help me with that?\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include subtraction and multiplication. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks again for your answer. Your code works\
    \ perfectly for addition but fails for subtraction and multiplication. Can you\
    \ please help me with that?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp950ooq2l.d(56): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp950ooq2l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `operator = ['+', '-',\
    \ '*']` and `operand = [2, 3, 4, 5]`. You will get `result = -25` instead of `result\
    \ = 9`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. The only thing\
    \ I changed was the variable names. I used `operator` and `operand` instead of\
    \ `op` and `o`.\n<|/ c |>\n<| c |>\nYes, it works. I tested it before posting.\
    \ The only thing I changed was the variable names. I used `operator` and `operand`\
    \ instead of `op` and `o`.\n<|/ c |>\n<| c |>\nI tested it before posting. The\
    \ only thing I changed was the variable names. I used `operator` and `operand`\
    \ instead of `op` and `o`.\n<|/ c |>\n<| c |>\nI tested it before posting. The\
    \ only thing I changed was the variable names. I used `operator` and `operand`\
    \ instead of `op` and `o`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Scanner;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzo4wyu2_.d(56): Error: declaration expected, not `<`\n/tmp/tmpzo4wyu2_.d(59):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzo4wyu2_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result += operand[i];\
    \ break;\n            case \"-\": result -= operand[i]; break;\n            case\
    \ \"*\": result *= operand[i]; break;\n            case \"/\": result /= operand[i];\
    \ break;\n            case \"//\": result /= operand[i]; break;\n            case\
    \ \"**\": result *= operand[i]; break;\n            default: return -1;\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n\
    <| c |>\nI like your solution, but I believe it would be better to use a switch\
    \ statement instead of an if statement. Also, I would recommend using a switch\
    \ statement instead of an if statement for readability purposes.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. Switch statement is better than if statement. Thanks\
    \ for your suggestion.\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ it would be better to use a switch statement instead of an if statement. Also,\
    \ I would recommend using a switch statement instead of an if statement for readability\
    \ purposes.\n<|/ c |>\n<| c |>\nI agree with you. Switch statement is better than\
    \ if statement. Thanks for your suggestion.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I believe it would be better to use a switch statement instead of an if\
    \ statement. Also, I would recommend using a switch statement instead of an if\
    \ statement for readability purposes.\n<|/ c |>\n<| a tags=java,algorithm |>\n\
    <code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6f1rvpl3.d(44): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f1rvpl3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op = 0;\n    long op2 = 0;\n  \
    \  long op3 = 0;\n    long op4 = 0;\n    long op5 = 0;\n    long op6 = 0;\n  \
    \  long op7 = 0;\n    long op8 = 0;\n    long op9 = 0;\n    long op10 = 0;\n \
    \   long op11 = 0;\n    long op12 = 0;\n    long op13 = 0;\n    long op14 = 0;\n\
    \    long op15 = 0;\n    long op16 = 0;\n    long op17 = 0;\n    long op18 = 0;\n\
    \    long op19 = 0;\n    long op20 = 0;\n    long op21 = 0;\n    long op22 = 0;\n\
    \    long op23 = 0;\n    long op24 = 0;\n    long op25 = 0;\n    long op26 = 0;\n\
    \    long op27 = 0;\n    long op28 = 0;\n    long op29 = 0;\n    long op30 = 0;\n\
    \    long op31 = 0;\n    long op32 = 0;\n    long op33 = 0;\n    long op34 = 0;\n\
    \    long op35 = 0;\n    long op36 = 0;\n    long op37 = 0;\n    long op38 = 0;\n\
    \    long op39 = 0;\n    long op40 = 0;\n    long op41 = 0;\n    long op42 = 0;\n\
    \    long op43 = 0;\n    long op44 = 0;\n    long op45 = 0;\n    long op46 = 0;\n\
    \    long op47 = 0;\n    long op48 = 0;\n    long op49 = 0;\n    long op50 = 0;\n\
    \    long op51 = 0;\n    long op52 = 0;\n    long op53 = 0;\n    long op54 = 0;\n\
    \    long op55 = 0;\n    long op56 = 0;\n    long op57 = 0;\n    long op58 = 0;\n\
    \    long op59 = 0;\n    long op60 = 0;\n    long op61 = 0;\n    long op62 = 0;\n\
    \    long op63 = 0;\n    long op64 = 0;\n    long op65 = 0;\n    long op66 = 0;\n\
    \    long op67 = 0;\n    long op68 = 0;\n    long op69 = 0;\n    long op70 = 0;\n\
    \    long op71 = 0;\n    long op72 = 0;\n    long op73 = 0;\n    long op74 = 0;\n\
    \    long op75 = 0;\n    long op76 = 0;\n    long op77 = 0;\n    long op78 = 0;\n\
    \    long op79 = 0;\n    long op80 = 0;\n    long op81 = 0;\n    long op82 = 0;\n\
    \    long op83 = 0;\n    long op84 = 0;\n    long op85 = 0;\n\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzzln2fz.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzzln2fz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result *= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer! I really appreciate it! But\
    \ I still have a question, how do I implement the code you gave me into my code?\
    \ I really don't know where to put it or what to do. I'm sorry if I'm asking too\
    \ much, but I'm really new to coding and I'm just trying to learn as much as I\
    \ can. Thanks again!\n<|/ c |>\n<| c |>\nI added the code to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgu25dsqe.d(59): Error: declaration expected, not `<`\n/tmp/tmpgu25dsqe.d(62):
    Error: unterminated character constant\n/tmp/tmpgu25dsqe.d(62): Error: unterminated
    character constant\n/tmp/tmpgu25dsqe.d(62): Error: unterminated character constant\n/tmp/tmpgu25dsqe.d(62):
    Error: unterminated character constant\n/tmp/tmpgu25dsqe.d(62): Error: unterminated
    character constant\n/tmp/tmpgu25dsqe.d(73): Error: declaration expected, not `assert`\n/tmp/tmpgu25dsqe.d(74):
    Error: declaration expected, not `assert`\n/tmp/tmpgu25dsqe.d(75): Error: declaration
    expected, not `assert`\n/tmp/tmpgu25dsqe.d(76): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu25dsqe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkpsuqc_.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkpsuqc_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkpsuqc_.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkpsuqc_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result = result + operand[i];\n        }\n        else if(operator[i]\
    \ == '-')\n        {\n            result = result - operand[i];\n        }\n \
    \       else if(operator[i] == '*')\n        {\n            result = result *\
    \ operand[i];\n        }\n        else if(operator[i] == '/')\n        {\n   \
    \         result = result / operand[i];\n        }\n        else if(operator[i]\
    \ == '**')\n        {\n            result = result ** operand[i];\n        }\n\
    \        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI appreciate your efforts, but this doesn't solve the problem. As I said\
    \ in the question, I am looking for a way to solve this problem without using\
    \ any libraries. I already have a working solution, but I wanted to see if I could\
    \ do it without using any libraries.\n<|/ c |>\n<| c |>\nI understand. My solution\
    \ uses only basic libraries. I do not know of any way to solve this without using\
    \ libraries. I hope someone else can provide a better solution.\n<|/ c |>\n<|\
    \ c |>\nI appreciate your efforts, but this doesn't solve the problem. As I said\
    \ in the question, I am looking for a way to solve this problem without using\
    \ any libraries. I already have a working solution, but I wanted to see if I could\
    \ do it without using any libraries.\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but this doesn't solve the problem. As I said in the question, I am looking\
    \ for a way to solve this problem without using any libraries. I already have\
    \ a working solution, but I wanted to see if I could do it without using any libraries.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't solve the problem.\
    \ As I said in the question, I am looking for a way to solve this problem without\
    \ using any libraries. I already have a working solution, but I wanted to see\
    \ if I could do it without using any libraries.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic class Main {\n    public static void main(String[] args) {\n  \
    \      String[] operators = {\"+\", \"-\", \"*\", \"/\", \"**\"};\n        String[]\
    \ operands = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n        long result = doAlgebra(operators,\
    \ operands);\n        System.out.println(result);\n    }\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw84p7jtx.d(51): Error: unterminated character constant\n/tmp/tmpw84p7jtx.d(51):
    Error: unterminated character constant\n/tmp/tmpw84p7jtx.d(52): Error: found `{`
    when expecting `)`\n/tmp/tmpw84p7jtx.d(57): Error: declaration expected, not `return`\n/tmp/tmpw84p7jtx.d(58):
    Error: unrecognized declaration\n/tmp/tmpw84p7jtx.d(62): Error: unterminated character
    constant\n/tmp/tmpw84p7jtx.d(68): Error: unterminated character constant\n/tmp/tmpw84p7jtx.d(71):
    Error: unterminated character constant\n/tmp/tmpw84p7jtx.d(74): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw84p7jtx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long\
    \ D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 =\
    \ 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n\
    \    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long\
    \ Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 =\
    \ 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n\
    \    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long\
    \ D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 =\
    \ 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n\
    \    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long\
    \ Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 =\
    \ 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n\
    \    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long\
    \ D4 = 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rd8iz9m.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmp7rd8iz9m.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7rd8iz9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    for(int i = 0; i\
    \ < operator.length; i++)\n    {\n        switch(operator[i])\n        {\n   \
    \         case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '^': result\
    \ ^= operand[i]; break;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution works perfectly\
    \ for addition and subtraction, but for multiplication and division it gives the\
    \ wrong result. For example, for multiplication the result is `0` instead of `2`.\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add `break` statements in switch\
    \ statement. Now it works perfectly for multiplication and division.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your solution works perfectly for addition and\
    \ subtraction, but for multiplication and division it gives the wrong result.\
    \ For example, for multiplication the result is `0` instead of `2`.\n<|/ c |>\n\
    <| c |>\nI edited my answer, I forgot to add `break` statements in switch statement.\
    \ Now it works perfectly for multiplication and division.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Scanner;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprllbb2my.d(45): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprllbb2my.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I cannot use\
    \ any libraries. I must implement it myself.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses no libraries.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but I\
    \ cannot use any libraries. I must implement it myself.\n<|/ c |>\n<| c |>\nI\
    \ added a solution that uses no libraries.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but I cannot use any libraries. I must implement it myself.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjic_hbp3.d(58): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjic_hbp3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result += operand[i];\n                break;\n            case '-':\n     \
    \           result -= operand[i];\n                break;\n            case '*':\n\
    \                result *= operand[i];\n                break;\n            case\
    \ '/':\n                result /= operand[i];\n                break;\n      \
    \      case '^':\n                result ^= operand[i];\n                break;\n\
    \            default:\n                throw new RuntimeException(\"Invalid operator\"\
    );\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays,math\
    \ |>\n<| c |>\nI like your solution, but I believe it would be better to use a\
    \ switch statement instead of an if statement. Also, why not use an ArrayList\
    \ instead of an array?\n<|/ c |>\n<| c |>\nI agree with you. Using switch statement\
    \ is better. ArrayList is better than array because ArrayList is dynamic and array\
    \ is static. ArrayList is more flexible and easier to use. ArrayList is also more\
    \ efficient than array because ArrayList is implemented using array internally.\n\
    <|/ c |>\n<| c |>\nI agree with you. Using switch statement is better. ArrayList\
    \ is better than array because ArrayList is dynamic and array is static. ArrayList\
    \ is more flexible and easier to use. ArrayList is also more efficient than array\
    \ because ArrayList is implemented using array internally.\n<|/ c |>\n<| c |>\n\
    I agree with you. Using switch statement is better. ArrayList is better than array\
    \ because ArrayList is dynamic and array is static. ArrayList is more flexible\
    \ and easier to use. ArrayList is also more efficient than array because ArrayList\
    \ is implemented using array internally.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ Using switch statement is better. ArrayList is better than array because ArrayList\
    \ is dynamic and array is static. ArrayList is more flexible and easier to use.\
    \ ArrayList is also more efficient than array because ArrayList is implemented\
    \ using array internally.\n<|/ c |>\n<| a tags=java,algorithm,arrays,math |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4i9pjlqr.d(55): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4i9pjlqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkpsuqc_.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkpsuqc_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThank you so much for your help. I really appreciate it.\
    \ I tried your code and it worked perfectly. Thank you so much!\n<|/ c |>\n<|\
    \ c |>\nYou're welcome. I'm glad it helped. Feel free to accept the answer if\
    \ it helped you. :)\n<|/ c |>\n<| c |>\nI did but it said I had to wait a couple\
    \ of minutes before accepting it. Thanks again!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpii11m5m7.d(57): Error: declaration expected, not `<`\n/tmp/tmpii11m5m7.d(63):
    Error: unterminated character constant\n/tmp/tmpii11m5m7.d(63): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpii11m5m7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op = 0;\n    long op2 = 0;\n  \
    \  long op3 = 0;\n    long op4 = 0;\n    long op5 = 0;\n    long op6 = 0;\n  \
    \  long op7 = 0;\n    long op8 = 0;\n    long op9 = 0;\n    long op10 = 0;\n \
    \   long op11 = 0;\n    long op12 = 0;\n    long op13 = 0;\n    long op14 = 0;\n\
    \    long op15 = 0;\n    long op16 = 0;\n    long op17 = 0;\n    long op18 = 0;\n\
    \    long op19 = 0;\n    long op20 = 0;\n    long op21 = 0;\n    long op22 = 0;\n\
    \    long op23 = 0;\n    long op24 = 0;\n    long op25 = 0;\n    long op26 = 0;\n\
    \    long op27 = 0;\n    long op28 = 0;\n    long op29 = 0;\n    long op30 = 0;\n\
    \    long op31 = 0;\n    long op32 = 0;\n    long op33 = 0;\n    long op34 = 0;\n\
    \    long op35 = 0;\n    long op36 = 0;\n    long op37 = 0;\n    long op38 = 0;\n\
    \    long op39 = 0;\n    long op40 = 0;\n    long op41 = 0;\n    long op42 = 0;\n\
    \    long op43 = 0;\n    long op44 = 0;\n    long op45 = 0;\n    long op46 = 0;\n\
    \    long op47 = 0;\n    long op48 = 0;\n    long op49 = 0;\n    long op50 = 0;\n\
    \    long op51 = 0;\n    long op52 = 0;\n    long op53 = 0;\n    long op54 = 0;\n\
    \    long op55 = 0;\n    long op56 = 0;\n    long op57 = 0;\n    long op58 = 0;\n\
    \    long op59 = 0;\n    long op60 = 0;\n    long op61 = 0;\n    long op62 = 0;\n\
    \    long op63 = 0;\n    long op64 = 0;\n    long op65 = 0;\n    long op66 = 0;\n\
    \    long op67 = 0;\n    long op68 = 0;\n    long op69 = 0;\n    long op70 = 0;\n\
    \    long op71 = 0;\n    long op72 = 0;\n    long op73 = 0;\n    long op74 = 0;\n\
    \    long op75 = 0;\n    long op76 = 0;\n    long op77 = 0;\n    long op78 = 0;\n\
    \    long op79 = 0;\n    long op80 = 0;\n    long op81 = 0;\n    long op82 = 0;\n\
    \    long op83 = 0;\n    long op84 = 0;\n    long op85 = 0;\n\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzzln2fz.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzzln2fz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n   \
    \ \n    for(i = 0; i < operator.length; i++) \n    {\n        switch(operator[i])\
    \ \n        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '**':\n                temp = result ** operand[i];\n             \
    \   break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        result = temp;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThanks for the answer.\
    \ I am not allowed to use any libraries. I did try your solution and it works.\
    \ But I still don't understand why my solution didn't work. Could you please explain\
    \ why my solution didn't work?\n<|/ c |>\n<| c |>\nI added a detailed explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nThanks for the detailed explanation. I understand\
    \ it now. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Main {\n    public\
    \ static void main(String[] args) {\n        String[] operators = {\"+\", \"-\"\
    , \"*\", \"/\", \"**\"};\n        long[] operands = {1, 2, 3, 4, 5};\n       \
    \ long result = doAlgebra(operators, operands);\n        System.out.println(result);\n\
    \    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplx2_ku30.d(50): Error: unterminated character constant\n/tmp/tmplx2_ku30.d(50):
    Error: unterminated character constant\n/tmp/tmplx2_ku30.d(51): Error: found `temp`
    when expecting `:`\n/tmp/tmplx2_ku30.d(51): Error: found `=` instead of statement\n/tmp/tmplx2_ku30.d(60):
    Error: declaration expected, not `<`\n/tmp/tmplx2_ku30.d(63): Error: unterminated
    character constant\n/tmp/tmplx2_ku30.d(63): Error: unterminated character constant\n/tmp/tmplx2_ku30.d(63):
    Error: unterminated character constant\n/tmp/tmplx2_ku30.d(78): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmplx2_ku30.d(78): Error: no identifier
    for declarator `System`\n/tmp/tmplx2_ku30.d(78): Error: declaration expected,
    not `out`\n/tmp/tmplx2_ku30.d(79): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplx2_ku30.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long\
    \ D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 =\
    \ 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n\
    \    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long\
    \ Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 =\
    \ 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n\
    \    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long\
    \ D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 =\
    \ 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n\
    \    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long\
    \ Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 =\
    \ 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n\
    \    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long\
    \ D4 = 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rd8iz9m.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmp7rd8iz9m.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7rd8iz9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm,arrays |>\n<| c |>\nI like the idea of using recursion\
    \ to solve this problem. However I do not understand how this would work. Could\
    \ you please elaborate on how this would work?\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for the\
    \ solution! I understand it better now. However I do not understand why you use\
    \ recursion to solve this problem. Could you please explain why you use recursion\
    \ to solve this problem?\n<|/ c |>\n<| c |>\nRecursion is used to solve problems\
    \ such as this one. Recursion can be thought of as a way to solve a problem by\
    \ calling a function again and again until a base case is reached. Recursion can\
    \ be very useful in many different situations. In this case, the base case is\
    \ when the number of operands is less than or equal to the number of operators.\
    \ When the number of operands is less than or equal to the number of operators,\
    \ we simply return the value of the operand. Otherwise, we call the function again\
    \ with the next operator and operand.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer. Hope it helps.\n<|/ c |>\n<| a tags=java,algorithm,arrays\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuk1s1el9.d(51): Error: unterminated character constant\n/tmp/tmpuk1s1el9.d(51):
    Error: unterminated character constant\n/tmp/tmpuk1s1el9.d(52): Error: found `{`
    when expecting `)`\n/tmp/tmpuk1s1el9.d(53): Error: expression expected, not `*=`\n/tmp/tmpuk1s1el9.d(53):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpuk1s1el9.d(57):
    Error: declaration expected, not `return`\n/tmp/tmpuk1s1el9.d(58): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk1s1el9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work. `operator` has\
    \ `+` and `-` but `operand` has `*` and `/`. So `operator` should be `+` and `operand`\
    \ should be `*`.\n<|/ c |>\n<| c |>\nI fixed the code. Now it works.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `operator` has `+` and `-` but `operand` has `*` and\
    \ `/`. So `operator` should be `+` and `operand` should be `*`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ `operator` has `+` and `-` but `operand` has `*` and `/`. So `operator` should\
    \ be `+` and `operand` should be `*`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn9miyvry.d(50): Error: unterminated character constant\n/tmp/tmpn9miyvry.d(50):
    Error: unterminated character constant\n/tmp/tmpn9miyvry.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmpn9miyvry.d(52): Error: expression expected, not `*=`\n/tmp/tmpn9miyvry.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpn9miyvry.d(56):
    Error: declaration expected, not `return`\n/tmp/tmpn9miyvry.d(57): Error: unrecognized
    declaration\n/tmp/tmpn9miyvry.d(61): Error: unterminated character constant\n/tmp/tmpn9miyvry.d(67):
    Error: unterminated character constant\n/tmp/tmpn9miyvry.d(73): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9miyvry.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm,arrays |>\n<| c |>\nThank you for your answer. I am\
    \ not allowed to use any library functions. I should implement it myself.\n<|/\
    \ c |>\n<| c |>\nI added the code I wrote to solve the problem. Thank you for\
    \ your help.\n<|/ c |>\n<| c |>\nI added the code I wrote to solve the problem.\
    \ Thank you for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2yr2oym8.d(50): Error: unterminated character constant\n/tmp/tmp2yr2oym8.d(50):
    Error: unterminated character constant\n/tmp/tmp2yr2oym8.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmp2yr2oym8.d(52): Error: expression expected, not `*=`\n/tmp/tmp2yr2oym8.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmp2yr2oym8.d(56):
    Error: declaration expected, not `return`\n/tmp/tmp2yr2oym8.d(57): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yr2oym8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long AA;\n\
    \    long AB;\n    long AC;\n    long AD;\n    long AE;\n    long AF;\n    long\
    \ AG;\n    long AH;\n    long AI;\n    long AJ;\n    long AK;\n    long AL;\n\
    \    long AM;\n    long AN;\n    long AO;\n    long AP;\n    long AQ;\n    long\
    \ AR;\n    long AS;\n    long AT;\n    long AU;\n    long AV;\n    long AW;\n\
    \    long AX;\n    long AY;\n    long AZ;\n    long BA;\n    long BB;\n    long\
    \ BC;\n    long BD;\n    long BE;\n    long BF;\n    long BG;\n    long BH;\n\
    \    long BI;\n    long BJ;\n    long BK;\n    long BL;\n    long BM;\n    long\
    \ BN;\n    long BO;\n    long BP;\n    long BQ;\n    long BR;\n    long BS;\n\
    \    long BT;\n    long BU;\n    long BV;\n    long BW;\n    long BX;\n    long\
    \ BY;\n    long BZ;\n    long CA;\n    long CB;\n    long CC;\n    long CD;\n\
    \    long CE;\n    long CF;\n    long \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx5_a30xl.d(134): Error: no identifier for declarator `long`\n/tmp/tmpx5_a30xl.d(134):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpx5_a30xl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = operand[i] - operand[i-1];\n\
    \                result += temp;\n                break;\n            case '-':\n\
    \                temp = operand[i] - operand[i-1];\n                result -=\
    \ temp;\n                break;\n            case '*':\n                temp =\
    \ operand[i] * operand[i-1];\n                result *= temp;\n              \
    \  break;\n            case '/':\n                temp = operand[i] / operand[i-1];\n\
    \                result /= temp;\n                break;\n            case '^':\n\
    \                temp = operand[i] ** operand[i-1];\n                result **=\
    \ temp;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid operator\");\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays,math |>\n<| c |>\nThis\
    \ doesn't seem to work. `operator` is `[\"+\", \"*\", \"+\"]` and `operand` is\
    \ `[2, 3, 4]`. `result` is `0`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ `operator` is `[\"+\", \"*\", \"+\"]` and `operand` is `[2, 3, 4]`. `result`\
    \ is `9`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `operator` is `[\"\
    +\", \"*\", \"+\"]` and `operand` is `[2, 3, 4]`. `result` is `9`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. `operator` is `[\"+\", \"*\", \"+\"]`\
    \ and `operand` is `[2, 3, 4]`. `result` is `9`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. `operator` is `[\"+\", \"*\", \"+\"]` and `operand` is\
    \ `[2, 3, 4]`. `result` is `9`.\n<|/ c |>\n<| a tags=java,algorithm,arrays,math\
    \ |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmperil3xv8.d(56): Error: expression expected, not `*=`\n/tmp/tmperil3xv8.d(56):
    Error: found `temp` when expecting `;` following statement\n/tmp/tmperil3xv8.d(56):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmperil3xv8.d(65):
    Error: declaration expected, not `<`\n/tmp/tmperil3xv8.d(68): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperil3xv8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code, and why you think your solution would help.\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Thanks for your feedback.\n\
    <|/ c |>\n<| c |>\nI didn't downvote either, but I think it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and why you think your solution would\
    \ help. I suspect it's because you didn't explain what was wrong with OP's code,\
    \ and why you think your solution would help. I suspect it's because you didn't\
    \ explain what was wrong with OP's code, and \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_y5_7in.d(56): Error: declaration expected, not `<`\n/tmp/tmp4_y5_7in.d(59):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(59): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(59): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(59):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65):
    Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated
    character constant\n/tmp/tmp4_y5_7in.d(65): Error: unterminated character constant\n/tmp/tmp4_y5_7in.d(65):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4_y5_7in.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operand.length)\n    {\n        switch(operator[i])\n      \
    \  {\n            case '+':\n                temp = result + operand[i];\n   \
    \             break;\n            case '-':\n                temp = result - operand[i];\n\
    \                break;\n            case '*':\n                temp = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   temp = result / operand[i];\n                break;\n            case '^':\n\
    \                temp = result ^ operand[i];\n                break;\n       \
    \     default:\n                temp = result;\n                break;\n     \
    \   }\n        result = temp;\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/18747374)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He is asking how to implement the algebra\
    \ operations. He has already written the code to do that. He is asking how to\
    \ implement the algebra operations. He has already written the code to do that.\
    \ He is asking how to implement the algebra operations. He has already written\
    \ the code to do that. He is asking how to implement the algebra operations. He\
    \ has already written the code to do that. He is asking how to implement the algebra\
    \ operations. He has already written the code to do that. He is asking how to\
    \ implement the algebra operations. He has already written the code to do that.\
    \ He is asking how to implement the algebra operations. He has already written\
    \ the code to do that. He is asking how to implement the algebra operations. He\
    \ has already written the code to do that. He is asking how to implement the algebra\
    \ operations. He has already written the code to do that. He is asking how to\
    \ implement the algebra operations. He has already written the code to do that.\
    \ He is asking how to implement the algebra operations. He has already written\
    \ the code to do that. He is asking how to implement the algebra operations. He\
    \ has already written the code to do that. He is asking how to implement the algebra\
    \ operations. He has already written the code to do that. He is asking how to\
    \ implement the algebra operations. He has already written the code to do that.\
    \ \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw68zmw9o.d(62): Error: declaration expected, not `<`\n/tmp/tmpw68zmw9o.d(73):
    Error: declaration expected, not `assert`\n/tmp/tmpw68zmw9o.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmpw68zmw9o.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmpw68zmw9o.d(76): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw68zmw9o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length) \n    {\n        switch(operator[i])\
    \ \n        {\n            case '+': \n                temp = operand[i] + operand[i+1];\n\
    \                result += temp;\n                i += 2;\n                break;\n\
    \            case '-': \n                temp = operand[i] - operand[i+1];\n \
    \               result += temp;\n                i += 2;\n                break;\n\
    \            case '*': \n                temp = operand[i] * operand[i+1];\n \
    \               result += temp;\n                i += 2;\n                break;\n\
    \            case '/': \n                temp = operand[i] / operand[i+1];\n \
    \               result += temp;\n                i += 2;\n                break;\n\
    \            case '//': \n                temp = operand[i] / operand[i+1];\n\
    \                result += temp;\n                i += 2;\n                break;\n\
    \            case '**': \n                temp = operand[i] * operand[i+1];\n\
    \                result += temp;\n                i += 2;\n                break;\n\
    \            default: \n                result += operand[i];\n              \
    \  i += 1;\n                break;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm,arrays |>\n<| c |>\nI appreciate your effort,\
    \ but this doesn't answer the question. OP asked for help with his code, not for\
    \ someone to write it for him.\n<|/ c |>\n<| c |>\nI appreciate your effort, but\
    \ this doesn't answer the question. OP asked for help with his code, not for someone\
    \ to write it for him.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this\
    \ doesn't answer the question. OP asked for help with his code, not for someone\
    \ to write it for him.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this\
    \ doesn't answer the question. OP asked for help with his code, not for someone\
    \ to write it for him.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this\
    \ doesn't answer the question. OP asked for help with his code, not for someone\
    \ to write it for him.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpipty6358.d(58): Error: unterminated character constant\n/tmp/tmpipty6358.d(58):
    Error: unterminated character constant\n/tmp/tmpipty6358.d(59): Error: found `temp`
    when expecting `:`\n/tmp/tmpipty6358.d(59): Error: found `=` instead of statement\n/tmp/tmpipty6358.d(63):
    Error: unterminated character constant\n/tmp/tmpipty6358.d(63): Error: unterminated
    character constant\n/tmp/tmpipty6358.d(64): Error: found `temp` when expecting
    `:`\n/tmp/tmpipty6358.d(64): Error: found `=` instead of statement\n/tmp/tmpipty6358.d(76):
    Error: declaration expected, not `<`\n/tmp/tmpipty6358.d(79): Error: unterminated
    character constant\n/tmp/tmpipty6358.d(82): Error: unterminated character constant\n/tmp/tmpipty6358.d(85):
    Error: unterminated character constant\n/tmp/tmpipty6358.d(88): Error: unterminated
    character constant\n/tmp/tmpipty6358.d(91): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipty6358.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\
    \ result += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n            default: return\
    \ -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis is not an answer to the question. OP wants to know how to\
    \ implement this in C++.\n<|/ c |>\n<| c |>\nI believe this answers the question.\
    \ OP wants to know how to implement this in C++.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement this in C++, not how to implement this in C++.\n<|/ c |>\n\
    <| c |>\nI believe this answers the question. OP wants to know how to implement\
    \ this in C++.\n<|/ c |>\n<| c |>\nI believe this answers the question. OP wants\
    \ to know how to implement this in C++.\n<|/ c |>\n<| a tags=arrays,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprqojnzel.d(40): Error: unterminated character constant\n/tmp/tmprqojnzel.d(40):
    Error: unterminated character constant\n/tmp/tmprqojnzel.d(40): Error: found `result`
    when expecting `:`\n/tmp/tmprqojnzel.d(40): Error: found `/=` instead of statement\n/tmp/tmprqojnzel.d(41):
    Error: unterminated character constant\n/tmp/tmprqojnzel.d(41): Error: unterminated
    character constant\n/tmp/tmprqojnzel.d(41): Error: found `result` when expecting
    `:`\n/tmp/tmprqojnzel.d(41): Error: found `*=` instead of statement\n/tmp/tmprqojnzel.d(47):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprqojnzel.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c#,algorithm,math |>\n<| c |>\nThanks for the answer. I am not allowed\
    \ to use any libraries. I did try your solution and it works but it is too slow.\
    \ I am looking for something that can run faster.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a faster solution. Hope it helps!\n<|/ c |>\n<| c |>\n\
    Thanks for the answer. I am not allowed to use any libraries. I did try your solution\
    \ and it works but it is too slow. I am looking for something that can run faster.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a faster solution. Hope it helps!\n\
    <|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to use any libraries.\
    \ I did try your solution and it works but it is too slow. I am looking for something\
    \ that can run faster.\n<|/ c |>\n<| a tags=c#,algorithm,math |>\nI wrote a C#\
    \ program to solve this problem. \n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt_8ae0n_.d(59): Error: declaration expected, not `<`\n/tmp/tmpt_8ae0n_.d(80):
    Error: semicolon expected, not `.`\n/tmp/tmpt_8ae0n_.d(80): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpt_8ae0n_.d(81): Error: semicolon
    expected, not `.`\n/tmp/tmpt_8ae0n_.d(81): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpt_8ae0n_.d(82): Error: semicolon expected, not `.`\n/tmp/tmpt_8ae0n_.d(82):
    Error: no identifier for declarator `.Text`\n/tmp/tmpt_8ae0n_.d(83): Error: semicolon
    expected, not `.`\n/tmp/tmpt_8ae0n_.d(83): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_8ae0n_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXXX = 0;\n    long YYYY = 0;\n    long ZZZZ = 0;\n    long AAAAA\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4pqft5c9.d(128): Error: semicolon expected, not `unittest`\n/tmp/tmp4pqft5c9.d(128):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4pqft5c9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm,arrays,math |>\n<| c |>\nThis doesn't work. Try it with\
    \ the example in the question.\n<|/ c |>\n<| c |>\nIt works, I tested it. The\
    \ problem was the wrong order of operands and operators.\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with the example in the question.\n<|/ c |>\n<|\
    \ c |>\nIt works. I tested it with the example in the question. Maybe you forgot\
    \ to copy the code from the answer?\n<|/ c |>\n<| c |>\nI copied the code from\
    \ the answer. Maybe you forgot to copy the code from the answer?\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjxev5wc.d(51): Error: unterminated character constant\n/tmp/tmppjxev5wc.d(51):
    Error: unterminated character constant\n/tmp/tmppjxev5wc.d(52): Error: found `{`
    when expecting `)`\n/tmp/tmppjxev5wc.d(53): Error: expression expected, not `*=`\n/tmp/tmppjxev5wc.d(53):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmppjxev5wc.d(57):
    Error: declaration expected, not `return`\n/tmp/tmppjxev5wc.d(58): Error: unrecognized
    declaration\n/tmp/tmppjxev5wc.d(62): Error: unterminated character constant\n/tmp/tmppjxev5wc.d(68):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppjxev5wc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    for(i = 0; i <\
    \ operator.length; i++)\n    {\n        if(operator[i] == '+')\n        {\n  \
    \          result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nI appreciate your effort, but this doesn't answer the question.\
    \ OP wants to know how to implement the algorithm and how to implement the arrays.\
    \ Your answer doesn't explain how to implement the arrays. Also, your answer doesn't\
    \ explain how to implement the algorithm.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ effort, but this doesn't answer the question. OP wants to know how to implement\
    \ the algorithm and how to implement the arrays. Your answer doesn't explain how\
    \ to implement the arrays. Also, your answer doesn't explain how to implement\
    \ the algorithm.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this doesn't\
    \ answer the question. OP wants to know how to implement the algorithm and how\
    \ to implement the arrays. Your answer doesn't explain how to implement the arrays.\
    \ Also, your answer doesn't explain how to implement the algorithm.\n<|/ c |>\n\
    <| c |>\nI appreciate your effort, but this doesn't answer the question. OP wants\
    \ to know how to implement the algorithm and how to implement the arrays. Your\
    \ answer doesn't explain how to implement the arrays. Also, your answer doesn't\
    \ explain how to implement the algorithm.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ effort, but this doesn't answer the question. OP wants to know how to implement\
    \ the algorithm and how to implement the arrays. Your answer doesn't explain how\
    \ to implement the arrays. Also, your answer doesn't explain how to implement\
    \ the algorithm.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic\
    \ class Main {\n    public static void main(String[] args) {\n        int[] operators\
    \ = new int[] { '+', '-', '*', '/', '**' };\n        int[] operands = new int[]\
    \ {2, 3, 4, 5};\n        System.out.println(do_algebra(operators, operands));\n\
    \    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_0x7646.d(51): Error: unterminated character constant\n/tmp/tmp1_0x7646.d(51):
    Error: unterminated character constant\n/tmp/tmp1_0x7646.d(52): Error: found `{`
    when expecting `)`\n/tmp/tmp1_0x7646.d(53): Error: expression expected, not `*=`\n/tmp/tmp1_0x7646.d(53):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmp1_0x7646.d(56):
    Error: declaration expected, not `return`\n/tmp/tmp1_0x7646.d(57): Error: unrecognized
    declaration\n/tmp/tmp1_0x7646.d(61): Error: unterminated character constant\n/tmp/tmp1_0x7646.d(61):
    Error: unterminated character constant\n/tmp/tmp1_0x7646.d(61): Error: unterminated
    character constant\n/tmp/tmp1_0x7646.d(64): Error: unterminated character constant\n/tmp/tmp1_0x7646.d(64):
    Error: unterminated character constant\n/tmp/tmp1_0x7646.d(64): Error: unterminated
    character constant\n/tmp/tmp1_0x7646.d(67): Error: unterminated character constant\n/tmp/tmp1_0x7646.d(67):
    Error: unterminated character constant\n/tmp/tmp1_0x7646.d(67): Error: unterminated
    character constant\n/tmp/tmp1_0x7646.d(70): Error: unterminated character constant\n/tmp/tmp1_0x7646.d(70):
    Error: unterminated character constant\n/tmp/tmp1_0x7646.d(70): Error: unterminated
    character constant\n/tmp/tmp1_0x7646.d(73): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_0x7646.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    \n    for (i = 0; i < operator.length;\
    \ i++) \n    {\n        switch (operator[i]) \n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try it out\
    \ and let you know how it goes.\n<|/ c |>\n<| c |>\nI implemented your solution\
    \ and it works great! Thank you so much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9gdhs2dt.d(56): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gdhs2dt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    \n \
    \   while(i < operator.length && j < operand.length)\n    {\n        if(operator[i]\
    \ == operator[j])\n        {\n            switch(operator[i])\n            {\n\
    \                case '+':\n                    result += operand[j];\n      \
    \              break;\n                case '-':\n                    result -=\
    \ operand[j];\n                    break;\n                case '*':\n       \
    \             result *= operand[j];\n                    break;\n            \
    \    case '/':\n                    result /= operand[j];\n                  \
    \  break;\n                case '^':\n                    result ^= operand[j];\n\
    \                    break;\n            }\n            i++;\n            j++;\n\
    \        }\n        else if(operator[i] < operator[j])\n        {\n          \
    \  i++;\n        }\n        else\n        {\n            j++;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis\
    \ solution does not work if the operator array is `[\"+\", \"*\", \"+\"]`\n<|/\
    \ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n<|\
    \ a tags=java,algorithm |>\n<code>\npublic static void main(String[] args) {\n\
    \    String[] operators = {\"+\", \"-\", \"*\", \"/\", \"^\"};\n    long[] operands\
    \ = {1, 2, 3, 4, 5};\n    System.out.println(do_algebra(operators, operands));\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3a1ka9k.d(70): Error: declaration expected, not `<`\n/tmp/tmpg3a1ka9k.d(83):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpg3a1ka9k.d(83):
    Error: no identifier for declarator `System`\n/tmp/tmpg3a1ka9k.d(83): Error: declaration
    expected, not `out`\n/tmp/tmpg3a1ka9k.d(84): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3a1ka9k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case \"+\"\
    : result += operand[i]; break;\n            case \"-\": result -= operand[i];\
    \ break;\n            case \"*\": result *= operand[i]; break;\n            case\
    \ \"//\": result /= operand[i]; break;\n            case \"**\": result *= operand[i];\
    \ result *= operand[i]; break;\n            default: throw new Exception(\"Invalid\
    \ operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nI like this solution, however it would be better to use a switch\
    \ statement instead of an if statement. Also the switch statement should be `switch(operator[i])`\
    \ instead of `switch(operator)[i]`.\n<|/ c |>\n<| c |>\nThanks for your comment.\
    \ I updated my answer to reflect your suggestions.\n<|/ c |>\n<| c |>\nI like\
    \ the idea of using switch statements. However, I do not think it is possible\
    \ to do so without using an if statement. Since you cannot use switch statements\
    \ to compare strings. I believe that if statements are the only way to compare\
    \ strings. I could be wrong, though.\n<|/ c |>\n<| c |>\nYes, you are right. Using\
    \ switch statements is the only way to compare strings. I updated my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I do not think it is possible to\
    \ do so without using an if statement. Since you cannot use switch statements\
    \ to compare strings. I believe that if statements are the only way to compare\
    \ strings. I could be wrong, though.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqjc1w0g.d(45): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqjc1w0g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n            default:\n                throw new RuntimeException(\"\
    Invalid operator: \" + operator[i]);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nI really\
    \ like this solution, however it seems like it would be a lot more efficient to\
    \ just use a single for loop and a switch statement to do the same thing.\n<|/\
    \ c |>\n<| c |>\nI agree, this is much more efficient. I'll update my answer with\
    \ that solution.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that\
    \ uses only one for loop and a switch statement.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer with a solution that uses only one for loop and a switch statement.\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote this in C#, since I didn't have Java on my\
    \ machine, but I believe this should work:\n<code>\npublic long Evaluate(string[]\
    \ operators, long[] operands)\n{\n    long result = 0;\n    int i = 0;\n    while(i\
    \ < operators.Length && i < operands.Length - 1)\n    {\n        switch(operators[i])\n\
    \        {\n            case '+':\n                result += operands[i];\n  \
    \              break;\n            case '-':\n                result -= operands[i];\n\
    \                break;\n            case '*':\n                result *= operands[i];\n\
    \                break;\n            case '/':\n                result /= operands[i];\n\
    \                break;\n            case '^':\n                result %= operands[i];\n\
    \                break;\n            default:\n                throw new ArgumentException(\"\
    Invalid operator: \" + operators[i]);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nI believe\
    \ this would work, but I believe it would be more efficient to just use a for\
    \ loop and a switch statement to do the same thing.\n<|/ c |>\n<| c |>\nI believe\
    \ this would work, but I believe it would be more efficient to just use a for\
    \ loop and a switch statement to do the same thing.\n<|/ c |>\n<| a dscore=2 |>\n\
    I wrote this in Java, since I didn't \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuer8em5p.d(58): Error: declaration expected, not `<`\n/tmp/tmpuer8em5p.d(64):
    Error: unterminated character constant\n/tmp/tmpuer8em5p.d(73): Error: unterminated
    character constant\n/tmp/tmpuer8em5p.d(79): Error: declaration expected, not `while`\n/tmp/tmpuer8em5p.d(85):
    Error: declaration expected, not `break`\n/tmp/tmpuer8em5p.d(86): Error: declaration
    expected, not `case`\n/tmp/tmpuer8em5p.d(88): Error: declaration expected, not
    `break`\n/tmp/tmpuer8em5p.d(89): Error: declaration expected, not `case`\n/tmp/tmpuer8em5p.d(91):
    Error: declaration expected, not `break`\n/tmp/tmpuer8em5p.d(92): Error: declaration
    expected, not `case`\n/tmp/tmpuer8em5p.d(94): Error: declaration expected, not
    `break`\n/tmp/tmpuer8em5p.d(95): Error: declaration expected, not `case`\n/tmp/tmpuer8em5p.d(97):
    Error: declaration expected, not `break`\n/tmp/tmpuer8em5p.d(98): Error: declaration
    expected, not `default`\n/tmp/tmpuer8em5p.d(100): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuer8em5p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nThe question asks for an algorithm,\
    \ not an implementation. Your code does not implement the algorithm in the question.\n\
    <|/ c |>\n<| c |>\nThe question asks for an algorithm, not an implementation.\
    \ Your code does not implement the algorithm in the question.\n<|/ c |>\n<| c\
    \ |>\nThe question asks for an algorithm, not an implementation. Your code does\
    \ not implement the algorithm in the question.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm, not an implementation. Your code does not implement the\
    \ algorithm in the question.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm,\
    \ not an implementation. Your code does not implement the algorithm in the question.\n\
    <|/ c |>\n<| a tags=c#,algorithm,math |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph93x7nsc.d(59): Error: declaration expected, not `<`\n/tmp/tmph93x7nsc.d(79):
    Error: semicolon expected, not `.`\n/tmp/tmph93x7nsc.d(79): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmph93x7nsc.d(80): Error: semicolon
    expected, not `.`\n/tmp/tmph93x7nsc.d(80): Error: no identifier for declarator
    `.Linq`\n/tmp/tmph93x7nsc.d(81): Error: semicolon expected, not `.`\n/tmp/tmph93x7nsc.d(81):
    Error: no identifier for declarator `.Text`\n/tmp/tmph93x7nsc.d(82): Error: semicolon
    expected, not `.`\n/tmp/tmph93x7nsc.d(82): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph93x7nsc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Scanner;\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphskyky6i.d(57): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphskyky6i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0g5s28o.d(137): Error: no identifier for declarator `long`\n/tmp/tmpf0g5s28o.d(137):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf0g5s28o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\
    \ result += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '**': result *= operand[i]; break;\n            default: return\
    \ -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c#,algorithm,math |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi3tichn.d(39): Error: unterminated character constant\n/tmp/tmpwi3tichn.d(39):
    Error: unterminated character constant\n/tmp/tmpwi3tichn.d(39): Error: found `result`
    when expecting `:`\n/tmp/tmpwi3tichn.d(39): Error: found `/=` instead of statement\n/tmp/tmpwi3tichn.d(40):
    Error: unterminated character constant\n/tmp/tmpwi3tichn.d(40): Error: unterminated
    character constant\n/tmp/tmpwi3tichn.d(40): Error: found `result` when expecting
    `:`\n/tmp/tmpwi3tichn.d(40): Error: found `*=` instead of statement\n/tmp/tmpwi3tichn.d(46):
    Error: declaration expected, not `<`\n/tmp/tmpwi3tichn.d(51): Error: semicolon
    expected, not `.`\n/tmp/tmpwi3tichn.d(51): Error: no identifier for declarator
    `.Collections.Generic`\n/tmp/tmpwi3tichn.d(52): Error: semicolon expected, not
    `.`\n/tmp/tmpwi3tichn.d(52): Error: no identifier for declarator `.Linq`\n/tmp/tmpwi3tichn.d(53):
    Error: semicolon expected, not `.`\n/tmp/tmpwi3tichn.d(53): Error: no identifier
    for declarator `.Text`\n/tmp/tmpwi3tichn.d(54): Error: semicolon expected, not
    `.`\n/tmp/tmpwi3tichn.d(54): Error: no identifier for declarator `.Threading.Tasks`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi3tichn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n\
    \    long CC = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkpsuqc_.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkpsuqc_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n   \
    \ for(i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n \
    \       {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '^':\n                temp = result ^ operand[i];\n               \
    \ break;\n        }\n        result = temp;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm still trying to understand\
    \ your code. Can you please explain what is the purpose of \"int i = 0;\" ?\n\
    <|/ c |>\n<| c |>\nThe purpose of \"int i = 0;\" is just to keep track of the\
    \ current position in the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the array. Since you start at 0, the loop will run until\
    \ you reach the end of the \nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6zatsrzm.d(57): Error: declaration expected, not `<`\n/tmp/tmp6zatsrzm.d(60):
    Error: unterminated character constant\n/tmp/tmp6zatsrzm.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmp6zatsrzm.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmp6zatsrzm.d(70): Error: declaration expected, not `assert`\n/tmp/tmp6zatsrzm.d(71):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zatsrzm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result += operand[i];\
    \ break;\n            case \"-\": result -= operand[i]; break;\n            case\
    \ \"*\": result *= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; result *= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThank you so much for your\
    \ help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n\
    <|/ c |>\n<| a tags=java,algorithm |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ahqpme9.d(43): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ahqpme9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        if(operator[i] == '+')\n        {\n            result +=\
    \ operand[i];\n        }\n        else if(operator[i] == '-')\n        {\n   \
    \         result -= operand[i];\n        }\n        else if(operator[i] == '*')\n\
    \        {\n            result *= operand[i];\n        }\n        else if(operator[i]\
    \ == '/')\n        {\n            result /= operand[i];\n        }\n        else\
    \ if(operator[i] == '**')\n        {\n            result **= operand[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nThis code doesn't work. `operator` array is `['+', '-', '*', '/',\
    \ '**']` and `operand` array is `[2, 3, 4, 5]`. `result = 2 + 3 * 4 - 5` should\
    \ be `result = 9` but your code returns `result = -24`.\n<|/ c |>\n<| c |>\nThe\
    \ code works fine for me. Can you please give me the exact input you used?\n<|/\
    \ c |>\n<| c |>\nI used `operator = ['+', '-', '*', '/', '**']` and `operand =\
    \ [2, 3, 4, 5]`. `result = 2 + 3 * 4 - 5` should be `result = 9` but your code\
    \ returns `result = -24`.\n<|/ c |>\n<| c |>\nI used `operator = ['+', '-', '*',\
    \ '/', '**']` and `operand = [2, 3, 4, 5]`. `result = 2 + 3 * 4 - 5` should be\
    \ `result = 9` but your code returns `result = -24`.\n<|/ c |>\n<| c |>\nI used\
    \ `operator = ['+', '-', '*', '/', '**']` and `operand = [2, 3, 4, 5]`. `result\
    \ = 2 + 3 * 4 - 5` should be `result = 9` but your code returns `result = -24`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqkc3lhxo.d(49): Error: unterminated character constant\n/tmp/tmpqkc3lhxo.d(49):
    Error: unterminated character constant\n/tmp/tmpqkc3lhxo.d(50): Error: found `{`
    when expecting `)`\n/tmp/tmpqkc3lhxo.d(51): Error: expression expected, not `*=`\n/tmp/tmpqkc3lhxo.d(51):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpqkc3lhxo.d(54):
    Error: declaration expected, not `return`\n/tmp/tmpqkc3lhxo.d(55): Error: unrecognized
    declaration\n/tmp/tmpqkc3lhxo.d(59): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkc3lhxo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXXX = 0;\n    long YYYY = 0;\n    long ZZZZ = 0;\n    long AAAAA\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4pqft5c9.d(128): Error: semicolon expected, not `unittest`\n/tmp/tmp4pqft5c9.d(128):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4pqft5c9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    int i = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length) \n    {\n        switch(operator[i])\
    \ \n        {\n            case '+': \n                temp = result + operand[i];\n\
    \                break;\n            case '-': \n                temp = result\
    \ - operand[i];\n                break;\n            case '*': \n            \
    \    temp = result * operand[i];\n                break;\n            case '//':\
    \ \n                temp = result / operand[i];\n                break;\n    \
    \        case '**': \n                temp = result ** operand[i];\n         \
    \       break;\n            default: \n                temp = result;\n      \
    \          break;\n        }\n        \n        result = temp;\n        i++;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjnsacrwm.d(47): Error: unterminated character constant\n/tmp/tmpjnsacrwm.d(47):
    Error: unterminated character constant\n/tmp/tmpjnsacrwm.d(48): Error: found `temp`
    when expecting `:`\n/tmp/tmpjnsacrwm.d(48): Error: found `=` instead of statement\n/tmp/tmpjnsacrwm.d(50):
    Error: unterminated character constant\n/tmp/tmpjnsacrwm.d(50): Error: unterminated
    character constant\n/tmp/tmpjnsacrwm.d(51): Error: found `temp` when expecting
    `:`\n/tmp/tmpjnsacrwm.d(51): Error: found `=` instead of statement\n/tmp/tmpjnsacrwm.d(64):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjnsacrwm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+': result += operand[i]; break;\n            case\
    \ '-': result -= operand[i]; break;\n            case '*': result *= operand[i];\
    \ break;\n            case '/': result /= operand[i]; break;\n            case\
    \ '^': result ^= operand[i]; break;\n            default:\n                throw\
    \ new Exception(\"Invalid operator\");\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts,\
    \ but I already tried this and I got wrong results. I posted my own answer below\
    \ to explain my mistakes.\n<|/ c |>\n<| a tags=c#,algorithm,math |>\nI finally\
    \ found the solution to my problem. Thanks to everyone who helped me out. I appreciate\
    \ your efforts.\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx2ycr948.d(50): Error: declaration expected, not `<`\n/tmp/tmpx2ycr948.d(59):
    Error: semicolon expected, not `.`\n/tmp/tmpx2ycr948.d(59): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpx2ycr948.d(60): Error: semicolon
    expected, not `.`\n/tmp/tmpx2ycr948.d(60): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpx2ycr948.d(61): Error: semicolon expected, not `.`\n/tmp/tmpx2ycr948.d(61):
    Error: no identifier for declarator `.Text`\n/tmp/tmpx2ycr948.d(62): Error: semicolon
    expected, not `.`\n/tmp/tmpx2ycr948.d(62): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2ycr948.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '^':\n                temp = result ^ operand[i];\n               \
    \ break;\n            default:\n                temp = result;\n             \
    \   break;\n        }\n        result = temp;\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nI like your solution,\
    \ but I believe it would be better to use a `switch` statement instead of `if`\
    \ statements.\n<|/ c |>\n<| c |>\nI agree, `switch` statement would be better.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nI added a solution with switch\
    \ statement. Thanks for pointing out.\n<|/ c |>\n<| a tags=c#,algorithm,math |>\n\
    I wrote a recursive solution in C#. Hope it helps someone. \n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuki_8jca.d(62): Error: declaration expected, not `<`\n/tmp/tmpuki_8jca.d(77):
    Error: semicolon expected, not `.`\n/tmp/tmpuki_8jca.d(77): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpuki_8jca.d(78): Error: semicolon
    expected, not `.`\n/tmp/tmpuki_8jca.d(78): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpuki_8jca.d(79): Error: semicolon expected, not `.`\n/tmp/tmpuki_8jca.d(79):
    Error: no identifier for declarator `.Text`\n/tmp/tmpuki_8jca.d(80): Error: semicolon
    expected, not `.`\n/tmp/tmpuki_8jca.d(80): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuki_8jca.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operand.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '%':\n                result %= operand[i];\n              \
    \  break;\n            case '^':\n                result ^= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm,arrays,math |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9yva3dpx.d(62): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yva3dpx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result *=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe this solution will fail for `operator = ['+', '-',\
    \ '*']` and `operand = [1, 2, 3, 4]` because `operator` will never be `'+'`.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for `operator = ['+', '-',\
    \ '*']` and `operand = [1, 2, 3, 4]` because `operator` will never be `'+'`.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for `operator = ['+', '-',\
    \ '*']` and `operand = [1, 2, 3, 4]` because `operator` will never be `'+'`.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for `operator = ['+', '-',\
    \ '*']` and `operand = [1, 2, 3, 4]` because `operator` will never be `'+'`.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for `operator = ['+', '-',\
    \ '*']` and `operand = [1, 2, 3, 4]` because `operator` will never be `'+'`.\n\
    <|/ c |>\n<| a tags=algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] operators = {\"+\", \"-\", \"*\", \"/\", \"**\"};\n  \
    \  int[] operands = {1, 2, 3, 4};\n    System.out.println(do_algebra(operators,\
    \ operands));\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ty4fc6g.d(50): Error: unterminated character constant\n/tmp/tmp8ty4fc6g.d(50):
    Error: unterminated character constant\n/tmp/tmp8ty4fc6g.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmp8ty4fc6g.d(56): Error: declaration expected, not `return`\n/tmp/tmp8ty4fc6g.d(57):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ty4fc6g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result %= operand[i];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate\
    \ your help!\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad it helped. Good luck!\n\
    <|/ c |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1d6b_brv.d(56): Error: declaration expected, not `<`\n/tmp/tmp1d6b_brv.d(62):
    Error: unterminated character constant\n/tmp/tmp1d6b_brv.d(62): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d6b_brv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    \nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7r3e5i00.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r3e5i00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '%':\n                result %= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm |>\n<| c |>\nI like this solution. Thanks!\n\
    <|/ c |>\n<| a tags=java,algorithm |>\nI wrote this in C#, but I believe it can\
    \ be easily translated to Java:\n<code>\npublic static int Evaluate(string[] operators,\
    \ long[] operands)\n{\n    int result = 0;\n    for (int i = 0; i < operators.Length;\
    \ i++)\n    {\n        switch (operators[i])\n        {\n            case \"+\"\
    :\n                result += operands[i];\n                break;\n          \
    \  case \"-\":\n                result -= operands[i];\n                break;\n\
    \            case \"*\":\n                result *= operands[i];\n           \
    \     break;\n            case \"/\":\n                result /= operands[i];\n\
    \                break;\n            case \"%\":\n                result %= operands[i];\n\
    \                break;\n            case \"^\":\n                result ^= operands[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work if one of the operands is negative.\n\
    <|/ c |>\n<| c |>\nYes, I didn't think about that. I'll fix it.\n<|/ c |>\n<|\
    \ c |>\nI fixed it by adding `if (operands[i] < 0) return 0;`\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int evaluate(String[] operators, long[] operands)\
    \ {\n    int result = 0;\n    for (int i = 0; i < operators.length; i++) {\n \
    \       switch (operators[i]) {\n            case \"+\":\n                result\
    \ += operands[i];\n                break;\n            case \"-\":\n         \
    \       result -= operands[i];\n                break;\n            case \"*\"\
    :\n                result *= operands[i];\n                break;\n          \
    \  case \"/\":\n                result /= operands[i];\n                break;\n\
    \            case \"%\":\n                result %= operands[i];\n           \
    \     break;\n            case \"^\":\n                result ^= operands[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpajqx7ndn.d(62): Error: declaration expected, not `<`\n/tmp/tmpajqx7ndn.d(73):
    Error: declaration expected, not `for`\n/tmp/tmpajqx7ndn.d(73): Error: no identifier
    for declarator `i`\n/tmp/tmpajqx7ndn.d(73): Error: declaration expected, not `<`\n/tmp/tmpajqx7ndn.d(73):
    Error: no identifier for declarator `i`\n/tmp/tmpajqx7ndn.d(73): Error: declaration
    expected, not `++`\n/tmp/tmpajqx7ndn.d(79): Error: declaration expected, not `break`\n/tmp/tmpajqx7ndn.d(80):
    Error: declaration expected, not `case`\n/tmp/tmpajqx7ndn.d(82): Error: declaration
    expected, not `break`\n/tmp/tmpajqx7ndn.d(83): Error: declaration expected, not
    `case`\n/tmp/tmpajqx7ndn.d(85): Error: declaration expected, not `break`\n/tmp/tmpajqx7ndn.d(86):
    Error: declaration expected, not `case`\n/tmp/tmpajqx7ndn.d(88): Error: declaration
    expected, not `break`\n/tmp/tmpajqx7ndn.d(89): Error: declaration expected, not
    `case`\n/tmp/tmpajqx7ndn.d(91): Error: declaration expected, not `break`\n/tmp/tmpajqx7ndn.d(92):
    Error: declaration expected, not `case`\n/tmp/tmpajqx7ndn.d(94): Error: declaration
    expected, not `break`\n/tmp/tmpajqx7ndn.d(95): Error: declaration expected, not
    `default`\n/tmp/tmpajqx7ndn.d(97): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpajqx7ndn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case \"+\"\
    : result += operand[i]; break;\n            case \"-\": result -= operand[i];\
    \ break;\n            case \"*\": result *= operand[i]; break;\n            case\
    \ \"/\": result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n            default:\
    \ return -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| c |>\nI really appreciate your efforts. I already have this code in my\
    \ project. I am just trying to make it more efficient. Thanks again.\n<|/ c |>\n\
    <| c |>\nI added a more efficient version. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks again. Your code is very efficient. I am just trying to make it more efficient.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nI added a more efficient version. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks again. Your code is very efficient. I am just\
    \ trying to make it more efficient. Thanks again.\n<|/ c |>\n<| a |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplavr_23k.d(46): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplavr_23k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n        i++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis is not correct. `operator`\
    \ array has at least one operator, and operand array has at least two operands.\n\
    <|/ c |>\n<| c |>\nYes, you are right. My bad. I'll fix my answer.\n<|/ c |>\n\
    <| c |>\nThis is not correct. `operator` array has at least one operator, and\
    \ operand array has at least two operands.\n<|/ c |>\n<| c |>\nI fixed my answer.\
    \ Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\nThis is not correct.\
    \ `operator` array has at least one operator, and operand array has at least two\
    \ operands.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic class Main {\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq917wik9.d(58): Error: declaration expected, not `<`\n/tmp/tmpq917wik9.d(64):
    Error: unterminated character constant\n/tmp/tmpq917wik9.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmpq917wik9.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmpq917wik9.d(84): Error: declaration expected, not `assert`\n/tmp/tmpq917wik9.d(85):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq917wik9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '%':\n                temp = result % operand[i];\n               \
    \ break;\n            case '^':\n                temp = result ^ operand[i];\n\
    \                break;\n            default:\n                temp = result;\n\
    \                break;\n        }\n        result = temp;\n        i++;\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,arrays,math |>\n\
    <| c |>\nThanks for your answer. Your code is working fine for addition but for\
    \ subtraction and multiplication it gives wrong answer. Can you please help me\
    \ to fix this issue?\n<|/ c |>\n<| c |>\nI fixed the issue by changing `operator[i]`\
    \ to `operator[i - 1]`. Thanks for your help.\n<|/ c |>\n<| c |>\nI fixed the\
    \ issue by changing `operator[i]` to `operator[i - 1]`. Thanks for your help.\n\
    <|/ c |>\n<| c |>\nI fixed the issue by changing `operator[i]` to `operator[i\
    \ - 1]`. Thanks for your help.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic class\
    \ Main {\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6zjrg4av.d(65): Error: declaration expected, not `<`\n/tmp/tmp6zjrg4av.d(86):
    Error: declaration expected, not `assert`\n/tmp/tmp6zjrg4av.d(87): Error: declaration
    expected, not `assert`\n/tmp/tmp6zjrg4av.d(88): Error: declaration expected, not
    `assert`\n/tmp/tmp6zjrg4av.d(89): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6zjrg4av.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0g5s28o.d(137): Error: no identifier for declarator `long`\n/tmp/tmpf0g5s28o.d(137):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf0g5s28o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long\
    \ D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 =\
    \ 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n\
    \    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long\
    \ Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 =\
    \ 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n\
    \    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long\
    \ D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 =\
    \ 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n\
    \    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long\
    \ Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 =\
    \ 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n\
    \    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long\
    \ D4 = 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rd8iz9m.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmp7rd8iz9m.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7rd8iz9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length) \n    {\n        switch(operator[i]) \n        {\n  \
    \          case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: return -1;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis doesn't work. `operator`\
    \ has `+` and `-` but `operand` has `*` and `/`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ code. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work. `operator` has `+`\
    \ and `-` but `operand` has `*` and `/`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work. `operator` has `+` and\
    \ `-` but `operand` has `*` and `/`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ class Main {\n    public static void main(String[] args) {\n        String[]\
    \ operators = {\"+\", \"-\", \"*\", \"/\", \"//\", \"**\"};\n        long[] operands\
    \ = {2, 3, 4, 5};\n        long result = do_algebra(operators, operands);\n  \
    \      System.out.println(result);\n    }\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcrrk5dfq.d(40): Error: unterminated character constant\n/tmp/tmpcrrk5dfq.d(40):
    Error: unterminated character constant\n/tmp/tmpcrrk5dfq.d(40): Error: found `result`
    when expecting `:`\n/tmp/tmpcrrk5dfq.d(40): Error: found `/=` instead of statement\n/tmp/tmpcrrk5dfq.d(41):
    Error: unterminated character constant\n/tmp/tmpcrrk5dfq.d(41): Error: unterminated
    character constant\n/tmp/tmpcrrk5dfq.d(41): Error: found `result` when expecting
    `:`\n/tmp/tmpcrrk5dfq.d(41): Error: found `*=` instead of statement\n/tmp/tmpcrrk5dfq.d(48):
    Error: declaration expected, not `<`\n/tmp/tmpcrrk5dfq.d(51): Error: unterminated
    character constant\n/tmp/tmpcrrk5dfq.d(57): Error: unterminated character constant\n/tmp/tmpcrrk5dfq.d(63):
    Error: unterminated character constant\n/tmp/tmpcrrk5dfq.d(72): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmpcrrk5dfq.d(72): Error: no identifier
    for declarator `System`\n/tmp/tmpcrrk5dfq.d(72): Error: declaration expected,
    not `out`\n/tmp/tmpcrrk5dfq.d(73): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcrrk5dfq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operand.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result *= operand[i];\n              \
    \  break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm,math |>\n<| c |>\nI like this solution, but I believe\
    \ it would be better to use a switch statement rather than a long if/else statement.\
    \  Also, the switch statement would need to handle a default case that would throw\
    \ an exception.\n<|/ c |>\n<| c |>\nI agree with you that switch statement would\
    \ be better. But the OP asked for \"a solution that doesn't use any libraries\
    \ or other libraries\". Also I believe that default case is covered in switch\
    \ statement. Also I believe that switch statement is more readable than if/else\
    \ statement. Also I believe that switch statement is more readable than if/else\
    \ statement with many cases. Also I believe that switch statement is more readable\
    \ than if/else statement with many cases and many default cases. And so on...\n\
    <|/ c |>\n<| c |>\nI agree with you that switch statement would be better. But\
    \ the OP asked for \"a solution that doesn't use any libraries or other libraries\"\
    . Also I believe that default case is covered in switch statement. Also I believe\
    \ that switch statement is more readable than if/else statement. Also I believe\
    \ that switch statement is more readable than if/else statement with many cases.\
    \ Also I believe that switch statement is more readable than if/else statement\
    \ with many cases and many default cases. And so on...\n<|/ c |>\n<| c |>\nI agree\
    \ with you that switch statement would be better. But the OP asked for \"a solution\
    \ that doesn't use any libraries or other libraries\". Also I believe that default\
    \ case is covered in switch statement. Also I believe that switch statement is\
    \ more readable than if/else statement. Also I believe that switch statement is\
    \ more readable than if/else statement with many cases. Also I believe that switch\
    \ statement is more readable than if/else statement with many cases and many default\
    \ cases. And so on...\n<|/ c |>\n<| \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqhrwlg6p.d(58): Error: declaration expected, not `<`\n/tmp/tmpqhrwlg6p.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmpqhrwlg6p.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmpqhrwlg6p.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmpqhrwlg6p.d(80): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqhrwlg6p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operand.length)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+':\n      \
    \          result = result + operand[i];\n                break;\n           \
    \ case '-':\n                result = result - operand[i];\n                break;\n\
    \            case '*':\n                result = result * operand[i];\n      \
    \          break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '^':\n                result = result\
    \ ^ operand[i];\n                break;\n            default:\n              \
    \  throw new Exception(\"Invalid operator\");\n        }\n        i++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis code\
    \ doesn't work. `operator` array has one element and `operand` array has two elements.\
    \ So `operator[0]` will throw an exception.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing out. :)\n<|/ c |>\n<| c |>\nThis code doesn't work. `operator`\
    \ array has one element and `operand` array has two elements. So `operator[0]`\
    \ will throw an exception.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing\
    \ out. :)\n<|/ c |>\n<| a tags=java,algorithm |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] operators = new int[]{1, 2};\n    int[] operands = new int[]{1,\
    \ 2};\n    System.out.println(do_algebra(operators, operands));\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhh0lhu5.d(58): Error: declaration expected, not `<`\n/tmp/tmpjhh0lhu5.d(61):
    Error: unterminated character constant\n/tmp/tmpjhh0lhu5.d(67): Error: unterminated
    character constant\n/tmp/tmpjhh0lhu5.d(76): Error: semicolon expected, not `{`\n/tmp/tmpjhh0lhu5.d(76):
    Error: declaration expected, not `{`\n/tmp/tmpjhh0lhu5.d(77): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmpjhh0lhu5.d(77): Error: no identifier
    for declarator `System`\n/tmp/tmpjhh0lhu5.d(77): Error: declaration expected,
    not `out`\n/tmp/tmpjhh0lhu5.d(78): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjhh0lhu5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `operator = ['+', '-', '*']` and `operand = [2, 3, 4, 5]`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Did you try it with `operator = ['+',\
    \ '-', '*']` and `operand = [2, 3, 4, 5]`?\n<|/ c |>\n<| c |>\nYes, I did. `operator\
    \ = ['+', '-', '*']` and `operand = [2, 3, 4, 5]`. `result = 2 + 3 * 4 - 5` =>\
    \ `result = 9`\n<|/ c |>\n<| c |>\nOh I see. My bad. Thanks for pointing that\
    \ out. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that works with negative operands.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\nI believe that your problem can be solved using Dynamic Programming (DP)\
    \ algorithm. \nThe idea is that you have a table of size N (number of operators)\
    \ where each cell stores the result of the previous operation. \nThe first cell\
    \ is initialized to zero. \nThe next cell is calculated as follows: \n<code>\n\
    result[i] = result[i-1] * operand[i-1]\n</code>\nThe algorithm is as follows:\n\
    <code>\nfor i = 1 to N\n    for j = 1 to N\n        if i == j\n            result[i]\
    \ = operand[i]\n        else\n            result[i] = result[i-1] * operand[i-1]\n\
    </code>\nThe time complexity is O(N^2). \nThe code for this algorithm is as follows:\n\
    <code>\npublic class Main {\n    public static void main(String[] args) {\n  \
    \      int[] operand = {2, 3, 4, 5};\n        int[] operator = { '+', '-', '*',\
    \ '/', '^' };\n        int[] result = new int[operator.length];\n        int[]\
    \ memo = new int[operator.length];\n        memo[0] = 0;\n        for(int i =\
    \ 1; i < memo.length; i++) {\n            memo[i] = memo[i-1] * operand[i-1];\n\
    \        }\n        for(int i = 0; i < memo.length; i++) {\n            result[i]\
    \ = memo[i];\n        }\n        System.out.println(Arrays.toString(result\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuxs5o1xy.d(54): Error: declaration expected, not `<`\n/tmp/tmpuxs5o1xy.d(57):
    Error: unterminated character constant\n/tmp/tmpuxs5o1xy.d(66): Error: unterminated
    character constant\n/tmp/tmpuxs5o1xy.d(97): Error: no identifier for declarator
    `memo[0]`\n/tmp/tmpuxs5o1xy.d(97): Error: declaration expected, not `=`\n/tmp/tmpuxs5o1xy.d(98):
    Error: declaration expected, not `for`\n/tmp/tmpuxs5o1xy.d(98): Error: no identifier
    for declarator `i`\n/tmp/tmpuxs5o1xy.d(98): Error: declaration expected, not `<`\n/tmp/tmpuxs5o1xy.d(98):
    Error: no identifier for declarator `i`\n/tmp/tmpuxs5o1xy.d(98): Error: declaration
    expected, not `++`\n/tmp/tmpuxs5o1xy.d(100): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuxs5o1xy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.size();\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,math |>\n<| c |>\nI like\
    \ your solution, however I believe that your solution will fail if one of the\
    \ operands is zero. For example, `operator = ['+', '*', '**']` and `operand =\
    \ [1, 0]` will result in `result = 1`, which is not the correct result.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I forgot to add that case. Thanks for pointing\
    \ out.\n<|/ c |>\n<| c |>\nI added the case for zero operands.\n<|/ c |>\n<| c\
    \ |>\nI added the case for zero operands.\n<|/ c |>\n<| a tags=c#,algorithm,math\
    \ |>\nI believe that your solution will fail if one of the operands is zero. For\
    \ example, operator = ['+', '*', '**'] and operand = [1, 0] will result in result\
    \ = 1, which is not the correct result.\nI suggest the following solution:\n<code>\n\
    long do_algebra(string[] operator, long[] operand)\n{\n    long result = 0;\n\
    \    for(int i = 0; i < operator.Length; i++)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result = result + operand[i];\n\
    \                break;\n            case '-':\n                result = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   result = result * operand[i];\n                break;\n            case '/':\n\
    \                if (operand[i] == 0)\n                {\n                   \
    \ throw new Exception(\"Invalid operand\");\n                }\n             \
    \   result = result / operand[i];\n                break;\n            case '**':\n\
    \                if (operand[i] == 0)\n                {\n                   \
    \ throw new Exception(\"Invalid operand\");\n                }\n             \
    \   result = result ** operand[i];\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI added the case\
    \ for zero operands.\n<|/ c |>\n<| c |>\nI added the case for zero operands.\n\
    <|/ c |>\n<| a tags=c#,algorithm,math |>\nI believe that your solution will fail\
    \ if one of the operand\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq66942p_.d(47): Error: unterminated character constant\n/tmp/tmpq66942p_.d(47):
    Error: unterminated character constant\n/tmp/tmpq66942p_.d(48): Error: found `result`
    when expecting `:`\n/tmp/tmpq66942p_.d(48): Error: found `=` instead of statement\n/tmp/tmpq66942p_.d(56):
    Error: declaration expected, not `<`\n/tmp/tmpq66942p_.d(71): Error: unterminated
    character constant\n/tmp/tmpq66942p_.d(71): Error: unterminated character constant\n/tmp/tmpq66942p_.d(77):
    Error: declaration expected, not `for`\n/tmp/tmpq66942p_.d(77): Error: no identifier
    for declarator `i`\n/tmp/tmpq66942p_.d(77): Error: declaration expected, not `<`\n/tmp/tmpq66942p_.d(77):
    Error: no identifier for declarator `i`\n/tmp/tmpq66942p_.d(77): Error: declaration
    expected, not `++`\n/tmp/tmpq66942p_.d(83): Error: declaration expected, not `break`\n/tmp/tmpq66942p_.d(84):
    Error: declaration expected, not `case`\n/tmp/tmpq66942p_.d(86): Error: declaration
    expected, not `break`\n/tmp/tmpq66942p_.d(87): Error: declaration expected, not
    `case`\n/tmp/tmpq66942p_.d(89): Error: declaration expected, not `break`\n/tmp/tmpq66942p_.d(90):
    Error: declaration expected, not `case`\n/tmp/tmpq66942p_.d(94): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq66942p_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    \nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7r3e5i00.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r3e5i00.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.size();\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result %= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=algorithm,c#,math |>\n<| c |>\nThis doesn't seem to work. `operator` is\
    \ `[\"+\", \"*\", \"+\"]` and `operand` is `[2, 3, 4]`. Your code returns `10`\
    \ instead of `9`.\n<|/ c |>\n<| c |>\nI didn't test the code before posting it.\
    \ I just wrote the code in the browser and didn't test it. Now I tested it and\
    \ I edited my answer. Now it should work.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. Can you please explain why you think it doesn't work?\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Can you please explain why you think\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ please explain why you think it doesn't work?\n<|/ c |>\n<| a tags=algorithm,c#,math\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3rh8e_cw.d(56): Error: declaration expected, not `<`\n/tmp/tmp3rh8e_cw.d(59):
    Error: unterminated character constant\n/tmp/tmp3rh8e_cw.d(62): Error: unterminated
    character constant\n/tmp/tmp3rh8e_cw.d(62): Error: unterminated character constant\n/tmp/tmp3rh8e_cw.d(65):
    Error: unterminated character constant\n/tmp/tmp3rh8e_cw.d(68): Error: unterminated
    character constant\n/tmp/tmp3rh8e_cw.d(71): Error: unterminated character constant\n/tmp/tmp3rh8e_cw.d(76):
    Error: semicolon expected, not `.`\n/tmp/tmp3rh8e_cw.d(76): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmp3rh8e_cw.d(77): Error: semicolon
    expected, not `.`\n/tmp/tmp3rh8e_cw.d(77): Error: no identifier for declarator
    `.Linq`\n/tmp/tmp3rh8e_cw.d(78): Error: semicolon expected, not `.`\n/tmp/tmp3rh8e_cw.d(78):
    Error: no identifier for declarator `.Text`\n/tmp/tmp3rh8e_cw.d(79): Error: semicolon
    expected, not `.`\n/tmp/tmp3rh8e_cw.d(79): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3rh8e_cw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\n\
    This is not an answer to the question. OP asked for help with his code not for\
    \ someone to write it for him. He is asking for help with his code, not for someone\
    \ to write it for him.\n<|/ c |>\n<| c |>\nI agree with you, but I thought it\
    \ would be helpful to share my code with others who might find it useful.\n<|/\
    \ c |>\n<| c |>\nI agree with you but this does not answer the question. OP asked\
    \ for help with his code not for someone to write it for him. He is asking for\
    \ help with his code, not for someone to write it for him.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought it would be helpful to share my code with others\
    \ who might find it useful.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ it would be helpful to share my code with others who might find it useful.\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3o2tfimc.d(55): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3o2tfimc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution works fine for\
    \ addition and subtraction, but for multiplication and division it gives wrong\
    \ results. For example, for multiplication it gives wrong result for array = [2,\
    \ 3, 4, 5] and operator = ['*', '*', '*', '*']. Can you please help me to fix\
    \ it?\n<|/ c |>\n<| c |>\nI edited my answer to fix the multiplication problem.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works\
    \ fine for addition and subtraction, but for multiplication and division it gives\
    \ wrong results. For example, for multiplication it gives wrong result for array\
    \ = [2, 3, 4, 5] and operator = ['*', '*', '*', '*']. Can you please help me to\
    \ fix it?\n<|/ c |>\n<| c |>\nI edited my answer to fix the multiplication problem.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Scanner;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbjhc_13u.d(50): Error: unterminated character constant\n/tmp/tmpbjhc_13u.d(50):
    Error: unterminated character constant\n/tmp/tmpbjhc_13u.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmpbjhc_13u.d(52): Error: expression expected, not `*=`\n/tmp/tmpbjhc_13u.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpbjhc_13u.d(56):
    Error: declaration expected, not `return`\n/tmp/tmpbjhc_13u.d(57): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjhc_13u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result += operand[i];\
    \ break;\n            case \"-\": result -= operand[i]; break;\n            case\
    \ \"*\": result *= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; result *= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm new to programming\
    \ and I didn't know that I can use switch case like that. I'll try to use this\
    \ in my code.\n<|/ c |>\n<| c |>\nI added a code example to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to programming and\
    \ I didn't know that I can use switch case like that. I'll try to use this in\
    \ my code.\n<|/ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n\
    <|/ c |>\n<| a tags=java,switch-statement,arrays |>\nYou can use a switch statement\
    \ to evaluate an expression. \n<code>\npublic class ExpressionEvaluator {\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpim02v6s9.d(43): Error: declaration expected, not `<`\n/tmp/tmpim02v6s9.d(46):
    Error: unterminated character constant\n/tmp/tmpim02v6s9.d(46): Error: unterminated
    character constant\n/tmp/tmpim02v6s9.d(46): Error: unterminated character constant\n/tmp/tmpim02v6s9.d(52):
    Error: unterminated character constant\n/tmp/tmpim02v6s9.d(52): Error: unterminated
    character constant\n/tmp/tmpim02v6s9.d(52): Error: unterminated character constant\n/tmp/tmpim02v6s9.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpim02v6s9.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpim02v6s9.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpim02v6s9.d(68): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpim02v6s9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    for(i = 0; i <\
    \ operator.length; i++) \n    {\n        switch(operator[i]) \n        {\n   \
    \         case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '^': result\
    \ ^= operand[i]; break;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,algorithm |>\n<| c |>\nThis code does not compile. `operator`\
    \ is an array of `String`s, not `char`s. Also, `operator` has one element and\
    \ `operand` has two elements.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I fixed the code accordingly.\n<|/ c |>\n<| c |>\nThanks for your answer. I\
    \ tried your code and it works fine. However I cannot use switch statement. Can\
    \ you please help me with another solution?\n<|/ c |>\n<| c |>\nI added a solution\
    \ without switch statement. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I tried your code and it works fine. However I cannot use switch statement.\
    \ Can you please help me with another solution?\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] array1 = {1, 2, 3, 4, 5};\n   \
    \ int[] array2 = {6, 7, 8, 9, 10};\n    int[] array3 = {11, 12, 13, 14, 15};\n\
    \    int[] array4 = {16, 17, 18, 19, 20};\n    int[] array5 = {21, 22, 23, 24,\
    \ 25};\n    int[] array6 = {26, 27, 28, 29, 30};\n    int[] array7 = {31, 32,\
    \ 33, 34, 35};\n    int[] array8 = {36, 37, 38, 39, 40};\n    int[] array9 = {41,\
    \ 42, 43, 44, 45};\n    int[] array10 = {46, 47, 48, 49, 50};\n    int[] array11\
    \ = {51, 52, 53, 54, 55};\n    int[] array12 = {56, 57, 58, 59, 60};\n    int[]\
    \ array13 = {61, 62, 63, 64, 65};\n    int[] array14 = {66, 67, 68, 69, 70};\n\
    \    int[] array15 = {71, 72, 73, 74, 75};\n    int[] array16 = {76, 77, 78, 79,\
    \ 80};\n    int[] array17 = {81, 82, 83, 84, 85\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfh30jws0.d(46): Error: declaration expected, not `<`\n/tmp/tmpfh30jws0.d(83):
    Error: comma expected separating field initializers\n/tmp/tmpfh30jws0.d(83): Error:
    expression expected, not `unittest`\n/tmp/tmpfh30jws0.d(84): Error: comma expected
    separating field initializers\n/tmp/tmpfh30jws0.d(91): Error: comma expected separating
    field initializers\n/tmp/tmpfh30jws0.d(91): Error: found `main` when expecting
    `.` following void\n/tmp/tmpfh30jws0.d(91): Error: found `(` when expecting identifier
    following `void`.\n/tmp/tmpfh30jws0.d(91): Error: comma expected separating field
    initializers\n/tmp/tmpfh30jws0.d(91): Error: expression expected, not `)`\n/tmp/tmpfh30jws0.d(91):
    Error: comma expected separating field initializers\n/tmp/tmpfh30jws0.d(91): Error:
    found end of file instead of initializer\n/tmp/tmpfh30jws0.d(91): Error: semicolon
    expected, not `End of File`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfh30jws0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length) \n    {\n        if(operator[i] == '+') \n        {\n\
    \            result += operand[i];\n        }\n        else if(operator[i] ==\
    \ '-') \n        {\n            result -= operand[i];\n        }\n        else\
    \ if(operator[i] == '*') \n        {\n            result *= operand[i];\n    \
    \    }\n        else if(operator[i] == '/') \n        {\n            result /=\
    \ operand[i];\n        }\n        else if(operator[i] == '**') \n        {\n \
    \           result *= operand[i];\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis code\
    \ doesn't work if there are more than 2 operands. For example, `operator = ['+',\
    \ '*', '**']` and `operand = [1, 2, 3, 4]` returns `0`.\n<|/ c |>\n<| c |>\nI\
    \ edited the answer to include a fix for that case. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe7ha0omm.d(50): Error: unterminated character constant\n/tmp/tmpe7ha0omm.d(50):
    Error: unterminated character constant\n/tmp/tmpe7ha0omm.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmpe7ha0omm.d(56): Error: declaration expected, not `return`\n/tmp/tmpe7ha0omm.d(57):
    Error: unrecognized declaration\n/tmp/tmpe7ha0omm.d(61): Error: unterminated character
    constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7ha0omm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    \n    for(i = 0; i < operator.length; i++)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                result += operand[j];\n   \
    \             break;\n            case '-':\n                result -= operand[j];\n\
    \                break;\n            case '*':\n                result *= operand[j];\n\
    \                break;\n            case '/':\n                result /= operand[j];\n\
    \                break;\n            case '^':\n                result *= operand[j];\n\
    \                break;\n        }\n        j++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your effort, but this does\
    \ not answer the question. Your code does not use any arrays, and it uses switch\
    \ statements, which is not what was asked.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ effort, but this does not answer the question. Your code does not use any arrays,\
    \ and it uses switch statements, which is not what was asked.\n<|/ c |>\n<| c\
    \ |>\nI appreciate your effort, but this does not answer the question. Your code\
    \ does not use any arrays, and it uses switch statements, which is not what was\
    \ asked.\n<|/ c |>\n<| c |>\nI appreciate your effort, but this does not answer\
    \ the question. Your code does not use any arrays, and it uses switch statements,\
    \ which is not what was asked.\n<|/ c |>\n<| c |>\nI appreciate your effort, but\
    \ this does not answer the question. Your code does not use any arrays, and it\
    \ uses switch statements, which is not what was asked.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic class Main {\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphf94hu16.d(59): Error: declaration expected, not `<`\n/tmp/tmphf94hu16.d(83):
    Error: declaration expected, not `assert`\n/tmp/tmphf94hu16.d(84): Error: declaration
    expected, not `assert`\n/tmp/tmphf94hu16.d(85): Error: declaration expected, not
    `assert`\n/tmp/tmphf94hu16.d(86): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphf94hu16.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_rlven0.d(133): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_rlven0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 =\
    \ 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt65skuqu.d(117): Error: semicolon expected, not `unittest`\n/tmp/tmpt65skuqu.d(117):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt65skuqu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n    long\
    \ AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long AH =\
    \ 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL = 0;\n\
    \    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n    long\
    \ AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long AU =\
    \ 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY = 0;\n\
    \    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n    long\
    \ BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long BH =\
    \ 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL = 0;\n\
    \    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n    long\
    \ BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long BU =\
    \ 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY = 0;\n\
    \    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long CC = 0;\n    long\
    \ CD = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhxpp7g8.d(131): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhxpp7g8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        if(operator[i] == '+')\n        {\n \
    \           result += operand[i];\n        }\n        else if(operator[i] == '-')\n\
    \        {\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '*')\n        {\n            result *= operand[i];\n        }\n        else\
    \ if(operator[i] == '/')\n        {\n            result /= operand[i];\n     \
    \   }\n        else if(operator[i] == '**')\n        {\n            result **=\
    \ operand[i];\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention\
    \ that I cannot use any libraries other than std.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I'm sorry I didn't mention that I cannot use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't mention that I cannot\
    \ use any libraries other than std.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwxrrer8.d(50): Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(50):
    Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(51): Error: found `{`
    when expecting `)`\n/tmp/tmpcwxrrer8.d(52): Error: expression expected, not `*=`\n/tmp/tmpcwxrrer8.d(52):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpcwxrrer8.d(56):
    Error: declaration expected, not `return`\n/tmp/tmpcwxrrer8.d(57): Error: unrecognized
    declaration\n/tmp/tmpcwxrrer8.d(61): Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(61):
    Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(64): Error: unterminated
    character constant\n/tmp/tmpcwxrrer8.d(67): Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(67):
    Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(70): Error: unterminated
    character constant\n/tmp/tmpcwxrrer8.d(73): Error: unterminated character constant\n/tmp/tmpcwxrrer8.d(73):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcwxrrer8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long operatorIndex = 0;\n    long operandIndex = 0;\n    long operatorValue\
    \ = 0;\n    long operandValue = 0;\n    long operatorValueIndex = 0;\n    long\
    \ operandValueIndex = 0;\n    long operatorValueIndex2 = 0;\n    long operandValueIndex2\
    \ = 0;\n    long operatorValueIndex3 = 0;\n    long operandValueIndex3 = 0;\n\
    \    long operatorValueIndex4 = 0;\n    long operandValueIndex4 = 0;\n    long\
    \ operatorValueIndex5 = 0;\n    long operandValueIndex5 = 0;\n    long operatorValueIndex6\
    \ = 0;\n    long operandValueIndex6 = 0;\n    long operatorValueIndex7 = 0;\n\
    \    long operandValueIndex7 = 0;\n    long operatorValueIndex8 = 0;\n    long\
    \ operandValueIndex8 = 0;\n    long operatorValueIndex9 = 0;\n    long operandValueIndex9\
    \ = 0;\n    long operatorValueIndex10 = 0;\n    long operandValueIndex10 = 0;\n\
    \    long operatorValueIndex11 = 0;\n    long operandValueIndex11 = 0;\n    long\
    \ operatorValueIndex12 = 0;\n    long operandValueIndex12 = 0;\n    long operatorValueIndex13\
    \ = 0;\n    long operandValueIndex13 = 0;\n    long operatorValueIndex14 = 0;\n\
    \    long operandValueIndex14 = 0;\n    long operatorValueIndex15 = 0;\n    long\
    \ operandValueIndex15 = 0;\n    long operatorValueIndex16 = 0;\n    long operandValueIndex16\
    \ = 0;\n    long operatorValueIndex17 = 0;\n    long operandValueIndex17 = 0;\n\
    \    long operatorValueIndex18 = 0;\n    long operandValueIndex18 = 0;\n    long\
    \ operatorValueIndex19 = 0;\n    long operandValueIndex19 = 0;\n    long operatorValueIndex20\
    \ = 0;\n    long operandValueIndex20 = 0;\n    long operatorValueIndex21 = 0;\n\
    \    long operandValueIndex21 = 0;\n    long operatorValueIndex22 = 0;\n    long\
    \ operandValueIndex22 = 0;\n    long operatorValueIndex23 = 0;\n    long operandValueIndex23\
    \ = 0;\n    long operatorValueIndex24 = 0;\n    long operandValueIndex24 = 0;\n\
    \    long operatorValueIndex25 = 0;\n    long operandValueIndex25 = 0;\n    long\
    \ operatorValueIndex26 = 0;\n    long operandValueIndex26 = 0;\n    long operatorValueIndex27\
    \ = 0;\n    long operandValueIndex27 = 0;\n    long operatorValueIndex28 = 0;\n\
    \    long operandValueIndex28 = 0;\n    long operatorValueIndex29 = 0;\n    long\
    \ operandValueIndex29 = 0;\n    long operatorValueIndex30 = 0;\n    long operandValueIndex30\
    \ = 0;\n    \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxqweojpq.d(98): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqweojpq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ** operand[i];\n                break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any libraries except std.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that does not use any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries except\
    \ std.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that does\
    \ not use any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any libraries except std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfmom7l21.d(54): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmom7l21.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long A2 = 0;\n    long B2 = 0;\n    long C2 = 0;\n    long\
    \ D2 = 0;\n    long E2 = 0;\n    long F2 = 0;\n    long G2 = 0;\n    long H2 =\
    \ 0;\n    long I2 = 0;\n    long J2 = 0;\n    long K2 = 0;\n    long L2 = 0;\n\
    \    long M2 = 0;\n    long N2 = 0;\n    long O2 = 0;\n    long P2 = 0;\n    long\
    \ Q2 = 0;\n    long R2 = 0;\n    long S2 = 0;\n    long T2 = 0;\n    long U2 =\
    \ 0;\n    long V2 = 0;\n    long W2 = 0;\n    long X2 = 0;\n    long Y2 = 0;\n\
    \    long Z2 = 0;\n    long A3 = 0;\n    long B3 = 0;\n    long C3 = 0;\n    long\
    \ D3 = 0;\n    long E3 = 0;\n    long F3 = 0;\n    long G3 = 0;\n    long H3 =\
    \ 0;\n    long I3 = 0;\n    long J3 = 0;\n    long K3 = 0;\n    long L3 = 0;\n\
    \    long M3 = 0;\n    long N3 = 0;\n    long O3 = 0;\n    long P3 = 0;\n    long\
    \ Q3 = 0;\n    long R3 = 0;\n    long S3 = 0;\n    long T3 = 0;\n    long U3 =\
    \ 0;\n    long V3 = 0;\n    long W3 = 0;\n    long X3 = 0;\n    long Y3 = 0;\n\
    \    long Z3 = 0;\n    long A4 = 0;\n    long B4 = 0;\n    long C4 = 0;\n    long\
    \ D4 = 0;\n    long E4 = 0;\n    long F\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rd8iz9m.d(133): Error: semicolon expected, not `unittest`\n/tmp/tmp7rd8iz9m.d(133):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7rd8iz9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length - 1)\n    {\n        switch(operator[i])\n        {\n\
    \            case '+': result += operand[i]; break;\n            case '-': result\
    \ -= operand[i]; break;\n            case '*': result *= operand[i]; break;\n\
    \            case '/': result /= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result *= operand[i]; break;\n\
    \            default: break;\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm sorry but\
    \ I don't understand how this works. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some comments. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I'm sorry but I don't understand how this works. Can you\
    \ please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry but I don't\
    \ understand how this works. Can you please explain how this works?\n<|/ c |>\n\
    <| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnqmzm77g.d(40): Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(40):
    Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(40): Error: found `result`
    when expecting `:`\n/tmp/tmpnqmzm77g.d(40): Error: found `/=` instead of statement\n/tmp/tmpnqmzm77g.d(41):
    Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(41): Error: unterminated
    character constant\n/tmp/tmpnqmzm77g.d(41): Error: found `result` when expecting
    `:`\n/tmp/tmpnqmzm77g.d(41): Error: found `*=` instead of statement\n/tmp/tmpnqmzm77g.d(48):
    Error: declaration expected, not `<`\n/tmp/tmpnqmzm77g.d(51): Error: unterminated
    character constant\n/tmp/tmpnqmzm77g.d(51): Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(57):
    Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(57): Error: unterminated
    character constant\n/tmp/tmpnqmzm77g.d(63): Error: unterminated character constant\n/tmp/tmpnqmzm77g.d(63):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnqmzm77g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long\
    \ Dd = 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh =\
    \ 0;\n    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n\
    \    long Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long\
    \ Qq = 0;\n    long Rr = 0;\n    long Ss = 0;\n    long Tt = 0;\n    long Uu =\
    \ 0;\n    long Vv = 0;\n    long Ww = 0;\n    long Xx = 0;\n    long Yy = 0;\n\
    \    long Zz = 0;\n    long Aaa = 0;\n    long Bbb = 0;\n    long Ccc = 0;\n \
    \   long Ddd = 0;\n    long Eee = 0;\n    long Fff = 0;\n    long Ggg = 0;\n \
    \   long Hhh = 0;\n    long Iii = 0;\n    long Jjj = 0;\n    long Kkk = 0;\n \
    \   long Lll = 0;\n    long Mmm = 0;\n    long Nnn = 0;\n    long Ooo = 0;\n \
    \   long Ppp = 0;\n    long Qqq = 0;\n    long Rrr = 0;\n    long Sss = 0;\n \
    \   long Ttt = 0;\n    long Uuu = 0;\n    long Vvv = 0;\n    long W\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqf64uein.d(124): Error: semicolon expected, not `unittest`\n/tmp/tmpqf64uein.d(124):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqf64uein.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result = result + operand[i];\n          \
    \      break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result * operand[i];\n          \
    \      break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `operator = ['+', '*',\
    \ '-']` and `operand = [2, 3, 4, 5]`. You get `result = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2 + 3 * 4 - 5) = -(-2\
    \ + 3 * 4 - \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjnaqtzgl.d(48): Error: unterminated character constant\n/tmp/tmpjnaqtzgl.d(48):
    Error: unterminated character constant\n/tmp/tmpjnaqtzgl.d(49): Error: found `result`
    when expecting `:`\n/tmp/tmpjnaqtzgl.d(49): Error: found `=` instead of statement\n/tmp/tmpjnaqtzgl.d(51):
    Error: unterminated character constant\n/tmp/tmpjnaqtzgl.d(51): Error: unterminated
    character constant\n/tmp/tmpjnaqtzgl.d(52): Error: found `result` when expecting
    `:`\n/tmp/tmpjnaqtzgl.d(52): Error: found `=` instead of statement\n/tmp/tmpjnaqtzgl.d(61):
    Error: declaration expected, not `<`\n/tmp/tmpjnaqtzgl.d(64): Error: unterminated
    character constant\n/tmp/tmpjnaqtzgl.d(64): Error: unterminated string constant
    starting at /tmp/tmpjnaqtzgl.d(64)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpjnaqtzgl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case \"+\"\
    : result += operand[i]; break;\n            case \"-\": result -= operand[i];\
    \ break;\n            case \"*\": result *= operand[i]; break;\n            case\
    \ \"/\": result /= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; break;\n            default:\
    \ return -1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks so much for the help. I appreciate it. I will try this out\
    \ and let you know how it goes.\n<|/ c |>\n<| c |>\nI tested it out and it works\
    \ great. Thanks so much for the help.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a small\
    \ program to solve this problem. Hope it helps.\n<code>\nimport java.util.Scanner;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcepxas5_.d(46): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcepxas5_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result ^= operand[i];\n    \
    \            break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=algorithm,c#,math,arrays |>\n<| a tags=algorithm,c#,math,arrays |>\n<code>\n\
    public long Calculate(string[] operators, long[] operands)\n{\n    long result\
    \ = 0;\n    foreach (string op in operators)\n    {\n        switch (op)\n   \
    \     {\n            case \"+\":\n                result += operands[0];\n   \
    \             break;\n            case \"-\":\n                result -= operands[0];\n\
    \                break;\n            case \"*\":\n                result *= operands[0];\n\
    \                break;\n            case \"/\":\n                result /= operands[0];\n\
    \                break;\n            case \"^\":\n                result ^= operands[0];\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr86_77ph.d(56): Error: declaration expected, not `<`\n/tmp/tmpr86_77ph.d(63):
    Error: declaration expected, not `foreach`\n/tmp/tmpr86_77ph.d(69): Error: declaration
    expected, not `break`\n/tmp/tmpr86_77ph.d(70): Error: declaration expected, not
    `case`\n/tmp/tmpr86_77ph.d(72): Error: declaration expected, not `break`\n/tmp/tmpr86_77ph.d(73):
    Error: declaration expected, not `case`\n/tmp/tmpr86_77ph.d(75): Error: declaration
    expected, not `break`\n/tmp/tmpr86_77ph.d(76): Error: declaration expected, not
    `case`\n/tmp/tmpr86_77ph.d(78): Error: declaration expected, not `break`\n/tmp/tmpr86_77ph.d(79):
    Error: declaration expected, not `case`\n/tmp/tmpr86_77ph.d(81): Error: declaration
    expected, not `break`\n/tmp/tmpr86_77ph.d(82): Error: declaration expected, not
    `default`\n/tmp/tmpr86_77ph.d(84): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr86_77ph.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case \"+\": result += operand[i];\
    \ break;\n            case \"-\": result -= operand[i]; break;\n            case\
    \ \"*\": result *= operand[i]; break;\n            case \"//\": result /= operand[i];\
    \ break;\n            case \"**\": result *= operand[i]; result *= operand[i];\
    \ break;\n            default: return -1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. Unfortunately,\
    \ I cannot use any libraries other than std.\n<|/ c |>\n<| c |>\nI added the code\
    \ I wrote to solve the problem. Thank you for your help.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nI wrote a solution in C#, hope it helps.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggvd8rij.d(43): Error: declaration expected, not `<`\n/tmp/tmpggvd8rij.d(55):
    Error: semicolon expected, not `.`\n/tmp/tmpggvd8rij.d(55): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpggvd8rij.d(56): Error: semicolon
    expected, not `.`\n/tmp/tmpggvd8rij.d(56): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpggvd8rij.d(57): Error: semicolon expected, not `.`\n/tmp/tmpggvd8rij.d(57):
    Error: no identifier for declarator `.Text`\n/tmp/tmpggvd8rij.d(58): Error: semicolon
    expected, not `.`\n/tmp/tmpggvd8rij.d(58): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggvd8rij.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                System.out.println(\"Invalid operator\");\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer! I appreciate it! I understand your code, but I do not understand how\
    \ it works. I do not understand how you use the switch statement to determine\
    \ what operation to perform. How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what operation to perform? How do you determine what operation to perform? How\
    \ do you determine what operation to perform? How do you determine what operation\
    \ to perform? How do you determine what operation to perform? How do you determine\
    \ what \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3joh4xxp.d(52): Error: identifier expected following `.`, not
    `out`\n/tmp/tmp3joh4xxp.d(57): Error: declaration expected, not `<`\n/tmp/tmp3joh4xxp.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmp3joh4xxp.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp3joh4xxp.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp3joh4xxp.d(68): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3joh4xxp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    for(i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result **= operand[i];\n   \
    \             break;\n            default:\n                throw new Exception(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=java,algorithm,math |>\n<| c |>\nI believe that `switch` statement is unnecessary.\
    \ `operator[i]` can be replaced with `operator[i - 1]`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I just wanted to show that you can do that without using switch\
    \ statement. Thanks for pointing that out.\n<|/ c |>\n<| a tags=java,algorithm,math\
    \ |>\n<code>\npublic class Math {\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxb3qc7ty.d(49): Error: expression expected, not `*=`\n/tmp/tmpxb3qc7ty.d(49):
    Error: found `operand` when expecting `;` following statement\n/tmp/tmpxb3qc7ty.d(57):
    Error: declaration expected, not `<`\n/tmp/tmpxb3qc7ty.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmpxb3qc7ty.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmpxb3qc7ty.d(74): Error: declaration expected, not `assert`\n/tmp/tmpxb3qc7ty.d(75):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb3qc7ty.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n   \
    \ \n    while(i < operator.length && i < operand.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case '+':\n                temp = result + operand[i];\n\
    \                break;\n            case '-':\n                temp = result\
    \ - operand[i];\n                break;\n            case '*':\n             \
    \   temp = result * operand[i];\n                break;\n            case '/':\n\
    \                temp = result / operand[i];\n                break;\n       \
    \     case '//':\n                temp = result / operand[i];\n              \
    \  break;\n            case '**':\n                temp = result * operand[i];\n\
    \                break;\n            default:\n                temp = result;\n\
    \                break;\n        }\n        result = temp;\n        i++;\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=java,algorithm,math |>\n<| c |>\n\
    This doesn't work if you have a negative number in one of the operands.\n<|/ c\
    \ |>\n<| c |>\nI added a note to the answer about that.\n<|/ c |>\n<| c |>\nI\
    \ added a note to the answer about that.\n<|/ c |>\n<| c |>\nI added a note to\
    \ the answer about that.\n<|/ c |>\n<| c |>\nI added a note to the answer about\
    \ that.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic class ArithmeticExpression\
    \ {\n    public static void main(String[] args) {\n        System.out.println(doArithmeticExpression(\"\
    2 + 3 * 4 - 5\"));\n        System.out.println(doArithmeticExpression(\"2 + 3\
    \ * 4 - 5 + 6\"));\n        System.out.println(doArithmeticExpression(\"2 + 3\
    \ * 4 - 5 + 6 + 7\"));\n        System.out.println(doArithmeticExpression(\"2\
    \ + 3 * 4 - 5 + 6 + 7 + 8\"));\n    }\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp09m71w2j.d(50): Error: unterminated character constant\n/tmp/tmp09m71w2j.d(50):
    Error: unterminated character constant\n/tmp/tmp09m71w2j.d(51): Error: found `temp`
    when expecting `:`\n/tmp/tmp09m71w2j.d(51): Error: found `=` instead of statement\n/tmp/tmp09m71w2j.d(53):
    Error: unterminated character constant\n/tmp/tmp09m71w2j.d(53): Error: unterminated
    character constant\n/tmp/tmp09m71w2j.d(54): Error: found `temp` when expecting
    `:`\n/tmp/tmp09m71w2j.d(54): Error: found `=` instead of statement\n/tmp/tmp09m71w2j.d(65):
    Error: declaration expected, not `<`\n/tmp/tmp09m71w2j.d(68): Error: unterminated
    character constant\n/tmp/tmp09m71w2j.d(87): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmp09m71w2j.d(87): Error: no identifier for declarator
    `System`\n/tmp/tmp09m71w2j.d(87): Error: declaration expected, not `out`\n/tmp/tmp09m71w2j.d(88):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmp09m71w2j.d(88):
    Error: no identifier for declarator `System`\n/tmp/tmp09m71w2j.d(88): Error: declaration
    expected, not `out`\n/tmp/tmp09m71w2j.d(89): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmp09m71w2j.d(89): Error: no identifier for declarator
    `System`\n/tmp/tmp09m71w2j.d(89): Error: declaration expected, not `out`\n/tmp/tmp09m71w2j.d(90):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09m71w2j.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operator.length\
    \ && i < operand.length)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result = result + operand[i];\n          \
    \      break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '/':\n             \
    \   result = result / operand[i];\n                break;\n            case '//':\n\
    \                result = result / operand[i];\n                break;\n     \
    \       case '**':\n                result = result ** operand[i];\n         \
    \       break;\n            default:\n                throw new Exception(\"Invalid\
    \ operator\");\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| c |>\nThis code doesn't compile. `operator` should\
    \ be `String[]` but it's `char[]`. `operator[i]` should be `operator[i - 1]` but\
    \ it's `operator[i]`. `operand` should be `long[]` but it's `int[]`. `operand[i]`\
    \ should be `operand[i - 1]` but it's `operand[i]`. `result` should be `long`\
    \ but it's `int`. `result` should be `long` but it's `int`. `result` should be\
    \ `long` but it's `int`. `result` should be `long` but it's `int`. `result` should\
    \ be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long` but it's `int`. `result`\
    \ should be `long` but it's `int`. `result` should be `long\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8fentvep.d(48): Error: unterminated character constant\n/tmp/tmp8fentvep.d(48):
    Error: unterminated character constant\n/tmp/tmp8fentvep.d(49): Error: found `result`
    when expecting `:`\n/tmp/tmp8fentvep.d(49): Error: found `=` instead of statement\n/tmp/tmp8fentvep.d(51):
    Error: unterminated character constant\n/tmp/tmp8fentvep.d(51): Error: unterminated
    character constant\n/tmp/tmp8fentvep.d(52): Error: found `result` when expecting
    `:`\n/tmp/tmp8fentvep.d(52): Error: found `=` instead of statement\n/tmp/tmp8fentvep.d(61):
    Error: declaration expected, not `<`\n/tmp/tmp8fentvep.d(64): Error: unterminated
    character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated character constant\n/tmp/tmp8fentvep.d(64):
    Error: unterminated character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated
    character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated character constant\n/tmp/tmp8fentvep.d(64):
    Error: unterminated character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated
    character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated character constant\n/tmp/tmp8fentvep.d(64):
    Error: unterminated character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated
    character constant\n/tmp/tmp8fentvep.d(64): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fentvep.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo8ebcl3n.d(128): Error: semicolon expected, not `unittest`\n/tmp/tmpo8ebcl3n.d(128):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpo8ebcl3n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_j4xqb_w.d(117): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j4xqb_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\n    long operator_index\
    \ = 0;\n    long operator_index2 = 0;\n    long operator_index3 = 0;\n    long\
    \ operator_index4 = 0;\n    long operator_index5 = 0;\n    long operator_index6\
    \ = 0;\n    long operator_index7 = 0;\n    long operator_index8 = 0;\n    long\
    \ operator_index9 = 0;\n    long operator_index10 = 0;\n    long operator_index11\
    \ = 0;\n    long operator_index12 = 0;\n    long operator_index13 = 0;\n    long\
    \ operator_index14 = 0;\n    long operator_index15 = 0;\n    long operator_index16\
    \ = 0;\n    long operator_index17 = 0;\n    long operator_index18 = 0;\n    long\
    \ operator_index19 = 0;\n    long operator_index20 = 0;\n    long operator_index21\
    \ = 0;\n    long operator_index22 = 0;\n    long operator_index23 = 0;\n    long\
    \ operator_index24 = 0;\n    long operator_index25 = 0;\n    long operator_index26\
    \ = 0;\n    long operator_index27 = 0;\n    long operator_index28 = 0;\n    long\
    \ operator_index29 = 0;\n    long operator_index30 = 0;\n    long operator_index31\
    \ = 0;\n    long operator_index32 = 0;\n    long operator_index33 = 0;\n    long\
    \ operator_index34 = 0;\n    long operator_index35 = 0;\n    long operator_index36\
    \ = 0;\n    long operator_index37 = 0;\n    long operator_index38 = 0;\n    long\
    \ operator_index39 = 0;\n    long operator_index40 = 0;\n    long operator_index41\
    \ = 0;\n    long operator_index42 = 0;\n    long operator_index43 = 0;\n    long\
    \ operator_index44 = 0;\n    long operator_index45 = 0;\n    long operator_index46\
    \ = 0;\n    long operator_index47 = 0;\n    long operator_index48 = 0;\n    long\
    \ operator_index49 = 0;\n    long operator_index50 = 0;\n    long operator_index51\
    \ = 0;\n    long operator_index52 = 0;\n    long operator_index53 = 0;\n    long\
    \ operator_index54 = 0;\n    long operator_index55 = 0;\n    long operator_index56\
    \ = 0;\n    long operator_index57 = 0;\n    long operator_index58 = 0;\n    long\
    \ operator_index59 = 0;\n    long operator_index60 = 0;\n    long operator_index61\
    \ = 0;\n    long operator_index62 = 0;\n    long operator_index63 = 0;\n    long\
    \ operator_index64 = 0;\n    long operator_index65 = 0;\n    long operator_index66\
    \ = 0;\n    long operator_index67 = 0;\n    long operator_index68 = 0;\n    long\
    \ operator_index69 = 0;\n    long operator_index70 = 0;\n    long operator_index71\
    \ = 0;\n    long operator_index72 = 0;\n    \nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v_km31o.d(105): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8v_km31o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long\
    \ C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n\
    \    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long\
    \ L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n\
    \    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long\
    \ U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n\
    \    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n    long\
    \ DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long HH =\
    \ 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL = 0;\n\
    \    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n    long\
    \ QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long UU =\
    \ 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY = 0;\n\
    \    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n \
    \   long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n \
    \   long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n \
    \   long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n \
    \   long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n \
    \   long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n \
    \   long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    long AAAA = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m14ne7a.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m14ne7a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n  \
    \  long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n \
    \   long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F\
    \ = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n \
    \   long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O\
    \ = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n \
    \   long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X\
    \ = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8l0koh7_.d(128): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l0koh7_.d", "-I/tmp"]\n'''
  stdout: b''
