name: HumanEval_20_find_closest_elements
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6i3itg66.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp6i3itg66.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i3itg66.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_diff = smallest;\n    float largest_diff = largest;\n    \n \
    \   for (int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]\
    \ - smallest;\n        if (diff < smallest_diff)\n        {\n            smallest_diff\
    \ = diff;\n            smallest = numbers[i];\n        }\n        \n        diff\
    \ = numbers[i] - largest;\n        if (diff > largest_diff)\n        {\n     \
    \       largest_diff = diff;\n            largest = numbers[i];\n        }\n \
    \   }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`\
    \ as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmp932jt7e8.d(36):\
    \ Error: template instance `tmp932jt7e8.find_closest_elements.Tuple!(smallest,\
    \ largest)` error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp932jt7e8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0t0wrf8o.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmp0t0wrf8o.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t0wrf8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfloat closest =\
    \ numbers[0];\n\tfloat closest2 = numbers[0];\n\tfloat closest3 = numbers[0];\n\
    \tfloat closest4 = numbers[0];\n\tfloat closest5 = numbers[0];\n\tfloat closest6\
    \ = numbers[0];\n\tfloat closest7 = numbers[0];\n\tfloat closest8 = numbers[0];\n\
    \tfloat closest9 = numbers[0];\n\tfloat closest10 = numbers[0];\n\tfloat closest11\
    \ = numbers[0];\n\tfloat closest12 = numbers[0];\n\tfloat closest13 = numbers[0];\n\
    \tfloat closest14 = numbers[0];\n\tfloat closest15 = numbers[0];\n\tfloat closest16\
    \ = numbers[0];\n\tfloat closest17 = numbers[0];\n\tfloat closest18 = numbers[0];\n\
    \tfloat closest19 = numbers[0];\n\tfloat closest20 = numbers[0];\n\tfloat closest21\
    \ = numbers[0];\n\tfloat closest22 = numbers[0];\n\tfloat closest23 = numbers[0];\n\
    \tfloat closest24 = numbers[0];\n\tfloat closest25 = numbers[0];\n\tfloat closest26\
    \ = numbers[0];\n\tfloat closest27 = numbers[0];\n\tfloat closest28 = numbers[0];\n\
    \tfloat closest29 = numbers[0];\n\tfloat closest30 = numbers[0];\n\tfloat closest31\
    \ = numbers[0];\n\tfloat closest32 = numbers[0];\n\tfloat closest33 = numbers[0];\n\
    \tfloat closest34 = numbers[0];\n\tfloat closest35 = numbers[0];\n\tfloat closest36\
    \ = numbers[0];\n\tfloat closest37 = numbers[0];\n\tfloat closest38 = numbers[0];\n\
    \tfloat closest39 = numbers[0];\n\tfloat closest40 = numbers[0];\n\tfloat closest41\
    \ = numbers[0];\n\tfloat closest42 = numbers[0];\n\tfloat closest43 = numbers[0];\n\
    \tfloat closest44 = numbers[0];\n\tfloat closest45 = numbers[0];\n\tfloat closest46\
    \ = numbers[0];\n\tfloat closest47 = numbers[0];\n\tfloat closest48 = numbers[0];\n\
    \tfloat closest49 = numbers[0];\n\tfloat closest50 = numbers[0];\n\tfloat closest51\
    \ = numbers[0];\n\tfloat closest52 = numbers[0];\n\tfloat closest53 = numbers[0];\n\
    \tfloat closest54 = numbers[0];\n\tfloat closest55 = numbers[0];\n\tfloat closest56\
    \ = numbers[0];\n\tfloat closest57 = numbers[0];\n\tfloat closest58 = numbers[0];\n\
    \tfloat closest59 = numbers[0];\n\tfloat closest60 = numbers[0];\n\tfloat closest61\
    \ = numbers[0];\n\tfloat closest62 = numbers[0];\n\tfloat closest63 = numbers[0];\n\
    \tfloat closest64 = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3fqx2x4r.d(80): Error: semicolon expected, not `unittest`\\n/tmp/tmp3fqx2x4r.d(80):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3fqx2x4r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor(int i =\
    \ 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min)\n\t\t{\n\t\t\tmin\
    \ = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\
    \t\t}\n\t}\n\t\n\treturn Tuple!(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min, max)` cannot use local `min` as parameter\
    \ to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min, max)` cannot use local `max` as parameter\
    \ to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpn_1275l4.d(29):\
    \ Error: template instance `tmpn_1275l4.find_closest_elements.Tuple!(min, max)`\
    \ error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_1275l4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min1, min2;\n    float max1, max2;\n    float temp;\n    \n \
    \   min1 = max1 = numbers[0];\n    min2 = max2 = numbers[0];\n    \n    foreach(i\
    \ : numbers) {\n        if (i < min1) {\n            min1 = i;\n        }\n  \
    \      if (i > max1) {\n            max1 = i;\n        }\n        if (i < min2)\
    \ {\n            min2 = i;\n        }\n        if (i > max2) {\n            max2\
    \ = i;\n        }\n    }\n    \n    temp = min1;\n    min1 = min2;\n    min2 =\
    \ temp;\n    \n    temp = max1;\n    max1 = max2;\n    max2 = temp;\n    \n  \
    \  foreach(i : numbers) {\n        if (i < min1) {\n            min1 = i;\n  \
    \      }\n        if (i > max1) {\n            max1 = i;\n        }\n        if\
    \ (i < min2) {\n            min2 = i;\n        }\n        if (i > max2) {\n  \
    \          max2 = i;\n        }\n    }\n    \n    return Tuple!(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbcn0vnsc.d(21): Error: no identifier for declarator `i`\\n/tmp/tmpbcn0vnsc.d(21):\
    \ Error: found `:` when expecting `;`\\n/tmp/tmpbcn0vnsc.d(44): Error: no identifier\
    \ for declarator `i`\\n/tmp/tmpbcn0vnsc.d(44): Error: found `:` when expecting\
    \ `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcn0vnsc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest;\n    float largest;\n    float smallest_element;\n\
    \    float largest_element;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_element = numbers[0];\n    largest_element = numbers[0];\n    \n\
    \    foreach(number in numbers)\n    {\n        if(number < smallest)\n      \
    \  {\n            smallest = number;\n            smallest_element = number;\n\
    \        }\n        else if(number > largest)\n        {\n            largest\
    \ = number;\n            largest_element = number;\n        }\n    }\n    \n \
    \   return Tuple!(smallest_element, largest_element);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj0xvnjmd.d(24): Error: no identifier for declarator `number`\\\
    n/tmp/tmpj0xvnjmd.d(24): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0xvnjmd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied array\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float tolerance) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n        {\n\
    \            min1 = numbers[i];\n        }\n        if(numbers[i] > max1)\n  \
    \      {\n            max1 = numbers[i];\n        }\n        if(numbers[i] > max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n        if(numbers[i] <\
    \ min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min1, max1);\n}\n/*\n From a supplied array of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float tolerance, float epsilon) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2lmzb6mn.d(102): Error: found `unittest` instead of statement\\\
    n/tmp/tmp2lmzb6mn.d(112): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp2lmzb6mn.d(112): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2lmzb6mn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min1 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat min2 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor (int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\
    \t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\t\
    return Tuple!(min1, max1, min2, max2);\n}\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1, min2, max2)` cannot use local\
    \ `min1` as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1, min2, max2)` cannot use local\
    \ `max1` as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1, min2, max2)` cannot use local\
    \ `min2` as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1, min2, max2)` cannot use local\
    \ `max2` as parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpmo397wcf.d(40):\
    \ Error: template instance `tmpmo397wcf.find_closest_elements.Tuple!(min1, max1,\
    \ min2, max2)` error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpmo397wcf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpo26dwfq7.d(40):\
    \ Error: template instance `tmpo26dwfq7.find_closest_elements.Tuple!(min1, max1)`\
    \ error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo26dwfq7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat mid1 = numbers[0];\n\tfloat\
    \ mid2 = numbers[0];\n\tfloat mid3 = numbers[0];\n\tfloat mid4 = numbers[0];\n\
    \tfloat mid5 = numbers[0];\n\tfloat mid6 = numbers[0];\n\tfloat mid7 = numbers[0];\n\
    \tfloat mid8 = numbers[0];\n\tfloat mid9 = numbers[0];\n\tfloat mid10 = numbers[0];\n\
    \tfloat mid11 = numbers[0];\n\tfloat mid12 = numbers[0];\n\tfloat mid13 = numbers[0];\n\
    \tfloat mid14 = numbers[0];\n\tfloat mid15 = numbers[0];\n\tfloat mid16 = numbers[0];\n\
    \tfloat mid17 = numbers[0];\n\tfloat mid18 = numbers[0];\n\tfloat mid19 = numbers[0];\n\
    \tfloat mid20 = numbers[0];\n\tfloat mid21 = numbers[0];\n\tfloat mid22 = numbers[0];\n\
    \tfloat mid23 = numbers[0];\n\tfloat mid24 = numbers[0];\n\tfloat mid25 = numbers[0];\n\
    \tfloat mid26 = numbers[0];\n\tfloat mid27 = numbers[0];\n\tfloat mid28 = numbers[0];\n\
    \tfloat mid29 = numbers[0];\n\tfloat mid30 = numbers[0];\n\tfloat mid31 = numbers[0];\n\
    \tfloat mid32 = numbers[0];\n\tfloat mid33 = numbers[0];\n\tfloat mid34 = numbers[0];\n\
    \tfloat mid35 = numbers[0];\n\tfloat mid36 = numbers[0];\n\tfloat mid37 = numbers[0];\n\
    \tfloat mid38 = numbers[0];\n\tfloat mid39 = numbers[0];\n\tfloat mid40 = numbers[0];\n\
    \tfloat mid41 = numbers[0];\n\tfloat mid42 = numbers[0];\n\tfloat mid43 = numbers[0];\n\
    \tfloat mid44 = numbers[0];\n\tfloat mid45 = numbers[0];\n\tfloat mid46 = numbers[0];\n\
    \tfloat mid47 = numbers[0];\n\tfloat mid48 = numbers[0];\n\tfloat mid49 = numbers[0];\n\
    \tfloat mid50 = numbers[0];\n\tfloat mid51 = numbers[0];\n\tfloat mid52 = numbers[0];\n\
    \tfloat mid53 = numbers[0];\n\tfloat mid54 = numbers[0];\n\tfloat mid55 = numbers[0];\n\
    \tfloat mid56 = numbers[0];\n\tfloat mid57 = numbers[0];\n\tfloat mid58 = numbers[0];\n\
    \tfloat mid59 = numbers[0];\n\tfloat mid60 = numbers[0];\n\tfloat mid61 = numbers[0];\n\
    \tfloat mid62 = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd9wje9zj.d(80): Error: semicolon expected, not `unittest`\\n/tmp/tmpd9wje9zj.d(80):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd9wje9zj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest;\n    float largest;\n    float smallest_diff;\n   \
    \ float largest_diff;\n    float smallest_element;\n    float largest_element;\n\
    \    float smallest_distance;\n    float largest_distance;\n    float smallest_distance2;\n\
    \    float largest_distance2;\n    float smallest_distance3;\n    float largest_distance3;\n\
    \    float smallest_distance4;\n    float largest_distance4;\n    float smallest_distance5;\n\
    \    float largest_distance5;\n    float smallest_distance6;\n    float largest_distance6;\n\
    \    float smallest_distance7;\n    float largest_distance7;\n    float smallest_distance8;\n\
    \    float largest_distance8;\n    float smallest_distance9;\n    float largest_distance9;\n\
    \    float smallest_distance10;\n    float largest_distance10;\n    float smallest_distance11;\n\
    \    float largest_distance11;\n    float smallest_distance12;\n    float largest_distance12;\n\
    \    float smallest_distance13;\n    float largest_distance13;\n    float smallest_distance14;\n\
    \    float largest_distance14;\n    float smallest_distance15;\n    float largest_distance15;\n\
    \    float smallest_distance16;\n    float largest_distance16;\n    float smallest_distance17;\n\
    \    float largest_distance17;\n    float smallest_distance18;\n    float largest_distance18;\n\
    \    float smallest_distance19;\n    float largest_distance19;\n    float smallest_distance20;\n\
    \    float largest_distance20;\n    float smallest_distance21;\n    float largest_distance21;\n\
    \    float smallest_distance22;\n    float largest_distance22;\n    float smallest_distance23;\n\
    \    float largest_distance23;\n    float smallest_distance24;\n    float largest_distance24;\n\
    \    float smallest_distance25;\n    float largest_distance25;\n    float smallest_distance26;\n\
    \    float largest_distance26;\n    float smallest_distance27;\n    float largest_distance27;\n\
    \    float smallest_distance28;\n    float largest_distance28;\n    float smallest_distance29;\n\
    \    float largest_distance29;\n    float smallest_distance30;\n    float largest_distance30;\n\
    \    float smallest_distance31;\n    float largest_distance31;\n    float smallest_distance32;\n\
    \    \nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0699bucn.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0699bucn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tlet len = numbers.length;\n\tif (len < 2) {\n\t\tthrow new Exception(\"\
    find_closest_elements: array too small\");\n\t}\n\tlet min1 = numbers[0];\n\t\
    let max1 = numbers[0];\n\tlet min2 = numbers[0];\n\tlet max2 = numbers[0];\n\t\
    for (let i = 1; i < len; i++) {\n\t\tlet cur = numbers[i];\n\t\tif (cur < min1)\
    \ {\n\t\t\tmin1 = cur;\n\t\t}\n\t\tif (cur > max1) {\n\t\t\tmax1 = cur;\n\t\t\
    }\n\t\tif (cur < min2) {\n\t\t\tmin2 = cur;\n\t\t}\n\t\tif (cur > max2) {\n\t\t\
    \tmax2 = cur;\n\t\t}\n\t}\n\treturn Tuple!(min1, max1, min2, max2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwypni6x7.d(14): Error: undefined identifier `let`, did you mean\
    \ template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?\\n/tmp/tmpwypni6x7.d(18):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\n/tmp/tmpwypni6x7.d(19):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\n/tmp/tmpwypni6x7.d(20):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\n/tmp/tmpwypni6x7.d(21):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\n/tmp/tmpwypni6x7.d(22):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\n/tmp/tmpwypni6x7.d(23):\
    \ Error: undefined identifier `let`, did you mean variable `len`?\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwypni6x7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmphid9wds9.d(40):\
    \ Error: template instance `tmphid9wds9.find_closest_elements.Tuple!(min1, max1)`\
    \ error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphid9wds9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\tfloat temp;\n\tfloat temp2;\n\tfloat\
    \ temp3;\n\tfloat temp4;\n\tfloat temp5;\n\tfloat temp6;\n\tfloat temp7;\n\tfloat\
    \ temp8;\n\tfloat temp9;\n\tfloat temp10;\n\tfloat temp11;\n\tfloat temp12;\n\t\
    float temp13;\n\tfloat temp14;\n\tfloat temp15;\n\tfloat temp16;\n\tfloat temp17;\n\
    \tfloat temp18;\n\tfloat temp19;\n\tfloat temp20;\n\tfloat temp21;\n\tfloat temp22;\n\
    \tfloat temp23;\n\tfloat temp24;\n\tfloat temp25;\n\tfloat temp26;\n\tfloat temp27;\n\
    \tfloat temp28;\n\tfloat temp29;\n\tfloat temp30;\n\tfloat temp31;\n\tfloat temp32;\n\
    \tfloat temp33;\n\tfloat temp34;\n\tfloat temp35;\n\tfloat temp36;\n\tfloat temp37;\n\
    \tfloat temp38;\n\tfloat temp39;\n\tfloat temp40;\n\tfloat temp41;\n\tfloat temp42;\n\
    \tfloat temp43;\n\tfloat temp44;\n\tfloat temp45;\n\tfloat temp46;\n\tfloat temp47;\n\
    \tfloat temp48;\n\tfloat temp49;\n\tfloat temp50;\n\tfloat temp51;\n\tfloat temp52;\n\
    \tfloat temp53;\n\tfloat temp54;\n\tfloat temp55;\n\tfloat temp56;\n\tfloat temp57;\n\
    \tfloat temp58;\n\tfloat temp59;\n\tfloat temp60;\n\tfloat temp61;\n\tfloat temp62;\n\
    \tfloat temp63;\n\tfloat temp64;\n\tfloat temp65;\n\tfloat temp66;\n\tfloat temp67;\n\
    \tfloat temp68;\n\tfloat temp69;\n\tfloat temp70;\n\tfloat temp71;\n\tfloat temp72;\n\
    \tfloat temp73;\n\tfloat temp74;\n\tfloat temp75;\n\tfloat temp76;\n\tfloat temp77;\n\
    \tfloat temp78;\n\tfloat temp79;\n\tfloat temp80;\n\tfloat temp81;\n\tfloat temp82;\n\
    \tfloat temp83;\n\tfloat temp84\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4j7olvdt.d(102): Error: semicolon expected, not `unittest`\\\
    n/tmp/tmp4j7olvdt.d(102): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j7olvdt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ \n    foreach(number in numbers) {\n        if(number < smallest) {\n      \
    \      smallest = number;\n        }\n        if(number > largest) {\n       \
    \     largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5nx2w9ei.d(17): Error: no identifier for declarator `number`\\\
    n/tmp/tmp5nx2w9ei.d(17): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nx2w9ei.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \   {\n            min = numbers[i];\n        }\n        else if(numbers[i] >\
    \ max)\n        {\n            max = numbers[i];\n        }\n    }\n    \n   \
    \ return Tuple!(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min, max)` cannot use local `min` as parameter\
    \ to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min, max)` cannot use local `max` as parameter\
    \ to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpk5adbkeh.d(29):\
    \ Error: template instance `tmpk5adbkeh.find_closest_elements.Tuple!(min, max)`\
    \ error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5adbkeh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor (int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\
    \t\n\t\tif (numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\t\
    return Tuple!(min1, max1);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):\
    \ Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as\
    \ parameter to non-global template `parseSpecs(Specs...)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):\
    \ Error: CTFE failed because of previous errors in `injectNamedFields`\\n/tmp/tmpsddnpco0.d(40):\
    \ Error: template instance `tmpsddnpco0.find_closest_elements.Tuple!(min1, max1)`\
    \ error instantiating\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsddnpco0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw2yj9g6h.d(16): Error: no identifier for declarator `number`\\\
    n/tmp/tmpw2yj9g6h.d(16): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2yj9g6h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest;\n    float largest;\n    \n    smallest = numbers[0];\n\
    \    largest = numbers[0];\n    \n    foreach(number in numbers)\n    {\n    \
    \    if(number < smallest)\n        {\n            smallest = number;\n      \
    \  }\n        else if(number > largest)\n        {\n            largest = number;\n\
    \        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9h4rs24_.d(20): Error: no identifier for declarator `number`\\\
    n/tmp/tmp9h4rs24_.d(20): Error: found `in` when expecting `;`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h4rs24_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
