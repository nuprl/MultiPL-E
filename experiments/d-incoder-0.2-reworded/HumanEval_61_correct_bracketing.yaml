name: HumanEval_61_correct_bracketing
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"(\"\
  \ and \")\".\n    return true if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
  ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
  )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
  ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\")\
  \ == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
  )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
  ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
  (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"\
  ()()(()())()))()\") == false);\n}\nvoid main(){}"
completions: ["{\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    size_t brackets_length = brackets.length();\n    size_t i;\n    for(i\
    \ = 0; i < brackets_length; ++i)\n    {\n        if(brackets[i] == '(')\n    \
    \        ++opening_brackets;\n        else if(brackets[i] == ')')\n          \
    \  ++closing_brackets;\n        else\n            return false;\n    }\n    return\
    \ opening_brackets == closing_brackets;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] ==\
    \ '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n     \
    \           return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '{')\n        {\n            if(brackets[i+1] != '}')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '[')\n        {\n            if(brackets[i+1] != ']')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '(' || c == '[' || c ==\
    \ '{')\n        {\n            if(brackets[i+1] != ')')\n            {\n     \
    \           return false;\n            }\n        }\n        else if(c == '}'\
    \ || c == ']')\n        {\n            if(brackets[i+1] != ']')\n            {\n\
    \                return false;\n            }\n        }\n        else if(c ==\
    \ ')' || c == ']' || c == '}')\n        {\n            if(brackets[i+1] != '}')\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n\
    \    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(brackets[i] == ')')\n        {\n            if(brackets[i-1]\
    \ != '(')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '(')\n    \
    \    {\n            if(brackets[i+1] != ')')\n            {\n                return\
    \ false;\n            }\n        }\n        else if(brackets[i] == ')')\n    \
    \    {\n            if(brackets[i-1] != '(')\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}", "{\n    map<string,\
    \ string> bracketMap;\n    for(size_t i = 0; i < brackets.length(); i++)\n   \
    \ {\n        string opening = brackets.substr(0, i);\n        string closing =\
    \ brackets.substr(i, brackets.length() - i);\n        bracketMap[opening] = closing;\n\
    \    }\n    \n    string result = \"\";\n    for(map<string, string>::iterator\
    \ it = bracketMap.begin(); it != bracketMap.end(); ++it)\n    {\n        result\
    \ += it->first;\n        result += it->second;\n    }\n    \n    return result\
    \ == brackets;\n}", "{\n    size_t brackets_size = brackets.length();\n    size_t\
    \ opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t i;\n   \
    \ bool result = true;\n    for(i = 0; i < brackets_size; ++i)\n    {\n       \
    \ char c = brackets[i];\n        if(c == '(')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if(c == ')')\n        {\n            ++closing_brackets;\n\
    \        }\n        else\n        {\n            result = false;\n        }\n\
    \        if(opening_brackets != closing_brackets)\n        {\n            result\
    \ = false;\n        }\n    }\n    return result;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index\
    \ = 0;\n    bool result = true;\n    \n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if (c == '(')\n        {\n\
    \            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \        }\n        else if (c == ')')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else if (c == ')' &&\
    \ opening_brackets_size > 0 && closing_brackets_size > 0)\n        {\n       \
    \     opening_brackets_size--;\n            closing_brackets_size--;\n       \
    \ }\n        else if (c == '(' && opening_brackets_size > 0 && closing_brackets_size\
    \ == 0)\n        {\n            opening_brackets_size--;\n        }\n        else\
    \ if (c == '(' && opening_brackets_size == 0 && closing_brackets_size > 0)\n \
    \       {\n            closing_brackets_size--;\n        }\n        else if (c\
    \ == '(' && opening_brackets_size == 0 && closing_brackets_size == 0)\n      \
    \  {\n            result = false;\n        }\n    }\n    \n    if (opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '(')\n        {\n            for(int j = i; j <\
    \ brackets.length(); j++)\n            {\n                if(brackets[j] == ')')\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis is not correct. `correct_bracketing(\"(()())\")` returns `true`\
    \ but `correct_bracketing(\"))(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: I\
    \ fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThis is not correct. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\"))(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t brackets_length = brackets.length();\n    for(size_t i = 0;\
    \ i < brackets_length; ++i)\n    {\n        if(brackets[i] == '(')\n         \
    \   ++opening_brackets;\n        else if(brackets[i] == ')')\n            ++closing_brackets;\n\
    \        else\n            return false;\n    }\n    return opening_brackets ==\
    \ closing_brackets;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != '(')\n                return false;\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n\tsize_t len = brackets.length();\n\
    \tsize_t i;\n\tbool result = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tif(brackets[i]\
    \ == '(')\n\t\t{\n\t\t\tif(!brackets[i+1] || brackets[i+1] != ')')\n\t\t\t{\n\t\
    \t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(brackets[i]\
    \ == ')')\n\t\t{\n\t\t\tif(!brackets[i-1] || brackets[i-1] != ')')\n\t\t\t{\n\t\
    \t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. I tested it before posting.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ Fixed it.\n<|/ c |>\n<| c |>\n: I added a second solution that works with your\
    \ test case.\n<|/ c |>\n<| c |>\n: I added a third solution that works with your\
    \ test case.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] ==\
    \ '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n            i += 2;\n        }\n    }\n    return true;\n}", "{\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ '(')\n        {\n            for(int j = i + 1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n        else if(brackets[i] == ')')\n        {\n            if(brackets[i-1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"()\"`.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it with\
    \ `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt doesn't work for `\"(()())\"`. Try it with\
    \ `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt works for me. Try it with `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it with `\"(()())\"`.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\nThe algorithm is simple:", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(brackets[i + 1] != '(')\n            {\n                return\
    \ false;\n            }\n        }\n        else if(brackets[i] == ')')\n    \
    \    {\n            if(brackets[i + 1] != '(')\n            {\n              \
    \  return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    size_t opening_brackets = brackets.length();\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets.length();\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets;\n     \
    \   else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result =\
    \ true;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '(')\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    for(i = len - 1; i >= 0; --i)\n    {\n        if(brackets[i] != ')')\n  \
    \      {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `()()()`\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It works.\
    \ Try it yourself. It returns `true` for `()()()`.\n<|/ c |>\n<| c |>\n: It returns\
    \ `true` for `()()()`. Try it yourself. It returns `true` for `()()()`.\n<|/ c\
    \ |>\n<| c |>\n: It returns `true` for `()()()`. Try it yourself. It returns `true`\
    \ for `()()()`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
