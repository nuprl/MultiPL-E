language: d
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp246k8hvy.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp246k8hvy.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp246k8hvy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.abs(std.math.floor(value));\n\
    \    long upper = std.math.abs(std.math.ceil(value));\n    long difference = upper\
    \ - lower;\n    long closest_integer = lower;\n    \n    if (difference < 0)\n\
    \    {\n        closest_integer = std.math.max(lower, std.math.min(upper, value));\n\
    \    }\n    \n    return closest_integer;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c++,math,algorithm |>\nI believe that your problem is in the following\
    \ line:\n<code>\nlong closest_integer = std.math.max(lower, std.math.min(upper,\
    \ value));\n</code>\nThe max function returns the largest of the two arguments.\
    \ Since your upper and lower variables are of type long, they will always be larger\
    \ than the value you are trying to return. Try casting your variables to int and\
    \ see if it works.\n<|/ a dscore=1 |>\n<| c |>\nThe `max` function doesn't return\
    \ `int`, it returns `long`. Casting won't help.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I was thinking of a different function which would return an int. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlong closest_integer(string\
    \ value) \n{\n    long lower = std.math.abs(std.math.floor(value));\n    long\
    \ upper = std.math.abs(std.math.ceil(value));\n    long difference = upper - lower;\n\
    \    long closest_integer = lower;\n    \n    if (difference < 0)\n    {\n   \
    \     closest_integer = std.math.max(lower, std.math.min(upper, value));\n   \
    \ }\n    \n    return closest_integer;\n}\n</code>\n<|/ a tags=c++,math,algorithm\
    \ |>\n<| a tags=c++,math,algorithm |>\n<code>\nlong closest_integer(string value)\
    \ \n{\n    long lower = std.math.abs(std.math.floor(value));\n    long upper =\
    \ std.math.abs(std.math.ceil(value));\n    long difference = upper - lower;\n\
    \    long closest_integer = lower;\n    \n    if (difference < 0)\n    {\n   \
    \     closest_integer = std.math.max(lower, std.math.min(upper, value));\n   \
    \ }\n    \n    return closest_integer;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nlong closest_integer(string value) \n\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphtorqhjq.d(36): Error: declaration expected, not `<`\n/tmp/tmphtorqhjq.d(42):
    Error: declaration expected, not `<`\n/tmp/tmphtorqhjq.d(46): Error: unterminated
    character constant\n/tmp/tmphtorqhjq.d(46): Error: unterminated character constant\n/tmp/tmphtorqhjq.d(60):
    Error: declaration expected, not `if`\n/tmp/tmphtorqhjq.d(63): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtorqhjq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw0e8mbu0.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpw0e8mbu0.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpw0e8mbu0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long min;\n\
    \    long max;\n    long diff;\n    long closest;\n    \n    num = std.string.toLong(value);\n\
    \    min = num;\n    max = num;\n    diff = num;\n    \n    while(true)\n    {\n\
    \        diff = max - min;\n        if(diff == 0)\n        {\n            break;\n\
    \        }\n        \n        closest = min + diff/2;\n        if(closest == num)\n\
    \        {\n            break;\n        }\n        \n        if(closest < num)\n\
    \        {\n            min = closest;\n        }\n        else\n        {\n \
    \           max = closest;\n        }\n    }\n    \n    return closest;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc5w6sc5d.d(30): Error: undefined identifier `string` in package
    `std`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5w6sc5d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb65374fc.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpb65374fc.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpb65374fc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value.substr(0, value.length()-1))));\n    long upper\
    \ = std.math.max(std.math.abs(std.math.long(value)), std.math.abs(std.math.long(value.substr(0,\
    \ value.length()-1))));\n    long mid = std.math.max(lower, upper);\n    long\
    \ diff = std.math.abs(std.math.long(value.substr(0, value.length()-1)));\n   \
    \ long closest;\n    \n    if (diff == lower)\n    {\n        closest = (mid -\
    \ diff);\n    }\n    else if (diff == upper)\n    {\n        closest = (mid +\
    \ diff);\n    }\n    else\n    {\n        closest = (mid - diff);\n    }\n   \
    \ \n    return closest;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c\
    \ |>\nThis doesn't work if your input is a negative number.\n<|/ c |>\n<| c |>\n\
    It does work if you change `long` to `long long`\n<|/ c |>\n<| c |>\nIt does work\
    \ if you change `long` to `long long`\n<|/ c |>\n<| c |>\nIt does work if you\
    \ change `long` to `long long`\n<|/ c |>\n<| c |>\nIt does work if you change\
    \ `long` to `long long`\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cmath>\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt5qe84g4.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpt5qe84g4.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpt5qe84g4.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpt5qe84g4.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpt5qe84g4.d(27): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpt5qe84g4.d(45): Error: declaration expected, not `<`\n/tmp/tmpt5qe84g4.d(48):
    Error: unterminated character constant\n/tmp/tmpt5qe84g4.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmpt5qe84g4.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmpt5qe84g4.d(74): Error: declaration expected, not `assert`\n/tmp/tmpt5qe84g4.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpt5qe84g4.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpt5qe84g4.d(77): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5qe84g4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8lz_aes8.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp8lz_aes8.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8lz_aes8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdp2_ulmo.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpdp2_ulmo.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdp2_ulmo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,\
    \ value.find_first_of(\"0123456789\")));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    0123456789\") + 1));\n    long diff = upper - lower;\n    long closest;\n    if\
    \ (diff > 0)\n    {\n        closest = (diff > 1) ? lower + diff : lower;\n  \
    \  }\n    else\n    {\n        closest = (diff < -1) ? upper - diff : upper;\n\
    \    }\n    return closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpopmv0eha.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpopmv0eha.d(25): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopmv0eha.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1jejpz96.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp1jejpz96.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1jejpz96.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwt7aokyl.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpwt7aokyl.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwt7aokyl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7csiho85.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp7csiho85.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7csiho85.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpib2dik_w.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpib2dik_w.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpib2dik_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,\
    \ value.find_first_of(\"0123456789\")));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    0123456789\") + 1));\n    long diff = upper - lower;\n    if (diff == 0)\n   \
    \     return lower;\n    if (diff > 0)\n        return lower + 1;\n    return\
    \ lower - 1;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptfs600z6.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmptfs600z6.d(25): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfs600z6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpecpbd5q7.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpecpbd5q7.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpecpbd5q7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps18_2a_6.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmps18_2a_6.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps18_2a_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp479c2c80.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp479c2c80.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp479c2c80.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpata9vtpm.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmpata9vtpm.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpata9vtpm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value.substr(0, value.length() - 1)));\n    long\
    \ upper = std.math.max(std.math.abs(std.math.long(value)), std.math.abs(std.math.long(value.substr(0,\
    \ value.length() - 1)));\n    long diff = upper - lower;\n    if (diff > 0)\n\
    \        return lower + 1;\n    else\n        return lower;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpspsqkwh9.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpspsqkwh9.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpspsqkwh9.d(24): Error: found `;` when expecting `,`\n/tmp/tmpspsqkwh9.d(25):
    Error: found `upper` when expecting `.` following long\n/tmp/tmpspsqkwh9.d(25):
    Error: found `=` when expecting identifier following `long`.\n/tmp/tmpspsqkwh9.d(25):
    Error: found `std` when expecting `,`\n/tmp/tmpspsqkwh9.d(25): Error: identifier
    expected following `.`, not `long`\n/tmp/tmpspsqkwh9.d(25): Error: identifier
    expected following `.`, not `long`\n/tmp/tmpspsqkwh9.d(25): Error: found `;` when
    expecting `,`\n/tmp/tmpspsqkwh9.d(26): Error: found `diff` when expecting `.`
    following long\n/tmp/tmpspsqkwh9.d(26): Error: found `=` when expecting identifier
    following `long`.\n/tmp/tmpspsqkwh9.d(26): Error: found `upper` when expecting
    `,`\n/tmp/tmpspsqkwh9.d(26): Error: found `;` when expecting `,`\n/tmp/tmpspsqkwh9.d(27):
    Error: expression expected, not `if`\n/tmp/tmpspsqkwh9.d(28): Error: found `return`
    when expecting `,`\n/tmp/tmpspsqkwh9.d(28): Error: found `;` when expecting `,`\n/tmp/tmpspsqkwh9.d(29):
    Error: expression expected, not `else`\n/tmp/tmpspsqkwh9.d(30): Error: found `return`
    when expecting `,`\n/tmp/tmpspsqkwh9.d(30): Error: found `;` when expecting `,`\n/tmp/tmpspsqkwh9.d(31):
    Error: expression expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpspsqkwh9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower, upper;\n    lower\
    \ = std.math.toLong(value.substr(0, value.find_first_of(\"0123456789\")));\n \
    \   upper = std.math.toLong(value.substr(value.find_first_of(\"0123456789\") +\
    \ 1));\n    \n    if (lower == upper)\n        return lower;\n    \n    if (lower\
    \ == 0)\n        return lower;\n    \n    if (upper == 0)\n        return upper;\n\
    \    \n    if (lower == upper)\n        return lower;\n    \n    if (lower > upper)\n\
    \        return lower;\n    \n    return upper;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpukqyoo5i.d(25): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpukqyoo5i.d(26): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukqyoo5i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,\
    \ value.find_first_of(\"0123456789\")));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    0123456789\") + 1));\n    long diff = upper - lower;\n    if (diff == 0) return\
    \ lower;\n    if (diff > 0) return lower + 1;\n    return lower - 1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,string,int,parsing |>\nI came up with a simple\
    \ solution that doesn't require any string manipulation or regex. \n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dtm6skt.d(31): Error: declaration expected, not `<`\n/tmp/tmp0dtm6skt.d(34):
    Error: unterminated character constant\n/tmp/tmp0dtm6skt.d(43): Error: declaration
    expected, not `assert`\n/tmp/tmp0dtm6skt.d(44): Error: declaration expected, not
    `assert`\n/tmp/tmp0dtm6skt.d(45): Error: declaration expected, not `assert`\n/tmp/tmp0dtm6skt.d(46):
    Error: declaration expected, not `assert`\n/tmp/tmp0dtm6skt.d(47): Error: declaration
    expected, not `assert`\n/tmp/tmp0dtm6skt.d(48): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dtm6skt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,value.find_first_of(\"\
    .\")-1));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    .\")+1));\n    long diff = upper - lower;\n    long closest;\n    if (diff < 0)\n\
    \    {\n        closest = (diff < 0) ? lower : upper;\n    }\n    else\n    {\n\
    \        closest = (diff > 0) ? lower : upper;\n    }\n    return closest;\n}\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2iycaky.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpl2iycaky.d(25): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2iycaky.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ std.toLong(\"0\"));\n    long upper = std.math.max(std.toLong(value), std.toLong(\"\
    0\"));\n    long diff = upper - lower;\n    long closest;\n    \n    if (diff\
    \ < 0)\n    {\n        closest = (diff < 0) ? lower : upper;\n    }\n    else\n\
    \    {\n        closest = (diff > 0) ? lower : upper;\n    }\n    \n    return\
    \ closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphm0femr5.d(24): Error: undefined identifier `min` in module
    `std.math`, did you mean function `sin`?\n/tmp/tmphm0femr5.d(25): Error: undefined
    identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphm0femr5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ 0L);\n    long upper = std.math.max(std.toLong(value), 0L);\n    long diff =\
    \ upper - lower;\n    long closest;\n    if (diff == 0L) {\n        closest =\
    \ lower;\n    } else {\n        closest = lower + diff/2;\n    }\n    return closest;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcd9iuptw.d(24): Error: undefined identifier `min` in module
    `std.math`, did you mean function `sin`?\n/tmp/tmpcd9iuptw.d(25): Error: undefined
    identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd9iuptw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ 0L);\n    long upper = std.math.max(std.toLong(value), 0L);\n    long diff =\
    \ upper - lower;\n    long closest;\n    \n    if (diff == 0L) {\n        closest\
    \ = lower;\n    } else {\n        closest = lower + diff;\n    }\n    \n    return\
    \ closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_qkwmsca.d(24): Error: undefined identifier `min` in module
    `std.math`, did you mean function `sin`?\n/tmp/tmp_qkwmsca.d(25): Error: undefined
    identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qkwmsca.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,value.find_first_of(\"\
    .\")-1));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    .\")+1));\n    long diff = upper - lower;\n    long closest;\n    if (diff < 0)\n\
    \    {\n        closest = lower + diff;\n    }\n    else\n    {\n        closest\
    \ = lower - diff;\n    }\n    return closest;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq5l_8rhq.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpq5l_8rhq.d(25): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5l_8rhq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.abs(std.math.floor(value));\n\
    \    long upper = std.math.abs(std.math.ceil(value));\n    long diff = upper -\
    \ lower;\n    if (diff > 0)\n        return lower;\n    return upper;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphlpy83qp.d(24): Error: none of the overloads of `floor` are
    callable using argument types `(string)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):        `std.math.floor(real
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4461):        `std.math.floor(double
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):        `std.math.floor(float
    x)`\n/tmp/tmphlpy83qp.d(25): Error: none of the overloads of `ceil` are callable
    using argument types `(string)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):        `std.math.ceil(real
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4335):        `std.math.ceil(double
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):        `std.math.ceil(float
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlpy83qp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower, upper;\n    lower\
    \ = std.math.toLong(value);\n    upper = std.math.toLong(value);\n    while(lower\
    \ > upper)\n    {\n        lower = std.math.toLong(std.string.reverse(value));\n\
    \        upper = std.math.toLong(std.string.reverse(value));\n    }\n    return\
    \ lower;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu66c0x9z.d(25): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpu66c0x9z.d(26): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpu66c0x9z.d(29): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpu66c0x9z.d(30): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu66c0x9z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long closest;\n    long diff2;\n    \n    num = std.string(value).parse();\n\
    \    diff = abs(num - floor(num));\n    \n    if (diff < diff2)\n    {\n     \
    \   closest = num;\n        diff2 = diff;\n    }\n    else\n    {\n        closest\
    \ = floor(num);\n        diff2 = diff;\n    }\n    \n    return closest;\n}\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpieok7r_9.d(29): Error: undefined identifier `string` in package
    `std`\n/tmp/tmpieok7r_9.d(30): Error: `std.math.floor` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float
    x)`\n/tmp/tmpieok7r_9.d(39): Error: `std.math.floor` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):     `std.math.floor(real
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):     `std.math.floor(float
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpieok7r_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,\
    \ value.find_first_of(\"0123456789\")));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    0123456789\") + 1));\n    long diff = upper - lower;\n    long closest;\n    if\
    \ (diff < 0)\n    {\n        closest = (diff < 0) ? lower : upper;\n    }\n  \
    \  else\n    {\n        closest = (diff > 0) ? lower : upper;\n    }\n    return\
    \ closest;\n}\n/*\nunittest\n{\n    alias candidate = closest_integer;\n\n   \
    \ assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwnakpva8.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwnakpva8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long min;\n\
    \    long max;\n    long diff;\n    long closest;\n    \n    num = std.string.toLong(value);\n\
    \    min = num;\n    max = num;\n    diff = num;\n    \n    while(true)\n    {\n\
    \        diff = max - min;\n        if(diff == 0)\n        {\n            break;\n\
    \        }\n        \n        if(diff > 0)\n        {\n            min = min +\
    \ diff;\n        }\n        else\n        {\n            max = max - diff;\n \
    \       }\n    }\n    \n    closest = min;\n    \n    if(num == min)\n    {\n\
    \        closest = num;\n    }\n    \n    if(num == max)\n    {\n        closest\
    \ = num;\n    }\n    \n    return closest;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpww5zjq50.d(30): Error: undefined identifier `string` in package
    `std`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww5zjq50.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value)));\n    long upper = std.math.max(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value)));\n    long mid = std.math.long(std.math.abs(std.math.long(value))/2);\n\
    \    \n    if (lower == upper)\n    {\n        return mid;\n    }\n    \n    if\
    \ (std.math.abs(mid - lower) < std.math.abs(mid - upper))\n    {\n        return\
    \ mid;\n    }\n    else\n    {\n        return lower;\n    }\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0mnlzxg.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpd0mnlzxg.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpd0mnlzxg.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpd0mnlzxg.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpd0mnlzxg.d(26): Error: identifier expected following `.`, not
    `long`\n/tmp/tmpd0mnlzxg.d(26): Error: identifier expected following `.`, not
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0mnlzxg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.abs(std.math.floor(value));\n\
    \    long upper = std.math.abs(std.math.ceil(value));\n    long diff = upper -\
    \ lower;\n    if (diff == 0)\n        return lower;\n    if (diff > 0)\n     \
    \   return lower;\n    return upper;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbu67ytrn.d(24): Error: none of the overloads of `floor` are
    callable using argument types `(string)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4394):        `std.math.floor(real
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4461):        `std.math.floor(double
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4487):        `std.math.floor(float
    x)`\n/tmp/tmpbu67ytrn.d(25): Error: none of the overloads of `ceil` are callable
    using argument types `(string)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4266):        `std.math.ceil(real
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4335):        `std.math.ceil(double
    x)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(4363):        `std.math.ceil(float
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbu67ytrn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value.substr(0,\
    \ value.find_first_of(\"0123456789\")));\n    long upper = std.math.toLong(value.substr(value.find_first_of(\"\
    0123456789\") + 1));\n    long diff = upper - lower;\n    if (diff == 0)\n   \
    \     return lower;\n    long closest = (diff > 0) ? lower : upper;\n    if (diff\
    \ < 0)\n        closest = (diff > 0) ? upper : lower;\n    return closest;\n}\n\
    /*\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjeeya452.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjeeya452.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long closest;\n\
    \    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n\
    \    long diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long\
    \ diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n\
    \    long diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long\
    \ diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n\
    \    long diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long\
    \ diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n\
    \    long diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long\
    \ diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n\
    \    long diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long\
    \ diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n\
    \    long diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long\
    \ diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n\
    \    long diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long\
    \ diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n\
    \    long diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long\
    \ diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n\
    \    long diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long\
    \ diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n\
    \    long diff87\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp044viea7.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp044viea7.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp044viea7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long closest;\n    long diff2;\n    \n    num = std.string.toLong(value);\n\
    \    diff = abs(num - num.floor());\n    diff2 = abs(num - num.ceil());\n    \n\
    \    if (diff < diff2) {\n        closest = num.floor();\n    } else {\n     \
    \   closest = num.ceil();\n    }\n    \n    return closest;\n}\n/*\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphh0lynuj.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphh0lynuj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ 0L);\n    long upper = std.math.max(std.toLong(value), 0L);\n    long diff =\
    \ upper - lower;\n    if (diff == 0L) return lower;\n    long closest;\n    if\
    \ (diff > 0)\n    {\n        closest = (lower + diff - 1L) / 2;\n    }\n    else\n\
    \    {\n        closest = (lower + diff + 1L) / 2;\n    }\n    return closest;\n\
    }\n/*\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpicgbp_87.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpicgbp_87.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff;\n    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n\
    \    long diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long\
    \ diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n\
    \    long diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long\
    \ diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n\
    \    long diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long\
    \ diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n\
    \    long diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long\
    \ diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n\
    \    long diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long\
    \ diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n\
    \    long diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long\
    \ diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n\
    \    long diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long\
    \ diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n\
    \    long diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long\
    \ diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n\
    \    long diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long\
    \ diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n\
    \    long diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphiniujmk.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphiniujmk.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphiniujmk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long min;\n\
    \    long max;\n    long diff;\n    long closest;\n    \n    num = std.string.toLong(value);\n\
    \    min = num;\n    max = num;\n    diff = max;\n    \n    while(true)\n    {\n\
    \        diff = max - min;\n        closest = min + diff;\n        \n        if(closest\
    \ == num)\n        {\n            return closest;\n        }\n        else if(closest\
    \ < num)\n        {\n            min = closest;\n        }\n        else\n   \
    \     {\n            max = closest;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj3r6xkpq.d(30): Error: undefined identifier `string` in package
    `std`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3r6xkpq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ 0L);\n    long upper = std.math.max(std.toLong(value), 0L);\n    long mid =\
    \ (lower + upper) / 2;\n    long diff = (lower - upper);\n    long closest;\n\
    \    if (diff < 0)\n    {\n        closest = (mid - 1);\n    }\n    else\n   \
    \ {\n        closest = (mid + 1);\n    }\n    return closest;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_3fk_id.d(24): Error: undefined identifier `min` in module
    `std.math`, did you mean function `sin`?\n/tmp/tmpz_3fk_id.d(25): Error: undefined
    identifier `max` in module `std.math`, did you mean function `fmax`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_3fk_id.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ 0L);\n    long upper = std.math.max(std.toLong(value), 0L);\n    long diff =\
    \ upper - lower;\n    long closest;\n    \n    if (diff == 0L) {\n        closest\
    \ = lower;\n    } else {\n        long mid = lower + (diff / 2L);\n        closest\
    \ = std.math.min(mid, upper);\n    }\n    \n    return closest;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3i8h6dpe.d(24): Error: undefined identifier `min` in module
    `std.math`, did you mean function `sin`?\n/tmp/tmp3i8h6dpe.d(25): Error: undefined
    identifier `max` in module `std.math`, did you mean function `fmax`?\n/tmp/tmp3i8h6dpe.d(33):
    Error: undefined identifier `min` in module `std.math`, did you mean function
    `sin`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3i8h6dpe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value.substr(0, value.find_first_of(\"E\")))), std.math.abs(std.math.long(value.substr(0,\
    \ value.find_first_of(\"e\")))));\n    long upper = std.math.max(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value.substr(0, value.find_first_of(\"E\")))), std.math.abs(std.math.long(value.substr(0,\
    \ value.find_first_of(\"e\")))));\n    long diff = upper - lower;\n    long closest;\n\
    \    if (diff < 0)\n    {\n        closest = (diff < 0) ? lower : upper;\n   \
    \ }\n    else\n    {\n        closest = (diff < 0) ? upper : lower;\n    }\n \
    \   return closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp422pzsao.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp422pzsao.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp422pzsao.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp422pzsao.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp422pzsao.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp422pzsao.d(25): Error: identifier expected following `.`, not
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp422pzsao.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value);\n\
    \    long upper = std.math.toLong(value);\n    long mid;\n    \n    while(lower\
    \ > upper)\n    {\n        mid = (lower + upper) / 2;\n        if(std.math.abs(mid\
    \ - value) < std.math.abs(mid - lower))\n            lower = mid;\n        else\n\
    \            upper = mid;\n    }\n    return lower;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvp8ehix.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpwvp8ehix.d(25): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmpwvp8ehix.d(31): Error: incompatible types for `(mid) - (value)`:
    `long` and `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvp8ehix.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value)));\n    long upper = std.math.max(std.math.abs(std.math.long(value)),\
    \ std.math.abs(std.math.long(value)));\n    long mid = std.math.long(std.math.abs(std.math.long(value))/2);\n\
    \    \n    long diff;\n    \n    if (lower == upper)\n    {\n        diff = std.math.abs(std.math.long(value)\
    \ - mid);\n    }\n    else\n    {\n        diff = std.math.abs(std.math.long(value)\
    \ - mid);\n        if (diff < lower)\n        {\n            diff = lower;\n \
    \       }\n        else if (diff > upper)\n        {\n            diff = upper;\n\
    \        }\n    }\n    \n    return mid;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_v2tkra.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(26): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(26): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(32): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(36): Error: identifier expected following `.`, not
    `long`\n/tmp/tmps_v2tkra.d(49): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps_v2tkra.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long num;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rmuj1as.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmp9rmuj1as.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9rmuj1as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.min(std.toLong(value),\
    \ std.toLong(lower));\n    long upper = std.math.max(std.toLong(value), std.toLong(upper));\n\
    \    long diff = upper - lower;\n    long closest;\n    if (diff == 0) return\
    \ lower;\n    if (diff < 0) return std.toLong(lower);\n    closest = (diff > 0)\
    \ ? std.toLong(lower + 1) : std.toLong(upper - 1);\n    return closest;\n}\n/*\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp67iziv8u.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp67iziv8u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n \
    \   long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8\
    \ = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long\
    \ diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n\
    \    long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n    long diff83 = 0;\n    long diff84 = 0;\n    long diff85 = 0;\n\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9a68kvu1.d(111): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a68kvu1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.abs(std.math.long(value));\n\
    \    long upper = std.math.abs(std.math.long(std.math.max(value)));\n    long\
    \ mid = std.math.abs(std.math.long(std.math.min(value)));\n    long diff = upper\
    \ - lower;\n    long closest;\n    \n    if (diff == 0)\n    {\n        closest\
    \ = std.math.long(std.math.max(value));\n    }\n    else\n    {\n        closest\
    \ = std.math.long(std.math.min(value));\n    }\n    \n    if (diff < 0)\n    {\n\
    \        closest = std.math.long(std.math.max(value));\n    }\n    \n    if (diff\
    \ > 0)\n    {\n        closest = std.math.long(std.math.min(value));\n    }\n\
    \    \n    return closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6mdc5by7.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(25): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(26): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(32): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(36): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(41): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp6mdc5by7.d(46): Error: identifier expected following `.`, not
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mdc5by7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.abs(std.math.long(value));\n\
    \    long upper = std.math.abs(std.math.long(std.math.max(value)));\n    long\
    \ diff = upper - lower;\n    long closest;\n    if (diff == 0)\n        closest\
    \ = (lower + upper) / 2;\n    else\n        closest = (lower + upper) / 2 + diff;\n\
    \    return closest;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7mfy1s04.d(24): Error: identifier expected following `.`, not
    `long`\n/tmp/tmp7mfy1s04.d(25): Error: identifier expected following `.`, not
    `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7mfy1s04.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long lower = std.math.toLong(value);\n\
    \    long upper = std.math.toLong(value);\n    long difference = upper - lower;\n\
    \    long closest;\n    \n    if (difference < 0)\n    {\n        difference =\
    \ -difference;\n        closest = -lower;\n    }\n    else\n    {\n        closest\
    \ = lower;\n    }\n    \n    while (difference > 0)\n    {\n        difference\
    \ /= 10;\n        closest *= 10;\n    }\n    \n    return closest;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6s8m3cid.d(24): Error: undefined identifier `toLong` in module
    `std.math`\n/tmp/tmp6s8m3cid.d(25): Error: undefined identifier `toLong` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6s8m3cid.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    long\
    \ minDiff = Long.MAX_VALUE;\n    long diff;\n    \n    foreach(char c in value)\n\
    \    {\n        long value = std.string.toLong(c);\n        diff = value - result;\n\
    \        if (diff < minDiff)\n        {\n            minDiff = diff;\n       \
    \     result = value;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn6wvvf9.d(28): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn6wvvf9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result;\n    long diff;\n\
    \    long diff2;\n    long diff3;\n    long diff4;\n    long diff5;\n    long\
    \ diff6;\n    long diff7;\n    long diff8;\n    long diff9;\n    long diff10;\n\
    \    long diff11;\n    long diff12;\n    long diff13;\n    long diff14;\n    long\
    \ diff15;\n    long diff16;\n    long diff17;\n    long diff18;\n    long diff19;\n\
    \    long diff20;\n    long diff21;\n    long diff22;\n    long diff23;\n    long\
    \ diff24;\n    long diff25;\n    long diff26;\n    long diff27;\n    long diff28;\n\
    \    long diff29;\n    long diff30;\n    long diff31;\n    long diff32;\n    long\
    \ diff33;\n    long diff34;\n    long diff35;\n    long diff36;\n    long diff37;\n\
    \    long diff38;\n    long diff39;\n    long diff40;\n    long diff41;\n    long\
    \ diff42;\n    long diff43;\n    long diff44;\n    long diff45;\n    long diff46;\n\
    \    long diff47;\n    long diff48;\n    long diff49;\n    long diff50;\n    long\
    \ diff51;\n    long diff52;\n    long diff53;\n    long diff54;\n    long diff55;\n\
    \    long diff56;\n    long diff57;\n    long diff58;\n    long diff59;\n    long\
    \ diff60;\n    long diff61;\n    long diff62;\n    long diff63;\n    long diff64;\n\
    \    long diff65;\n    long diff66;\n    long diff67;\n    long diff68;\n    long\
    \ diff69;\n    long diff70;\n    long diff71;\n    long diff72;\n    long diff73;\n\
    \    long diff74;\n    long diff75;\n    long diff76;\n    long diff77;\n    long\
    \ diff78;\n    long diff79;\n    long diff80;\n    long diff81;\n    long diff82;\n\
    \    long diff83;\n    long diff84;\n    long diff85;\n    long diff86;\n    long\
    \ diff87;\n    long diff88\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhde8jqr.d(113): Error: semicolon expected, not `unittest`\n/tmp/tmphhde8jqr.d(113):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphhde8jqr.d", "-I/tmp"]\n'''
  stdout: b''
