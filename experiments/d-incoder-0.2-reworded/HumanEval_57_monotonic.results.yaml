name: HumanEval_57_monotonic
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp15judq20.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp15judq20.__unittest_L26_C1()\
    \ [0x427f47]\\n??:? void tmp15judq20.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0x6d2fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long min\
    \ = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < min)\n            min = l[i];\n        if(l[i] > max)\n   \
    \         max = l[i];\n    }\n    return min < max;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdcbbrx0f.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpdcbbrx0f.__unittest_L26_C1()\
    \ [0x427f47]\\n??:? void tmpdcbbrx0f.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0xcdd23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long max\
    \ = l[0];\n    long min = l[0];\n    bool result = true;\n    for (int i = 1;\
    \ i < l.length; ++i) {\n        if (l[i] > max) {\n            result = false;\n\
    \            break;\n        }\n        if (l[i] < min) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuqgd0yyl.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428345]\\n??:? void tmpuqgd0yyl.__unittest_L30_C1()\
    \ [0x427e58]\\n??:? void tmpuqgd0yyl.__modtest() [0x4280c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b25a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430379]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b231]\\n??:? runModuleUnitTests [0x42c19d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428808]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42878f]\\n??:? _d_run_main [0x4286fa]\\n??:? main [0x4280d7]\\\
    n??:? __libc_start_main [0x94b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7agc902y.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp7agc902y.__unittest_L30_C1()\
    \ [0x427f47]\\n??:? void tmp7agc902y.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0x4cb0f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i\
    \ < l.length; ++i) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t\tif\
    \ (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min) {\n\t\t\tisMonotonic\
    \ = false;\n\t\t}\n\t\tif (l[i] > max) {\n\t\t\tisMonotonic = false;\n\t\t}\n\t\
    }\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzeo8300s.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283fd]\\n??:? void tmpzeo8300s.__unittest_L34_C1()\
    \ [0x427faf]\\n??:? void tmpzeo8300s.__modtest() [0x428180]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c47f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b312]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4304a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430954]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430431]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2e9]\\n??:? runModuleUnitTests [0x42c255]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428847]\\n??:? _d_run_main [0x4287b2]\\n??:? main [0x428193]\\\
    n??:? __libc_start_main [0x2c71f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long i\
    \ = 0;\n    long j = 1;\n    long k = 0;\n    long n = l.length;\n    long m =\
    \ n - 1;\n    long x = l[0];\n    long y = l[1];\n    long z = l[2];\n    long\
    \ w = l[3];\n    long a = l[4];\n    long b = l[5];\n    long c = l[6];\n    long\
    \ d = l[7];\n    long e = l[8];\n    long f = l[9];\n    long g = l[10];\n   \
    \ long h = l[11];\n    long i = l[12];\n    long j = l[13];\n    long k = l[14];\n\
    \    long l = l[15];\n    long m = l[16];\n    long n = l[17];\n    long o = l[18];\n\
    \    long p = l[19];\n    long q = l[20];\n    long r = l[21];\n    long s = l[22];\n\
    \    long t = l[23];\n    long u = l[24];\n    long v = l[25];\n    long w = l[26];\n\
    \    long x = l[27];\n    long y = l[28];\n    long z = l[29];\n    long a = l[30];\n\
    \    long b = l[31];\n    long c = l[32];\n    long d = l[33];\n    long e = l[34];\n\
    \    long f = l[35];\n    long g = l[36];\n    long h = l[37];\n    long i = l[38];\n\
    \    long j = l[39];\n    long k = l[40];\n    long l = l[41];\n    long m = l[42];\n\
    \    long n = l[43];\n    long o = l[44];\n    long p = l[45];\n    long q = l[46];\n\
    \    long r = l[47];\n    long s = l[48];\n    long t = l[49];\n    long u = l[50];\n\
    \    long v = l[51];\n    long w = l[52];\n    long x = l[53];\n    long y = l[54];\n\
    \    long z = l[55];\n    long a = l[56];\n    long b = l[57];\n    long c = l[58];\n\
    \    long d = l[59];\n    long e = l[60];\n    long f = l[61];\n    long g = l[62];\n\
    \    \nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwb8bz1p2.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb8bz1p2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong max\
    \ = 0;\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ (min <= max);\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphauoiqja.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428345]\\n??:? void tmphauoiqja.__unittest_L26_C1()\
    \ [0x427ef7]\\n??:? void tmphauoiqja.__modtest() [0x4280c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b25a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430379]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b231]\\n??:? runModuleUnitTests [0x42c19d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428808]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42878f]\\n??:? _d_run_main [0x4286fa]\\n??:? main [0x4280db]\\\
    n??:? __libc_start_main [0x379aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    int i\
    \ = 0;\n    int j = l.length - 1;\n    bool isIncreasing = true;\n    bool isDecreasing\
    \ = true;\n    while (i < j) {\n        if (l[i] > l[j]) {\n            isIncreasing\
    \ = false;\n        }\n        if (l[i] < l[j]) {\n            isDecreasing =\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbdo00f00.d(16): Error: cannot implicitly convert expression `l.length\
    \ - 1LU` of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpbdo00f00.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long prev\
    \ = 0;\n    long curr = l[0];\n    bool result = true;\n    for(int i = 1; i <\
    \ l.length; i++) \n    {\n        if(curr < l[i]) \n        {\n            result\
    \ = false;\n            break;\n        }\n        else if(curr > l[i]) \n   \
    \     {\n            result = true;\n            break;\n        }\n        prev\
    \ = curr;\n        curr = l[i];\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk_m0_8w3.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42834d]\\n??:? void tmpk_m0_8w3.__unittest_L35_C1()\
    \ [0x427e60]\\n??:? void tmpk_m0_8w3.__modtest() [0x4280cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3cf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b262]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430381]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b239]\\n??:? runModuleUnitTests [0x42c1a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428810]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428797]\\n??:? _d_run_main [0x428702]\\n??:? main [0x4280df]\\\
    n??:? __libc_start_main [0xee058554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    int n\
    \ = l.length;\n    if (n == 0) return true;\n    if (n == 1) return false;\n \
    \   if (l[0] == l[1]) return true;\n    \n    long m = l[0];\n    long l = l[1];\n\
    \    \n    for (int i = 2; i < n; i++) {\n        long x = l[i];\n        long\
    \ y = l[i - 1];\n        \n        if (x < y) \n            return false;\n  \
    \      if (x > y) \n            return true;\n    }\n    \n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpowi0wxu_.d(15): Error: cannot implicitly convert expression `l.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpowi0wxu_.d(21): Error: variable `l` is shadowing\
    \ variable `tmpowi0wxu_.monotonic.l`\\n/tmp/tmpowi0wxu_.d(24): Error: only one\
    \ index allowed to index `long`\\n/tmp/tmpowi0wxu_.d(25): Error: only one index\
    \ allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpowi0wxu_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong max\
    \ = l[0];\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\
    \t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (max < min);\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnyrqh1qp.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpnyrqh1qp.__unittest_L30_C1()\
    \ [0x427eac]\\n??:? void tmpnyrqh1qp.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0xac99e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if\
    \ (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0pr7vt9r.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42839d]\\n??:? void tmp0pr7vt9r.__unittest_L35_C1()\
    \ [0x427ff1]\\n??:? void tmp0pr7vt9r.__modtest() [0x42811c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x42812f]\\\
    n??:? __libc_start_main [0x47e79554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long max\
    \ = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < min)\n            min = l[i];\n        if(l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max >= min;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_udyzi96.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp_udyzi96.__unittest_L26_C1()\
    \ [0x427f47]\\n??:? void tmp_udyzi96.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0x16e3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long min\
    \ = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length; ++i) {\n   \
    \     if(l[i] < min) min = l[i];\n        if(l[i] > max) max = l[i];\n    }\n\
    \    return min <= max;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps4p6hxfu.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmps4p6hxfu.__unittest_L23_C1()\
    \ [0x427f47]\\n??:? void tmps4p6hxfu.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0xd928554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong min\
    \ = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpan3t_wwm.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpan3t_wwm.__unittest_L30_C1()\
    \ [0x427f47]\\n??:? void tmpan3t_wwm.__modtest() [0x428118]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c417]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43043d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b281]\\n??:? runModuleUnitTests [0x42c1ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428858]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287df]\\n??:? _d_run_main [0x42874a]\\n??:? main [0x42812b]\\\
    n??:? __libc_start_main [0xed0f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long min\
    \ = l[0];\n    long max = l[0];\n    bool isMonotonic = true;\n    for(int i =\
    \ 1; i < l.length; ++i)\n    {\n        if(l[i] < min)\n        {\n          \
    \  isMonotonic = false;\n            min = l[i];\n        }\n        else if(l[i]\
    \ > max)\n        {\n            isMonotonic = false;\n            max = l[i];\n\
    \        }\n    }\n    return isMonotonic;\n}\n</code>\n<|/ a tags=c++,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if the array is all zeroes. Try it with `monotonic([0L,\
    \ 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `monotonic([0L,\
    \ 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt doesn't work if all elements are zero.\
    \ Try it with `monotonic([0L, 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `monotonic([0L, 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if all elements are zero. Try it with `monotonic([0L, 0L, 0L, 0L])`.\n<|/ c\
    \ |>\n<| a tags=c++,arrays,sorting |>\n<code>\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9i6kw_gv.d(33): Error: declaration expected, not `<`\\n/tmp/tmp9i6kw_gv.d(36):\
    \ Error: unterminated character constant\\n/tmp/tmp9i6kw_gv.d(42): Error: unterminated\
    \ character constant\\n/tmp/tmp9i6kw_gv.d(48): Error: unterminated character constant\\\
    n/tmp/tmp9i6kw_gv.d(56): Error: declaration expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp9i6kw_gv.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmp9i6kw_gv.d(61): Error: declaration expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp9i6kw_gv.d(64): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i6kw_gv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong max\
    \ = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpij8aupdh.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428345]\\n??:? void tmpij8aupdh.__unittest_L33_C1()\
    \ [0x427e58]\\n??:? void tmpij8aupdh.__modtest() [0x4280c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b25a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430379]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b231]\\n??:? runModuleUnitTests [0x42c19d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428808]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42878f]\\n??:? _d_run_main [0x4286fa]\\n??:? main [0x4280d7]\\\
    n??:? __libc_start_main [0xc3690554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n\tlong max\
    \ = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvgx4s90z.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428345]\\n??:? void tmpvgx4s90z.__unittest_L33_C1()\
    \ [0x427e58]\\n??:? void tmpvgx4s90z.__modtest() [0x4280c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b25a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4303ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43089c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430379]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b231]\\n??:? runModuleUnitTests [0x42c19d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428808]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42878f]\\n??:? _d_run_main [0x4286fa]\\n??:? main [0x4280d7]\\\
    n??:? __libc_start_main [0x9873d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long min\
    \ = l[0];\n    long max = l[0];\n    bool result = true;\n    for(int i = 1; i\
    \ < l.length; ++i)\n    {\n        if(l[i] < min)\n        {\n            min\
    \ = l[i];\n        }\n        else if(l[i] > max)\n        {\n            max\
    \ = l[i];\n        }\n        else\n        {\n            result = false;\n \
    \           break;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk6qbdajn.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42839d]\\n??:? void tmpk6qbdajn.__unittest_L36_C1()\
    \ [0x427ff5]\\n??:? void tmpk6qbdajn.__modtest() [0x428120]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c41f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b289]\\n??:? runModuleUnitTests [0x42c1f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428860]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e7]\\n??:? _d_run_main [0x428752]\\n??:? main [0x428133]\\\
    n??:? __libc_start_main [0x37fde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements\
    \ are monotonically increasing or decreasing.\n    >>> monotonic([1L, 2L, 4L,\
    \ 20L])\n    true\n    >>> monotonic([1L, 20L, 4L, 10L])\n    false\n    >>> monotonic([4L,\
    \ 1L, 0L, -10L])\n    true\n    \n*/\nbool monotonic(long[] l) \n{\n    long min\
    \ = 0;\n    long max = l[0];\n    bool changed = true;\n    for(int i = 1; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < min)\n        {\n            min =\
    \ l[i];\n        }\n        if(l[i] > max)\n        {\n            max = l[i];\n\
    \        }\n        if(l[i] < min)\n        {\n            changed = false;\n\
    \        }\n    }\n    return changed;\n}\nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_t7d60bl.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4283b5]\\n??:? void tmp_t7d60bl.__unittest_L35_C1()\
    \ [0x427f63]\\n??:? void tmp_t7d60bl.__modtest() [0x428134]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c437]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43045d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43090c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2a1]\\n??:? runModuleUnitTests [0x42c20d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428878]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287ff]\\n??:? _d_run_main [0x42876a]\\n??:? main [0x428147]\\\
    n??:? __libc_start_main [0xe843f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
