name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n    sides form a right-angled\
  \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
  \ right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab * bc;\n    long\
    \ acb = ac * bc;\n    long abac = ab * ac;\n    long acab = ac * ab;\n    long\
    \ abcab = ab * abc;\n    long acabc = ac * abc;\n    long abcabc = ab * acbc;\n\
    \    long acabbc = ac * abbc;\n    long abcabbc = ab * acabbc;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * acabcabc;\n    long acabcabbc = ac\
    \ * abcabbc;\n    long abcabcabbc = ab * acabcabbc;\n    long acabcabcabc = ac\
    \ * abcabcabc;\n    long abcabcabcabc = ab * acabcabcabc;\n    long acabcabcabbc\
    \ = ac * abcabcabbc;\n    long abcabcabcabbc = ab * acabcabcabbc;\n    long acabcabcabcabc\
    \ = ac * abcabcabcabc;\n    long abcabcabcabcabc = ab * acabcabcabcabc;\n    long\
    \ acabcabcabcabbc = ac * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * acabcabcabcabbc;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * acabcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * acabcabcabcabcabbc;\n    long acabcabcabcabcabcabc\
    \ = ac * abcabcabcabcabcabc;\n    long abcabcabcabcabcabcabc = ab * acabcabcabcabcabcabc;\n\
    \    long acabcabcabcabcabcabbc = ac * abcabcabcabcabcabbc;\n    long abcabcabcabcabcabcabbc\
    \ = ab * acabcabcabcabcabcabbc;\n    long acabcabcabcabcabcabcabc = ac * abcabcabcabcabcabcabc;\n\
    \    long abcabcabcabcabcabcabcabc = ab * acabcabcabcabcabcabcabc;", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long sq =\
    \ sqrt(d);\n    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 *\
    \ a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\n</code>\n<|/ a\
    \ tags=c++,trigonometry,geometry |>\n<| c |>\nThis is not the right answer. Try\
    \ it with `right_angle_triangle(2L, 3L, 4L)`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to account for that.\n<|/ c |>\n<| c |>\nThe answer\
    \ was updated to account for that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long acbcab = acbcab * bc;\n    long abcabc = abcabc * bc;\n\
    \    long acbcabbc = acbcabbc * bc;\n    long abcabbcd = abcabbcd* bc;\n    long\
    \ acbcabbcdab = acbcabbcdab * bc;\n    long abcabbcdabc = abcabbcdabc * bc;\n\
    \    long acbcabbcdabcd = acbcabbcdabcd* bc;\n    long abcabbcdabcbc = abcabbcdabcbc\
    \ * bc;\n    long acbcabbcdabcbcd = acbcabbcdabcbcd* bc;\n    long abcabbcdabcbcdbc\
    \ = abcabbcdabcbcdbc * bc;\n    long acbcabbcdabcbcdbcd = acbcabbcdabcbcdbcd*\
    \ bc;\n    long abcabbcdabcbcdbcdbc = abcabbcdabcbcdbcdbc * bc;\n    long acbcabbcdabcbcdbcdbcd\
    \ = acbcabbcdabcbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbc\
    \ * bc;\n    long acbcabbcdabcbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcd* bc;\n \
    \   long abcabbcdabcbcdbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbcdbc * bc;\n    long\
    \ acbcabbcdabcbcdbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbcdbcdbc\
    \ = abcabbcdabcbcdbcdbcdbcdbcdbc * bc;\n    long acb", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long\
    \ acb = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n    long\
    \ abcab = ab + ab;\n    long acabc = ac + ac;\n    long abcabc = ab + ab;\n  \
    \  long acabcb = ac + ac;\n    long abcabcb = ab + ab;\n    long acabcba = ac\
    \ + ac;\n    long abcabcba = ab + ab;\n    long acabcbac = ac + ac;\n    long\
    \ abcabcbac = ab + ab;\n    long acabcbaca = ac + ac;\n    long abcabcbaca = ab\
    \ + ab;\n    long acabcbacab = ac + ac;\n    long abcabcbacab = ab + ab;\n   \
    \ long acabcbacaba = ac + ac;\n    long abcabcbacaba = ab + ab;\n    long acabcbacaba1\
    \ = ac + ac;\n    long abcabcbacaba1 = ab + ab;\n    long acabcbacaba2 = ac +\
    \ ac;\n    long abcabcbacaba2 = ab + ab;\n    long acabcbacaba3 = ac + ac;\n \
    \   long abcabcbacaba3 = ab + ab;\n    long acabcbacaba4 = ac + ac;\n    long\
    \ abcabcbacaba4 = ab + ab;\n    long acabcbacaba5 = ac + ac;\n    long abcabcbacaba5\
    \ = ab + ab;\n    long acabcbacaba6 = ac + ac;\n    long abcabcbacaba6 = ab +\
    \ ab;\n    long acabcbacaba7 = ac + ac;\n    long abcabcbacaba7 = ab + ab;\n \
    \   long acabcbacaba8 = ac + ac;\n    long abcabcbacaba8 = ab + ab;\n    long\
    \ acabcbacaba9 = ac + ac;\n    long abcabcbacaba9 = ab + ab;\n    long acabcbacaba10\
    \ = ac + ac;\n    long abcabcbacaba10 = ab + ab;\n    long acabcbacaba11 = ",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab + bc;\n    long acb = ac + bc;\n    long abac = ab + ac;\n    long acab\
    \ = ac + ab;\n    long abcab = ab + ab;\n    long acabc = ac + abc;\n    long\
    \ abcabc = abc + abc;\n    long acabcb = ac + abb;\n    long abcabcb = abc + abb;\n\
    \    long acabcbc = ac + abc;\n    long abcabcbc = abc + abc;\n    long acabcbcb\
    \ = ac + abb;\n    long abcabcbcb = abc + abb;\n    long acabcbcbc = ac + abc;\n\
    \    long abcabcbcbc = abc + abc;\n    long acabcbcbcb = ac + abb;\n    long abcabcbcbcb\
    \ = abc + abb;\n    long acabcbcbcbc = ac + abc;\n    long abcabcbcbcbc = abc\
    \ + abc;\n    long acabcbcbcbcb = ac + abb;\n    long abcabcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbc = abc + abc;\n  \
    \  long acabcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcb = abc + abb;\n  \
    \  long acabcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb = abc +\
    \ abb;\n    long acabcbcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbcbc\
    \ = abc + abc;\n    long acabcbcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b * b - 4 * a * c);\n\
    \    long g = b - e * Math.sqrt(b * b - 4 * a * c);\n    if (f < 0)\n        return\
    \ false;\n    if (g < 0)\n        return false;\n    if (f == g)\n        return\
    \ true;\n    long h = f - g;\n    if (h < 0)\n        return false;\n    if (h\
    \ == 1)\n        return true;\n    if (h == 2)\n        return a == c;\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to know if two sides form a right angled triangle, not\
    \ if two sides form a right angled triangle with one side 90 degrees.\n<|/ c |>\n\
    <| c |>\n: I missed that part, thanks for pointing it out. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to know if two sides form a right angled triangle, not if two sides form a right\
    \ angled triangle with one side 90 degrees.\n<|/ c |>\n<| c |>\n: I missed that\
    \ part, thanks for pointing it out. I've edited my answer to reflect that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. He wants to know if two sides\
    \ form a right angled triangle, not if two sides form a right angled triangle\
    \ with one side 90 degrees.\n<|/ c |>\n<| a tags=c#,math,geometry |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long abbc = ab * bc;\n    long acab\
    \ = ac * ab;\n    long abcab = ab * ab;\n    long acabc = ac * abc;\n    long\
    \ abcabc = ab * abc;\n    long acabbc = ac * abbc;\n    long abcabbc = ab * abbc;\n\
    \    long acabcab = ac * abcab;\n    long abcabcab = ab * abcab;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * abcabc;\n    long acabcabbc = ac *\
    \ abcabbc;\n    long abcabcabbc = ab * abcabbc;\n    long acabcabcab = ac * abcabcab;\n\
    \    long abcabcabcab = ab * abcabcab;\n    long acabcabcabc = ac * abcabcabc;\n\
    \    long abcabcabcabc = ab * abcabcabc;\n    long acabcabcabbc = ac * abcabcabbc;\n\
    \    long abcabcabcabbc = ab * abcabcabbc;\n    long acabcabcabcab = ac * abcabcabcab;\n\
    \    long abcabcabcabcab = ab * abcabcabcab;\n    long acabcabcabcabc = ac * abcabcabcabc;\n\
    \    long abcabcabcabcabc = ab * abcabcabcabc;\n    long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * abcabcabcabbc;\n    long\
    \ acabcabcabcabcab = ac * abcabcabcabcab;\n    long abcabcabcabcabcab = ab * abcabcabcabcab;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * abcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n    long acabcabcabcabcabcab\
    \ = ac * abcabcabcabcabcab;\n", "{\n    long ab = a - b;\n    long ac = a - c;\n\
    \    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n    long\
    \ abac = ab * ac;\n    long acab = ac * ab;\n    long abcab = ab * bc;\n    long\
    \ acbcab = ac * bc;\n    long abcabc = abcab + acbcab;\n    long acbcabc = acbcab\
    \ + abcabc;\n    long abcabcb = abcabc + acbcabc;\n    long acbcabcb = acbcabc\
    \ + abcabcb;\n    long abcabcbc = abcabcb + acbcabcb;\n    long acbcabcbc = acbcabcb\
    \ + abcabcbc;\n    long abcabcbcd = abcabcbc + acbcabcbc;\n    long acbcabcbcd\
    \ = acbcabcbc + abcabcbcd;\n    long abcabcbcde = abcabcbcd + acbcabcbcd;\n  \
    \  long acbcabcbcde = acbcabcbcd + abcabcbcde;\n    long abcabcbcdef = abcabcbcde\
    \ + acbcabcbcde;\n    long acbcabcbcdef = acbcabcbcde + abcabcbcdef;\n    long\
    \ abcabcbcdefg = abcabcbcdef + acbcabcbcdef;\n    long acbcabcbcdefg = acbcabcbcdef\
    \ + abcabcbcdefg;\n    long abcabcbcdefgh = abcabcbcdefg + acbcabcbcdefg;\n  \
    \  long acbcabcbcdefgh = acbcabcbcdefg + abcabcbcdefgh;\n    long abcabcbcdefghi\
    \ = abcabcbcdefgh + acbcabcbcdefgh;\n    long acbcabcbcdefghi = acbcabcbcdefgh\
    \ + abcabcbcdefghi;\n    long abcabcbcdefghij = abcabcbcdefghi + acbcabcbcdefghi;\n\
    \    long acbcabcbcdefghij = acbcabcbcdefghi + abcabcbcdefghij;\n    long abcabcbcdefghijk\
    \ = abcabcbcdefgh", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long e = Math.sqrt(d);\n    long f = b + e * c;\n    long\
    \ g = a + e * b;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n   \
    \ if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n\
    \    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n    if (g\
    \ < a)\n        return false;\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for me. `right_angle_triangle(2L, 3L, 4L)` returns\
    \ `true` instead of `false`. `right_angle_triangle(2L, 3L, 2L)` returns `false`\
    \ instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine.\
    \ http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nIt doesn't work for me on ideone.com.\
    \ `right_angle_triangle(2L, 3L, 4L)` returns `true` instead of `false`. `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return (f < 0 && g < 0);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't seem to work. `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`.\n<|/ c |>\n<| c |>\n\
    I tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3,\
    \ 4, 5)` returns `true` while `right_angle_triangle(1, 4, 5)` returns `false`\n\
    <|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI\
    \ tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long angle;\n\
    \    \n    // Calculate the angle between the three sides\n    angle = atan2(b,a)\
    \ - atan2(c,a);\n    \n    // Check if angle is between -90 and 90 degrees\n \
    \   if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n       \
    \ angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e *\
    \ c) / a;\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/\
    \ a tags=c#,math,geometry |>\n<| a |>\n<code>", "{\n    long angle;\n    \n  \
    \  angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    \n    if (angle <\
    \ 0)\n    {\n        angle = -angle;\n    }\n    \n    if (angle < pi / 2)\n \
    \   {\n        return true;\n    }\n    \n    return false;\n}", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 && (b * b + 4 * a * c) <=\
    \ e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math |>\n<| c |>\n\
    This code does not work. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\nI tested\
    \ it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long\
    \ b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 &&\
    \ (b * b + 4 * a * c) <= e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math\
    \ |>\n<| c |>\nThis code does not work. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.Sqrt(d);\n", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b\
    \ * b - 4 * a * c);\n    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n\
    \    return ((b * b - 4 * a * c) == (e * g));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI believe this would only work if you had the sides ordered from largest\
    \ to smallest.  If you had the sides ordered from smallest to largest, then the\
    \ triangle would not be a right angle triangle (ie. the sides would not be in\
    \ order).\n<|/ c |>\n<| c |>\nYes, you are right. I missed that part in the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,geometry,math |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long abcbc = abcb * bc;\n    long abcbcb = abcbcb * bc;\n \
    \   long abcbcbc = abcbcbc * bc;\n    long abcbcbcb = abcbcbcb * bc;\n    long\
    \ abcbcbcbc = abcbcbcbc * bc;\n    long abcbcbcbcb = abcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbc = abcbcbcbcbc * bc;\n    long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n\
    \    long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n\
    \    long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ ab", "{\n    long side1 = abs(b - c);\n    long side2 = abs(a - c);\n    long\
    \ side3 = abs(b - a);\n    long side4 = abs(a - b);\n    \n    if (side1 == side2\
    \ && side2 == side3 && side3 == side4)\n        return true;\n    else\n     \
    \   return false;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n \
    \       return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n\
    \        return false;\n    long f = (b * b) - 4 * a * c;\n    if (f < 0)\n  \
    \      return false;\n    long g = (b * b) - 4 * a * c;\n    if (g < 0)\n    \
    \    return false;\n    long h = (b * b) - 4 * a * c;\n    if (h < 0)\n      \
    \  return false;\n    long i = (b * b) - 4 * a * c;\n    if (i < 0)\n        return\
    \ false;\n    long j = (b * b) - 4 * a * c;\n    if (j < 0)\n        return false;\n\
    \    long k = (b * b) - 4 * a * c;\n    if (k < 0)\n        return false;\n  \
    \  long l = (b * b) - 4 * a * c;\n    if (l < 0)\n        return false;\n    long\
    \ m = (b * b) - 4 * a * c;\n    if (m < 0)\n        return false;\n    long n\
    \ = (b * b) - 4 * a * c;\n    if (n < 0)\n        return false;\n    long o =\
    \ (b * b) - 4 * a * c;\n    if (o < 0)\n        return false;\n    long p = (b\
    \ * b) - 4 * a * c;\n    if (p < 0)\n        return false;\n    long q = (b *\
    \ b) - 4 * a * c;\n    if (q < 0)\n        return false;\n    long r = (b * b)\
    \ - 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = (b * b) -\
    \ 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = (b * b) - 4\
    \ * a * c;\n    if (t < 0)\n        return false;\n    long u = (b * b) - 4 *\
    \ a * c;\n    if (u < 0)\n        return false;\n    long v = (b * b) - 4 * a\
    \ * c;\n    if (v < 0)\n        return false;\n    long w = (b * b) - 4 * a *\
    \ c;\n    if (w < 0)\n        return false;\n    long x = (b * b) - 4 * a * c;\n\
    \    if (x < 0)\n        return false;\n    long y = (b * b) - 4 * a * c;\n  \
    \  if (y < 0)\n        return false;\n    long z = (b * b) - 4 * a * c;\n    if\
    \ (z < 0)\n        return false;\n    long a = (b * b) - 4 * a * c;\n    if (a\
    \ < 0)\n        return false;\n    long b = (b * b) - 4 * a * c;\n    if (b <\
    \ 0)\n        return false;\n    long c = (b * b) - 4 * a * c;\n    if (c < 0)\n\
    \        return false;\n    long d = (b * b) - 4 * a * c;\n    if (d < 0)\n  \
    \      return false;\n    long e = (b * b) - 4"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
