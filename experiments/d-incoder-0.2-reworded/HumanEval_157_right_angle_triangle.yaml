name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n    sides form a right-angled\
  \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
  \ right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab * bc;\n    long\
    \ acb = ac * bc;\n    long abac = ab * ac;\n    long acab = ac * ab;\n    long\
    \ abcab = ab * abc;\n    long acabc = ac * abc;\n    long abcabc = ab * acbc;\n\
    \    long acabbc = ac * abbc;\n    long abcabbc = ab * acabbc;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * acabcabc;\n    long acabcabbc = ac\
    \ * abcabbc;\n    long abcabcabbc = ab * acabcabbc;\n    long acabcabcabc = ac\
    \ * abcabcabc;\n    long abcabcabcabc = ab * acabcabcabc;\n    long acabcabcabbc\
    \ = ac * abcabcabbc;\n    long abcabcabcabbc = ab * acabcabcabbc;\n    long acabcabcabcabc\
    \ = ac * abcabcabcabc;\n    long abcabcabcabcabc = ab * acabcabcabcabc;\n    long\
    \ acabcabcabcabbc = ac * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * acabcabcabcabbc;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * acabcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * acabcabcabcabcabbc;\n    long acabcabcabcabcabcabc\
    \ = ac * abcabcabcabcabcabc;\n    long abcabcabcabcabcabcabc = ab * acabcabcabcabcabcabc;\n\
    \    long acabcabcabcabcabcabbc = ac * abcabcabcabcabcabbc;\n    long abcabcabcabcabcabcabbc\
    \ = ab * acabcabcabcabcabcabbc;\n    long acabcabcabcabcabcabcabc = ac * abcabcabcabcabcabcabc;\n\
    \    long abcabcabcabcabcabcabcabc = ab * acabcabcabcabcabcabcabc;", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long sq =\
    \ sqrt(d);\n    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 *\
    \ a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\n</code>\n<|/ a\
    \ tags=c++,trigonometry,geometry |>\n<| c |>\nThis is not the right answer. Try\
    \ it with `right_angle_triangle(2L, 3L, 4L)`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to account for that.\n<|/ c |>\n<| c |>\nThe answer\
    \ was updated to account for that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long acbcab = acbcab * bc;\n    long abcabc = abcabc * bc;\n\
    \    long acbcabbc = acbcabbc * bc;\n    long abcabbcd = abcabbcd* bc;\n    long\
    \ acbcabbcdab = acbcabbcdab * bc;\n    long abcabbcdabc = abcabbcdabc * bc;\n\
    \    long acbcabbcdabcd = acbcabbcdabcd* bc;\n    long abcabbcdabcbc = abcabbcdabcbc\
    \ * bc;\n    long acbcabbcdabcbcd = acbcabbcdabcbcd* bc;\n    long abcabbcdabcbcdbc\
    \ = abcabbcdabcbcdbc * bc;\n    long acbcabbcdabcbcdbcd = acbcabbcdabcbcdbcd*\
    \ bc;\n    long abcabbcdabcbcdbcdbc = abcabbcdabcbcdbcdbc * bc;\n    long acbcabbcdabcbcdbcdbcd\
    \ = acbcabbcdabcbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbc\
    \ * bc;\n    long acbcabbcdabcbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcd* bc;\n \
    \   long abcabbcdabcbcdbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbcdbc * bc;\n    long\
    \ acbcabbcdabcbcdbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbcdbcdbc\
    \ = abcabbcdabcbcdbcdbcdbcdbcdbc * bc;\n    long acb", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long\
    \ acb = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n    long\
    \ abcab = ab + ab;\n    long acabc = ac + ac;\n    long abcabc = ab + ab;\n  \
    \  long acabcb = ac + ac;\n    long abcabcb = ab + ab;\n    long acabcba = ac\
    \ + ac;\n    long abcabcba = ab + ab;\n    long acabcbac = ac + ac;\n    long\
    \ abcabcbac = ab + ab;\n    long acabcbaca = ac + ac;\n    long abcabcbaca = ab\
    \ + ab;\n    long acabcbacab = ac + ac;\n    long abcabcbacab = ab + ab;\n   \
    \ long acabcbacaba = ac + ac;\n    long abcabcbacaba = ab + ab;\n    long acabcbacaba1\
    \ = ac + ac;\n    long abcabcbacaba1 = ab + ab;\n    long acabcbacaba2 = ac +\
    \ ac;\n    long abcabcbacaba2 = ab + ab;\n    long acabcbacaba3 = ac + ac;\n \
    \   long abcabcbacaba3 = ab + ab;\n    long acabcbacaba4 = ac + ac;\n    long\
    \ abcabcbacaba4 = ab + ab;\n    long acabcbacaba5 = ac + ac;\n    long abcabcbacaba5\
    \ = ab + ab;\n    long acabcbacaba6 = ac + ac;\n    long abcabcbacaba6 = ab +\
    \ ab;\n    long acabcbacaba7 = ac + ac;\n    long abcabcbacaba7 = ab + ab;\n \
    \   long acabcbacaba8 = ac + ac;\n    long abcabcbacaba8 = ab + ab;\n    long\
    \ acabcbacaba9 = ac + ac;\n    long abcabcbacaba9 = ab + ab;\n    long acabcbacaba10\
    \ = ac + ac;\n    long abcabcbacaba10 = ab + ab;\n    long acabcbacaba11 = ",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab + bc;\n    long acb = ac + bc;\n    long abac = ab + ac;\n    long acab\
    \ = ac + ab;\n    long abcab = ab + ab;\n    long acabc = ac + abc;\n    long\
    \ abcabc = abc + abc;\n    long acabcb = ac + abb;\n    long abcabcb = abc + abb;\n\
    \    long acabcbc = ac + abc;\n    long abcabcbc = abc + abc;\n    long acabcbcb\
    \ = ac + abb;\n    long abcabcbcb = abc + abb;\n    long acabcbcbc = ac + abc;\n\
    \    long abcabcbcbc = abc + abc;\n    long acabcbcbcb = ac + abb;\n    long abcabcbcbcb\
    \ = abc + abb;\n    long acabcbcbcbc = ac + abc;\n    long abcabcbcbcbc = abc\
    \ + abc;\n    long acabcbcbcbcb = ac + abb;\n    long abcabcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbc = abc + abc;\n  \
    \  long acabcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcb = abc + abb;\n  \
    \  long acabcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb = abc +\
    \ abb;\n    long acabcbcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbcbc\
    \ = abc + abc;\n    long acabcbcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b * b - 4 * a * c);\n\
    \    long g = b - e * Math.sqrt(b * b - 4 * a * c);\n    if (f < 0)\n        return\
    \ false;\n    if (g < 0)\n        return false;\n    if (f == g)\n        return\
    \ true;\n    long h = f - g;\n    if (h < 0)\n        return false;\n    if (h\
    \ == 1)\n        return true;\n    if (h == 2)\n        return a == c;\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to know if two sides form a right angled triangle, not\
    \ if two sides form a right angled triangle with one side 90 degrees.\n<|/ c |>\n\
    <| c |>\n: I missed that part, thanks for pointing it out. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to know if two sides form a right angled triangle, not if two sides form a right\
    \ angled triangle with one side 90 degrees.\n<|/ c |>\n<| c |>\n: I missed that\
    \ part, thanks for pointing it out. I've edited my answer to reflect that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. He wants to know if two sides\
    \ form a right angled triangle, not if two sides form a right angled triangle\
    \ with one side 90 degrees.\n<|/ c |>\n<| a tags=c#,math,geometry |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long abbc = ab * bc;\n    long acab\
    \ = ac * ab;\n    long abcab = ab * ab;\n    long acabc = ac * abc;\n    long\
    \ abcabc = ab * abc;\n    long acabbc = ac * abbc;\n    long abcabbc = ab * abbc;\n\
    \    long acabcab = ac * abcab;\n    long abcabcab = ab * abcab;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * abcabc;\n    long acabcabbc = ac *\
    \ abcabbc;\n    long abcabcabbc = ab * abcabbc;\n    long acabcabcab = ac * abcabcab;\n\
    \    long abcabcabcab = ab * abcabcab;\n    long acabcabcabc = ac * abcabcabc;\n\
    \    long abcabcabcabc = ab * abcabcabc;\n    long acabcabcabbc = ac * abcabcabbc;\n\
    \    long abcabcabcabbc = ab * abcabcabbc;\n    long acabcabcabcab = ac * abcabcabcab;\n\
    \    long abcabcabcabcab = ab * abcabcabcab;\n    long acabcabcabcabc = ac * abcabcabcabc;\n\
    \    long abcabcabcabcabc = ab * abcabcabcabc;\n    long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * abcabcabcabbc;\n    long\
    \ acabcabcabcabcab = ac * abcabcabcabcab;\n    long abcabcabcabcabcab = ab * abcabcabcabcab;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * abcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n    long acabcabcabcabcabcab\
    \ = ac * abcabcabcabcabcab;\n", "{\n    long ab = a - b;\n    long ac = a - c;\n\
    \    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n    long\
    \ abac = ab * ac;\n    long acab = ac * ab;\n    long abcab = ab * bc;\n    long\
    \ acbcab = ac * bc;\n    long abcabc = abcab + acbcab;\n    long acbcabc = acbcab\
    \ + abcabc;\n    long abcabcb = abcabc + acbcabc;\n    long acbcabcb = acbcabc\
    \ + abcabcb;\n    long abcabcbc = abcabcb + acbcabcb;\n    long acbcabcbc = acbcabcb\
    \ + abcabcbc;\n    long abcabcbcd = abcabcbc + acbcabcbc;\n    long acbcabcbcd\
    \ = acbcabcbc + abcabcbcd;\n    long abcabcbcde = abcabcbcd + acbcabcbcd;\n  \
    \  long acbcabcbcde = acbcabcbcd + abcabcbcde;\n    long abcabcbcdef = abcabcbcde\
    \ + acbcabcbcde;\n    long acbcabcbcdef = acbcabcbcde + abcabcbcdef;\n    long\
    \ abcabcbcdefg = abcabcbcdef + acbcabcbcdef;\n    long acbcabcbcdefg = acbcabcbcdef\
    \ + abcabcbcdefg;\n    long abcabcbcdefgh = abcabcbcdefg + acbcabcbcdefg;\n  \
    \  long acbcabcbcdefgh = acbcabcbcdefg + abcabcbcdefgh;\n    long abcabcbcdefghi\
    \ = abcabcbcdefgh + acbcabcbcdefgh;\n    long acbcabcbcdefghi = acbcabcbcdefgh\
    \ + abcabcbcdefghi;\n    long abcabcbcdefghij = abcabcbcdefghi + acbcabcbcdefghi;\n\
    \    long acbcabcbcdefghij = acbcabcbcdefghi + abcabcbcdefghij;\n    long abcabcbcdefghijk\
    \ = abcabcbcdefgh", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long e = Math.sqrt(d);\n    long f = b + e * c;\n    long\
    \ g = a + e * b;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n   \
    \ if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n\
    \    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n    if (g\
    \ < a)\n        return false;\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for me. `right_angle_triangle(2L, 3L, 4L)` returns\
    \ `true` instead of `false`. `right_angle_triangle(2L, 3L, 2L)` returns `false`\
    \ instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine.\
    \ http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nIt doesn't work for me on ideone.com.\
    \ `right_angle_triangle(2L, 3L, 4L)` returns `true` instead of `false`. `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return (f < 0 && g < 0);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't seem to work. `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`.\n<|/ c |>\n<| c |>\n\
    I tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3,\
    \ 4, 5)` returns `true` while `right_angle_triangle(1, 4, 5)` returns `false`\n\
    <|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI\
    \ tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long angle;\n\
    \    \n    // Calculate the angle between the three sides\n    angle = atan2(b,a)\
    \ - atan2(c,a);\n    \n    // Check if angle is between -90 and 90 degrees\n \
    \   if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n       \
    \ angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e *\
    \ c) / a;\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/\
    \ a tags=c#,math,geometry |>\n<| a |>\n<code>", "{\n    long angle;\n    \n  \
    \  angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    \n    if (angle <\
    \ 0)\n    {\n        angle = -angle;\n    }\n    \n    if (angle < pi / 2)\n \
    \   {\n        return true;\n    }\n    \n    return false;\n}", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 && (b * b + 4 * a * c) <=\
    \ e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math |>\n<| c |>\n\
    This code does not work. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\nI tested\
    \ it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long\
    \ b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 &&\
    \ (b * b + 4 * a * c) <= e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math\
    \ |>\n<| c |>\nThis code does not work. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.Sqrt(d);\n", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b\
    \ * b - 4 * a * c);\n    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n\
    \    return ((b * b - 4 * a * c) == (e * g));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI believe this would only work if you had the sides ordered from largest\
    \ to smallest.  If you had the sides ordered from smallest to largest, then the\
    \ triangle would not be a right angle triangle (ie. the sides would not be in\
    \ order).\n<|/ c |>\n<| c |>\nYes, you are right. I missed that part in the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,geometry,math |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long abcbc = abcb * bc;\n    long abcbcb = abcbcb * bc;\n \
    \   long abcbcbc = abcbcbc * bc;\n    long abcbcbcb = abcbcbcb * bc;\n    long\
    \ abcbcbcbc = abcbcbcbc * bc;\n    long abcbcbcbcb = abcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbc = abcbcbcbcbc * bc;\n    long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n\
    \    long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n\
    \    long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ ab", "{\n    long side1 = abs(b - c);\n    long side2 = abs(a - c);\n    long\
    \ side3 = abs(b - a);\n    long side4 = abs(a - b);\n    \n    if (side1 == side2\
    \ && side2 == side3 && side3 == side4)\n        return true;\n    else\n     \
    \   return false;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n \
    \       return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n\
    \        return false;\n    long f = (b * b) - 4 * a * c;\n    if (f < 0)\n  \
    \      return false;\n    long g = (b * b) - 4 * a * c;\n    if (g < 0)\n    \
    \    return false;\n    long h = (b * b) - 4 * a * c;\n    if (h < 0)\n      \
    \  return false;\n    long i = (b * b) - 4 * a * c;\n    if (i < 0)\n        return\
    \ false;\n    long j = (b * b) - 4 * a * c;\n    if (j < 0)\n        return false;\n\
    \    long k = (b * b) - 4 * a * c;\n    if (k < 0)\n        return false;\n  \
    \  long l = (b * b) - 4 * a * c;\n    if (l < 0)\n        return false;\n    long\
    \ m = (b * b) - 4 * a * c;\n    if (m < 0)\n        return false;\n    long n\
    \ = (b * b) - 4 * a * c;\n    if (n < 0)\n        return false;\n    long o =\
    \ (b * b) - 4 * a * c;\n    if (o < 0)\n        return false;\n    long p = (b\
    \ * b) - 4 * a * c;\n    if (p < 0)\n        return false;\n    long q = (b *\
    \ b) - 4 * a * c;\n    if (q < 0)\n        return false;\n    long r = (b * b)\
    \ - 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = (b * b) -\
    \ 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = (b * b) - 4\
    \ * a * c;\n    if (t < 0)\n        return false;\n    long u = (b * b) - 4 *\
    \ a * c;\n    if (u < 0)\n        return false;\n    long v = (b * b) - 4 * a\
    \ * c;\n    if (v < 0)\n        return false;\n    long w = (b * b) - 4 * a *\
    \ c;\n    if (w < 0)\n        return false;\n    long x = (b * b) - 4 * a * c;\n\
    \    if (x < 0)\n        return false;\n    long y = (b * b) - 4 * a * c;\n  \
    \  if (y < 0)\n        return false;\n    long z = (b * b) - 4 * a * c;\n    if\
    \ (z < 0)\n        return false;\n    long a = (b * b) - 4 * a * c;\n    if (a\
    \ < 0)\n        return false;\n    long b = (b * b) - 4 * a * c;\n    if (b <\
    \ 0)\n        return false;\n    long c = (b * b) - 4 * a * c;\n    if (c < 0)\n\
    \        return false;\n    long d = (b * b) - 4 * a * c;\n    if (d < 0)\n  \
    \      return false;\n    long e = (b * b) - 4", "{\n    long ab = a - b;\n  \
    \  long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac + bc;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = ", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b *\
    \ b) - (4 * a * c));\n    if (e < 0)\n        return false;\n    long f = ((b\
    \ * b) - (4 * a * c));\n    if (f < 0)\n        return false;\n    long g = ((b\
    \ * b) - (4 * a * c));\n    if (g < 0)\n        return false;\n    long h = ((b\
    \ * b) - (4 * a * c));\n    if (h < 0)\n        return false;\n    long s = (-b\
    \ + sqrt(h));\n    if (s < 0)\n        return false;\n    long t = (-b - sqrt(h));\n\
    \    if (t < 0)\n        return false;\n    long u = (-b + sqrt(h));\n    if (u\
    \ < 0)\n        return false;\n    long v = (-b - sqrt(h));\n    if (v < 0)\n\
    \        return false;\n    long w = (-b + sqrt(h));\n    if (w < 0)\n       \
    \ return false;\n    long x = (-b - sqrt(h));\n    if (x < 0)\n        return\
    \ false;\n    long y = (-b + sqrt(h));\n    if (y < 0)\n        return false;\n\
    \    long z = (-b - sqrt(h));\n    if (z < 0)\n        return false;\n    long\
    \ x1 = (-b + sqrt(h));\n    if (x1 < 0)\n        return false;\n    long y1 =\
    \ (-b - sqrt(h));\n    if (y1 < 0)\n        return false;\n    long z1 = (-b -\
    \ sqrt(h));\n    if (z1 < 0)\n        return false;\n    long x2 = (-b - sqrt(h));\n\
    \    if (x2 < 0)\n        return false;\n    long y2 = (-b + sqrt(h));\n    if\
    \ (y2 < 0)\n        return false;\n    long z2 = (-b + sqrt(h));\n    if (z2 <\
    \ 0)\n        return false;\n    long x3 = (-b + sqrt(h));\n    if (x3 < 0)\n\
    \        return false;\n    long y3 = (-b - sqrt(h));\n    if (y3 < 0)\n     \
    \   return false;\n    long z3 = (-b - sqrt(h));\n    if (z3 < 0)\n        return\
    \ false;\n    long x4 = (-b - sqrt(h));\n    if (x4 < 0)\n        return false;\n\
    \    long y4 = (-b + sqrt(h));\n    if (y4 < 0)\n        return false;\n    long\
    \ z4 = (-b + sqrt(h));\n    if (z4 < 0)\n        return false;\n    long x5 =\
    \ (-b + sqrt(h));\n    if (x5 < 0)\n        return false;\n    long y5 = (-b -\
    \ sqrt(h));\n    if (y5 < 0)\n        return false;\n    long z5 = (-b - sqrt(h));\n\
    \    if (z5 < 0)\n        return false;\n    long x6 = (-b - sqrt(h));", "{\n\
    \    long angle = acos((b*b + c*c - a*a) / (2.0 * b * c));\n    return (angle\
    \ > M_PI_2 && angle < M_PI);\n}", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = ((b * b) - (4 * a * c));\n    if\
    \ (e < 0)\n        return false;\n    long f = ((b * b) - (4 * a * c));\n    if\
    \ (f < 0)\n        return false;\n    long g = ((b * b) - (4 * a * c));\n    if\
    \ (g < 0)\n        return false;\n    long h = ((b * b) - (4 * a * c));\n    if\
    \ (h < 0)\n        return false;\n    long s = (-b + sqrt(h));\n    if (s < 0)\n\
    \        return false;\n    long t = (-b - sqrt(h));\n    if (t < 0)\n       \
    \ return false;\n    long u = (-b + sqrt(h));\n    if (u < 0)\n        return\
    \ false;\n    long v = (-b - sqrt(h));\n    if (v < 0)\n        return false;\n\
    \    long w = (-b + sqrt(h));\n    if (w < 0)\n        return false;\n    long\
    \ x = (-b - sqrt(h));\n    if (x < 0)\n        return false;\n    long y = (-b\
    \ + sqrt(h));\n    if (y < 0)\n        return false;\n    long z = (-b - sqrt(h));\n\
    \    if (z < 0)\n        return false;\n    long x1 = (-b + sqrt(h));\n    if\
    \ (x1 < 0)\n        return false;\n    long x2 = (-b - sqrt(h));\n    if (x2 <\
    \ 0)\n        return false;\n    long y1 = (-b - sqrt(h));\n    if (y1 < 0)\n\
    \        return false;\n    long y2 = (-b + sqrt(h));\n    if (y2 < 0)\n     \
    \   return false;\n    long z1 = (-b - sqrt(h));\n    if (z1 < 0)\n        return\
    \ false;\n    long z2 = (-b + sqrt(h));\n    if (z2 < 0)\n        return false;\n\
    \    long x3 = (-b - sqrt(h));\n    if (x3 < 0)\n        return false;\n    long\
    \ x4 = (-b + sqrt(h));\n    if (x4 < 0)\n        return false;\n    long y3 =\
    \ (-b + sqrt(h));\n    if (y3 < 0)\n        return false;\n    long y4 = (-b -\
    \ sqrt(h));\n    if (y4 < 0)\n        return false;\n    long z3 = (-b - sqrt(h));\n\
    \    if (z3 < 0)\n        return false;\n    long z4 = (-b + sqrt(h));\n    if\
    \ (z4 < 0)\n        return false;\n    long x5 = (-b - sqrt(h));\n    if (x5 <\
    \ 0)\n        return false;\n    long x6 = (-b + sqrt(h));\n    if (x6 < 0)\n\
    \        return false;\n    long y5 = (-b + sqrt(h));\n    if (y5 < 0)\n     \
    \   return false;\n    long y6 = (-b - sqrt(h", "{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac - bc;\n    long abac = ab - ac;\n    long acab = ac - ab;\n    long abcab\
    \ = ab - abc;\n    long acabc = ac - abc;\n    long abcabc = ab - abc;\n    long\
    \ acabcb = ac - abcb;\n    long abcabcb = ab - abcb;\n    long acabcbb = ac -\
    \ abbb;\n    long abcabcbb = ab - abbb;\n    long acabcbbc = ac - abbcb;\n   \
    \ long abcabcbbc = ab - abbcb;\n    long acabcbbcb = ac - abbbcb;\n    long abcabcbbcb\
    \ = ab - abbbcb;\n    long acabcbbcbc = ac - abbbbcb;\n    long abcabcbbcbc =\
    \ ab - abbbbcb;\n    long acabcbbcbcb = ac - abbbbcb;\n    long abcabcbbcbcb =\
    \ ab - abbbbcb;\n    long acabcbbcbcbc = ac - abbbbbcb;\n    long abcabcbbcbcbc\
    \ = ab - abbbbbcb;\n    long acabcbbcbcbcb = ac - abbbbcbcb;\n    long abcabcbbcbcbcb\
    \ = ab - abbbbcbcb;\n    long acabcbbcbcbcbc = ac - abbbbcbcbcb;\n    long abcabcbbcbcbcbc\
    \ = ab - abbbbcbcbcb;\n    long acabcbbcbcbcbcb = ac - abbbbcbcbcbcb;\n    long\
    \ abcabcbbcbcbcbcb = ab - abbbbcbcbcbcb;\n    long acabcbbcbcbcbcbc = ac - abbbbcbcbcbcbcb;\n\
    \    long abcabcbbcbcbcbcbc = ab - abbbbcbcbcbcbcbc;\n    long acabcbbcbcbcbcbcbc\
    \ = ac - abbbbcbcbcbcbcbcbc;\n    long abcabcbbcbcbcbcbcbc = ab - abbbbcbcbcbcbcbcbcbc;\n\
    \    long acabcbb", "{\n    long side1 = abs(a) + abs(b) + abs(c);\n    long side2\
    \ = abs(a) + abs(b) - abs(c);\n    long side3 = abs(a) - abs(b) - abs(c);\n  \
    \  \n    if (side1 == side2 && side2 == side3)\n        return true;\n    \n \
    \   return false;\n}", "{\n    long angle;\n    bool isRightAngle;\n    \n   \
    \ angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    isRightAngle = (angle\
    \ > M_PI);\n    \n    return isRightAngle;\n}", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + ab;\n    long ac2ab = ac * ac;\n    long ac2bc = ac * bc;\n\
    \    long ac2abc = ac2ab + ac2bc;\n    long ac2abbc = ac2ab * bc;\n    long ac2abbbc\
    \ = ac2ab * bc;\n    long ac2abbcc = ac2ab * bc;\n    long ac2bcab = ac2bc * ab;\n\
    \    long ac2bcba = ac2bc * ba;\n    long ac2bcabc = ac2bcab + ac2bcba;\n    long\
    \ ac2bcabbc = ac2bcab * bc;\n    long ac2bcabbcc = ac2bcab * bc;\n    long ac2bcabbccc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccb = ac2bcab * bc;\n    long ac2bcabbcccbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbca = ac2bcab * bc;\n    long ac2bcabbcccbcaa\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaa = ac2bcab * bc;\n    long ac2bcabbcccbcaaac\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacb = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcc = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbccc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccb = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbca = ac2bcab * bc;\n    long\
    \ ac2bcabbcccbcaaacbcccbcaa = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbcaaa\
    \ = ac2bcab * bc;\n    long ac", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if\
    \ (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n  \
    \  if (f < 0)\n        return false;\n    long g = a * a + b * b - 4 * a * c;\n\
    \    if (g < 0)\n        return false;\n    long h = sqrt(g);\n    if (h > 1)\n\
    \        return false;\n    long i = a * h;\n    long j = b * h;\n    long k =\
    \ c * h;\n    long l = a * e - b * f - c * g;\n    if (l < 0)\n        return\
    \ false;\n    long m = a * f + b * e + c * g;\n    if (m < 0)\n        return\
    \ false;\n    long n = a * g + b * f + c * e;\n    if (n < 0)\n        return\
    \ false;\n    long o = a * e + b * g + c * f;\n    if (o < 0)\n        return\
    \ false;\n    long p = a * f + b * g + c * e;\n    if (p < 0)\n        return\
    \ false;\n    long q = a * g + b * e + c * f;\n    if (q < 0)\n        return\
    \ false;\n    long r = a * e + b * f + c * g;\n    if (r < 0)\n        return\
    \ false;\n    long s = a * f + b * g + c * e;\n    if (s < 0)\n        return\
    \ false;\n    long t = a * g + b * e + c * f;\n    if (t < 0)\n        return\
    \ false;\n    long u = a * e + b * f + c * g;\n    if (u < 0)\n        return\
    \ false;\n    long v = a * f + b * g + c * e;\n    if (v < 0)\n        return\
    \ false;\n    long w = a * g + b * e + c * f;\n    if (w < 0)\n        return\
    \ false;\n    long x = a * e + b * f + c * g;\n    if (x < 0)\n        return\
    \ false;\n    long y = a * f + b * g + c * e;\n    if (y < 0)\n        return\
    \ false;\n    long z = a * g + b * e + c * f;\n    if (z < 0)\n        return\
    \ false;\n    long a = a * h;\n    long b = b * h;\n    long c = c * h;\n    long\
    \ d = a * e - b * f - c * g;\n    if (d < 0)\n        return false;\n    long\
    \ e = a * f + b * e + c * g", "{\n    long d = b * b - 4 * a * c;\n    if (d <\
    \ 0) return false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / 2;\n\
    \    long g = (a + e * b) / 2;\n    long h = (a + b * c) / 2;\n    return ((f\
    \ < 0 && g < 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a tags=c#,geometry\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the example in the question.\
    \ `right_angle_triangle(1,1,1)` returns `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I used the example in the question. `right_angle_triangle(1,1,1)`\
    \ returns `true`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example\
    \ in the question. `right_angle_triangle(1,1,1)` returns `true`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I used the example in the question. `right_angle_triangle(1,1,1)`\
    \ returns `true`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry,math,trigonometry\
    \ |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)` returns `true`,\
    \ but `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. `right_angle_triangle(1,1,1)` returns `true`, `right_angle_triangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it and it works fine. `right_angle_triangle(1,1,1)`\
    \ returns `true`, `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. `right_angle_triangle(1,1,1)` returns `true`,\
    \ `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. `right_angle_triangle(1,1,1)` returns `true`, `right_angle_triangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| a tags=c#,geometry,math,trigonometry |>\n<code>\n\
    public static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    This doesn't work. `IsRightAngleTriangle(1,1,1)` returns `true`, but `IsRightAngleTriangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it and it works fine. `IsRightAngleTriangle(1,1,1)`\
    \ returns `true`, `IsRightAngleTriangle(1,2,2)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. `IsRightAngleTriangle(1,1,1)` returns `true`,\
    \ `IsRightAngleTriangle", "{\n    long ab = abs(b - a);\n    long ac = abs(c -\
    \ a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab\
    \ + ac;\n    long bcb = bc + cb;\n    long abbc = ab + bc;\n    long acbc = ac\
    \ + cb;\n    long abbcd = abbc + acbc;\n    long acbcd = acbc + bcd;\n    long\
    \ abbcde = abbcd + acbcd;\n    long acbcde = acbcd + bcd;\n    long abbcdef =\
    \ abbcde + acbcde;\n    long acbcdef = acbcde + bcd;\n    long abbcdefg = abbcdef\
    \ + acbcdef;\n    long acbcdefg = acbcdef + bcd;\n    long abbcdefgh = abbcdefg\
    \ + acbcdefg;\n    long acbcdefgh = acbcdefg + bcd;\n    long abbcdefghi = abbcdefgh\
    \ + acbcdefgh;\n    long acbcdefghi = acbcdefgh + bcd;\n    long abbcdefghij =\
    \ abbcdefghi + acbcdefghi;\n    long acbcdefghij = acbcdefghi + bcd;\n    long\
    \ abbcdefghijk = abbcdefghij + acbcdefghij;\n    long acbcdefghijk = acbcdefghij\
    \ + bcd;\n    long abbcdefghijkl = abbcdefghijk + acbcdefghijk;\n    long acbcdefghijkl\
    \ = acbcdefghijk + bcd;\n    long abbcdefghijklmn = abbcdefghijkl + acbcdefghijkl;\n\
    \    long acbcdefghijklmn = acbcdefghijkl + bcd;\n    long abbcdefghijklmnn =\
    \ abbcdefghijklmn + acbcdefghijklmn;\n    long acbcdefghijklmnn = acbcdefghijklmn\
    \ + bcd;\n    long abbcdefghijklmnno = abbcdefghijklmnn + acbcdefghijklmnno;\n\
    \    long acbcdefghijklmnno = acbcdefghijklmnno", "{\n    long angle;\n    bool\
    \ result = false;\n    angle = atan2(b,a) - atan2(c,a);\n    if (angle > 0)\n\
    \    {\n        result = true;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\n\
    <|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n \
    \   if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f\
    \ = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 &&\
    \ g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = Math.sqrt(d);\n    long f = b + e * c;\n    long g = a + e * b;\n\
    \    long h = a - e * b;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0) ||\
    \ (f > 0 && h < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code doesn't\
    \ work. `right_angle_triangle(5L, 3L, 4L)` returns `true` instead of `false`.\
    \ See [this fiddle](https://dotnetfiddle.net/w4LgYQ).\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI\
    \ fixed the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n\
    \        return false;\n    long f = ((b * b) - 4 * a * c) / d + a;\n    if (f\
    \ < 0)\n        return false;\n    long g = ((b * b) - 4 * a * c) / d + a;\n \
    \   if (g < 0)\n        return false;\n    long h = ((b * b) - 4 * a * c) / d\
    \ + a;\n    if (h < 0)\n        return false;\n    long i = (b * b) - 4 * a *\
    \ c;\n    if (i < 0)\n        return false;\n    long j = (b * b) - 4 * a * c;\n\
    \    if (j < 0)\n        return false;\n    long k = (b * b) - 4 * a * c;\n  \
    \  if (k < 0)\n        return false;\n    long l = (b * b) - 4 * a * c;\n    if\
    \ (l < 0)\n        return false;\n    long m = (b * b) - 4 * a * c;\n    if (m\
    \ < 0)\n        return false;\n    long n = (b * b) - 4 * a * c;\n    if (n <\
    \ 0)\n        return false;\n    long o = (b * b) - 4 * a * c;\n    if (o < 0)\n\
    \        return false;\n    long p = (b * b) - 4 * a * c;\n    if (p < 0)\n  \
    \      return false;\n    long q = (b * b) - 4 * a * c;\n    if (q < 0)\n    \
    \    return false;\n    long r = (b * b) - 4 * a * c;\n    if (r < 0)\n      \
    \  return false;\n    long s = (b * b) - 4 * a * c;\n    if (s < 0)\n        return\
    \ false;\n    long t = (b * b) - 4 * a * c;\n    if (t < 0)\n        return false;\n\
    \    long u = (b * b) - 4 * a * c;\n    if (u < 0)\n        return false;\n  \
    \  long v = (b * b) - 4 * a * c;\n    if (v < 0)\n        return false;\n    long\
    \ w = (b * b) - 4 * a * c;\n    if (w < 0)\n        return false;\n    long x\
    \ = (b * b) - 4 * a * c;\n    if (x < 0)\n        return false;\n    long y =\
    \ (b * b) - 4 * a * c;\n    if (y < 0)\n        return false;\n    long z = (b\
    \ * b) - 4 * a * c;\n    if (z < 0)\n        return false;\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,geometry,math |>\n<| c |>\nThe code above is wrong.\
    \ `long d = b * b - 4 * a * c;` should be `long d = b * b + 4 * a * c;`\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I've fixed it.\n<|/", "{\n    long\
    \ ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc = ab +\
    \ bc;\n    long acb = ac + bc;\n    long ac = ac - bc;\n    long ab = ab - bc;\n\
    \    long abc = abc + ac;\n    long acb = acb + ab;\n    long ac = acb - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - (4\
    \ * a * c));\n    if (e < 0)\n        return false;\n    long f = ((b * b) - (4\
    \ * a * c));\n    if (f < 0)\n        return false;\n    long g = ((b * b) - (4\
    \ * a * c));\n    if (g < 0)\n        return false;\n    long h = (b * b) - (4\
    \ * a * c);\n    if (h < 0)\n        return false;\n    long x = (b * b) - (4\
    \ * a * c);\n    if (x < 0)\n        return false;\n    long y = (b * b) - (4\
    \ * a * c);\n    if (y < 0)\n        return false;\n    long z = (b * b) - (4\
    \ * a * c);\n    if (z < 0)\n        return false;\n    long x2 = (b * b) - (4\
    \ * a * c);\n    if (x2 < 0)\n        return false;\n    long y2 = (b * b) - (4\
    \ * a * c);\n    if (y2 < 0)\n        return false;\n    long z2 = (b * b) - (4\
    \ * a * c);\n    if (z2 < 0)\n        return false;\n    long x3 = ((b * b) -\
    \ (4 * a * c));\n    if (x3 < 0)\n        return false;\n    long y3 = ((b * b)\
    \ - (4 * a * c));\n    if (y3 < 0)\n        return false;\n    long z3 = ((b *\
    \ b) - (4 * a * c));\n    if (z3 < 0)\n        return false;\n    long x4 = ((b\
    \ * b) - (4 * a * c));\n    if (x4 < 0)\n        return false;\n    long y4 =\
    \ ((b * b) - (4 * a * c));\n    if (y4 < 0)\n        return false;\n    long z4\
    \ = ((b * b) - (4 * a * c));\n    if (z4 < 0)\n        return false;\n    long\
    \ x5 = ((b * b) - (4 * a * c));\n    if (x5 < 0)\n        return false;\n    long\
    \ y5 = ((b * b) - (4 * a * c));\n    if (y5 < 0)\n        return false;\n    long\
    \ z5 = ((b * b) - (4 * a * c));\n    if (z5 < 0)\n        return false;\n    long\
    \ x6 = ((b * b) - (4 * a * c));\n    if (x6 < 0)\n        return false;\n    long\
    \ y6 = ((b * b) - (4 * a * c));\n    if (y6 < 0)\n        return false;\n    long\
    \ z6 = ((b * b) - (4 * a * c));\n    if (z6 < 0)\n        return false;\n    long\
    \ x7 = ((b * b) - (4 * a * c));\n    if (x7 < 0)\n        return false;\n    long\
    \ y7 = ((b * b) - (4 * a * c));\n    if (y7 < 0)\n        return false;\n", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - (4 * a * c));\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - (4 * a * c));\n    if (f < 0)\n        return false;\n    long\
    \ g = ((b * b) - (4 * a * c));\n    if (g < 0)\n        return false;\n    long\
    \ h = (b * b) - (4 * a * c);\n    if (h < 0)\n        return false;\n    long\
    \ x = (b * b) - (4 * a * c);\n    if (x < 0)\n        return false;\n    long\
    \ y = (b * b) - (4 * a * c);\n    if (y < 0)\n        return false;\n    long\
    \ z = (b * b) - (4 * a * c);\n    if (z < 0)\n        return false;\n    long\
    \ w = (b * b) - (4 * a * c);\n    if (w < 0)\n        return false;\n    long\
    \ x1 = (b * b) - (4 * a * c);\n    if (x1 < 0)\n        return false;\n    long\
    \ y1 = (b * b) - (4 * a * c);\n    if (y1 < 0)\n        return false;\n    long\
    \ z1 = (b * b) - (4 * a * c);\n    if (z1 < 0)\n        return false;\n    long\
    \ w1 = (b * b) - (4 * a * c);\n    if (w1 < 0)\n        return false;\n    long\
    \ x2 = (b * b) - (4 * a * c);\n    if (x2 < 0)\n        return false;\n    long\
    \ y2 = (b * b) - (4 * a * c);\n    if (y2 < 0)\n        return false;\n    long\
    \ z2 = (b * b) - (4 * a * c);\n    if (z2 < 0)\n        return false;\n    long\
    \ w2 = (b * b) - (4 * a * c);\n    if (w2 < 0)\n        return false;\n    long\
    \ x3 = (b * b) - (4 * a * c);\n    if (x3 < 0)\n        return false;\n    long\
    \ y3 = (b * b) - (4 * a * c);\n    if (y3 < 0)\n        return false;\n    long\
    \ z3 = (b * b) - (4 * a * c);\n    if (z3 < 0)\n        return false;\n    long\
    \ w3 = (b * b) - (4 * a * c);\n    if (w3 < 0)\n        return false;\n    long\
    \ x4 = (b * b) - (4 * a * c);\n    if (x4 < 0)\n        return false;\n    long\
    \ y4 = (b * b) - (4 * a * c);\n    if (y4 < 0)\n        return false;\n    long\
    \ z4 = (b * b) - (4 * a * c);\n    if (z4 < 0)\n        return false;\n    long\
    \ w4 = (b * b) - (4 * a * c);\n    if (w4 < 0)\n        return false;\n    long\
    \ x5 = (b * b) - (4 * a * c);\n    if (x5 < 0)\n        return false;\n    long\
    \ y5 = (b * b) - (4 * a", "{\n    return ((b - a) * (c - b) <= 0);\n}", "{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2\
    \ * a);\n    long h = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0)\
    \ || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,geometry,math\
    \ |>\n<code>", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac;\n    long\
    \ bcb = bc + cb;\n    long abbc = abb + bcb;\n    long abcc = abc + cb \n    bool\
    \ isRightAngle = abbc > abcc;\n    return isRightAngle;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like this solution. One thing I noticed is that you used `abb`\
    \ instead of `abb`, which makes the code a little more readable. Also, you can\
    \ get rid of the `ab` variables by using `abc = abs(c - a);` instead.\n<|/ c |>\n\
    <| c |>\nYes, I noticed that too. Thanks for the suggestions.\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I believe it can be simplified by using abc instead\
    \ of abb and abc instead of abbc.\n<|/ c |>\n<| c |>\nYes, I agree. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=4 |>\nThe algorithm is simple enough:\
    \ you just need to check whether the triangle is right-angled or not by comparing\
    \ the sum of the lengths of the three sides. If the sum is equal to the length\
    \ of the hypotenuse, then the triangle is right-angled.\n<code>", "{\n    long\
    \ ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n   \
    \ long cb = abs(c - b);\n    \n    if (ab == ac)\n    {\n        if (ab == bc)\n\
    \        {\n            if (ab == cb)\n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long e = Math.sqrt(d);\n\
    \    return ((e > 0) && (e < b * b));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long\
    \ g = (c + e) / (2 * a);\n    return ((f >= 0) && (g >= 0) && (f + g == 1));\n\
    }\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis code doesn't work. `right_angle_triangle(5L,\
    \ 3L, 4L)` returns `true` but `right_angle_triangle(5L, 3L, 5L)` returns `false`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me either. `right_angle_triangle(5L, 3L,\
    \ 5L)` returns `true` but `right_angle_triangle(5L, 3L, 4L)` returns `false`\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out!\n<|/ c |>\n<| a |>\n<code>", "{\n    long\
    \ ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc = ab +\
    \ bc;\n    long acb = ac - bc;\n    long abac = ab - ac;\n    long acab = ac -\
    \ ab;\n    long abcab = ab - abc;\n    long acabc = ac - abc;\n    long abcabc\
    \ = ab - abc;\n    long acabcb = ac - abc;\n    long abcabcb = ab - abc;\n   \
    \ long acabcba = ac - abca;\n    long abcabcba = ab - abca;\n    long acabcbac\
    \ = ac - abca;\n    long abcabcbac = ab - abca;\n    long acabcbaca = ac - abca;\n\
    \    long abcabcbaca = ab - abca;\n    long acabcbacab = ac - abca;\n    long\
    \ abcabcbacab = ab - abca;\n    long acabcbacabc = ac - abca;\n    long abcabcbacabc\
    \ = ab - abca;\n    long acabcbacabcb = ac - abca;\n    long abcabcbacabcb = ab\
    \ - abca;\n    long acabcbacabcba = ac - abca;\n    long abcabcbacabcba = ab -\
    \ abca;\n    long acabcbacabcbac = ac - abca;\n    long abcabcbacabcbac = ab -\
    \ abca;\n    long acabcbacabcbaca = ac - abca;\n    long abcabcbacabcbaca = ab\
    \ - abca;\n    long acabcbacabcbacab = ac - abca;\n    long abcabcbacabcbacab\
    \ = ab - abca;\n    long acabcbacabcbacabc = ac - abca;\n    long abcabcbacabcbacabc\
    \ = ab - abca;\n    long acabcbacabcbacabcb = ac - abca;\n    long abcabcbacabcbacabcb\
    \ = ab - abca;\n    long acabcbacabcbacabcba = ac - abca;\n    long abcabcbacabcbacabcba\
    \ = ab - abca;\n    long acabcbacab", "{\n    long ab = abs(b - a);\n    long\
    \ ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab + ac);\n\
    \    long bcd = abs(bc + ab);\n    long acd = abs(ac + bc);\n    long abcd = abs(abc\
    \ + bcd);\n    long acdb = abs(acd + abc);\n    long acbc = abs(acb + acd);\n\
    \    long acdbc = abs(acdb + acbc);\n    long acbca = abs(acbc + acdb);\n    long\
    \ acdbca = abs(acdbc + acbca);\n    long acbcab = abs(acbca+ acdbc);\n    long\
    \ acdbcab = abs(acdbcab + acbcab);\n    long acbcabc = abs(acbcab + acdbcab);\n\
    \    long acdbcabc = abs(acdbcabc + acbcabc);\n    long acbcabca = abs(acbcabc\
    \ + acdbcabc);\n    long acdbcabca = abs(acdbcabca + acbcabca);\n    long acbcabcab\
    \ = abs(acbcabca + acdbcabca);\n    long acdbcabcab = abs(acdbcabcab + acbcabcab);\n\
    \    long acbcabcabc = abs(acbcabcab + acdbcabcab);\n    long acdbcabcabc = abs(acdbcabcabc\
    \ + acbcabcabc);\n    long acbcabcabca = abs(acbcabcabc + acdbcabcabc);\n    long\
    \ acdbcabcabca = abs(acdbcabcabca + acbcabcabca);\n    long acbcabcabcab = abs(acbcabcabca\
    \ + acdbcabcabca);\n    long acdbcabcabcab = abs(acdbcabcabcab + acbcabcabcab);\n\
    \    long acbcabcabcabc = abs(acbcabcabcab + acdbcabcabcab);\n    long acdbcabcabcabc\
    \ = abs(acdbcabcabcabc + acbcabcabcabc);\n    long acbcabcabcabca = abs(acbcabcabcabca\
    \ + acdbcabcabcabca);\n    long acdbcabcabcabca = abs(acdbcabcabcabca + acbcabcabcabca);\n\
    \    long acbcabcabcabcab = abs(acbcabcabcabca + acdbcabcabcabcab);", "{\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = b + e * (b - c);\n    return ((f - c) == e);\n\
    }\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nI believe this would fail for\
    \ `right_angle_triangle(1,1,1)` which should return `true` but returns `false`\n\
    <|/ c |>\n<| c |>\nI believe this would fail for `right_angle_triangle(1,1,1)`\
    \ which should return `true` but returns `false`\n<|/ c |>\n<| c |>\nI believe\
    \ this would fail for `right_angle_triangle(1,1,1)` which should return `true`\
    \ but returns `false`\n<|/ c |>\n<| c |>\nI believe this would fail for `right_angle_triangle(1,1,1)`\
    \ which should return `true` but returns `false`\n<|/ c |>\n<| c |>\nI believe\
    \ this would fail for `right_angle_triangle(1,1,1)` which should return `true`\
    \ but returns `false`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / 2;\n    long g = (b - e * c) / 2;\n    return ((f\
    \ >= 0) && (f <= g) && (e >= 0));\n}", "{\n    long d = b * b - 4 * a * c;\n \
    \   if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f\
    \ = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 &&\
    \ g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,geometry\
    \ |>\n<code>\npublic static bool IsRightAngledTriangle(long a, long b, long c)\n\
    {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n  \
    \  long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c +\
    \ e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| a tags=c#,geometry |>\n<code>\n\
    public static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 *\
    \ a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| ", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + ab);\n\
    \    long abcd = abs(abc + bcd);\n    long acdb = abs(acd + abc);\n    long abcda\
    \ = abs(abcd + acb);\n    long acbca = abs(acbc + abc);\n    long acdbca = abs(acdbc\
    \ + abc);\n    long acbcab = abs(acbca+ acb);\n    long acdbcab = abs(acdbca +\
    \ acb);\n    long acbcabd = abs(acbcab + acd);\n    long acdbcabd = abs(acdbcab\
    \ + acd);\n    long acbcabdc = abs(acbcabd + acc);\n    long acdbcabdc = abs(acdbcabd\
    \ + acc);\n    long acbcabdcd = abs(acbcabdc + acd);\n    long acdbcabdcd = abs(acdbcabdc\
    \ + acd);\n    long acbcabdcda = abs(acbcabdcd + acd);\n    long acdbcabdcda =\
    \ abs(acdbcabdcd + acd);\n    long acbcabdcdaa = abs(acbcabdcda + acd);\n    long\
    \ acdbcabdcdaa = abs(acdbcabdcda + acd);\n    long acbcabdcdaaa = abs(acbcabdcdaa\
    \ + acd);\n    long acdbcabdcdaaa = abs(acdbcabdcdaa + acd);\n    long acbcabdcdaaaa\
    \ = abs(acbcabdcdaaa + acd);\n    long acdbcabdcdaaaa = abs(acdbcabdcdaaa + acd);\n\
    \    long acbcabdcdaaaab = abs(acbcabdcdaaaa + acd);\n    long acdbcabdcdaaaab\
    \ = abs(acdbcabdcdaaaa + acd);\n    long acbcabdcdaaaabc = abs(acbcabdcdaaaab\
    \ + acd);\n    long acdbcabdcdaaaabc = abs(acdbcabdcdaaaab + acd);\n    long acbcabdcdaaaabcc\
    \ = abs(acbcabdcdaaaabc + acd);\n    long acdbcabdcdaaaabcc = abs(acdbcabdcdaaaabc\
    \ + ac", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc\
    \ = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n\
    \    long acd = abs(ac + bc);\n    long abcd = abs(abc + bcd);\n    long acbd\
    \ = abs(acd + abc);\n    long abac = abs(abc + acb);\n    long abcab = abs(abc\
    \ + abc);\n    long abcabc = abs(abcab + acbc);\n    long abcabcd = abs(abcabc\
    \ + abcd);\n    long abcabcde = abs(abcabcde + acbcd);\n    long abcabcdef = abs(abcabcdef\
    \ + abcd);\n    long abcabcdefg = abs(abcabcdef + abce);\n    long abcabcdefgh\
    \ = abs(abcabcdefgh + acbdef);\n    long abcabcdefghi = abs(abcabcdefghi + acbdefg);\n\
    \    long abcabcdefghij = abs(abcabcdefghij + acbdefgh);\n    long abcabcdefghijk\
    \ = abs(abcabcdefghijk + acbdefghi);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghij);\n    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijk);\n\
    \    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl\
    \ = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n\
    \    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl\
    \ = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghijkl);\n    long abcabc", "{\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f =\
    \ (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0)\
    \ || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis\
    \ doesn't seem to work. `right_angle_triangle(2L, 1L, 2L)` returns `true` when\
    \ it should be `false`.\n<|/ c |>\n<| c |>\nIt does work. I've tested it before\
    \ posting it. The problem was with the `if` statement in the `right_angle_triangle`\
    \ function. I've edited my answer to fix it.\n<|/ c |>\n<| c |>\nAh yes, I see\
    \ now. Thanks for your help.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,geometry\
    \ |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n\
    {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n  \
    \  long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e\
    \ * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,geometry |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n\
    \    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g <\
    \ 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(a\
    \ - d);\n    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc =\
    \ ab + ac;\n    long bcd = bc + bd;\n    long abcd = abc + bcd;\n    long acbd\
    \ = ac + bd;\n    long acbc = ac + bc;\n    long acdbc = ac + bd;\n    long acdbd\
    \ = ac + bd;\n    long acdbcd = ac + bd;\n    long acbcdd = ac + bd;\n    long\
    \ acbcdcd = ac + bd;\n    long acbcdcb = ac + bc;\n    long acbcdcd = ac + bd;\n\
    \    long acbcdcbd = ac + bd;\n    long acbcdcbc = ac + bc;\n    long acbcdcbcd\
    \ = ac + bd;\n    long acbcdcbcb = ac + bc;\n    long acbcdcbcd = ac + bd;\n \
    \   long acbcdcbcbd = ac + bd;\n    long acbcdcbcbc = ac + bc;\n    long acbcdcbcbcd\
    \ = ac + bd;\n    long acbcdcbcbcb = ac + bc;\n    long acbcdcbcbcd = ac + bd;\n\
    \    long acbcdcbcbcbd = ac + bd;\n    long acbcdcbcbcbc = ac + bc;\n    long\
    \ acbcdcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcb = ac + bc;\n    long acbcdcbcbcbcd\
    \ = ac + bd;\n    long acbcdcbcbcbcbd = ac + bd;\n    long acbcdcbcbcbcbc = ac\
    \ + bc;\n    long acbcdcbcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcbcb = ac +\
    \ bc;\n    long acbcdcbcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcbcbd = ac + bd;\n\
    \    long acbcdcbcbcbcbcbc = ac + bc;\n    long acbcdcbcbcbcbcbcd = ac + bd;\n\
    \    long ", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    return ((b * b - 4 * a * c) > 0 && (b\
    \ * b + 4 * a * c) < e || \n            (b * b - 4 * a * c) > 0 && (b * b + 4\
    \ * a * c) > e || \n            (b * b + 4 * a * c) < e && (b * b - 4 * a * c)\
    \ > 0);\n}", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long cb = abs(c - b);\n    \n    if (ab == ac)\n    {\n\
    \        if (ab == bc)\n        {\n            if (ab == cb)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            return false;\n        }\n    }\n    else\n    {\n        return\
    \ false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm,geometry |>\n<| c |>\nThis\
    \ code does not work. Try it with `right_angle_triangle(2L, 3L, 4L)` which should\
    \ return `true` but your code returns `false`.\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it before posting it. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| c |>\nI tested it again and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| c |>\nI tested it again and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| a tags=c++,algorithm,geometry |>\nI believe that this\
    \ is what you are looking for:\n<code>", "{\n    long ab = a - b;\n    long ac\
    \ = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac +\
    \ bc;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n", "{\n    long ab\
    \ = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long\
    \ abc = abs(ab + ac + bc);\n    long acb = abs(c - b);\n    long bcb = abs(b -\
    \ c);\n    long abbc = abs(ab + bc + bc);\n    long acbc = abs(c - b);\n    long\
    \ bcab = abs(b - c);\n    long cabb = abs(c - b);\n    long abcab = abs(ab + cab\
    \ + cab);\n    long accab = abs(c - a);\n    long bcabc = abs(b - c);\n    long\
    \ cabbc = abs(c - b);\n    long abcabc = abs(ab + cab + cab);\n    long accabc\
    \ = abs(c - a);\n    long bcabcb = abs(b - c);\n    long cabbcb = abs(c - b);\n\
    \    long abcabcb = abs(ab + cab + cab);\n    long accabcb = abs(c - a);\n   \
    \ long bcabcbc = abs(b - c);\n    long cabbcbc = abs(c - b);\n    long abcabcbc\
    \ = abs(ab + cab + cab);\n    long accabcbc = abs(c - a);\n    long bcabcbcb =\
    \ abs(b - c);\n    long cabbcbcb = abs(c - b);\n    long abcabcbcb = abs(ab +\
    \ cab + cab);\n    long accabcbcb = abs(c - a);\n    long bcabcbcbc = abs(b -\
    \ c);\n    long cabbcbcbc = abs(c - b);\n    long abcabcbcbc = abs(ab + cab +\
    \ cab);\n    long accabcbcbc = abs(c - a);\n    long bcabcbcbcb = abs(b - c);\n\
    \    long cabbcbcbcb = abs(c - b);\n    long abcabcbcbcb = abs(ab + cab + cab);\n\
    \    long accabcbcbcb = abs(c - a);\n    long bcabcbcbcbc = abs(b - c);\n    long\
    \ cabbcbcbcbc = abs(c - b);\n    long abcabcbcbcbc = abs(ab + cab + cab);\n  \
    \  long accabcbcbcbc = abs(c - a);\n    long bcabcbcbcbcb = abs(b - c);\n    long\
    \ cabbcbcbcbcb = abs(c - b);\n    long abcabcbcbcbcb = abs(ab + cab + cab);\n\
    \    long accabcbcbcbcb = abs(c - a);\n    long ", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + ac;\n\
    \    long bca = bc + ab;\n    long abbc = abc + bca;\n    long abcab = abbc +\
    \ abbc;\n    long abcabc = abcab + abcab;\n    long abcabcb = abcabca + abcabcb;\n\
    \    long abcabcbb = abcabcbb + abcabcbb;\n    long abcabcbbc = abcabcbbc + abcabcbbc;\n\
    \    long abcabcbbcd = abcabcbbcd + abcabcbbcd;\n    long abcabcbbcde = abcabcbbcde\
    \ + abcabcbbcde;\n    long abcabcbbcdef = abcabcbbcdef + abcabcbbcdef;\n    long\
    \ abcabcbbcdefg = abcabcbbcdef + abcabcbbcdefg;\n    long abcabcbbcdefgh = abcabcbbcdef\
    \ + abcabcbbcdefgh;\n    long abcabcbbcdefghi = abcabcbbcdef + abcabcbbcdefghi;\n\
    \    long abcabcbbcdefghij = abcabcbbcdef + abcabcbbcdefghij;\n    long abcabcbbcdefghijk\
    \ = abcabcbbcdef + abcabcbbcdefghijk;\n    long abcabcbbcdefghijkl = abcabcbbcdef\
    \ + abcabcbbcdefghijkl;\n    long abcabcbbcdefghijkll = abcabcbbcdef + abcabcbbcdefghijkll;\n\
    \    long abcabcbbcdefghijkllm = abcabcbbcdef + abcabcbbcdefghijkllm;\n    long\
    \ abcabcbbcdefghijkllmm = abcabcbbcdef + abcabcbbcdefghijkllmm;\n    long abcabcbbcdefghijkllmmn\
    \ = abcabcbbcdef + abcabcbbcdefghijkllmmn;\n    long abcabcbbcdefghijkllmmnm =\
    \ abcabcbbcdef + abcabcbbcdef", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = Math.sqrt(d);\n    return ((b * b\
    \ - 4 * a * c) > 0 && (b * b + 4 * a * c) < e && (b - c) > 0 && (b - c) < e);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(b - c);\n    long abbc = abs(b - ab);\n    long acbc = abs(c - ac);\n  \
    \  long acab = abs(c - ab);\n    long acbba = abs(b - ac);\n    long acbab = abs(b\
    \ - ab);\n    long acbabc = abs(c - ac);\n    long acbabb = abs(b - ac);\n   \
    \ long acbabab = abs(b - ab);\n    long acbabac = abs(c - ac);\n    long acbababc\
    \ = abs(b - ab);\n    long acbababb = abs(c - ac);\n    long acbababba = abs(b\
    \ - ab);\n    long acbababbc = abs(c - ac);\n    long acbababbca = abs(b - ab);\n\
    \    long acbababbcab = abs(c - ac);\n    long acbababbcaba = abs(b - ab);\n \
    \   long acbababbcabab = abs(c - ac);\n    long acbababbcababc = abs(b - ab);\n\
    \    long acbababbcababca = abs(c - ac);\n    long acbababbcababcab = abs(b -\
    \ ab);\n    long acbababbcababcabc = abs(c - ac);\n    long acbababbcababcabca\
    \ = abs(b - ab);\n    long acbababbcababcabcabcab = abs(c - ac);\n    long acbababbcababcabcabcaba\
    \ = abs(b - ab);\n    long acbababbcababcabcabcabab = abs(c - ac);\n    long acbababbcababcabcabcababc\
    \ = abs(b - ab);\n    long acbababbcababcabcabcababca = abs(c - ac);\n    long\
    \ acbababbcababcabcabcababcab = abs(b - ab);\n    long acbababbcababcabcabcababcabc\
    \ = abs(c - ac);\n    long acbababbcababcabcabcababcabca = abs(b - ab);\n    long\
    \ acbababbcababcabcabcababcabcab = abs(c - ac);\n    long acbababbcababcabcabcababcabcabc\
    \ = abs(b - ab);\n    long acbab", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = b +\
    \ e * Math.sqrt(b * b - 4 * a * c);\n    long g = a + e * Math.sqrt(b * b - 4\
    \ * a * c);\n    if (f < 0)\n        return false;\n    if (g < 0)\n        return\
    \ false;\n    if (f > g)\n        return false;\n    if (f == g)\n        return\
    \ true;\n    long h = f - g;\n    if (h > 0)\n        return false;\n    if (h\
    \ == 0)\n        return true;\n    long i = f + g;\n    if (i > 0)\n        return\
    \ false;\n    if (i == 0)\n        return true;\n    long j = (f - g) / 2;\n \
    \   if (j > 0)\n        return false;\n    if (j == 0)\n        return true;\n\
    \    long k = f + j;\n    if (k > 0)\n        return false;\n    if (k == 0)\n\
    \        return true;\n    long l = f - j;\n    if (l > 0)\n        return false;\n\
    \    if (l == 0)\n        return true;\n    long m = f + j;\n    if (m > 0)\n\
    \        return false;\n    if (m == 0)\n        return true;\n    long n = f\
    \ - j;\n    if (n > 0)\n        return false;\n    if (n == 0)\n        return\
    \ true;\n    long o = f + j;\n    if (o > 0)\n        return false;\n    if (o\
    \ == 0)\n        return true;\n    long p = f - j;\n    if (p > 0)\n        return\
    \ false;\n    if (p == 0)\n        return true;\n    long q = f + j;\n    if (q\
    \ > 0)\n        return false;\n    if (q == 0)\n        return true;\n    long\
    \ r = f - j;\n    if (r > 0)\n        return false;\n    if (r == 0)\n       \
    \ return true;\n    long s = f + j;\n    if (s > 0)\n        return false;\n \
    \   if (s == 0)\n        return true;\n    long t = f - j;\n    if (t > 0)\n \
    \       return false;\n    if (t == 0)\n        return true;\n    long u = f +\
    \ j;\n    if (u > 0)\n        return false;\n    if (u == 0)\n        return true;\n\
    \    long v = f - j;\n    if (v > 0)\n        return false;\n    if (v == 0)\n\
    \        return true;\n    long w = f + j;\n    if (w > 0)\n        return false;\n\
    \    if (w == 0)\n        return true;\n    long x = f - j;\n    if (x > 0)\n\
    \        return false;\n    if (x == 0)\n        return true;\n    long y = f\
    \ + j;\n    if (y > 0)\n        return false;\n    if (y == 0)\n        return\
    \ true;\n    long z = f - j;\n    if (z > 0)\n        return false;\n    if (z\
    \ == 0)\n        return true;\n    long a = f + j;\n    if (a > 0)\n        return\
    \ false;", "{\n    long side1 = b - a;\n    long side2 = c - b;\n    long side3\
    \ = a - c;\n    \n    long angle1 = std.math.angle(side1, side2, side3);\n   \
    \ long angle2 = std.math.angle(side2, side1, side3);\n    long angle3 = std.math.angle(side3,\
    \ side1, side2);\n    \n    if (angle1 < angle2 && angle1 < angle3)\n        return\
    \ true;\n    else if (angle2 < angle1 && angle2 < angle3)\n        return true;\n\
    \    else if (angle3 < angle1 && angle3 < angle2)\n        return true;\n    \n\
    \    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,geometry,trigonometry,math\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n\
    \    long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c\
    \ + e) / (2 * a);\n    long h = (b - e) / (2 * a);\n    return ((f < 0 && g <\
    \ 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a tags=c#,math,geometry\
    \ |>\n<| c |>\nThis code does not work. Try it with the input `right_angle_triangle(2L,\
    \ 1L, 3L)`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try it yourself\
    \ here: http://ideone.com/yK6Uk\n<|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(2L,\
    \ 1L, 3L)`\n<|/ c |>\n<| c |>\nIt works for me. Try it yourself here: http://ideone.com/yK6Uk\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it yourself here: http://ideone.com/yK6Uk\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n\
    \    long acbc = acb * bc;\n    long abbc = abb * bc;\n    long abcab = abcab\
    \ * bc;\n    long acbcab = acbcab * bc;\n    long acbcabc = acbcabc * bc;\n  \
    \  long abcabcb = abcabcb * bc;\n    long abcabcba = abcabcba * bc;\n    long\
    \ acbcabcba = acbcabcba * bc;\n    long acbcabcbac = acbcabcbac * bc;\n    long\
    \ abcabcbaca = abcabcbaca * bc;\n    long acbcabcbaca = acbcabcbaca * bc;\n  \
    \  long acbcabcbacab = acbcabcbacab * bc;\n    long acbcabcbacabc = acbcabcbacabc\
    \ * bc;\n    long abcabcbacabca = abcabcbacabca * bc;\n    long acbcabcbacabca\
    \ = acbcabcbacabca * bc;\n    long acbcabcbacabcab = acbcabcbacabcab * bc;\n \
    \   long acbcabcbacabcabc = acbcabcbacabcabc * bc;\n    long abcabcbacabcabca\
    \ = abcabcbacabcabca * bc;\n    long acbcabcbacabcabca = acbcabcbacabcabca * bc;\n\
    \    long acbcabcbacabcabcab = acbcabcbacabcabcab * bc;\n    long acbcabcbacabcabcabc\
    \ = acbcabcbacabcabcabc * bc;\n    long abcabcbacabcabcabca = abcabcbacabcabcabca\
    \ * bc;\n    long acbcabcbacabcabcabca = acbcabcbacabcabcabca * bc;\n    long\
    \ acbcabcbacabcabcabcab = acbcabcbacabcabcabcab * bc;\n    long acbcabcbacabcabcabcabc\
    \ = acbcabcbacabcabcabcabc * bc;\n", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n\
    \    long abac = ab - ac;\n    long acab = ac - ab;\n    long abcab = ab - abc;\n\
    \    long acabc = ac - abc;\n    long abcabc = ab - abc;\n    long acabcb = ac\
    \ - abc;\n    long abcabcb = ab - abc;\n    long acabcba = ac - abca;\n    long\
    \ abcabcba = ab - abca;\n    long acabcbac = ac - abcab;\n    long abcabcbac =\
    \ ab - abcab;\n    long acabcbaca = ac - abcabc;\n    long abcabcbaca = ab - abcabc;\n\
    \    long acabcbacab = ac - abcabcba;\n    long abcabcbacab = ab - abcabcba;\n\
    \    long acabcbacabc = ac - abcabcbac;\n    long abcabcbacabc = ab - abcabcbac;\n\
    \    long acabcbacabca = ac - abcabcbaca;\n    long abcabcbacabca = ab - abcabcbaca;\n\
    \    long acabcbacabcab = ac - abcabcbacab;\n    long abcabcbacabcab = ab - abcabcbacab;\n\
    \    long acabcbacabcabc = ac - abcabcbacabc;\n    long abcabcbacabcabc = ab -\
    \ abcabcbacabc;\n    long acabcbacabcabca = ac - abcabcbacabca;\n    long abcabcbacabcabca\
    \ = ab - abcabcbacabca;\n    long acabcbacabcabcab = ac - abcabcbacabcab;\n  \
    \  long abcabcbacabcabcab = ab - abcabcbacabcab;\n    long acabcbacabcabcabc =\
    \ ac - abcabcbacabcabc;\n    long abcabcbacabcabcabc = ab - abcabcbacabcabc;\n\
    \    long acabcbacabcabcabca = ac - abcabcbacabcabca;\n    long abcabcbacabcabcabca\
    \ = ab - abcabcba", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long abc = ab + bc;\n    long acb = ac + ab;\n\
    \    long ac2ab = ac * ab;\n    long ac2bc = ac * bc;\n    long ac2abc = ac *\
    \ abc;\n    long ac2bab = ac * bab;\n    long ac2acb = ac * acb;\n    long ac2ac2ab\
    \ = ac * ac2ab;\n    long ac2b2ab = ac * ac2b;\n    long ac2b2ac = ac * ac2bc;\n\
    \    long ac2b2ac2ab = ac * ac2b2ab;\n    long ac2ac2b2ab = ac * ac2ac2b;\n  \
    \  long ac2b2ac2abc = ac * ac2b2ac2ab;\n    long ac2b2ac2b2abc = ac * ac2b2ac2b2ab;\n\
    \    long ac2b2ac2b2ab2c = ac * ac2b2ac2b2ab2c;\n    long ac2b2ac2b2ab2cb = ac\
    \ * ac2b2ac2b2ab2cb;\n    long ac2b2ac2b2ab2cbb = ac * ac2b2ac2b2ab2cbb;\n   \
    \ long ac2b2ac2b2ab2cbbc = ac * ac2b2ac2b2ab2cbbc;\n    long ac2b2ac2b2ab2cbbcb\
    \ = ac * ac2b2ac2b2ab2cbbcb;\n    long ac2b2ac2b2ab2cbbcbc = ac * ac2b2ac2b2ab2cbbcbc;\n\
    \    long ac2b2ac2b2ab2cbbcbcb = ac * ac2b2ac2b2ab2cbbcbcb;\n    long ac2b2ac2b2ab2cbbcbcbc\
    \ = ac * ac2b2ac2b2ab2cbbcbcbc;\n    long ac2b2ac2b2ab2cbbcbcbcb = ac * ac2b2ac2b2ab2cbbcbcbcb;\n\
    \    long ac2b2ac2b2ab2cbbcbcbcbc = ac * ac2b2ac2b2ab2cbbcbcbcbc;\n    long ac2b2ac2b2ab2cbbcbcbcbcb\
    \ = ac * ac2b2ac2b2ab2c", "{\n    long ab = abs(b - a);\n    long ac = abs(c -\
    \ a);\n    long bc = abs(b - c);\n    long ad = abs(d - a);\n    long bd = abs(b\
    \ - d);\n    long cd = abs(c - d);\n    long abc = ab + ac;\n    long bcd = bc\
    \ + cd;\n    long abd = ab + bd;\n    long acd = ac + cd;\n    long abbc = abb\
    \ + bcc;\n    long abbd = abb + bcd;\n    long abcc = abc + cdd;\n    long abbcc\
    \ = abbcc + bcc;\n    long abbccd = abbccd + bcd;\n    long abccd = abccd + cdd;\n\
    \    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long\
    \ abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd\
    \ = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd\
    \ + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n\
    \    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long\
    \ abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd =\
    \ abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd +\
    \ cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n \
    \   long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd\
    \ = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd\
    \ + cdd;\n    long ab", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2\
    \ * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f >\
    \ 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis code does\
    \ not work. Try it with `right_angle_triangle(2L, 1L, 3L)`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Are you sure you copied the code correctly? I tested\
    \ it with `right_angle_triangle(2L, 1L, 3L)` and it returned `true`.\n<|/ c |>\n\
    <| c |>\nYes, I copied the code correctly. Maybe the problem is with my compiler.\
    \ I'm using Visual Studio 2015.\n<|/ c |>\n<| c |>\nI tested it on Visual Studio\
    \ 2015 and it works fine. Are you sure you copied the code correctly? I tested\
    \ it with `right_angle_triangle(2L, 1L, 3L)` and it returned `true`.\n<|/ c |>\n\
    <| c |>\nI tested it on Visual Studio 2015 and it works fine. Are you sure you\
    \ copied the code correctly? I tested it with `right_angle_triangle(2L, 1L, 3L)`\
    \ and it returned `true`.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < ", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - 4\
    \ * a * c) / d;\n    return e < 0;\n}", "{\n    long ab = abs(b - a);\n    long\
    \ ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n   \
    \ \n    if (ab == ac && ab == bc && ab == cb) return true;\n    else return false;\n\
    }", "{\n    long ab, bc, ac, ca;\n    \n    ab = b - a;\n    bc = c - b;\n   \
    \ ac = a - c;\n    ca = c - a;\n    \n    return (ab * bc > ab * ac) && (ab *\
    \ ca > bc * ac);\n}", "{\n    long ab = a - b;\n    long ac = a - c;\n    long\
    \ bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc\
    \ = acb * bc;\n    long acbcab = acbc * ab;\n    long acbcabc = acbcab * bc;\n\
    \    long acbcabcb = acbcabcb * bc;\n    long acbcabcbc = acbcabcbc * bc;\n  \
    \  long acbcabcbcb = acbcabcbcb * bc;\n    long acbcabcbcbc = acbcabcbcbc * bc;\n\
    \    long acbcabcbcbcb = acbcabcbcbcb * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long acbcabcbcbcbcb\
    \ = acbcabcbcbcbcb * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n \
    \   long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcb", "{\n    long d = b * b - 4 * a * c;\n    if (d <\
    \ 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e *\
    \ c) / a;\n    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f >\
    \ 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry,math |>\n<| c |>\nThis doesn't\
    \ work. Try it with `right_angle_triangle(2L, 1L, 3L)`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Can you give me an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\n`right_angle_triangle(2L, 1L, 3L)` returns `true`, but `right_angle_triangle(2L,\
    \ 1L, 2L)` returns `false`. So it fails for some edge cases.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Thanks for pointing that out. I updated my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer again. Thanks for pointing that out. I also\
    \ added a link to a C# implementation of this algorithm.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThis can be done by finding the equation of the line segment connecting\
    \ the two points and then finding the angle of the line segment with the x-axis.\
    \ If the angle is greater than 90 degrees, then the two points are collinear.\n\
    <|/ a tags=c#,geometry,math |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(2L,\
    \ 1L, 3L)`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I updated my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ algorithm is pretty simple. Just find the distance between each point and calculate\
    \ the angle between each point and the x-axis. If the angle is greater than 90\
    \ degrees, then the two points are collinear.\n<code>", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) -\
    \ 4 * a * c) / d;\n    return e < 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,geometry\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n    long\
    \ g = a * a + b * b - c * c;\n    if (g < 0)\n        return false;\n    long\
    \ h = sqrt(g);\n    long i = a * h;\n    long j = b * h;\n    long k = c * h;\n\
    \    long l = a * k;\n    long m = b * k;\n    long n = c * k;\n    long o = a\
    \ * l;\n    long p = b * l;\n    long q = c * l;\n    long r = a * m;\n    long\
    \ s = b * m;\n    long t = c * m;\n    long u = a * n;\n    long v = b * n;\n\
    \    long w = c * n;\n    long x = a * o;\n    long y = b * o;\n    long z = c\
    \ * o;\n    long a = a * p;\n    long b = b * p;\n    long c = c * p;\n    long\
    \ d = a * q;\n    long e = b * q;\n    long f = c * q;\n    long g = a * r;\n\
    \    long h = b * r;\n    long i = c * r;\n    long j = a * s;\n    long k = b\
    \ * s;\n    long l = c * s;\n    long m = a * t;\n    long n = b * t;\n    long\
    \ o = c * t;\n    long p = a * u;\n    long q = b * u;\n    long r = c * u;\n\
    \    long s = a * v;\n    long t = b * v;\n    long u = c * v;\n    long v = a\
    \ * w;\n    long w = b * w;\n    long x = c * w;\n    long y = a * x;\n    long\
    \ z = b * x;\n    long a = a * y;\n    long b = b * y;\n    long c = c * y;\n\
    \    long d = a * z;\n    long e = b * z;\n    long f = c * z;\n    long g = a\
    \ * e;\n    long h = b * e;\n    long i = c * e;\n    long j = a * f;\n    long\
    \ k = b * f;\n    long l = c * f;\n    long m = a * g;\n    long n = b * g;\n\
    \    long o = ", "{\n    long angle;\n    angle = atan2(c-b, a-b); \n    if (angle\
    \ < 0)\n        angle += pi;\n    return angle > pi / 2;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(3, 4, 5)`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code.\n<|/ c |>\n\
    <| a tags=c++,geometry |>\n<code>", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n\
    \    long abac = ab + ac;\n    long acab = ac - ab;\n    long abcab = ab + bc;\n\
    \    long acbca = ac - bc;\n    long abcabc = ab + ac;\n    long acbcab = ac -\
    \ bc;\n    long abcabcd = ab + ac;\n    long acbcabd = ac - bc;\n    long abcabcde\
    \ = ab + ac;\n    long acbcabde = ac - bc;\n    long abcabcdef = ab + ac;\n  \
    \  long acbcabdef = ac - bc;\n    long abcabcdefg = ab + ac;\n    long acbcabdefg\
    \ = ac - bc;\n    long abcabcdefgh = ab + ac;\n    long acbcabdefgh = ac - bc;\n\
    \    long abcabcdefghi = ab + ac;\n    long acbcabdefghi = ac - bc;\n    long\
    \ abcabcdefghij = ab + ac;\n    long acbcabdefghij = ac - bc;\n    long abcabcdefghijk\
    \ = ab + ac;\n    long acbcabdefghijk = ac - bc;\n    long abcabcdefghijkl = ab\
    \ + ac;\n    long acbcabdefghijkl = ac - bc;\n    long abcabcdefghijkm = ab +\
    \ ac;\n    long acbcabdefghijkm = ac - bc;\n    long abcabcdefghijkn = ab + ac;\n\
    \    long acbcabdefghijkn = ac - bc;\n    long abcabcdefghijkno = ab + ac;\n \
    \   long acbcabdefghijkno = ac - bc;\n    long abcabcdefghijknop = ab + ac;\n\
    \    long acbcabdefghijknop = ac - bc;\n    long abcabcdefghijknopq = ab + ac;\n\
    \    long acbcabdefghijknopq = ac - bc;\n    long abcabcdefghijknopr = ab + ac;\n\
    \    ", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n\
    \    long f = (2 * b * b - a * c) / d;\n    if (f < 0)\n        return false;\n\
    \    long g = -(b * b + a * c) / d;\n    if (g < 0)\n        return false;\n \
    \   long h = -(b * b - a * c) / d;\n    if (h < 0)\n        return false;\n  \
    \  long i = a * a + b * b + c * c - 4 * a * b;\n    if (i < 0)\n        return\
    \ false;\n    long j = ((b * b) - 4 * a * c) / i;\n    if (j < 0)\n        return\
    \ false;\n    long k = ((b * b) - 4 * a * c) / j;\n    if (k < 0)\n        return\
    \ false;\n    long l = a * a + b * b + c * c - 4 * a * b;\n    if (l < 0)\n  \
    \      return false;\n    long m = ((b * b) - 4 * a * c) / l;\n    if (m < 0)\n\
    \        return false;\n    long n = a * a + b * b + c * c - 4 * a * b;\n    if\
    \ (n < 0)\n        return false;\n    long o = a * a + b * b + c * c - 4 * a *\
    \ b;\n    if (o < 0)\n        return false;\n    long p = a * a + b * b + c *\
    \ c - 4 * a * b;\n    if (p < 0)\n        return false;\n    long q = a * a +\
    \ b * b + c * c - 4 * a * b;\n    if (q < 0)\n        return false;\n    long\
    \ r = a * a + b * b + c * c - 4 * a * b;\n    if (r < 0)\n        return false;\n\
    \    long s = a * a + b * b + c * c - 4 * a * b;\n    if (s < 0)\n        return\
    \ false;\n    long t = a * a + b * b + c * c - 4 * a * b;\n    if (t < 0)\n  \
    \      return false;\n    long u = a * a + b * b + c * c - 4 * a * b;\n    if\
    \ (u < 0)\n        return false;\n    long v = a * a + b * b + c * c - 4 * a *\
    \ b;\n    if (v < 0)\n        return false;\n    long w = a * a + b * b + c *\
    \ c - 4 * a * b;\n    if (w < 0)\n        return false;\n    long x = a * a +\
    \ b * b + c * c - 4 * a * b;\n    if (x < 0)\n        return false;\n    long\
    \ y = a * a + b * b + c * c - 4 * a * b;\n    if (y < 0)\n        return false;\n\
    \    long z = a * a + b * b + c * c - 4 * a * b;\n    if (z < 0)", "{\n    long\
    \ side1 = abs(a) + abs(b) + abs(c);\n    long side2 = abs(a) + abs(b) - abs(c);\n\
    \    long side3 = abs(a) - abs(b) + abs(c);\n    long side4 = abs(a) - abs(b)\
    \ - abs(c);\n    long side5 = abs(a) + abs(b) - abs(c);\n    long side6 = abs(a)\
    \ - abs(b) + abs(c);\n    long side7 = abs(a) - abs(b) - abs(c);\n    long side8\
    \ = abs(a) + abs(b) + abs(c);\n    long side9 = abs(a) - abs(b) + abs(c);\n  \
    \  long side10 = abs(a) - abs(b) - abs(c);\n    long side11 = abs(a) + abs(b)\
    \ - abs(c);\n    long side12 = abs(a) - abs(b) + abs(c);\n    long side13 = abs(a)\
    \ - abs(b) - abs(c);\n    long side14 = abs(a) + abs(b) + abs(c);\n    long side15\
    \ = abs(a) - abs(b) + abs(c);\n    long side16 = abs(a) - abs(b) - abs(c);\n \
    \   long side17 = abs(a) + abs(b) + abs(c);\n    long side18 = abs(a) - abs(b)\
    \ + abs(c);\n    long side19 = abs(a) - abs(b) - abs(c);\n    long side20 = abs(a)\
    \ + abs(b) + abs(c);\n    long side21 = abs(a) - abs(b) + abs(c);\n    long side22\
    \ = abs(a) - abs(b) - abs(c);\n    long side23 = abs(a) + abs(b) - abs(c);\n \
    \   long side24 = abs(a) - abs(b) + abs(c);\n    long side25 = abs(a) - abs(b)\
    \ - abs(c);\n    long side26 = abs(a) + abs(b) - abs(c);\n    long side27 = abs(a)\
    \ - abs(b) + abs(c);\n    long side28 = abs(a) - abs(b) - abs(c);\n    long side29\
    \ = abs(a) + abs(b) + abs(c);\n    long side30 = abs(a) - abs(b) + abs(c);\n \
    \   long side31 = abs(a) - abs(b) - abs(c);\n    long side32 = abs(a) + abs(b)\
    \ + abs(c);\n    long side33 = abs(a) - abs(b) + abs(c);\n    long side34 = abs(a)\
    \ - abs(b) - abs(c);\n    long side35 = abs(a) + abs(b) + abs(c);\n    long side36\
    \ = abs(a) - abs(b) + abs(c);\n    long side37 = abs(a) - abs(b) - abs(c);\n \
    \   long side38", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n      \
    \  return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    return e < 0;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long angle1\
    \ = (a + b + c) / 2;\n    long angle2 = (a + b - c) / 2;\n    long angle3 = (a\
    \ - b - c) / 2;\n    \n    bool isRightAngle = angle1 == angle2 || angle1 == angle3\
    \ || angle2 == angle3;\n    \n    return isRightAngle;\n}", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would work if you had\
    \ a triangle with sides greater than 180 degrees.\n<|/ c |>\n<| c |>\nYes, it\
    \ would. But I didn't want to complicate the code too much. :)\n<|/ c |>\n<| c\
    \ |>\nI like this solution, however I wonder if it would work if you had a triangle\
    \ with sides greater than 180 degrees.\n<|/ c |>\n<| c |>\nYes, it would. But\
    \ I didn't want to complicate the code too much. :)\n<|/ c |>\n<| c |>\nI like\
    \ this solution, however I wonder if it would work if you had a triangle with\
    \ sides greater than 180 degrees.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>",
  "{\n    long side1 = (a + b + c) / 2;\n    long side2 = (b + c + a) / 2;\n    long\
    \ side3 = (c + a + b) / 2;\n    long side4 = side1;\n    long side5 = side2;\n\
    \    long side6 = side3;\n    long side7 = side4;\n    long side8 = side5;\n \
    \   long side9 = side6;\n    long side10 = side7;\n    long side11 = side8;\n\
    \    long side12 = side9;\n    long side13 = side10;\n    long side14 = side11;\n\
    \    long side15 = side12;\n    long side16 = side13;\n    long side17 = side14;\n\
    \    long side18 = side15;\n    long side19 = side16;\n    long side20 = side17;\n\
    \    long side21 = side18;\n    long side22 = side19;\n    long side23 = side20;\n\
    \    long side24 = side21;\n    long side25 = side22;\n    long side26 = side23;\n\
    \    long side27 = side24;\n    long side28 = side25;\n    long side29 = side26;\n\
    \    long side30 = side27;\n    long side31 = side28;\n    long side32 = side29;\n\
    \    long side33 = side30;\n    long side34 = side31;\n    long side35 = side32;\n\
    \    long side36 = side33;\n    long side37 = side34;\n    long side38 = side35;\n\
    \    long side39 = side36;\n    long side40 = side37;\n    long side41 = side38;\n\
    \    long side42 = side39;\n    long side43 = side40;\n    long side44 = side41;\n\
    \    long side45 = side42;\n    long side46 = side43;\n    long side47 = side44;\n\
    \    long side48 = side45;\n    long side49 = side46;\n    long side50 = side47;\n\
    \    long side51 = side48;\n    long side52 = side49;\n    long side53 = side50;\n\
    \    long side54 = side51;\n    long side55 = side52;\n    long side56 = side53;\n\
    \    long side57 = side54;\n    long side58 = side55;\n    long side59 = side56;\n",
  "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b -\
    \ c);\n    long acb = abs(c - b);\n    long abc = abs(b - c);\n    long abbc =\
    \ abs(b - b);\n    long acbc = abs(c - b);\n    long abac = abs(b - a);\n    long\
    \ abcab = abs(b - c);\n    long acbcab = abs(c - b);\n    long accabb = abs(c\
    \ - c);\n    long abcabc = abs(b - c);\n    long accabbc = abs(c - b);\n    long\
    \ abcabac = abs(b - c);\n    long accabbca = abs(c - b);\n    long abcabcab =\
    \ abs(b - c);\n    long accabbcab = abs(c - b);\n    long accabcabb = abs(c -\
    \ c);\n    long abcabcabc = abs(b - c);\n    long accabbcabc = abs(c - b);\n \
    \   long abcabcabca = abs(b - c);\n    long accabbcabca = abs(c - b);\n    long\
    \ abcabcabcab = abs(b - c);\n    long accabbcabcab = abs(c - b);\n    long accabcabbc\
    \ = abs(c - c);\n    long abcabcabcabc = abs(b - c);\n    long accabbcabcabc =\
    \ abs(c - b);\n    long abcabcabcabca = abs(b - c);\n    long accabbcabcabca =\
    \ abs(c - b);\n    long abcabcabcabcab = abs(b - c);\n    long accabbcabcabcab\
    \ = abs(c - b);\n    long accabcabbcabc = abs(c - c);\n    long abcabcabcabcabc\
    \ = abs(b - c);\n    long accabbcabcabcabc = abs(c - b);\n    long abcabcabcabcabca\
    \ = abs(b - c);\n    long accabbcabcabcabca = abs(c - b);\n    long abcabcabcabcabcab\
    \ = abs(b - c);\n    long accabbcabcabcabcab = abs(c - b);\n    long accabcabbcabcabc\
    \ = abs(c - c);\n    long abcabcabcabcabcabc = abs(b - c);\n    long accabbcabcabcabcabc\
    \ = abs(c - b);\n    long abcabcabcabcabcabca = abs(b - c);\n    long accabbcabcabcabcabca\
    \ = abs(c - b);\n    long abcabcabcabcabcabcab = abs(b - ", "{\n    long ab, bc,\
    \ ac;\n    \n    ab = b - a;\n    bc = c - b;\n    ac = a - c;\n    \n    if (ab\
    \ * bc > ab * ac)\n    {\n        return true;\n    }\n    \n    return false;\n\
    }", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b\
    \ - c);\n    long cb = abs(c - b);\n    long abc = ab + ac;\n    long bcb = bc\
    \ + cb;\n    long acb = ac + cb;\n    long abbc = ab + bc;\n    long bcbc = bc\
    \ + cb;\n    long acbc = ac + cb;\n    long abbcd = abbc + acb;\n    long bcbcd\
    \ = bcbc + acb;\n    long acbcd = acbc + acb;\n    long abbcdd = abbcd + acbc;\n\
    \    long bcbcd = bcbcd + acbc;\n    long acbcd = acbcd + acbc;\n    long abbcde\
    \ = abbcd + abbc;\n    long bcbcde = bcbcd + abbc;\n    long acbcde = acbcd +\
    \ abbc;\n    long abbcef = abbcde + abbcd;\n    long bcbcef = bcbcde + abbcd;\n\
    \    long acbcde = acbcde + abbcd;\n    long abbcef = abbcef + abbcd;\n    long\
    \ bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde + abbcd;\n    long abbcef\
    \ = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde\
    \ + abbcd;\n    long abbcef = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n\
    \    long acbcde = acbcde + abbcd;\n    long abbcef = abbcef + abbcd;\n    long\
    \ bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde + abbcd;\n    long abbcef\
    \ = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde\
    \ + abbcd;\n    long abbcef = abbcef + abbcd;\n    long bcbcef = bcbce", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2\
    \ * a);\n    return ((f >= 0 && f <= 1) || (g >= 0 && g <= 1));\n}", "{\n    long\
    \ ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n   \
    \ long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac\
    \ + bc);\n    long abcd = abs(abc + bcd);\n    long acbd = abs(acd + abc);\n \
    \   long acdbc = abs(acbd + acd);\n    long acdbcd = abs(acdbc + acbd);\n    long\
    \ acdbcda = abs(acdbcd + acdbc);\n    long acdbcdaa = abs(acdbcda + acdbc);\n\
    \    long acdbcdaaa = abs(acdbcdaa + acdbc);\n    long acdbcdaaab = abs(acdbcdaaab\
    \ + acdbc);\n    long acdbcdaaabc = abs(acdbcdaaabc + acdbc);\n    long acdbcdaaabcd\
    \ = abs(acdbcdaaabcd + acdbc);\n    long acdbcdaaabcdd = abs(acdbcdaaabcdd + acdbc);\n\
    \    long acdbcdaaabcddd = abs(acdbcdaaabcddd + acdbc);\n    long acdbcdaaabcdddd\
    \ = abs(acdbcdaaabcdddddd + acdbc);\n    long acdbcdaaabcddddd = abs(acdbcdaaabcddddd\
    \ + acdbc);\n    long acdbcdaaabcddddde = abs(acdbcdaaabcddddde + acdbc);\n  \
    \  long acdbcdaaabcdddddef = abs(acdbcdaaabcdddddef + acdbc);\n    long acdbcdaaabcdddddefg\
    \ = abs(acdbcdaaabcdddddefg + acdbc);\n    long acdbcdaaabcdddddefgh = abs(acdbcdaaabcdddddefgh\
    \ + acdbc);\n    long acdbcdaaabcdddddefghi = abs(acdbcdaaabcdddddefghi + acdbc);\n\
    \    long acdbcdaaabcdddddefghij = abs(acdbcdaaabcdddddefghij + acdbc);\n    long\
    \ acdbcdaaabcdddddefghijk = abs(acdbcdaaabcdddddefghijk + acdbc);\n    long acdbcdaaabcdddddefghijkl\
    \ = abs(ac", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n\
    \    long acd = abs(ac + ab);\n    long abcd = abs(abc + bcd);\n    long acbd\
    \ = abs(acd + bc);\n    long acdbc = abs(acb + bc);\n    long acdbcd = abs(acdb\
    \ + bcd);\n    long acdbcda = abs(acdbc + abcd);\n    long acdbcdbc = abs(acdbca\
    \ + bcd);\n    long acdbcdbcd = abs(acdbcdb + abcd);\n    long acdbcdbcda = abs(acdbcdbc\
    \ + abcd);\n    long acdbcdbcdbc = abs(acdbcdbca + bcd);\n    long acdbcdbcdbcd\
    \ = abs(acdbcdbcdb + abcd);\n    long acdbcdbcdbcda = abs(acdbcdbcdbc + abcd);\n\
    \    long acdbcdbcdbcdbc = abs(acdbcdbcdbca + bcd);\n    long acdbcdbcdbcdbcd\
    \ = abs(acdbcdbcdbcdb + abcd);\n    long acdbcdbcdbcdbcda = abs(acdbcdbcdbcdbc\
    \ + abcd);\n    long acdbcdbcdbcdbcdbc = abs(acdbcdbcdbcdbca + bcd);\n    long\
    \ acdbcdbcdbcdbcdbcd = abs(acdbcdbcdbcdbcdb + abcd);\n    long acdbcdbcdbcdbcdbcda\
    \ = abs(acdbcdbcdbcdbcdbc + abcd);\n    long acdbcdbcdbcdbcdbcdbc = abs(acdbcdbcdbcdbcdbca\
    \ + bcd);\n    long acdbcdbcdbcdbcdbcdbcd = abs(acdbcdbcdbcdbcdbcdb + abcd);\n\
    \    long acdbcdbcdbcdbcdbcdbcda = abs(acdbcdbcdbcdbcdbcdbc + abcd);\n    long\
    \ acdbcdbcdbcdbcdbcdbcdbc = ", "{\n    long angle;\n    \n    angle = std.math.toDegrees(std.math.angle(std.math.radians(a),\
    \ std.math.radians(b), std.math.radians(c)));\n    \n    if (angle >= 90)\n  \
    \      return true;\n    \n    return false;\n}", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + ab);\n    long abcd\
    \ = abs(abc + bcd);\n    long acbd = abs(acd + bc);\n    long abcda = abs(abcd\
    \ + ac);\n    long acbda = abs(acbd + ab);\n    long acdbc = abs(acbd + bc);\n\
    \    long acdbca = abs(acdbc + ac);\n    long acdbcab = abs(acdbca + ab);\n  \
    \  long acdbcabc = abs(acdbcab + bc);\n    long acdbcabca = abs(acdbcabc + ac);\n\
    \    long acdbcabcab = abs(acdbcabca + ab);\n    long acdbcabcabc = abs(acdbcabcab\
    \ + bc);\n    long acdbcabcabca = abs(acdbcabcabc + ac);\n    long acdbcabcabcab\
    \ = abs(acdbcabcabca + ab);\n    long acdbcabcabcabc = abs(acdbcabcabcab + bc);\n\
    \    long acdbcabcabcabca = abs(acdbcabcabcabc + ac);\n    long acdbcabcabcabcab\
    \ = abs(acdbcabcabcabca + ab);\n    long acdbcabcabcabcabc = abs(acdbcabcabcabcab\
    \ + bc);\n    long acdbcabcabcabcabca = abs(acdbcabcabcabcabc + ac);\n    long\
    \ acdbcabcabcabcabcab = abs(acdbcabcabcabcabca + ab);\n    long acdbcabcabcabcabcabc\
    \ = abs(acdbcabcabcabcabcab + bc);\n    long acdbcabcabcabcabcabca = abs(acdbcabcabcabcabcab\
    \ + ac);\n    long acdbcabcabcabcabcabcab = abs(acdbcabcabcabcabcabca + ab);\n\
    \    long acdbcabcabcabcabcabcabc = abs(acdbcabcabcabcabcabcab + bc);\n    long\
    \ acdbcabcabcabcabcabcabca = abs(acdbcabcabcabcabcabcabc + ac);\n    long acdbcabcabcabcabcabcabcab\
    \ = abs(acdbcabcabcabcabcabcabcabca + ab);\n    long acdbcabcabcabcab", "{\n \
    \   long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long acbcbc = acbcb * bc;\n    long abcbc = abcb * bc;\n  \
    \  long acbcbcbc = acbcbcb * bc;\n    long abcbcbc = abcbcb * bc;\n    long acbcbcbcbc\
    \ = acbcbcbcb * bc;\n    long abcbcbcbc = abcbcbcb * bc;\n    long acbcbcbcbcbc\
    \ = acbcbcbcbcb * bc;\n    long abcbcbcbcbcbc = abcbcbcbcb * bc;\n    long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbc = abcbcbcbcbcb * bc;\n    long\
    \ acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcb\
    \ * bc;\n    long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcb * bc;\n    long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n    long\
    \ acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n    long acbcbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbc * bc;\n\
    \    long acbcbcbcbcbcbcbcbcbcbcbcbc = ac", "{\n    return ((b - a) * (c - b)\
    \ <= 0) && ((a - b) * (b - c) <= 0) && ((a - c) * (b - c) <= 0);\n}\n</code>\n\
    <|/ a tags=c++,algorithm,geometry |>\n<| c |>\nThis doesn't work if `a`, `b` and\
    \ `c` are equal.\n<|/ c |>\n<| c |>\n: It doesn't work for any three sides being\
    \ equal, which is what OP asked for. OP asked for \"right-angled triangle\", not\
    \ \"equilateral triangle\".\n<|/ c |>\n<| c |>\n: I see what you mean. Yes, this\
    \ doesn't work for any three sides being equal. I was just pointing out that OP\
    \ asked for \"right-angled triangle\", not \"equilateral triangle\".\n<|/ c |>\n\
    <| c |>\n: I see what you mean. Yes, this doesn't work for any three sides being\
    \ equal. I was just pointing out that OP asked for \"right-angled triangle\",\
    \ not \"equilateral triangle\".\n<|/ c |>\n<| c |>\n: I see what you mean. Yes,\
    \ this doesn't work for any three sides being equal. I was just pointing out that\
    \ OP asked for \"right-angled triangle\", not \"equilateral triangle\".\n<|/ c\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use Pythagoras theorem:\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long ac = ac * c;\n    long ab = ab\
    \ * c;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac *\
    \ b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * a;\n\
    \    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * b;\n \
    \   long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * c;\n  \
    \  long ab = ab * c;\n    long abc = abc * ab;\n    long acb = acb * ac;\n   \
    \ long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long\
    \ ac = ac * a;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac\
    \ = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac =\
    \ ac * c;\n    long ab = ab * c;\n    long abc = abc * ab;\n    long acb = acb\
    \ * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb *\
    \ ac;\n    long ac = ac * a;\n    long abc = abc * ab;\n    long acb = acb * ac;\n\
    \    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n \
    \   long ac = ac * c;\n    long ab = ab * c;\n    long abc = abc * ab;\n    long\
    \ acb = acb * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb\
    \ = acb * ac;\n    long ac = ac * a;\n    long abc = abc * ab;\n    long acb =\
    \ acb * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb\
    \ * ac;\n    long ac = ac * ", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    return\
    \ e < 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was about a right angle\
    \ triangle, not an equilateral triangle (which has two sides equal).\n<|/ c |>\n\
    <| c |>\nThe question was about a right angle triangle, not an equilateral triangle\
    \ (which has two sides equal).\n<|/ c |>\n<| c |>\nThe question was about a right\
    \ angle triangle, not an equilateral triangle (which has two sides equal).\n<|/\
    \ c |>\n<| a tags=c++,geometry |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n\
    \    if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n\
    \    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = b * b - 4 * a * c;\n    if\
    \ (g < 0)\n        return false;\n    long h = ((b * b) - 4 * a * c) / g;\n  \
    \  if (h < 0)\n        return false;\n    long i = b * b - 4 * a * c;\n    if\
    \ (i < 0)\n        return false;\n    long j = (b * b) - 4 * a * c;\n    if (j\
    \ < 0)\n        return false;\n    long k = b * b - 4 * a * c;\n    if (k < 0)\n\
    \        return false;\n    long l = b * b - 4 * a * c;\n    if (l < 0)\n    \
    \    return false;\n    long m = b * b - 4 * a * c;\n    if (m < 0)\n        return\
    \ false;\n    long n = b * b - 4 * a * c;\n    if (n < 0)\n        return false;\n\
    \    long o = b * b - 4 * a * c;\n    if (o < 0)\n        return false;\n    long\
    \ p = b * b - 4 * a * c;\n    if (p < 0)\n        return false;\n    long q =\
    \ b * b - 4 * a * c;\n    if (q < 0)\n        return false;\n    long r = b *\
    \ b - 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = b * b -\
    \ 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = b * b - 4 *\
    \ a * c;\n    if (t < 0)\n        return false;\n    long u = b * b - 4 * a *\
    \ c;\n    if (u < 0)\n        return false;\n    long v = b * b - 4 * a * c;\n\
    \    if (v < 0)\n        return false;\n    long w = b * b - 4 * a * c;\n    if\
    \ (w < 0)\n        return false;\n    long x = b * b - 4 * a * c;\n    if (x <\
    \ 0)\n        return false;\n    long y = b * b - 4 * a * c;\n    if (y < 0)\n\
    \        return false;\n    long z = b * b - 4 * a * c;\n    if (z < 0)\n    \
    \    return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,geometry |>\n\
    <| c |>\nI believe this should be the accepted answer. Although it does require\
    \ a lot of calculations, it is the most efficient and accurate answer to the question.\n\
    <|/ c |>\n<| c |>\nI believe this should be the accepted answer. Although it does\
    \ require a lot of calculations, it is the most efficient and accurate answer\
    \ to the question.\n<|/ c |>", "{\n    long angle;\n    angle = atan2(b,a) - atan2(c,a);\n\
    \    return angle < -pi || angle > pi;\n}", "{\n    long angle;\n    angle = acos((b*b\
    \ + c*c - a*a) / (2.0*b*c));\n    return angle > M_PI_2;\n}", "{\n    return ((b\
    \ - a) * (c - b) <= 0) && ((a - b) * (b - c) <= 0) && ((a - c) * (b - c) <= 0);\n\
    }", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - (4 * a * c));\n    if (e < 0)\n        return true;\n\
    \    long f = (d / 2);\n    long g = (e / 2);\n    if (g < 0)\n        return\
    \ false;\n    if (f < g)\n        return true;\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,geometry,trigonometry |>\n<| c |>\nI believe this fails for `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nIt fails for `right_angle_triangle(1,1,1)` because `b * b -\
    \ 4 * a * c` is `0` which is not less than `0`.\n<|/ c |>\n<| c |>\nI believe\
    \ this fails for `right_angle_triangle(1,1,1)` because `b * b - 4 * a * c` is\
    \ `0` which is not less than `0`.\n<|/ c |>\n<| c |>\nI believe this fails for\
    \ `right_angle_triangle(1,1,1)` because `b * b - 4 * a * c` is `0` which is not\
    \ less than `0`.\n<|/ c |>\n<| c |>\nI believe this fails for `right_angle_triangle(1,1,1)`\
    \ because `b * b - 4 * a * c` is `0` which is not less than `0`.\n<|/ c |>\n<|\
    \ a tags=c++,geometry,trigonometry |>\n<code>", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(c -\
    \ b);\n    long abc = abs(b - c);\n    long abbc = abs(b - b);\n    long abac\
    \ = abs(b - a);\n    long acab = abs(c - a);\n    long acbc = abs(c - b);\n  \
    \  long abacb = abs(b - a);\n    long abacc = abs(b - c);\n    long abbcc = abs(b\
    \ - b);\n    long acabc = abs(c - a);\n    long acbcb = abs(c - b);\n    long\
    \ abacbc = abs(b - a);\n    long abacbc = abs(b - c);\n    long abbcc = abs(b\
    \ - b);\n    long acabbc = abs(c - a);\n    long acbcba = abs(c - b);\n    long\
    \ abacbca = abs(b - a);\n    long abacbca = abs(b - c);\n    long abbcca = abs(b\
    \ - b);\n    long acabbcca = abs(c - a);\n    long acbcbaa = abs(c - b);\n   \
    \ long abacbcab = abs(b - a);\n    long abacbcab = abs(b - c);\n    long abbccaa\
    \ = abs(b - b);\n    long acabbccaa = abs(c - a);\n    long acbcbaab = abs(c -\
    \ b);\n    long abacbcaba = abs(b - a);\n    long abacbcaba = abs(b - c);\n  \
    \  long abbccaab = abs(b - b);\n    long acabbccaab = abs(c - a);\n    long acbcbaaac\
    \ = abs(c - b);\n    long abacbcabab = abs(b - a);\n    long abacbcabab = abs(b\
    \ - c);\n    long abbccaaac = abs(b - b);\n    long acabbccaabb = abs(c - a);\n\
    \    long acbcbaaacb = abs(c - b);\n    long abacbcababc = abs(b - a);\n    long\
    \ abacbcababc = abs(b - c);\n    long abbccaaacb = abs(b - b);\n    long acabbccaabbc\
    \ = abs(c - a);\n    long acbcbaaacbc = abs(c - b);\n    long abacbcababbc = abs(b\
    \ - a);\n    long abacbcababbc = abs(b - c);", "{\n    long angle;\n    \n   \
    \ angle = acos((b*b + c*c - a*a) / (2.0*b*c));\n    \n    if (angle > M_PI) return\
    \ false;\n    \n    if (a < b) \n    {\n        if (a < c) \n        {\n     \
    \       if (b < c) return true;\n            else return false;\n        }\n \
    \       else return false;\n    }\n    else \n    {\n        if (b < c) \n   \
    \     {\n            if (a < c) return true;\n            else return false;\n\
    \        }\n        else return false;\n    }\n}\n</code>\n<|/ a tags=c++,geometry,trigonometry,math\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about a triangle with\
    \ sides a, b and c, not three sides a, b and c.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is correct, although I believe it can be simplified a bit. I'll\
    \ post an answer with my simplification.\n<|/ c |>\n<| a tags=c++,geometry,trigonometry,math\
    \ |>\n<code>", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b\
    \ - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb\
    \ * bc;\n    long acbcab = acbc * ab;\n    long acbcabc = acbcab * bc;\n    long\
    \ acbcabcb = acbcabcb * bc;\n    long acbcabcbc = acbcabcbc * bc;\n    long acbcabcbcb\
    \ = acbcabcbcb * bc;\n    long acbcabcbcbc = acbcabcbcbc * bc;\n    long acbcabcbcbcb\
    \ = acbcabcbcbcb * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long\
    \ acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n\
    \    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcb", "{\n    return ((b - a) * (c - b) <= 0) && ((a - b) * (b - c) <=\
    \ 0) && ((a - c) * (b - c) <= 0);\n}", "{\n    long ab = a - b;\n    long ac =\
    \ a - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n\
    \    long acbc = acb * bc;\n    long abbc = abb * bc;\n    long abcc = abc * bc;\n\
    \    long accc = acc * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb\
    \ * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc\
    \ = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n   \
    \ long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb\
    \ * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc\
    \ = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n   \
    \ long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb\
    \ * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc\
    \ = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n   \
    \ long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb\
    \ * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc\
    \ = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n   \
    \ long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb\
    \ * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc\
    \ = abbb * bc;\n    long abbbc = abbb * bc;\n    long abbbc = abbb * ", "{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (long) (-b + e);\n    long g = (long) (-b - e);\n    if (f == g)\
    \ return true;\n    long h = (long) Math.sqrt(f + g);\n    long i = (long) Math.sqrt(f\
    \ - g);\n    long j = (long) Math.sqrt(f + g);\n    long k = (long) Math.sqrt(f\
    \ - g);\n    long l = (long) Math.sqrt(f + g);\n    long m = (long) Math.sqrt(f\
    \ - g);\n    long n = (long) Math.sqrt(f + g);\n    long o = (long) Math.sqrt(f\
    \ - g);\n    long p = (long) Math.sqrt(f + g);\n    long q = (long) Math.sqrt(f\
    \ - g);\n    long r = (long) Math.sqrt(f + g);\n    long s = (long) Math.sqrt(f\
    \ - g);\n    long t = (long) Math.sqrt(f + g);\n    long u = (long) Math.sqrt(f\
    \ - g);\n    long v = (long) Math.sqrt(f + g);\n    long w = (long) Math.sqrt(f\
    \ - g);\n    long x = (long) Math.sqrt(f + g);\n    long y = (long) Math.sqrt(f\
    \ - g);\n    long z = (long) Math.sqrt(f + g);\n    long a1 = (long) Math.sqrt(f\
    \ + g);\n    long b1 = (long) Math.sqrt(f - g);\n    long c1 = (long) Math.sqrt(f\
    \ - g);\n    long d1 = (long) Math.sqrt(f + g);\n    long e1 = (long) Math.sqrt(f\
    \ - g);\n    long f1 = (long) Math.sqrt(f + g);\n    long g1 = (long) Math.sqrt(f\
    \ - g);\n    long h1 = (long) Math.sqrt(f + g);\n    long i1 = (long) Math.sqrt(f\
    \ - g);\n    long j1 = (long) Math.sqrt(f + g);\n    long k1 = (long) Math.sqrt(f\
    \ - g);\n    long l1 = (long) Math.sqrt(f + g);\n    long m1 = (long) Math.sqrt(f\
    \ - g);\n    long n1 = (long) Math.sqrt(f + g);\n    long o1 = (long) Math.sqrt(f\
    \ - g);\n    long p1 = (long) Math.sqrt(f + g);\n    long q1 = (long) ", "{\n\
    \    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long abc = ab + ac;\n    long bca = bc + ab;\n    long acb = ac + bc;\n \
    \   long abcb = abc * bc;\n    long acbc = acb * bc;\n    long abcab = abcab *\
    \ ab;\n    long acbcab = acbcab * ac;\n    long acbcabc = acbcabc * ac;\n    long\
    \ acbcabcb = acbcabcb * ac;\n    long acbcabcbc = acbcabcbc * ac;\n    long acbcabcbcb\
    \ = acbcabcbcb * ac;\n    long acbcabcbcbc = acbcabcbcbc * ac;\n    long acbcabcbcbcb\
    \ = acbcabcbcbcb * ac;\n    long acbcabcbcbcbc = acbcabcbcbcbc * ac;\n    long\
    \ acbcabcbcbcbcb = acbcabcbcbcbcb * ac;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcbc\
    \ * ac;\n    long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * ac;\n    long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * ac;\n    long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc *\
    \ ac;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * ac;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * ac;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * ac;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * ac;\n    long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * ac;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * ac;\n    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcb", "{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    if (f > g)\n\
    \        return true;\n    return false;\n}\n</code>\n<|/ a tags=c#,geometry |>\n\
    <| c |>\nThis doesn't work. Try it with `right_angle_triangle(2L, 1L, 3L)`\n<|/\
    \ c |>\n<| c |>\nIt works fine for me. Try it yourself here: http://ideone.com/Y4YqZ\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(2L, 1L, 3L)`\n<|/\
    \ c |>\n<| c |>\nIt works for me. Try it yourself here: http://ideone.com/Y4YqZ\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it yourself here: http://ideone.com/Y4YqZ\n\
    <|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n\
    \    long g = (b - e * c) / a;\n    if (f > g)\n        return true;\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `IsRightAngledTriangle(2L, 1L, 3L)`\n<|/ c |>\n<| c |>\nIt works fine for me.\
    \ Try it yourself here: http://ideone.com/Y4YqZ\n<|/ c |>\n<| c |>\nIt works for\
    \ me too. Try it yourself here: http://ideone.com/Y4YqZ\n<|/ c |>\n<| c |>\nIt\
    \ works for me too. Try it yourself here: http://ideone.com/Y4YqZ\n<|/ c |>\n\
    <| c |>\nIt works for me too. Try it yourself here: http://ideone.com/Y4YqZ\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(ab + ac);\n    long bca = abs(bc - ac);\n    long bcb = abs(bc - b);\n \
    \   long abbc = abs(abc + bca);\n    long abbb = abs(abbc + bcb);\n    long abbba\
    \ = abs(abbb + abba);\n    long abbbc = abs(abbba + abbc);\n    long abbbac =\
    \ abs(abbba);\n    long abbbca = abs(abbbc + abbca);\n    long abbbacb = abs(abbbac\
    \ + abbcb);\n    long abbbcab = abs(abbbca + abbcab);\n    long abbbcabc = abs(abbbcab\
    \ + abbcabc);\n    long abbbcabca = abs(abbbcabc + abbcabca);\n    long abbbcabcab\
    \ = abs(abbbcabca + abbcabcab);\n    long abbbcabcabc = abs(abbbcabcab + abbcabcabc);\n\
    \    long abbbcabcabca = abs(abbbcabcabc + abbcabcabca);\n    long abbbcabcabcab\
    \ = abs(abbbcabcabca + abbcabcabcab);\n    long abbbcabcabcabc = abs(abbbcabcabcab\
    \ + abbcabcabcabc);\n    long abbbcabcabcabca = abs(abbbcabcabcabc + abbcabcabcabca);\n\
    \    long abbbcabcabcabcab = abs(abbbcabcabcabca + abbcabcabcabcab);\n    long\
    \ abbbcabcabcabcabc = abs(abbbcabcabcabcab + abbcabcabcabcabc);\n    long abbbcabcabcabcabca\
    \ = abs(abbbcabcabcabcabc + abbcabcabcabcabca);\n    long abbbcabcabcabcabcab\
    \ = abs(abbbcabcabcabcabca + abbcabcabcabcabcab);\n    long abbbcabcabcabcabcabc\
    \ = abs(abbbcabcabcabcabcab + abbcabcabcabcabcabc);\n    long abbbcabcabcabcabcabca\
    \ = abs(abbbcabcabcabcabcabc + abbcabcabcabcabcabca);\n    long abbbcabcabcabcabcabcab\
    \ = abs(abbbcabcabcabcabcab", "{\n    long angle;\n    angle = std.math.angle(std.math.radians(a),\
    \ std.math.radians(b), std.math.radians(c));\n    if (angle > std.math.radians(90))\n\
    \        return true;\n    return false;\n}", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + ab;\n    long ac2ab = ac * ac;\n    long ac2bc = ac * bc;\n\
    \    long ac2abc = ac * abc;\n    long ac2bab = ac * bab;\n    long ac2acb = ac\
    \ * acb;\n    long ac2babc = ac * acbc;\n    long ac2acbc = ac * acbc;\n    long\
    \ ac2bcab = ac * acbca;\n    long ac2bcabc = ac * acbcab;\n    long ac2bcabcb\
    \ = ac * acbcabc;\n    long ac2bcabcba = ac * acbcabcba;\n    long ac2bcabcbac\
    \ = ac * acbcabcbac;\n    long ac2bcabcbaca = ac * acbcabcbaca;\n    long ac2bcabcbacab\
    \ = ac * acbcabcbacab;\n    long ac2bcabcbacabc = ac * acbcabcbacabc;\n    long\
    \ ac2bcabcbacabcb = ac * acbcabcbacabcb;\n    long ac2bcabcbacabcbc = ac * acbcabcbacabcbc;\n\
    \    long ac2bcabcbacabcbca = ac * acbcabcbacabcbca;\n    long ac2bcabcbacabcbcab\
    \ = ac * acbcabcbacabcbcab;\n    long ac2bcabcbacabcbcabc = ac * acbcabcbacabcbcabc;\n\
    \    long ac2bcabcbacabcbcabca = ac * acbcabcbacabcbcabca;\n    long ac2bcabcbacabcbcabcab\
    \ = ac * acbcabcbacabcbcabcab;\n    long ac2bcabcbacabcbcabcabc = ac * acbcabcbacabcbcabcabc;\n\
    \    long ac2bcabcbacabcbcabcabca = ac * acbcabcbacabcbcabcabca;\n    long ac2bcabcbacabcbcabcabcab\
    \ = ac * acbcabcbacabcbcabcabcab;\n    long ac2bcabcbacabcbcabcabcabc = ac * ac",
  "{\n    long angle;\n    angle = acos((b*b + c*c - a*a) / (2.0*b*c));\n    return\
    \ angle <= M_PI/2;\n}", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long bd = abs(d - b);\n    long cd = abs(c - d);\n\
    \    long abc = ab + ac;\n    long bcd = bc + bd;\n    long abbc = ab + bc;\n\
    \    long abbd = ab + bd;\n    long acbc = ac + bc;\n    long acbd = ac + bd;\n\
    \    long abcc = ab + cc;\n    long abdd = ab + cd;\n    long accc = ac + cc;\n\
    \    long acdd = ac + cd;\n    long abbb = ab + bb;\n    long acbb = ac + bb;\n\
    \    long abbc = ab + bc;\n    long abcc = ab + cc;\n    long abdd = ab + cd;\n\
    \    long acdd = ac + cd;\n    long acbb = ac + bb;\n    long accc = ac + cc;\n\
    \    long acbb = ac + bb;\n    long accc = ac + cc;\n    long acdd = ac + cd;\n\
    \    long abbc = ab + bc;\n    long abcc = ab + cc;\n    long abdd = ab + cd;\n\
    \    long acdd = ac + cd;\n    long acbb = ac + bb;\n    long accc = ac + cc;\n\
    \    long acbb = ac + bb;\n    long accc = ac + cc;\n    long acdd = ac + cd;\n\
    \    long abbc = ab + bc;\n    long abcc = ab + cc;\n    long abdd = ab + cd;\n\
    \    long acdd = ac + cd;\n    long acbb = ac + bb;\n    long accc = ac + cc;\n\
    \    long acbb = ac + bb;\n    long accc = ac + cc;\n    long acdd = ac + cd;\n\
    \    long abbc = ab + bc;\n    long abcc = ab + cc;\n    long abdd = ab + cd;\n\
    \    long acdd = ac + cd;\n    long acbb = ac + bb;\n    long accc = ac + cc;\n\
    \    long acbb = ac + bb;\n    long accc = ac + cc;\n", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) -\
    \ 4 * a * c) / d;\n    if (e < 0)\n        return false;\n    long f = ((b * b)\
    \ - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n    long g = b * b\
    \ - 4 * a * c;\n    if (g < 0)\n        return false;\n    long h = ((b * b) -\
    \ 4 * a * c) / g;\n    if (h < 0)\n        return false;\n    long i = b * b -\
    \ 4 * a * c;\n    if (i < 0)\n        return false;\n    long j = b * b - 4 *\
    \ a * c;\n    if (j < 0)\n        return false;\n    long k = b * b - 4 * a *\
    \ c;\n    if (k < 0)\n        return false;\n    long l = b * b - 4 * a * c;\n\
    \    if (l < 0)\n        return false;\n    long m = b * b - 4 * a * c;\n    if\
    \ (m < 0)\n        return false;\n    long n = b * b - 4 * a * c;\n    if (n <\
    \ 0)\n        return false;\n    long o = b * b - 4 * a * c;\n    if (o < 0)\n\
    \        return false;\n    long p = b * b - 4 * a * c;\n    if (p < 0)\n    \
    \    return false;\n    long q = b * b - 4 * a * c;\n    if (q < 0)\n        return\
    \ false;\n    long r = b * b - 4 * a * c;\n    if (r < 0)\n        return false;\n\
    \    long s = b * b - 4 * a * c;\n    if (s < 0)\n        return false;\n    long\
    \ t = b * b - 4 * a * c;\n    if (t < 0)\n        return false;\n    long u =\
    \ b * b - 4 * a * c;\n    if (u < 0)\n        return false;\n    long v = b *\
    \ b - 4 * a * c;\n    if (v < 0)\n        return false;\n    long w = b * b -\
    \ 4 * a * c;\n    if (w < 0)\n        return false;\n    long x = b * b - 4 *\
    \ a * c;\n    if (x < 0)\n        return false;\n    long y = b * b - 4 * a *\
    \ c;\n    if (y < 0)\n        return false;\n    long z = b * b - 4 * a * c;\n\
    \    if (z < 0)\n        return false;\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,geometry,math |>\n<code>", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long acb = ac + cb;\n \
    \   long abac = ab + ac;\n    long bcac = bc + ac;\n    long abcab = ab + abc\
    \ + acb;\n    long bcacb = bc + acb + bc;\n    long abcabcb = ab + abc + abcb\
    \ + acb + bc;\n    long abcabcba = ab + abc + abcb + abba + ca + cb;\n    long\
    \ bcacbca = bcac + cbc + ca;\n    long abcabcbac = ab + abc + abcb + abba + ca\
    \ + cb + ca;\n    long abcabcbacb = ab + abc + abcb + abba + ca + cb + cb + ca;\n\
    \    long abcabcbacba = ab + abc + abcb + abba + ca + cb + cb + ca + ba;\n   \
    \ long bcacbcaab = bcac + cbc + ca + ab;\n    long abcabcbacbac = ab + abc + abcb\
    \ + abba + ca + cb + cb + ca + ba + ca;\n    long abcabcbacbacb = ab + abc + abcb\
    \ + abba + ca + cb + cb + ca + ba + cb + ca;\n    long abcabcbacbacba = ab + abc\
    \ + abcb + abba + ca + cb + cb + ca + ba + cb + cb + ca + ba;\n    long bcacbcaabc\
    \ = bcac + cbc + ca + ab + c;\n    long abcabcbacbacbac = ab + abc + abcb + abba\
    \ + ca + cb + cb + ca + ba + cb + cb + ca + ba + ca + ca;\n    long abcabcbacbacbacb\
    \ = ab + abc + abcb + abba + ca + cb + cb + ca + ba + cb + cb + ca + ba + ca +\
    \ cb + ca;\n    long abcabcbacbacbacba = ab + abc + abcb + abba + ca + cb + cb\
    \ + ca + ba + cb + cb + ca + ba + ca + cb + cb + c", "{\n    long ab = abs(b -\
    \ a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c\
    \ - b);\n    \n    if (ab == ac && ac == bc && bc == cb)\n        return true;\n\
    \    else\n        return false;\n}", "{\n    return ((b - a) * (c - b) <= 0)\
    \ && ((a - b) * (b - c) <= 0) && ((a - c) * (b - c) <= 0);\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=c++,geometry,math |>\n<code>", "{\n    long ab, bc, ac;\n\
    \    bool isRightAngle = false;\n    \n    ab = a - b;\n    bc = b - c;\n    ac\
    \ = c - a;\n    \n    if (ab > bc && ab > ac)\n    {\n        isRightAngle = true;\n\
    \    }\n    \n    return isRightAngle;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long\
    \ g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `right_angle_triangle(1,1,1)`\
    \ returns `true` instead of `false`\n<|/ c |>\n<| c |>\nIt works for me. `right_angle_triangle(1,1,1)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it on repl.it and it's returning\
    \ `true` for `right_angle_triangle(1,1,1)` as well.\n<|/ c |>\n<| c |>\nI tested\
    \ it on repl.it and it's returning `true` for `right_angle_triangle(1,1,1)` as\
    \ well.\n<|/ c |>\n<| c |>\nI tested it on repl.it and it's returning `true` for\
    \ `right_angle_triangle(1,1,1)` as well.\n<|/ c |>\n<| a tags=c#,geometry |>\n\
    <code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (-b +\
    \ e * c) / a;\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}", "{\n  \
    \  long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long abc = ab + ac;\n    long bcb = bc + bc;\n    long abbc = ab + bc;\n\
    \    long abcab = abc + ab;\n    long abcabc = abcab + abcab;\n    long abcabcb\
    \ = abcabc + abcabcb;\n    long abcabcbb = abcabcc + abcabcb;\n    long abcabcbbc\
    \ = abcabcbb + abcabcbb;\n    long abcabcbbcd = abcabcbbc + abcabcbb;\n    long\
    \ abcabcbbcde = abcabcbbcd + abcabcbb;\n    long abcabcbbcdef = abcabcbbcde +\
    \ abcabcbb;\n    long abcabcbbcdefg = abcabcbbcdef + abcabcbb;\n    long abcabcbbcdefgh\
    \ = abcabcbbcdefg + abcabcbb;\n    long abcabcbbcdefghi = abcabcbbcdefgh + abcabcbb;\n\
    \    long abcabcbbcdefghij = abcabcbbcdefghi + abcabcbb;\n    long abcabcbbcdefghijk\
    \ = abcabcbbcdefghij + abcabcbb;\n    long abcabcbbcdefghijkl = abcabcbbcdefghijk\
    \ + abcabcbb;\n    long abcabcbbcdefghijklmn = abcabcbbcdefghijklmn + abcabcbb;\n\
    \    long abcabcbbcdefghijklmno = abcabcbbcdefghijklmno + abcabcbb;\n    long\
    \ abcabcbbcdefghijklmnop = abcabcbbcdefghijklmnop + abcabcbb;\n    long abcabcbbcdefghijklmnopq\
    \ = abcabcbbcdefghijklmnopq + abcabcbb;\n    long abcabcbbcdefghijklmnopqr = abcabcbbcdefghijklmnopqr\
    \ + abcabcbb;\n    long abcabcbbcdefghijklm", "{\n    long angle = acos((b * b\
    \ + c * c - a * a) / (2 * b * c));\n    return angle > M_PI / 2;\n}", "{\n   \
    \ long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long cb = abs(c - b);\n    \n    if (ab > ac && ab > bc) \n    {\n      \
    \  if (ab > cb) \n        {\n            return true;\n        }\n    }\n    else\
    \ \n    {\n        if (ac > bc) \n        {\n            return true;\n      \
    \  }\n    }\n    return false;\n}", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = (b\
    \ + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 && g <\
    \ 0) || (f > 0 && g > 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis\
    \ is not the right answer. `right_angle_triangle(1,2,3)` returns `true` but `right_angle_triangle(1,2,4)`\
    \ returns `false`. See my answer for a correct solution.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b\
    \ - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb\
    \ * bc;\n    long abbc = abb * bc;\n    long acbcbc = acbcb * bc;\n    long abcbc\
    \ = abcb * bc;\n    long acbcbcbc = acbcbcb * bc;\n    long abcbcbc = abcbcb *\
    \ bc;\n    long acbcbcbcbc = acbcbcbcb * bc;\n    long abcbcbcbc = abcbcbcb *\
    \ bc;\n    long acbcbcbcbcbc = acbcbcbcbcb * bc;\n    long abcbcbcbcbcbc = abcbcbcbcb\
    \ * bc;\n    long acbcbcbcbcbcbc = acbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcb * bc;\n    long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n  \
    \  long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcb * bc;\n    long acbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb *\
    \ bc;\n    long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n    long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc * bc;\n    long\
    \ acbcbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbcbc * bc;\n    long acbcbcbcbcbcbcbcbcbcbcbcbc = ac",
  "{\n    long side1 = (a + b + c) / 2;\n    long side2 = (b + c + a) / 2;\n    long\
    \ side3 = (c + a + b) / 2;\n    \n    long angle1 = std.math.angle(side1, side2,\
    \ side3);\n    long angle2 = std.math.angle(side2, side3, side1);\n    long angle3\
    \ = std.math.angle(side3, side1, side2);\n    \n    return (angle1 == angle2 &&\
    \ angle2 == angle3);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not the right answer. Try `right_angle_triangle(2L, 1L, 3L)` which returns `true`\
    \ but should be `false`.\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ `right_angle_triangle(2L, 1L, 3L)` returns `false` because `2L + 3L + 3L = 2L\
    \ + 3L + 2L`, which is not the case for `right_angle_triangle(2L, 1L, 2L)`.\n\
    <|/ c |>\n<| c |>\nI believe this answer is correct. `right_angle_triangle(2L,\
    \ 1L, 3L)` returns `false` because `2L + 3L + 3L = 2L + 3L + 2L`, which is not\
    \ the case for `right_angle_triangle(2L, 1L, 2L)`.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is correct. `right_angle_triangle(2L, 1L, 3L)` returns `false` because\
    \ `2L + 3L + 3L = 2L + 3L + 2L`, which is not the case for `right_angle_triangle(2L,\
    \ 1L, 2L)`.\n<|/ c |>\n<| c |>\nI believe this answer is correct. `right_angle_triangle(2L,\
    \ 1L, 3L)` returns `false` because `2L + 3L + 3L = 2L + 3L + 2L`, which is not\
    \ the case for `right_angle_triangle(2L, 1L, 2L)`.\n<|/ c |>\n<| a dscore=5 |>\n\
    The algorithm is called \"right angle triangle\".\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThe algorithm is called \"right angle triangle\".\n<|/ c |>\n<| c |>\n\
    The algorithm is called \"right angle triangle\".\n<|/ c |>\n<| c |>\nThe algorithm\
    \ is called \"right angle triangle\".\n<|/ c |>\n<| c ", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(a\
    \ - d);\n    long bd = abs(b - d);\n    long cd = abs(c - d);\n    \n    bool\
    \ ret = (ab >= ac && ab >= bc && ab >= ad && ab >= bd && ab >= cd);\n    \n  \
    \  return ret;\n}\n</code>\n<|/ a tags=c++,geometry |>\n<| c |>\nThis is not an\
    \ answer to the question. An answer should explain what was wrong in the original\
    \ code and how you fixed it.\n<|/ c |>\n<| c |>\nI added the explanation to the\
    \ answer. Thanks for your feedback.\n<|/ c |>\n<| c |>\nThe code does not compile.\
    \ `bool ret = (ab >= ac && ab >= bc && ab >= ad && ab >= bd && ab >= cd);` should\
    \ be `bool ret = (ab >= ac && ab >= bc && ab >= ad && ab >= bd && bc >= cd);`\n\
    <|/ c |>\n<| a |>\n<code>", "{\n    long side1 = (a + b + c) / 2;\n    long side2\
    \ = (a + b - c) / 2;\n    long side3 = (a - b - c) / 2;\n    \n    if (side1 ==\
    \ side2 || side1 == side3 || side2 == side3)\n        return true;\n    \n   \
    \ return false;\n}", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc\
    \ + ab);\n    long acd = abs(ac + ab);\n    long abcd = abs(abc + bcd);\n    long\
    \ acbd = abs(acd + bc);\n    long abcda = abs(abcd + acd);\n    long acbda = abs(acbd\
    \ + ab);\n    long acbdaa = abs(acbda + acd);\n    long acbdaab = abs(acbdaa +\
    \ acb);\n    long acbdaabc = abs(acbdaab + acd);\n    long acbdaabcd = abs(acbdaabc+\
    \ acb);\n    long acbdaabcdab = abs(acbdaabcd+ acd);\n    long acbdaabcdabc =\
    \ abs(acbdaabcdab + acb);\n    long acbdaabcdabcd = abs(acbdaabcdabc+ acd);\n\
    \    long acbdaabcdabcdab = abs(acbdaabcdabcd+ acb);\n    long acbdaabcdabcdabc\
    \ = abs(acbdaabcdabcdab + acd);\n    long acbdaabcdabcdabcd = abs(acbdaabcdabcdabc+\
    \ acb);\n    long acbdaabcdabcdabcdab = abs(acbdaabcdabcdabcd+ acd);\n    long\
    \ acbdaabcdabcdabcdabc = abs(acbdaabcdabcdabcdab + acb);\n    long acbdaabcdabcdabcdabcdab\
    \ = abs(acbdaabcdabcdabcdabcdab + acd);\n    long acbdaabcdabcdabcdabcdabc = abs(acbdaabcdabcdabcdabcdab\
    \ + acb);\n    long acbdaabcdabcdabcdabcdabcdab = abs(acbdaabcdabcdabcdabcdab\
    \ + acd);\n    long acbdaabcdabcdabcdabcdabcdab = abs(acbdaabcdabcdabcdabcdab\
    \ + acb);\n    long acbdaabcdabcdabcdabcdabcdab = abs(acbdaabcdabcdabcdabcdabcdab\
    \ + acd);\n    long acbdaabcdabcdabcdabcdabcdab = abs(acbdaabcdabcdabcdabcdabcdab\
    \ + acb);\n    long acbdaabcdabcdabcdabcdabcdabcdab = abs(acbdaabcdabcdabcdabcdabcdabcdab\
    \ + acd);\n    long acbdaabcdabcdabcdabcdabcdabcdab = abs(", "{\n    long ab =\
    \ abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long\
    \ abc = ab + bc;\n    long acb = ac + ab;\n    long ac2ab = ac * ac;\n    long\
    \ ac2bc = ac * bc;\n    long ac2abc = ac2ab + ac2bc;\n    long ac2abbc = ac2ab\
    \ * bc;\n    long ac2abbc2 = ac2abbc + ac2abbc;\n    long ac2abbc3 = ac2abbc2\
    \ + ac2abbc2;\n    long ac2abbc4 = ac2abbc3 + ac2abbc2; \n    long ac2abbc5 =\
    \ ac2abbc4 + ac2abbc3; \n    long ac2abbc6 = ac2abbc5 + ac2abbc4; \n    long ac2abbc7\
    \ = ac2abbc6 + ac2abbc5; \n    long ac2abbc8 = ac2abbc7 + ac2abbc6; \n    long\
    \ ac2abbc9 = ac2abbc8 + ac2abbc7; \n    long ac2abbc10 = ac2abbc9 + ac2abbc8;\
    \ \n    long ac2abbc11 = ac2abbc10 + ac2abbc9; \n    long ac2abbc12 = ac2abbc11\
    \ + ac2abbc10; \n    long ac2abbc13 = ac2abbc12 + ac2abbc11; \n    long ac2abbc14\
    \ = ac2abbc13 + ac2abbc12; \n    long ac2abbc15 = ac2abbc14 + ac2abbc13; \n  \
    \  long ac2abbc16 = ac2abbc15 + ac2abbc14; \n    long ac2abbc17 = ac2abbc16 +\
    \ ac2abbc15; \n    long ac2abbc18 = ac2abbc17 + ac2abbc16; \n    long ac2abbc19\
    \ = ac2abbc18 + ac2abbc17; \n    long ac2abbc20 = ac2abbc19 + ac2abbc18; \n  \
    \  long ac2abbc21 = ac2abbc20 + ac2abbc19; \n    long ac2abbc22 = ac2abbc21 + ",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e)\
    \ / (2 * a);\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n\
    <|/ a tags=c#,algorithm |>\n<| c |>\nThe first solution doesn't work if the triangle\
    \ is equilateral. Try it with the triangle `(1,0,0)`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I've fixed it now. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    return ((b * b - 4 * a * c) > 0 && (b * b + 4 *\
    \ a * c) < e || \n            (b * b - 4 * a * c) > 0 && (b * b + 4 * a * c) >\
    \ e);\n}\n</code>\n<|/ a tags=c#,math |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)`\
    \ returns true.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the\
    \ code.\n<|/ c |>\n<| c |>\nThis doesn't work either. `right_angle_triangle(1,1,1)`\
    \ returns true.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the\
    \ code.\n<|/ c |>\n<| c |>\nThis doesn't work either. `right_angle_triangle(1,1,1)`\
    \ returns true.\n<|/ c |>\n<| a tags=c#,math |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a *\
    \ c) > 0 && (b * b + 4 * a * c) < e || \n            (b * b - 4 * a * c) > 0 &&\
    \ (b * b + 4 * a * c) > e);\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work. `IsRightAngleTriangle(1,1,1)` returns true.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. `IsRightAngleTriangle(1,1,1)` returns true.\n<|/ c |>\n<| c |>\n\
    This doesn't work either. `IsRightAngleTriangle(1,1,1)` returns true.\n<|/ c |>\n\
    <| c |>\nThis doesn't work either. `IsRightAngleTriangle(1,1,1)` returns true.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a *\
    \ c) > 0 && (b * b + 4 * a * c) < e || \n            ", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,math,geometry\
    \ |>\n<| c |>\nThis doesn't seem to work. Try it with `right_angle_triangle(3,5,4)`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it with `right_angle_triangle(3,5,4)`. What\
    \ is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(3,5,4)`\n\
    <|/ c |>\n<| c |>\nIt works for me. `right_angle_triangle(3,5,4)` returns `true`\n\
    <|/ c |>\n<| c |>\nIt works for me too. `right_angle_triangle(3,5,4)` returns\
    \ `true`\n<|/ c |>\n<| a tags=c#,math,geometry |>\n<code>", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ >= 0 && g >= 0) || (f < 0 && g < 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,geometry,math,trigonometry\
    \ |>\n<code>", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b\
    \ - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n    long abac = ab *\
    \ ac;\n    long abbc = ab * bc;\n    long acab = ac * ab;\n    long acbc = ac\
    \ * bc;\n    long accab = ac * cab;\n    long acbcab = ac * bcab;\n    long accabb\
    \ = ac * cabb;\n    long acbcabc = ac * bcabc;\n    long accabbc = ac * cabbc;\n\
    \    long accabbca = ac * cabbca;\n    long acbcabcab = ac * bcabcab;\n    long\
    \ acbcabcabc = ac * bcabcabc;\n    long accabbcabca = ac * cabbcabca;\n    long\
    \ acbcabcabcab = ac * bcabcabcab;\n    long acbcabcabcabc = ac * bcabcabcabc;\n\
    \    long accabbcabcabca = ac * cabbcabcabca;\n    long acbcabcabcabcab = ac *\
    \ bcabcabcabcab;\n    long acbcabcabcabcabc = ac * bcabcabcabcabc;\n    long accabbcabcabcabca\
    \ = ac * cabbcabcabcabca;\n    long acbcabcabcabcabcab = ac * bcabcabcabcabcab;\n\
    \    long acbcabcabcabcabcabc = ac * bcabcabcabcabcabc;\n    long accabbcabcabcabcabca\
    \ = ac * cabbcabcabcabcabca;\n    long acbcabcabcabcabcabcab = ac * bcabcabcabcabcabcab;\n\
    \    long acbcabcabcabcabcabcabc = ac * bcabcabcabcabcabcabc;\n    long accabbcabcabcabcabcabca\
    \ = ac * cabbcabcabcabcabcabcabca;\n    long acbcabcabcabcabcabcabcab = ac * bcabcabcabcabcabcabcab;\n\
    \    long acbcabcabcabcabcabcabcabc = ac * bcabcabcabcabcabcabcabc;\n    long\
    \ accabbcabcabcabcabcabcabca = ac * cabbcabcabcabcabcabcabcabca;\n    long acbcabcabcabcabcabcabcabcab\
    \ = ac * bcabcabcabcabcab", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2\
    \ * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 && g < 0) || (f >\
    \ 0 && g > 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know if two sides form a right angled triangle, not if\
    \ two sides form a right angled triangle with one angle being right or 90 degree.\n\
    <|/ c |>\n<| c |>\nThe question was edited after I posted my answer, so I guess\
    \ my answer is not correct anymore. Anyway, I hope my answer helps someone else\
    \ who has the same question.\n<|/ c |>\n<| a tags=c#,geometry,trigonometry |>\n\
    <code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - (4 * a * c));\n    if (e < 0)\n        return false;\n\
    \    long f = ((b * b) - (4 * a * c));\n    if (f < 0)\n        return false;\n\
    \    long g = ((b * b) - (4 * a * c));\n    if (g < 0)\n        return false;\n\
    \    long h = (b * b) - (4 * a * c);\n    if (h < 0)\n        return false;\n\
    \    long x = (b * b) - (4 * a * c);\n    if (x < 0)\n        return false;\n\
    \    long y = (b * b) - (4 * a * c);\n    if (y < 0)\n        return false;\n\
    \    long z = (b * b) - (4 * a * c);\n    if (z < 0)\n        return false;\n\
    \    long x2 = (b * b) - (4 * a * c);\n    if (x2 < 0)\n        return false;\n\
    \    long y2 = (b * b) - (4 * a * c);\n    if (y2 < 0)\n        return false;\n\
    \    long z2 = (b * b) - (4 * a * c);\n    if (z2 < 0)\n        return false;\n\
    \    long x3 = (b * b) - (4 * a * c);\n    if (x3 < 0)\n        return false;\n\
    \    long y3 = (b * b) - (4 * a * c);\n    if (y3 < 0)\n        return false;\n\
    \    long z3 = (b * b) - (4 * a * c);\n    if (z3 < 0)\n        return false;\n\
    \    long x4 = (b * b) - (4 * a * c);\n    if (x4 < 0)\n        return false;\n\
    \    long y4 = (b * b) - (4 * a * c);\n    if (y4 < 0)\n        return false;\n\
    \    long z4 = (b * b) - (4 * a * c);\n    if (z4 < 0)\n        return false;\n\
    \    long x5 = (b * b) - (4 * a * c);\n    if (x5 < 0)\n        return false;\n\
    \    long y5 = (b * b) - (4 * a * c);\n    if (y5 < 0)\n        return false;\n\
    \    long z5 = (b * b) - (4 * a * c);\n    if (z5 < 0)\n        return false;\n\
    \    long x6 = (b * b) - (4 * a * c);\n    if (x6 < 0)\n        return false;\n\
    \    long y6 = (b * b) - (4 * a * c);\n    if (y6 < 0)\n        return false;\n\
    \    long z6 = (b * b) - (4 * a * c);\n    if (z6 < 0)\n        return false;\n\
    \    long x7 = (b * b) - (4 * a * c);\n    if (x7 < 0)\n        return false;\n\
    \    long y7 = (b * b) - (4 * a * c);\n    if (y7 < 0)\n        return false;\n\
    \    long z7 = (b * b) - (4 * a * c);\n    if (z7 < ", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ ab + bc;\n    long acb = ac + ab;\n    long abac = ab + ac;\n    long acab =\
    \ ac + ab;\n    long abcab = ab + bc;\n    long acbcab = ac + bc;\n    long abcabc\
    \ = ab + bc + c;\n    long acbcabc = ac + bc + c;\n    long abcabcd = ab + bc\
    \ + c * 2;\n    long acbcabcd = ac + bc + c * 2;\n    long abcabcd2 = ab + bc\
    \ + c * 3;\n    long acbcabcd2 = ac + bc + c * 3;\n    long abcabcd21 = ab + bc\
    \ + c * 4;\n    long acbcabcd21 = ac + bc + c * 4;\n    long abcabcd32 = ab +\
    \ bc + c * 5;\n    long acbcabcd32 = ac + bc + c * 5;\n    long abcabcd43 = ab\
    \ + bc + c * 6;\n    long acbcabcd43 = ac + bc + c * 6;\n    long abcabcd56 =\
    \ ab + bc + c * 7;\n    long acbcabcd56 = ac + bc + c * 7;\n    long abcabcd67\
    \ = ab + bc + c * 8;\n    long acbcabcd67 = ac + bc + c * 8;\n    long abcabcd78\
    \ = ab + bc + c * 9;\n    long acbcabcd78 = ac + bc + c * 9;\n    long abcabcd90\
    \ = ab + bc + c * 10;\n    long acbcabcd90 = ac + bc + c * 10;\n    long abcabcd101\
    \ = ab + bc + c * 11;\n    long acbcabcd101 = ac + bc + c * 11;\n    long abcabcd123\
    \ = ab + bc + c * 12;\n    long acbcabcd123 = ac + bc + c * 12;\n    long abcabcd135\
    \ = ab + bc + c * 13;\n    long acbcabcd135 = ac + bc + c * 13;\n    long abcabcd146\
    \ = ab + bc + c * 14;\n    long acbcabcd146 = ac + bc + c * 14;\n    long ab",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = b + e * c;\n    long g = a + e * b;\n \
    \   return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `right_angle_triangle(2L, 1L, 1L)` returns\
    \ true.\n<|/ c |>\n<| c |>\nI tested it on ideone.com, and it works. Maybe you\
    \ forgot to import `math`?\n<|/ c |>\n<| c |>\nI added the imports. I still get\
    \ the same result. http://ideone.com/gK2yj\n<|/ c |>\n<| c |>\nI tested it on\
    \ ideone.com, and it works. Maybe you forgot to import `math`?\n<|/ c |>\n<| c\
    \ |>\nI added the imports. I still get the same result. http://ideone.com/gK2yj\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n   \
    \ if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    return ((b\
    \ * b - 4 * a * c) == e || (b * b + 4 * a * c) == e || (a * a - 4 * b * b == e\
    \ || (a * a + 4 * b * b) == e));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c\
    \ |>\nThe `if` statement is redundant and can be replaced by `return (b * b -\
    \ 4 * a * c) == Math.sqrt(d);`\n<|/ c |>\n<| c |>\nThanks for your comment. I\
    \ just wanted to show that you can also use Math.sqrt instead of writing your\
    \ own function.\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for a solution\
    \ in C#.\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for a solution\
    \ in C#.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a *\
    \ c) == e || (b * b + 4 * a * c) == e || (a * a - 4 * b * b == e || (a * a + 4\
    \ * b * b) == e));\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    public static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    return ((b * b - 4 * a * c) == e || (b * b + 4 * a * c) == e || (a * a -\
    \ 4 * b * b == e || (a * a + 4 * b * b) == e));\n}\n</code>\n<|/ a tags=c#,geometry\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static bool IsRightAngleTriangle(long a,\
    \ long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n      \
    \  return false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c)\
    \ == e || (b * b + 4 * a * c) == e || (a * a - 4 * b * b == e || (a * ", "{\n\
    \    long angle1 = atan2(b, a);\n    long angle2 = atan2(c, b);\n    long angle3\
    \ = atan2(c, c);\n    long angle4 = atan2(b, a);\n    long angle5 = atan2(a, b);\n\
    \    long angle6 = atan2(a, c);\n    long angle7 = atan2(b, a);\n    long angle8\
    \ = atan2(c, c);\n    long angle9 = atan2(c, b);\n    long angle10 = atan2(b,\
    \ c);\n    long angle11 = atan2(a, c);\n    long angle12 = atan2(a, a);\n    long\
    \ angle13 = atan2(b, b);\n    long angle14 = atan2(c, c);\n    long angle15 =\
    \ atan2(c, b);\n    long angle16 = atan2(b, c);\n    long angle17 = atan2(a, c);\n\
    \    long angle18 = atan2(a, a);\n    long angle19 = atan2(b, b);\n    long angle20\
    \ = atan2(c, c);\n    long angle21 = atan2(c, b);\n    long angle22 = atan2(b,\
    \ c);\n    long angle23 = atan2(a, c);\n    long angle24 = atan2(a, a);\n    long\
    \ angle25 = atan2(b, b);\n    long angle26 = atan2(c, c);\n    long angle27 =\
    \ atan2(c, b);\n    long angle28 = atan2(b, c);\n    long angle29 = atan2(a, c);\n\
    \    long angle30 = atan2(a, a);\n    long angle31 = atan2(b, b);\n    long angle32\
    \ = atan2(c, c);\n    long angle33 = atan2(c, b);\n    long angle34 = atan2(b,\
    \ c);\n    long angle35 = atan2(a, c);\n    long angle36 = atan2(a, a);\n    long\
    \ angle37 = atan2(b, b);\n    long angle38 = atan2(c, c);\n    long angle39 =\
    \ atan2(c, b);\n    long angle40 = atan2(b, c);\n    long angle41 = atan2(a, c);\n\
    \    long angle42 = atan2(a, a);\n    long angle43 = atan2(b, b);\n    long angle44\
    \ = atan2(c, c);\n    long angle45 = atan2(c, b);\n    long angle46 = atan2(b,\
    \ c);\n    long angle47 = atan2(a, c);\n    long angle48 = atan2(a, a);\n    long\
    \ angle49 = atan2(b, b);\n    long ", "{\n    long ab = a - b;\n    long ac =\
    \ a - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n\
    \    long acbc = acb * bc;\n    long acbc_ab = acbc * ab;\n    long acbc_abc =\
    \ acbc_ab * bc;\n    long acbc_abc_ac = acbc_abc * ac;\n    long acbc_abc_acb\
    \ = acbc_abc_ac * bc;\n    long acbc_abc_acbc = acbc_abc_acb * bc;\n    long acbc_abc_acbc_ab\
    \ = acbc_abc_acbc * ab;\n    long acbc_abc_acbc_abc = acbc_abc_acbc_ab * bc;\n\
    \    long acbc_abc_acbc_abc_ac = acbc_abc_acbc_abc * ac;\n    long acbc_abc_acbc_abc_acb\
    \ = acbc_abc_acbc_abc_ac * bc;\n    long acbc_abc_acbc_abc_acbc = acbc_abc_acbc_abc_acb\
    \ * bc;\n    long acbc_abc_acbc_abc_acbc_ab = acbc_abc_acbc_abc_acbc * ab;\n \
    \   long acbc_abc_acbc_abc_acbc_abc = acbc_abc_acbc_abc_acbc_ab * bc;\n    long\
    \ acbc_abc_acbc_abc_acbc_abc_ac = acbc_abc_acbc_abc_acbc_abc * ac;\n    long acbc_abc_acbc_abc_acbc_abc_acb\
    \ = acbc_abc_acbc_abc_acbc_abc_ac * bc;\n    long acbc_abc_acbc_abc_acbc_abc_acbc\
    \ = acbc_abc_acbc_abc_acbc_abc_acb * bc;\n    long acbc_abc_acbc_abc_acbc_abc_acbc_ab\
    \ = acbc_abc_acbc_abc_acbc_abc_acbc * ab;\n    long acbc_abc_acbc_ab", "{\n  \
    \  long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long ac = ac * c;\n    long ab = ab\
    \ * c;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac *\
    \ b;\n    long ab = ab * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n\
    \    long ac = ac * a;\n    long ab = ab * a;\n    long abc = abc * ab;\n    long\
    \ acb = acb * ac;\n    long ac = ac * ab;\n    long ab = ab * ab;\n    long abc\
    \ = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * abc;\n    long ab\
    \ = ab * abc;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac\
    \ = ac * abc;\n    long ab = ab * abc;\n    long abc = abc * ab;\n    long acb\
    \ = acb * ac;\n    long ac = ac * abc;\n    long ab = ab * abc;\n    long abc\
    \ = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * abc;\n    long ab\
    \ = ab * abc;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac\
    \ = ac * abc;\n    long ab = ab * abc;\n    long abc = abc * ab;\n    long acb\
    \ = acb * ac;\n    long ac = ac * abc;\n    long ab = ab * abc;\n    long abc\
    \ = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * abc;\n    long ab\
    \ = ab * abc;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac\
    \ = ac * abc;\n    long ab = ab * abc;\n    long abc = abc * ab;\n    long acb\
    \ = acb * ac;\n    long ac = ac * abc;\n    long ab = ab * abc;\n    long abc\
    \ = abc * ab;\n    long acb = ac", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = (b\
    \ + e * c) / a;\n    long g = (b - e * c) / a;\n    return (f < 0 && g < 0);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic class Triangle\
    \ {\n    public static void main(String[] args) {\n        System.out.println(isRightAngledTriangle(3,\
    \ 4, 5));\n    }", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n     \
    \   return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n \
    \       return false;\n    long f = (a + b + c) / 2;\n    long g = ((a + b) -\
    \ f) / 2;\n    long h = (a + b + c) / 2;\n    long i = (a + b + c) / 2;\n    long\
    \ j = (a + b - f) / 2;\n    long k = (a + b - f) / 2;\n    long l = (a + b - f)\
    \ / 2;\n    long m = (a + b + c) / 2;\n    long n = (a + b + c) / 2;\n    long\
    \ o = (a + b + c) / 2;\n    long p = (a + b + c) / 2;\n    long q = (a + b + c)\
    \ / 2;\n    long r = (a + b + c) / 2;\n    long s = (a + b + c) / 2;\n    long\
    \ t = (a + b + c) / 2;\n    long u = (a + b + c) / 2;\n    long v = (a + b + c)\
    \ / 2;\n    long w = (a + b + c) / 2;\n    long x = (a + b + c) / 2;\n    long\
    \ y = (a + b + c) / 2;\n    long z = (a + b + c) / 2;\n    long A = (a + b + c)\
    \ / 2;\n    long B = (a + b + c) / 2;\n    long C = (a + b + c) / 2;\n    long\
    \ D = (a + b + c) / 2;\n    long E = (a + b + c) / 2;\n    long F = (a + b + c)\
    \ / 2;\n    long G = (a + b + c) / 2;\n    long H = (a + b + c) / 2;\n    long\
    \ I = (a + b + c) / 2;\n    long J = (a + b + c) / 2;\n    long K = (a + b + c)\
    \ / 2;\n    long L = (a + b + c) / 2;\n    long M = (a + b + c) / 2;\n    long\
    \ N = (a + b + c) / 2;\n    long O = (a + b + c) / 2;\n    long P = (a + b + c)\
    \ / 2;\n    long Q = (a + b + c) / 2;\n    long R = (a + b + c) / 2;\n    long\
    \ S = (a + b + c) / 2;\n    long T = (a + b + c) / 2;\n    long U = (a + b + c)\
    \ / 2;\n    long V = (a + b + c) / 2;\n    long ", "{\n    long d = b * b - 4\
    \ * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}", "{\n    return ((b - a) * (c - b) <=\
    \ 0) && ((a - b) * (c - b) <= 0) && ((a - b) * (b - a) <= 0);\n}", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    return ((b * b - 4 * a * c) > 0 && (b * b + 4 * a * c) <\
    \ e || \n            (b * b + 4 * a * c) > e && (b * b - 4 * a * c) < e);\n}\n\
    </code>\n<|/ a tags=c#,math |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)`\
    \ returns `true` instead of `false`.\n<|/ c |>\n<| c |>\n: It works fine for me.\
    \ Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\n: I added a\
    \ link to my answer that shows the code I used.\n<|/ c |>\n<| c |>\n: I added\
    \ a link to my answer that shows the code I used.\n<|/ c |>\n<| c |>\n: I added\
    \ a link to my answer that shows the code I used.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>", "{\n    long side1 = abs(b - c);\n    long side2 = abs(a - c);\n    long\
    \ side3 = abs(b - a);\n    long side4 = abs(a - b);\n    \n    if (side1 == side2\
    \ && side2 == side3) \n    {\n        return true;\n    }\n    \n    if (side1\
    \ == side2 && side2 == side4) \n    {\n        return true;\n    }\n    \n   \
    \ if (side1 == side3 && side2 == side4) \n    {\n        return true;\n    }\n\
    \    \n    if (side1 == side4 && side2 == side3) \n    {\n        return true;\n\
    \    }\n    \n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/29156024)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked if he\
    \ could use mathematical formulas to determine if a triangle is right angled,\
    \ which I did. He also asked if he could use mathematical formulas to determine\
    \ if a triangle is right angled, which I did. He also asked if he could use mathematical\
    \ formulas to determine if a triangle is right angled, which I did. He also asked\
    \ if he could use mathematical formulas to determine if a triangle is right angled,\
    \ which I did.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/29156024)\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/29156024)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/29156024)\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n\
    \    long f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n\
    \    long g = ((b * b) - 4 * a * c) / d;\n    if (g < 0)\n        return false;\n\
    \    long h = (b * b) - 4 * a * c;\n    if (h < 0)\n        return false;\n  \
    \  long x = (a * a + b * b + c * c) / 6;\n    long y = (e * e + f * f + g * g\
    \ + h * h) / 6;\n    long z = (x * x + y * y) / 2;\n    if (z < 0)\n        return\
    \ false;\n    long r = sqrt(z);\n    return r > a;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `right_angle_triangle(2L, 3L,\
    \ 4L)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code from your\
    \ question and added the missing `sqrt` call. Maybe you missed it.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the code from your question and added\
    \ the missing `sqrt` call. Maybe you missed it.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I used the code from your question and added the missing `sqrt`\
    \ call. Maybe you missed it.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the code from your question and added the missing `sqrt` call. Maybe you missed\
    \ it.\n<|/ c |>\n<| a dscore=1 |>\nThe code from your question doesn't work. Try\
    \ it with\n<code>\nright_angle_triangle(2L, 3L, 4L)\n</code>\nIt returns true.\n\
    The code from your question doesn't work. Try it with\n<code>\nright_angle_triangle(2L,\
    \ 3L, 4L)\n</code>\nIt returns true.\nThe code from your question doesn't work.\
    \ Try it with\n<code>\nright_angle_triangle(2L, 3L, 4L)\n</code>\nIt returns true.\n\
    The code from your question doesn't work. Try it with\n<code>\nright_angle_triangle(2L,\
    \ 3L, 4L)\n</code>\nIt returns true.\nThe code from your question doesn't work.\
    \ Try it with\n<code>\nright_", "{\n    long ab = abs(b - a);\n    long ac = abs(c\
    \ - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc =\
    \ ab + ac;\n    long bcb = bc + cb;\n    long abbc = ab + bc;\n    long acbc =\
    \ ac + cb;\n    long abbcc = ab + bc + ac;\n    long acbcb = ac + bc + ab;\n \
    \   long abbcca = ab + bc + ac + ab;\n    long acbcbc = ac + bc + ab + ac;\n \
    \   long abbccaa = ab + bc + ac + ab + ac;\n    long acbcbca = ac + bc + ab +\
    \ ac + ab;\n    long abbccaab = ab + bc + ac + ab + ac + ab;\n    long acbcbcaab\
    \ = ac + bc + ab + ac + ab + ab;\n    long abbccaabc = ab + bc + ac + ab + ac\
    \ + ab + ac;\n    long acbcbcaabc = ac + bc + ab + ac + ab + ac + ab + ac;\n \
    \   long abbccaabcb = ab + bc + ac + ab + ac + ab + ac + ab + ac + ab;\n    long\
    \ acbcbcaabcb = ac + bc + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac;\n \
    \   long abbccaabcbb = ab + bc + ac + ab + ac + ab + ac + ab + ac + ab + ac +\
    \ ab + ac + ab + ac;\n    long acbcbcaabcbb = ac + bc + ab + ac + ab + ac + ab\
    \ + ac + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac;\n    long abbccaabcbbc\
    \ = ab + bc + ac + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac +\
    \ ab + ac + ab + ac + ab;\n    long acbcbcaabcbbc = ac + bc + ab + ac + ab + ac\
    \ + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac + ab + ac;\n   \
    \ long abbccaabcbbcb = ab + bc + ac + ab", "{\n    long ab = abs(b - a);\n   \
    \ long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = abb + bcb;\n\
    \    long acbc = acb + cbc;\n    long abbcc = abbc + bcc \n    bool result = abbcc\
    \ >= abbc && acbc >= acb && abbc >= abc && acbc >= ac;\n    return result;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,geometry |>\n<| c |>\nThis doesn't work. Try\
    \ `right_angle_triangle(2L, 3L, 4L)`.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself.\n<|/ c |>\n<| a tags=c++,algorithm,geometry |>\nThe algorithm\
    \ is quite simple:", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    \n    if (ab > ac &&\
    \ ab > bc) \n    {\n        if (ab > cb) \n        {\n            return true;\n\
    \        }\n    }\n    else \n    {\n        if (ac > bc)\n        {\n       \
    \     return true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(2L, 3L, 4L)`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work either. Try it with `right_angle_triangle(2L,\
    \ 3L, 4L)`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| c |>\nThis doesn't work either. Try it with `right_angle_triangle(2L,\
    \ 3L, 4L)`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long ab =\
    \ a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n\
    \    long acb = ac - bc;\n    long abac = ab - ac;\n    long acab = ac - ab;\n\
    \    long abcab = ab - acb;\n    long acbcab = acb - ab;\n    long abcabc = abcab\
    \ + acbcab;\n    long acbcabc = acbcab - abcab;\n    long abcabcb = abcabc - acbcab;\n\
    \    long acbcabcb = acbcabcb - abcabcb;\n    long abcabcbc = abcabcbc - acbcabcb;\n\
    \    long acbcabcbc = acbcabcbc - abcabcbc;\n    long abcabcbcd = abcabcbc * 2;\n\
    \    long acbcabcbcd = acbcabcbc * 2;\n    long abcabcbcde = abcabcbcd * 2;\n\
    \    long acbcabcbcde = acbcabcbcd * 2;\n    long abcabcbcdef = abcabcbcde * 2;\n\
    \    long acbcabcbcdef = acbcabcbcde * 2;\n    long abcabcbcdefg = abcabcbcdef\
    \ * 2;\n    long acbcabcbcdefg = acbcabcbcdef * 2;\n    long abcabcbcdefgh = abcabcbcdefg\
    \ * 2;\n    long acbcabcbcdefgh = acbcabcbcdefg * 2;\n    long abcabcbcdefghi\
    \ = abcabcbcdefgh * 2;\n    long acbcabcbcdefghi = acbcabcbcdefgh * 2;\n    long\
    \ abcabcbcdefghij = abcabcbcdefghi * 2;\n    long acbcabcbcdefghij = acbcabcbcdefghi\
    \ * 2;\n    long abcabcbcdefghijk = abcabcbcdefghij * 2;\n    long acbcabcbcdefghijk\
    \ = acbcabcbcdefghij * 2;\n    long abcabcbcdefghijkl = abcabcbcdefghijk * 2;\n\
    \    long acbcabcbcdefghijkl = acbcabcbcdefghijk * 2;\n    long ab", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 *\
    \ a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,math,geometry\
    \ |>\n<| c |>\nI like your answer but I think it would be better to use the `Math.Abs`\
    \ function instead of `Math.Sqrt` since it avoids unnecessary calculations.\n\
    <|/ c |>\n<| c |>\nI agree with you. `Math.Abs` is more appropriate in this case.\n\
    <|/ c |>\n<| c |>\nI like your answer but I think it would be better to use the\
    \ `Math.Abs` function instead of `Math.Sqrt` since it avoids unnecessary calculations.\n\
    <|/ c |>\n<| c |>\nI agree with you. `Math.Abs` is more appropriate in this case.\n\
    <|/ c |>\n<| c |>\nI like your answer but I think it would be better to use the\
    \ `Math.Abs` function instead of `Math.Sqrt` since it avoids unnecessary calculations.\n\
    <|/ c |>\n<| a tags=c#,math,geometry |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your answer but I think\
    \ it would be better to use the `Math.Abs` function instead of `Math.Sqrt` since\
    \ it avoids unnecessary calculations.\n<|/ c |>\n<| c |>\nI like your answer but\
    \ I think it would be better to use the `Math.Abs` function instead of `Math.Sqrt`\
    \ since it avoids unnecessary calculations.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    public static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e) / (2 * a", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    return\
    \ e < 0;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,geometry |>\n<code>", "{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using\
    \ Pythagoras to solve this problem. I'll give it a try.\n<|/ c |>\n<| c |>\nI\
    \ believe this would only work if you know that the triangle is actually a right\
    \ angled triangle. Otherwise you would have to check each of the three sides of\
    \ the triangle to see if they are all positive or negative.\n<|/ c |>\n<| c |>\n\
    Yes, that's right. My code assumes that the triangle is actually a right angled\
    \ triangle. I'll edit my answer to include a solution that checks all the sides.\n\
    <|/ c |>\n<| c |>\nI believe this would only work if you know that the triangle\
    \ is actually a right angled triangle. Otherwise you would have to check each\
    \ of the three sides of the triangle to see if they are all positive or negative.\n\
    <|/ c |>\n<| c |>\nYes, that's right. My code assumes that the triangle is actually\
    \ a right angled triangle. I'll edit my answer to include a solution that checks\
    \ all the sides.\n<|/ c |>\n<| a tags=c#,geometry |>\nThe other answers here are\
    \ all correct, but they don't take into account the fact that your triangle is\
    \ actually a right angled triangle. \nThe triangle is actually a right angled\
    \ triangle if and only if the three sides are all positive or all negative. \n\
    To determine this, you need to check each of the three sides of the triangle to\
    \ see if they are all positive or all negative. \nThe code below checks all the\
    \ sides of the triangle to see if they are all positive or all negative. \n<code>\n\
    public static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n\
    \    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis code doesn't work for me. `right_angle_triangle(2L, 3L, 4L)`\
    \ returns `true` instead of `false`. `right_angle_triangle(2L, 3L, 1L)` returns\
    \ `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on Win 7 and it works.\
    \ I used the code from http://en.wikipedia.org/wiki/Triangle_inequality and changed\
    \ it a little bit.\n<|/ c |>\n<| c |>\nI tested it on Win 7 and it works. I used\
    \ the code from http://en.wikipedia.org/wiki/Triangle_inequality and changed it\
    \ a little bit.\n<|/ c |>\n<| c |>\nI tested it on Win 7 and it works. I used\
    \ the code from http://en.wikipedia.org/wiki/Triangle_inequality and changed it\
    \ a little bit.\n<|/ c |>\n<| c |>\nI tested it on Win 7 and it works. I used\
    \ the code from http://en.wikipedia.org/wiki/Triangle_inequality and changed it\
    \ a little bit.\n<|/ c |>\n<| a tags=c#,geometry,.net,math |>\n<code>", "{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    return e < 0;\n}\n</code>\n<|/ a tags=c++,algorithm,geometry\
    \ |>\n<| c |>\nThis doesn't work. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It works. Try it yourself.\
    \ It returns `true` for me. Try it yourself.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work. Try it with a = b = c = 1.\n<|/ c |>\n<| c |>\n: It works. Try it yourself.\
    \ It returns `true` for me. Try it yourself.\n<|/ c |>\n<| a tags=c++,algorithm,geometry\
    \ |>\n<code>", "{\n    long angle;\n    bool isRightAngle = false;\n    \n   \
    \ angle = atan2(b,a);\n    \n    if (angle > PI/2 || angle < -PI/2) \n    {\n\
    \        isRightAngle = false;\n    }\n    else \n    {\n        isRightAngle\
    \ = true;\n    }\n    \n    return isRightAngle;\n}\n</code>\n<|/ a tags=c++,geometry\
    \ |>\n<| c |>\nThis is not an answer to the question. OP asked for help with his\
    \ code. Your answer does not help him with his code.\n<|/ c |>\n<| c |>\nI didn't\
    \ say it was. OP asked for help with his code. Your answer does not help him with\
    \ his code.\n<|/ c |>\n<| c |>\nI didn't say it was. OP asked for help with his\
    \ code. Your answer does not help him with his code.\n<|/ c |>\n<| c |>\nI didn't\
    \ say it was. OP asked for help with his code. Your answer does not help him with\
    \ his code.\n<|/ c |>\n<| c |>\nI didn't say it was. OP asked for help with his\
    \ code. Your answer does not help him with his code.\n<|/ c |>\n<| a tags=c++,geometry\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + bc);\n\
    \    long abcd = abs(abc);\n    long bcda = abs(bcd - acd);\n    long acdb = abs(acd\
    \ - ab);\n    long abcda = abs(abcd - acdb);\n    long bcdaa = abs(bcda - abcda);\n\
    \    long acbba = abs(acdba - abcda);\n    long abcdaa = abs(abcda - bcdaa);\n\
    \    long bcdaaa = abs(bcdaa - acbba);\n    long acbbaa = abs(acbba);\n    long\
    \ abcdaaa = abs(abcdaa - bcdaaa);\n    long bcdaaaa = abs(bcdaaa - acbbaa);\n\
    \    long acbbaaa = abs(acbbaa);\n    long abcdaaaa = abs(abcdaaa - bcdaaaa);\n\
    \    long bcdaaaaa = abs(bcdaaaa - acbbaaa);\n    long acbbaaaa = abs(acbbaaa);\n\
    \    long abcdaaaaa = abs(abcdaaaaa - bcdaaaaa);\n    long bcdaaaaaa = abs(bcdaaaaa);\n\
    \    long acbbaaaaa = abs(acbbaaaaa);\n    long abcdaaaaaa = abs(abcdaaaaaa -\
    \ bcdaaaaaa);\n    long bcdaaaaaaa = abs(bcdaaaaaaa);\n    long acbbaaaaaa = abs(acbbaaaaaa);\n\
    \    long abcdaaaaaaa = abs(abcdaaaaaaa);\n    long bcdaaaaaaaa = abs(bcdaaaaaaaa);\n\
    \    long acbbaaaaaaa = abs(acbbaaaaaaa);\n    long abcdaaaaaaaa = abs(abcdaaaaaaaa);\n\
    \    long bcdaaaaaaaaa = abs(bcdaaaaaaaaa);\n    long acbbaaaaaaaa = abs(acbbaaaaaaaa);\n\
    \    long abcdaaaaaaaaa = abs(abcdaaaaaaaaa);\n    long bcdaaaaaaaaaa = abs(bcdaaaaaaaaaa);\n\
    \    long acbbaaaaaaaaa = abs(acbbaaaaaaaaa);\n    long abcdaaaaaaaaaa = abs(abcdaaaaaaaaaa);\n\
    \    long bcdaaaaaaaaaaa = abs(bcdaaaaaaaaaaa);\n    long acbbaaaaa", "{\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    return e < 0;\n}", "{\n    long angle =\
    \ acos((b * b + c * c - a * a) / (b * b + c * c));\n    return angle > M_PI /\
    \ 2;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return\
    \ false;\n    long f = (2 * b * b - a * c) / d;\n    if (f < 0)\n        return\
    \ false;\n    long g = a * c / b;\n    if (g < 0)\n        return false;\n   \
    \ long h = b * b + 4 * a * c;\n    if (h > 0)\n        return false;\n    if (e\
    \ == 0 && f == 0 && g == 0 && h == 0)\n        return true;\n    if (e == 0 &&\
    \ f == 0 && g == 0)\n        return true;\n    if (e == 0 && f == 0)\n       \
    \ return true;\n    if (e == 0)\n        return true;\n    if (f == 0)\n     \
    \   return true;\n    if (g == 0)\n        return true;\n    if (h == 0)\n   \
    \     return true;\n    return false;\n}", "{\n    return ((b - a) * (c - b) <=\
    \ 0);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know if three sides form a right angled triangle, not if they form\
    \ a right angled triangle with one side longer than the other.\n<|/ c |>\n<| c\
    \ |>\nThis answer doesn't answer the question at all. OP wants to know if three\
    \ sides form a right angled triangle, not if they form a right angled triangle\
    \ with one side longer than the other.\n<|/ c |>\n<| c |>\nThe question was \"\
    Given the lengths of the three sides of a triangle. Return true if the three sides\
    \ form a right-angled triangle, false otherwise.\" This answer does exactly that.\n\
    <|/ c |>\n<| c |>\nThe question was \"Given the lengths of the three sides of\
    \ a triangle. Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\" This answer does exactly that.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Given the lengths of the three sides of a triangle. Return true if the\
    \ three sides form a right-angled triangle, false otherwise.\" This answer does\
    \ exactly that.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ (f*f + g*g) < 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e)\
    \ / (2 * a);\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}", "{\n   \
    \ long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb =\
    \ ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long abcc = abc * bc;\n    long accc = acc * bc;\n    long\
    \ abbb = abb * bc;\n    long abbc = abb * bc;\n    long abcc = abc * bc;\n   \
    \ long acbb = acb * bc;\n    long acbc = acb * bc;\n    long accc = acc * bc;\n\
    \    long abbbc = abbb * bc;\n    long abbcc = abbc * bc;\n    long abccc = abcc\
    \ * bc;\n    long acbbc = acbb * bc;\n    long acbcc = acbc * bc;\n    long acccc\
    \ = accc * bc;\n    long abbbcc = abbbc * bc;\n    long abbccc = abbcc * bc;\n\
    \    long abccc  = abccc * bc;\n    long acbbc  = acbb * bc;\n    long acbcc \
    \ = acbc * bc;\n    long acccc  = accc * bc;\n    long abbbcc = abbbc * bc;\n\
    \    long abbccc = abbcc * bc;\n    long abccc  = abccc * bc;\n    long acbbc\
    \  = acbb * bc;\n    long acbcc  = acbc * bc;\n    long acccc  = accc * bc;\n\
    \    long abbbccc = abbbcc * bc;\n    long abbccc  = abbccc * bc;\n    long abccc\
    \   = abccc  * bc;\n    long acbbc   = acbb  * bc;\n    long acbcc   = acbc  *\
    \ bc;\n    long acccc   = accc  * bc;\n    long abbbccc = abbbcc * bc;\n    long\
    \ abbccc  = abbccc * bc;\n    long abccc   = abccc  * bc;\n    long acbbc   =\
    \ acbb  * bc;\n    long acbcc   = acbc  * bc;\n", "{\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = b + e * Math.sqrt(b * b - 4 * a * c);\n    long g = a + e * Math.sqrt(b\
    \ * b - 4 * a * c);\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n\
    <|/ a tags=c++,geometry,algorithm |>\n<| c |>\nI believe this algorithm is wrong.\
    \ Try it with `right_angle_triangle(1,1,1)`\n<|/ c |>\n<| c |>\nI believe this\
    \ algorithm is wrong. Try it with `right_angle_triangle(1,1,1)`\n<|/ c |>\n<|\
    \ c |>\nI believe this algorithm is wrong. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nI believe this algorithm is wrong. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nI believe this algorithm is wrong. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| a dscore=5 tags=c++,geometry,algorithm |>\nThe algorithm is simple:",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    return ((b * b - 4 * a * c) > 0 && (e < a || e <\
    \ b));\n}", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b -\
    \ c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb *\
    \ bc;\n    long acbcabc = acbc * abc;\n    long acbcabcb = acbcabc * bc;\n   \
    \ long acbcabcbc = acbcabcb * bc;\n    long acbcabcbcb = acbcabcbc * bc;\n   \
    \ long acbcabcbcbc = acbcabcbcb * bc;\n    long acbcabcbcbcb = acbcabcbcbc * bc;\n\
    \    long acbcabcbcbcbc = acbcabcbcbcb * bc;\n    long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n    long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n\
    \    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcb",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n\
    \    long f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n\
    \    long g = b * b - 4 * a * c;\n    if (g < 0)\n        return false;\n    long\
    \ h = ((b * b) - 4 * a * c) / g;\n    if (h < 0)\n        return false;\n    long\
    \ i = (b * b) - 4 * a * c;\n    if (i < 0)\n        return false;\n    long j\
    \ = (b * b) - 4 * a * c;\n    if (j < 0)\n        return false;\n    long k =\
    \ (b * b) - 4 * a * c;\n    if (k < 0)\n        return false;\n    long l = (b\
    \ * b) - 4 * a * c;\n    if (l < 0)\n        return false;\n    long m = (b *\
    \ b) - 4 * a * c;\n    if (m < 0)\n        return false;\n    long n = (b * b)\
    \ - 4 * a * c;\n    if (n < 0)\n        return false;\n    long o = (b * b) -\
    \ 4 * a * c;\n    if (o < 0)\n        return false;\n    long p = (b * b) - 4\
    \ * a * c;\n    if (p < 0)\n        return false;\n    long q = (b * b) - 4 *\
    \ a * c;\n    if (q < 0)\n        return false;\n    long r = (b * b) - 4 * a\
    \ * c;\n    if (r < 0)\n        return false;\n    long s = (b * b) - 4 * a *\
    \ c;\n    if (s < 0)\n        return false;\n    long t = (b * b) - 4 * a * c;\n\
    \    if (t < 0)\n        return false;\n    long u = (b * b) - 4 * a * c;\n  \
    \  if (u < 0)\n        return false;\n    long v = (b * b) - 4 * a * c;\n    if\
    \ (v < 0)\n        return false;\n    long w = (b * b) - 4 * a * c;\n    if (w\
    \ < 0)\n        return false;\n    long x = (b * b) - 4 * a * c;\n    if (x <\
    \ 0)\n        return false;\n    long y = (b * b) - 4 * a * c;\n    if (y < 0)\n\
    \        return false;\n    long z = (b * b) - 4 * a * c;\n    if (z < 0)\n  \
    \      return false;\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I believe this answer is incorrect. As far as I can tell, `right_angle_triangle`\
    \ will return `true` when `a` is greater than `b` and `b` is greater than `c`.\
    \ However, `right_angle_triangle` will return `false` when `a` is greater than\
    \ `b` and `b` is greater than `c` and `c", "{\n    long ab = a - b;\n    long\
    \ ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac\
    \ + bc;\n    long abbc = ab + bc;\n    long acbc = ac + bc;\n    long abcab =\
    \ ab + ac;\n    long acbca = ac + ca;\n    long abcabc = ab + ac;\n    long acbcab\
    \ = ac + ca;\n    long abcabcb = ab + ac;\n    long acbcabc = ac + ca;\n    long\
    \ abcabcba = ab + ac;\n    long acbcabca = ac + ca;\n    long abcabcab = ab +\
    \ ac;\n    long acbcabcab = ac + ca;\n    long abcabcabc = ab + ac;\n    long\
    \ acbcabcabc = ac + ca;\n    long abcabcabca = ab + ac;\n    long acbcabcabca\
    \ = ac + ca;\n    long abcabcabcab = ab + ac;\n    long acbcabcabcab = ac + ca;\n\
    \    long abcabcabcabc = ab + ac;\n    long acbcabcabcabc = ac + ca;\n    long\
    \ abcabcabcabca = ab + ac;\n    long acbcabcabcabca = ac + ca;\n    long abcabcabcabcab\
    \ = ab + ac;\n    long acbcabcabcabcab = ac + ca;\n    long abcabcabcabcabc =\
    \ ab + ac;\n    long acbcabcabcabcabc = ac + ca;\n    long abcabcabcabcabca =\
    \ ab + ac;\n    long acbcabcabcabcabca = ac + ca;\n    long abcabcabcabcabcab\
    \ = ab + ac;\n    long acbcabcabcabcabcab = ac + ca;\n    long abcabcabcabcabcabc\
    \ = ab + ac;\n    long acbcabcabcabcabcabc = ac + ca;\n    long abcabcabcabcabcabca\
    \ = ab + ac;\n    long acbcabcabcabcabcabca = ac + ca;\n    long abcabcabcabcabcabcab\
    \ = ab + ac;\n    long acbcabcabcabcabcabcab = ac + ca;\n    long abcabcabcabcabcabcabcb\
    \ = ", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b -\
    \ e * c) / a;\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}", "{\n  \
    \  long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long abc = ab + ac;\n    long bca = bc + ab;\n    long acb = ac + bc;\n \
    \   long abbc = abc + bca;\n    long bcab = bc + abc;\n    long acbc = acb + bca;\n\
    \    long abcab = abc + cab;\n    long bcabc = bcab + cabc;\n    long acbcab =\
    \ acbc + cabc;\n    long abcabc = abcab + cabc;\n    long bcabcb = bcabc + cabcb;\n\
    \    long acbcabc = acbcab + cabcb;\n    long abcabcb = abcabcb + cabcb;\n   \
    \ long bcabcbc = bcabcbc + cabcbc;\n    long acbcabcb = acbcabcb + cabcbc;\n \
    \   long abcabcbc = abcabcbc + cabcbc;\n    long bcabcbcd = bcabcbcc + cabcbcd;\n\
    \    long acbcabcbd = acbcabcbd + cabcbcd;\n    long abcabcbcd = abcabcbcd + cabcbcd;\n\
    \    long bcabcbcde = bcabcbcde + cabcbcde;\n    long acbcabcbde = acbcabcbde\
    \ + cabcbcde;\n    long abcabcbcde = abcabcbcde + cabcbcde;\n    long bcabcbcdef\
    \ = bcabcbcde + cabcbcdef;\n    long acbcabcbdef = acbcabcbde + cabcbcdef;\n \
    \   long abcabcbcdef = abcabcbcdef + cabcbcdef;\n    long bcabcbcdefg = bcabcbcdefg\
    \ + cabcbcdefg;\n    long acbcabcbdefg = acbcabcbdefg + cabcbcdefg;\n    long\
    \ abcabcbcdefg = abcabcbcdefg + cabcbcdefg;\n    long bcabcbcdefgh = bcabcbcdefgh\
    \ + cabcbcdefgh;\n    long acbcabcbdefgh = acbcabcbdefgh + cabcbcdefgh;\n    long\
    \ abcabcbcdefgh = abcabcbcdefgh + ", "{\n    long d = b * b - 4 * a * c;\n   \
    \ if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    return ((b\
    \ * b - 4 * a * c) > 0 && (b * b + 4 * a * c) < e && (b * b - 4 * a * c) > -e);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)`\
    \ returns `true` but `right_angle_triangle(1,1,2)` returns `false`. See [this\
    \ fiddle](https://dotnetfiddle.net/ZJZ4W6).\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My mistake. Fixed the answer.\n<|/ c |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)`\
    \ returns `true` but `right_angle_triangle(1,1,2)` returns `false`. See [this\
    \ fiddle](https://dotnetfiddle.net/ZJZ4W6).\n<|/ c |>\n<| c |>\nI fixed the answer.\
    \ Thanks for pointing out.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    return ((b * b - 4 * a * c) > 0 && (b * b + 4 * a * c) < e && (b * b - 4\
    \ * a * c) > -e);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ `IsRightAngleTriangle(1,1,1)` returns `true` but `IsRightAngleTriangle(1,1,2)`\
    \ returns `false`. See [this fiddle](https://dotnetfiddle.net/ZJZ4W6).\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static bool IsRightAngleTriangle(long a,\
    \ long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n      \
    \  return false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c)\
    \ > 0 && (b * b + 4 * a * c) < e && (b * b - 4 * a * c) > -e);\n}\n</code>\n<|/\
    \ a tags=c#,geometry |>\n<| c |>\nThis doesn't work. `IsRightAngleTriangle(1,1,1)`\
    \ returns `true", "{\n    long side1 = abs(a) + abs(b) + abs(c);\n    long side2\
    \ = abs(a) + abs(b) - abs(c);\n    long side3 = abs(a) - abs(b) - abs(c);\n  \
    \  long side4 = abs(a) - abs(b) + abs(c);\n    long side5 = abs(a) + abs(b) +\
    \ abs(c);\n    long side6 = abs(a) + abs(b) - abs(c);\n    long side7 = abs(a)\
    \ - abs(b) + abs(c);\n    long side8 = abs(a) - abs(b) - abs(c);\n    long side9\
    \ = abs(a) - abs(b) + abs(c);\n    long side10 = abs(a) + abs(b) - abs(c);\n \
    \   long side11 = abs(a) + abs(b) + abs(c);\n    long side12 = abs(a) + abs(b)\
    \ - abs(c);\n    long side13 = abs(a) - abs(b) + abs(c);\n    long side14 = abs(a)\
    \ - abs(b) - abs(c);\n    long side15 = abs(a) - abs(b) + abs(c);\n    long side16\
    \ = abs(a) + abs(b) - abs(c);\n    long side17 = abs(a) + abs(b) + abs(c);\n \
    \   long side18 = abs(a) + abs(b) - abs(c);\n    long side19 = abs(a) - abs(b)\
    \ + abs(c);\n    long side20 = abs(a) - abs(b) - abs(c);\n    long side21 = abs(a)\
    \ - abs(b) + abs(c);\n    long side22 = abs(a) + abs(b) + abs(c);\n    long side23\
    \ = abs(a) + abs(b) - abs(c);\n    long side24 = abs(a) - abs(b) + abs(c);\n \
    \   long side25 = abs(a) - abs(b) - abs(c);\n    long side26 = abs(a) - abs(b)\
    \ + abs(c);\n    long side27 = abs(a) + abs(b) - abs(c);\n    long side28 = abs(a)\
    \ + abs(b) + abs(c);\n    long side29 = abs(a) + abs(b) - abs(c);\n    long side30\
    \ = abs(a) - abs(b) - abs(c);\n    long side31 = abs(a) - abs(b) + abs(c);\n \
    \   long side32 = abs(a) - abs(b) - abs(c);\n    long side33 = abs(a) - abs(b)\
    \ + abs(c);\n    long side34 = abs(a) + abs(b) - abs(c);\n    long side35 = abs(a)\
    \ + abs(b) + abs(c);\n    long side36 = abs(a) + abs(b) - abs(c);\n    long side37\
    \ = abs(a) - abs(b) + abs(c);\n    long side38", "{\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis doesn't\
    \ work for me. `right_angle_triangle(2L, 3L, 4L)` returns `true` but `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false`\n<|/ c |>\n<| a dscore=4 |>\nThe other answers here\
    \ are all correct, but they don't explain why they work.\nThe reason why this\
    \ works is because of the way that triangle inequalities are defined. \nThe inequality\
    \ is defined as \n<code>\na <= b + c <= d\n</code>\nwhere a, b, c are the sides\
    \ of the triangle, and d is the hypotenuse. \nThis means that a <= b + c <= d\
    \ implies that a + c <= b + d, which means that a + c <= b + c <= d. \nTherefore,\
    \ if you have a triangle with sides a, b, and c, then a + c <= b + c <= d. \n\
    This means that if you have a triangle with sides a, b, and c, then a + c <= b\
    \ + c <= d. \nTherefore, if you have a triangle with sides a, b, and c, then a\
    \ + c <= b + c <= d. \nTherefore, if you have a triangle with sides a, b, and\
    \ c, then a + c <= b + c <= d. \nTherefore, if you have a triangle with sides\
    \ a, b, and c, then a + c <= b + c <= d. \nTherefore, if you have a triangle with\
    \ sides a, b, and c, then a + c <= b + c <= d. \nTherefore", "{\n    long angle;\n\
    \    bool result = false;\n    \n    angle = atan2(c-a, b-a);\n    if (angle >\
    \ 0)\n    {\n        if (angle < PI)\n        {\n            result = true;\n\
    \        }\n        else\n        {\n            if (a > b)\n            {\n \
    \               result =  (angle > PI/2);\n            }\n            else\n \
    \           {\n                result = (angle < PI/2);\n            }\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,trigonometry,geometry\
    \ |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)` returns `true`\
    \ but `right_angle_triangle(1,1,2)` returns `false`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone and it's working fine. Can you please provide an example where\
    \ it fails?\n<|/ c |>\n<| c |>\n`right_angle_triangle(1,1,1)` returns `true` but\
    \ `right_angle_triangle(1,1,2)` returns `false`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone and it's working fine. Can you please provide an example where\
    \ it fails?\n<|/ c |>\n<| c |>\n`right_angle_triangle(1,1,1)` returns `true` but\
    \ `right_angle_triangle(1,1,2)` returns `false`.\n<|/ c |>\n<| a tags=c++,trigonometry,geometry\
    \ |>\n<code>", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long cb = abs(c - b);\n    \n    if (ab == ac)\n    {\n\
    \        if (ab == bc)\n        {\n            if (ab == cb)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            return false;\n        }\n    }\n    else\n    {\n        return\
    \ false;\n    }\n}", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long ad = abs(d - a);\n    long bd = abs(b - d);\n\
    \    long cd = abs(c - d);\n    long abc = ab + ac;\n    long bcd = bc + cd;\n\
    \    long abd = ab + bd;\n    long acd = ac + cd;\n    long abbc = abc + bcd;\n\
    \    long acbd = acd + bcd;\n    long abac = abc + acd;\n    long acab = acd +\
    \ abc;\n    long abbd = abd + bcd;\n    long acbd = acd + bcd;\n    long abacd\
    \ = abac + acbd;\n    long acabd = acab + abbd;\n    long abbca = abbc + acad;\n\
    \    long acabc = acab + abca;\n    long abbcd = abbc + acbd;\n    long acabd\
    \ = acab + abbd;\n    long abbcda = abbcd + acad;\n    long acabca = acabc + abca;\n\
    \    long abbcdd = abbcd + acbd;\n    long acabbd = acabd + abbd;\n    long abbcdaa\
    \ = abbcda + acad;\n    long acabcaa = acabca + abca;\n    long abbcdda = abbcda\
    \ + acbd;\n    long acabbda = acabbd + abbd;\n    long abbcdaaa = abbcdaa + acad;\n\
    \    long acabcaaa = acabcaa + abca;\n    long abbcddaa = abbcdda + acbd;\n  \
    \  long acabbdaa = acabbda + abbd;\n    long abbcdaaaa = abbcdaaa + acad;\n  \
    \  long acabcaaaa = acabcaaa + abca;\n    long abbcddaaa = abbcddaa + acbd;\n\
    \    long acabbdaaa = acabbdaa + abbd;\n    long abbcdaaaaa = abbcdaaaa + acad;\n\
    \    long acabcaaaaa = acabcaaaa + abca;\n    long abbcddaaaa = abbcddaaa + acbd;",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long sq = d / 2;\n    long t1 = (-b + sq) / a;\n    long t2 = (-b - sq) / a;\n\
    \    return t1 * t1 > 0;\n}", "{\n    long side1 = sqrt(pow(a, 2) + pow(b, 2));\n\
    \    long side2 = sqrt(pow(b, 2) + pow(c, 2));\n    long side3 = sqrt(pow(c, 2)\
    \ + pow(a, 2));\n    \n    if (side1 == side2 && side2 == side3)\n        return\
    \ true;\n    \n    return false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `right_angle_triangle(2L, 3L, 4L)`\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used the code from your question. Can you please\
    \ post the code you are using?\n<|/ c |>\n<| c |>\nI posted my code in the question.\
    \ Can you please check it out?\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used the code from your question. Can you please post the code you are using?\n\
    <|/ c |>\n<| c |>\nI posted my code in the question. Can you please check it out?\n\
    <|/ c |>\n<| a tags=c++,geometry,math |>\n<code>", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long\
    \ acb = ac - bc;\n    long abac = ab * ac;\n    long acbc = ac * bc;\n    long\
    \ abcab = ab * bc * ac;\n    long acbcab = ac * b * c * ac;\n    long abcabc =\
    \ ab * bc * c * ac;\n    long acbcabc = ac * b * c * ac * bc;\n    long abcabcb\
    \ = ab * bc * c * ac * bc * bc;\n    long acbcabcb = ac * b * c * ac * bc * bc\
    \ * bc;\n    long abcabcba = ab * bc * c * ac * bc * bc * bc * bc;\n    long acbcabcba\
    \ = ac * b * c * ac * bc * bc * bc * bc * bc;\n    long abcabcbb = ab * bc * c\
    \ * ac * bc * bc * bc * bc * bc * bc;\n    long acbcabcbb = ac * b * c * ac *\
    \ bc * bc * bc * bc * bc * bc * bc;\n    long abcabcbaa = ab * bc * c * ac * bc\
    \ * bc * bc * bc * bc * bc * bc * bc;\n    long acbcabcbaa = ac * b * c * ac *\
    \ bc * bc * bc * bc * bc * bc * bc * bc * bc;\n    long abcabcbbb = ab * bc *\
    \ c * ac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n    long acbcabcbbb\
    \ = ac * b * c * ac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n\
    \    long abcabcbaaa = ab * bc * c * ac * bc * bc * bc * bc * bc * bc * bc * bc\
    \ * bc * bc * bc * bc;\n    long acbcabcbaaa = ac * b * c * ac * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n    long abcabcbbba\
    \ = ab * bc * c * ac * bc * bc * ", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n  \
    \  if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = b * b + 4 * a * c;\n    if\
    \ (g < 0)\n        return false;\n    long h = ((b * b) - 4 * a * c) / g;\n  \
    \  if (h < 0)\n        return false;\n    long i = b * b + 4 * a * c;\n    if\
    \ (i < 0)\n        return false;\n    long j = b * b - 4 * a * c;\n    if (j <\
    \ 0)\n        return false;\n    long k = ((b * b) - 4 * a * c) / j;\n    if (k\
    \ < 0)\n        return false;\n    long l = b * b + 4 * a * c;\n    if (l < 0)\n\
    \        return false;\n    long m = b * b - 4 * a * c;\n    if (m < 0)\n    \
    \    return false;\n    long n = b * b + 4 * a * c;\n    if (n < 0)\n        return\
    \ false;\n    long o = b * b - 4 * a * c;\n    if (o < 0)\n        return false;\n\
    \    long p = b * b + 4 * a * c;\n    if (p < 0)\n        return false;\n    long\
    \ q = b * b + 4 * a * c;\n    if (q < 0)\n        return false;\n    long r =\
    \ b * b + 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = b *\
    \ b + 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = b * b -\
    \ 4 * a * c;\n    if (t < 0)\n        return false;\n    long u = b * b + 4 *\
    \ a * c;\n    if (u < 0)\n        return false;\n    long v = b * b + 4 * a *\
    \ c;\n    if (v < 0)\n        return false;\n    long w = b * b - 4 * a * c;\n\
    \    if (w < 0)\n        return false;\n    long x = b * b + 4 * a * c;\n    if\
    \ (x < 0)\n        return false;\n    long y = b * b + 4 * a * c;\n    if (y <\
    \ 0)\n        return false;\n    long z = b * b + 4 * a * c;\n    if (z < 0)\n\
    \        return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nIt works for me. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c ", "{\n    long angle;\n    angle = atan2(b,a);\n    if (angle > 0)\n  \
    \  {\n        if (angle > PI)\n        {\n            angle = angle - PI;\n  \
    \      }\n        if (angle < 0)\n        {\n            angle = angle + PI;\n\
    \        }\n    }\n    else\n    {\n        if (angle < -PI)\n        {\n    \
    \        angle = angle + PI;\n        }\n        if (angle > 0)\n        {\n \
    \           angle = angle - PI;\n        }\n    }\n    if (angle > PI)\n    {\n\
    \        angle = angle - PI;\n    }\n    if (angle < 0)\n    {\n        angle\
    \ = angle + PI;\n    }\n    if (angle == 0)\n    {\n        return true;\n   \
    \ }\n    return false;\n}\n</code>\n<|/ a tags=c++,trigonometry,geometry |>\n\
    <| c |>\nThis doesn't work. Try it with `right_angle_triangle(2L, 3L, 4L)`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `right_angle_triangle(2L, 3L, 4L)`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(2L, 3L, 4L)`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `right_angle_triangle(2L, 3L, 4L)`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(2L, 3L, 4L)`\n<|/\
    \ c |>\n<| a tags=c++,trigonometry,geometry |>\nThe code below is based on a previous\
    \ answer by user2079303\n<code>", "{\n    long ab = abs(b - a);\n    long ac =\
    \ abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac - bc);\n    long\
    \ abc = abs(ab - bc);\n    long abbc = abs(ab - bc);\n    long abac = abs(ab -\
    \ ac);\n    long acab = abs(ac - ab);\n    long acbc = abs(ac - bc);\n    long\
    \ acbca = abs(ac - bc - a);\n    long acbcab = abs(ac - bc - ab);\n    long acbcabc\
    \ = abs(ac - bc - ab - c);\n    long acbcabcd = abs(ac - bc - ab - c - d);\n \
    \   long acbcabcde = abs(ac - bc - ab - c - d - e);\n    long acbcabcdef = abs(ac\
    \ - bc - ab - c - d - e - f);\n    long acbcabcdefg = abs(ac - bc - ab - c - d\
    \ - e - f - g);\n    long acbcabcdefgh = abs(ac - bc - ab - c - d - e - f - g\
    \ - h);\n    long acbcabcdefghi = abs(ac - bc - ab - c - d - e - f - g - h - i);\n\
    \    long acbcabcdefghij = abs(ac - bc - ab - c - d - e - f - g - h - i - j);\n\
    \    long acbcabcdefghijk = abs(ac - bc - ab - c - d - e - f - g - h - i - j -\
    \ k);\n    long acbcabcdefghijkl = abs(ac - bc - ab - c - d - e - f - g - h -\
    \ i - j - k - l);\n    long acbcabcdefghijkll = abs(ac - bc - ab - c - d - e -\
    \ f - g - h - i - j - k - l - m);\n    long acbcabcdefghijkllm = abs(ac - bc -\
    \ ab - c - d - e - f - g - h - i - j - k - l - m - n);\n    long acbcabcdefghijkllmn\
    \ = (ac - bc - ab - c - d - e - f - g - h - i - j - k - l - m - n);\n    long\
    \ acbcabcdefghijkllmn = (ac - bc - ab - c - d - e - f - g - h - i - j - k - ",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n\
    \    long f = ((b * b) - 4 * a * c) / d + a;\n    if (f < 0)\n        return false;\n\
    \    long g = ((b * b) - 4 * a * c) / d + b;\n    if (g < 0)\n        return false;\n\
    \    long h = ((b * b) - 4 * a * c) / d + c;\n    if (h < 0)\n        return false;\n\
    \    return true;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n \
    \       return false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2 *\
    \ a);\n    long g = (c + e) / (2 * a);\n    return ((f >= 0 && f <= 1) || (g >=\
    \ 0 && g <= 1));\n}\n</code>\n<|/ a tags=c#,geometry,math |>\n<| c |>\nThis code\
    \ doesn't seem to work. `right_angle_triangle(1,1,1)` returns `false`, but `right_angle_triangle(1,1,2)`\
    \ returns `true`.\n<|/ c |>\n<| c |>\nIt does work. `right_angle_triangle(1,1,1)`\
    \ returns `true`. `right_angle_triangle(1,1,2)` returns `false`. `right_angle_triangle(1,2,1)`\
    \ returns `false`. `right_angle_triangle(1,2,2)` returns `true`. `right_angle_triangle(2,2,1)`\
    \ returns `true`. `right_angle_triangle(2,2,2)` returns `true`.\n<|/ c |>\n<|\
    \ c |>\nI guess I misunderstood your question. My apologies. I thought you were\
    \ asking for a function that returns `true` if all three sides are equal, `false`\
    \ if any two are equal, and `null` if all three sides are different. I've updated\
    \ my answer to reflect this.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works. But I prefer to use `System.Math` instead of `Math` because `System.Math`\
    \ is already imported in my project. Thanks again.\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a tags=c#,geometry,math |>\n<code>", "{\n \
    \   long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long acb = abs(c - b);\n    long abc = abs(b - c);\n    long acbc = abs(c\
    \ - b);\n    long abbc = abs(b - b);\n    long acbcbc = abs(c - b);\n    long\
    \ abbcac = abs(b - c);\n    long acbcbca = abs(c - b);\n    long abbcacb = abs(b\
    \ - c);\n    long acbcbcab = abs(c - b);\n    long abbcacbc = abs(b - c);\n  \
    \  long acbcbcabc = abs(c - b);\n    long abbcacbca = abs(b - c);\n    long acbcbcabca\
    \ = abs(c - b);\n    long abbcacbcab = abs(b - c);\n    long acbcbcabcab = abs(c\
    \ - b);\n    long abbcacbcabc = abs(b - c);\n    long acbcbcabcabc = abs(c - b);\n\
    \    long abbcacbcabca = abs(b - c);\n    long acbcbcabcabca = abs(c - b);\n \
    \   long abbcacbcabcab = abs(b - c);\n    long acbcbcabcabcab = abs(c - b);\n\
    \    long abbcacbcabcabc = abs(b - c);\n    long acbcbcabcabcabc = abs(c - b);\n\
    \    long abbcacbcabcabca = abs(b - c);\n    long acbcbcabcabcabca = abs(c - b);\n\
    \    long abbcacbcabcabcab = abs(b - c);\n    long acbcbcabcabcabcab = abs(c -\
    \ b);\n    long abbcacbcabcabcabc = abs(b - c);\n    long acbcbcabcabcabcabc =\
    \ abs(c - b);\n    long abbcacbcabcabcabca = abs(b - c);\n    long acbcbcabcabcabcabca\
    \ = abs(c - b);\n    long abbcacbcabcabcabcab = abs(b - c);\n    long acbcbcabcabcabcabcab\
    \ = abs(c - b);\n    long abbcacbcabcabcabcabc = abs(b - c);\n    long acbcbcabcabcabcabcabc\
    \ = abs(c - b);\n    long abbcacbcabcabcabcabca = abs(b - c);\n    long acbcbcabcabcabcabcabca\
    \ = abs(c - b);\n    long ", "{\n    long ab, bc, ac, ca;\n    ab = a - b;\n \
    \   bc = b - c;\n    ac = a - c;\n    ca = c - a;\n    return (ab * bc + ac *\
    \ ca > 0);\n}", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc =\
    \ b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n    long acb = acb\
    \ > 0 ? acb : 0;\n    long abc = abc + acb;\n    long abc = abc > 0 ? abc : 0;\n\
    \    long ab = ab + abc;\n    long ab = ab > 0 ? ab : 0;\n    long a = a + ab;\n\
    \    long a = a > 0 ? a : 0;\n    long b = b + abc;\n    long b = b > 0 ? b :\
    \ 0;\n    long c = c + abc;\n    long c = c > 0 ? c : 0;\n    long abc = abc +\
    \ acb;\n    long abc = abc > 0 ? abc : 0;\n    long ab = ab + abc;\n    long ab\
    \ = ab > 0 ? ab : 0;\n    long a = a + ab;\n    long a = a > 0 ? a : 0;\n    long\
    \ b = b + abc;\n    long b = b > 0 ? b : 0;\n    long c = c + abc;\n    long c\
    \ = c > 0 ? c : 0;\n    long abc = abc + acb;\n    long abc = abc > 0 ? abc :\
    \ 0;\n    long ab = ab + abc;\n    long ab = ab > 0 ? ab : 0;\n    long a = a\
    \ + ab;\n    long a = a > 0 ? a : 0;\n    long b = b + abc;\n    long b = b >\
    \ 0 ? b : 0;\n    long c = c + abc;\n    long c = c > 0 ? c : 0;\n    long abc\
    \ = abc + acb;\n    long abc = abc > 0 ? abc : 0;\n    long ab = ab + abc;\n \
    \   long ab = ab > 0 ? ab : 0;\n    long a = a + ab;\n    long a = a > 0 ? a :\
    \ 0;\n    long b = b + abc;\n    long b = b > 0 ? b : 0;\n    long c = c + abc;\n\
    \    long c = c > 0 ? c : 0;\n    long abc = abc + acb;\n    long abc = abc >\
    \ 0 ? abc : 0;\n    long ab = ab + abc;\n    long ab = ab > 0 ? ab : 0;\n    long\
    \ a = a + ab;\n    long a = a > 0 ? a : 0;\n    long b = b + abc;\n    long b\
    \ = b > 0 ? b : 0;\n    long c = c + abc;\n    long c = c > 0 ? c : 0;\n    long ",
  "{\n    long angle;\n    \n    angle = atan2(b,a) - atan2(c,a);\n    if (angle >\
    \ 0)\n    {\n        if (angle > pi)\n        {\n            angle -= pi;\n  \
    \      }\n        else if (angle < -pi)\n        {\n            angle += pi;\n\
    \        }\n    }\n    \n    return angle < pi;\n}", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I see that you have used the triangle formula to solve the problem. Can you please\
    \ explain me how did you arrive at the solution? I mean how did you arrive at\
    \ the solution?\n<|/ c |>\n<| c |>\nI used the triangle formula to solve the problem.\
    \ Triangle formula is given by https://en.wikipedia.org/wiki/Triangle_inequality#Formula\
    \ . In the formula we find the area of the triangle using Pythagorean theorem.\
    \ After that we can find if the area is greater than or equal to 90 degree.\n\
    <|/ c |>\n<| c |>\nI see that you have used the triangle formula to solve the\
    \ problem. Can you please explain me how did you arrive at the solution? I mean\
    \ how did you arrive at the solution?\n<|/ c |>\n<| c |>\nI used the triangle\
    \ formula to solve the problem. Triangle formula is given by https://en.wikipedia.org/wiki/Triangle_inequality#Formula\
    \ . In the formula we find the area of the triangle using Pythagorean theorem.\
    \ After that we can find if the area is greater than or equal to 90 degree.\n\
    <|/ c |>\n<| c |>\nI see that you have used the triangle formula to solve the\
    \ problem. Can you please explain me how did you arrive at the solution? I mean\
    \ how did you arrive at the solution?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Scanner;", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    \n    if (ab == ac)\n\
    \    {\n        if (cb == bc)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n    else\
    \ if (ab == bc)\n    {\n        return true;\n    }\n    else\n    {\n       \
    \ return false;\n    }\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) /\
    \ 2;\n    long g = (b - e * c) / 2;\n    long h = (a + e * b) / 2;\n    long i\
    \ = (a - e * b) / 2;\n    return ((f < 0 && g < 0 && h < 0 && i < 0) || (f > 0\
    \ && g > 0 && h > 0 && i > 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ is not an answer to the question. He wants to know if two sides of a triangle\
    \ are right angles. Your code only checks if two sides are equal (which is not\
    \ the case).\n<|/ c |>\n<| c |>\nI believe this answer is correct. He wants to\
    \ know if two sides of a triangle are right angles. He didn't say that he wants\
    \ to know if two sides are equal (which is not the case).\n<|/ c |>\n<| c |>\n\
    I believe this answer is correct. He wants to know if two sides of a triangle\
    \ are right angles. He didn't say that he wants to know if two sides are equal\
    \ (which is not the case).\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ He wants to know if two sides of a triangle are right angles. He didn't say\
    \ that he wants to know if two sides are equal (which is not the case).\n<|/ c\
    \ |>\n<| c |>\nI believe this answer is correct. He wants to know if two sides\
    \ of a triangle are right angles. He didn't say that he wants to know if two sides\
    \ are equal (which is not the case).\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\n\
    public static bool IsRightAngle(long a, long b, long c)\n{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / 2;\n    long g = (b - e * c) / 2;\n    long h = (a\
    \ + e * b) / 2;\n    long i = (a - e * b) / 2;\n    return ((f < 0 && g < 0 &&\
    \ h < 0 && i < 0) || (f > 0 && g > 0 && h > 0 && i > 0));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n   \
    \ long bc = abs(b - c);\n    long abc = ab + ac;\n    long bcd = bc + ab;\n  \
    \  long acd = ac + ab;\n    long abcd = abc + bcd;\n    long acbd = acd + abc;\n\
    \    long acdbc = acbd + acd;\n    long acdbcd = acdbc + abcd;\n    long acdbcde\
    \ = acdbcd + acd;\n    long acdbcdef = acdbcde + acd;\n    long acdbcdefg = acdbcdef\
    \ + acd;\n    long acdbcdefgh = acdbcdefg + acd;\n    long acdbcdefghi = acdbcdefgh\
    \ + acd;\n    long acdbcdefghij = acdbcdefghi + acd;\n    long acdbcdefghijk =\
    \ acdbcdefghij + acd;\n    long acdbcdefghijkl = acdbcdefghijk + acd;\n    long\
    \ acdbcdefghijklm = acdbcdefghijkl + acd;\n    long acdbcdefghijklmm = acdbcdefghijklm\
    \ + acd;\n    long acdbcdefghijklmmn = acdbcdefghijklmm + acd;\n    long acdbcdefghijklmmnn\
    \ = acdbcdefghijklmmn + acd;\n    long acdbcdefghijklmmnnn = acdbcdefghijklmmnn\
    \ + acd;\n    long acdbcdefghijklmmnnnn = acdbcdefghijklmmnnn + acd;\n    long\
    \ acdbcdefghijklmmnnnnn = acdbcdefghijklmmnnnn + acd;\n    long acdbcdefghijklmmnnnnnn\
    \ = acdbcdefghijklmmnnnnn + acd;\n    long acdbcdefghijklmmnnnnnnn = acdbcdefghijklmmnnnnn\
    \ + acd;\n    long acdbcdefghijklmmnnnnnnnn = acdbcdefghijklmmnnnnnnn + acd;\n\
    \    long acdbcdefghijklmmnnnnnnnnn = acdbcdefghijklmmnnnn", "{\n    long d =\
    \ b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
