name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n    sides form a right-angled\
  \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
  \ right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab * bc;\n    long\
    \ acb = ac * bc;\n    long abac = ab * ac;\n    long acab = ac * ab;\n    long\
    \ abcab = ab * abc;\n    long acabc = ac * abc;\n    long abcabc = ab * acbc;\n\
    \    long acabbc = ac * abbc;\n    long abcabbc = ab * acabbc;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * acabcabc;\n    long acabcabbc = ac\
    \ * abcabbc;\n    long abcabcabbc = ab * acabcabbc;\n    long acabcabcabc = ac\
    \ * abcabcabc;\n    long abcabcabcabc = ab * acabcabcabc;\n    long acabcabcabbc\
    \ = ac * abcabcabbc;\n    long abcabcabcabbc = ab * acabcabcabbc;\n    long acabcabcabcabc\
    \ = ac * abcabcabcabc;\n    long abcabcabcabcabc = ab * acabcabcabcabc;\n    long\
    \ acabcabcabcabbc = ac * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * acabcabcabcabbc;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * acabcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * acabcabcabcabcabbc;\n    long acabcabcabcabcabcabc\
    \ = ac * abcabcabcabcabcabc;\n    long abcabcabcabcabcabcabc = ab * acabcabcabcabcabcabc;\n\
    \    long acabcabcabcabcabcabbc = ac * abcabcabcabcabcabbc;\n    long abcabcabcabcabcabcabbc\
    \ = ab * acabcabcabcabcabcabbc;\n    long acabcabcabcabcabcabcabc = ac * abcabcabcabcabcabcabc;\n\
    \    long abcabcabcabcabcabcabcabc = ab * acabcabcabcabcabcabcabc;", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long sq =\
    \ sqrt(d);\n    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 *\
    \ a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\n</code>\n<|/ a\
    \ tags=c++,trigonometry,geometry |>\n<| c |>\nThis is not the right answer. Try\
    \ it with `right_angle_triangle(2L, 3L, 4L)`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to account for that.\n<|/ c |>\n<| c |>\nThe answer\
    \ was updated to account for that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long acbcab = acbcab * bc;\n    long abcabc = abcabc * bc;\n\
    \    long acbcabbc = acbcabbc * bc;\n    long abcabbcd = abcabbcd* bc;\n    long\
    \ acbcabbcdab = acbcabbcdab * bc;\n    long abcabbcdabc = abcabbcdabc * bc;\n\
    \    long acbcabbcdabcd = acbcabbcdabcd* bc;\n    long abcabbcdabcbc = abcabbcdabcbc\
    \ * bc;\n    long acbcabbcdabcbcd = acbcabbcdabcbcd* bc;\n    long abcabbcdabcbcdbc\
    \ = abcabbcdabcbcdbc * bc;\n    long acbcabbcdabcbcdbcd = acbcabbcdabcbcdbcd*\
    \ bc;\n    long abcabbcdabcbcdbcdbc = abcabbcdabcbcdbcdbc * bc;\n    long acbcabbcdabcbcdbcdbcd\
    \ = acbcabbcdabcbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbc\
    \ * bc;\n    long acbcabbcdabcbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcd* bc;\n \
    \   long abcabbcdabcbcdbcdbcdbcdbc = abcabbcdabcbcdbcdbcdbcdbc * bc;\n    long\
    \ acbcabbcdabcbcdbcdbcdbcdbcd = acbcabbcdabcbcdbcdbcdbcdbcd* bc;\n    long abcabbcdabcbcdbcdbcdbcdbcdbc\
    \ = abcabbcdabcbcdbcdbcdbcdbcdbc * bc;\n    long acb", "{\n    long ab = a - b;\n\
    \    long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long\
    \ acb = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n    long\
    \ abcab = ab + ab;\n    long acabc = ac + ac;\n    long abcabc = ab + ab;\n  \
    \  long acabcb = ac + ac;\n    long abcabcb = ab + ab;\n    long acabcba = ac\
    \ + ac;\n    long abcabcba = ab + ab;\n    long acabcbac = ac + ac;\n    long\
    \ abcabcbac = ab + ab;\n    long acabcbaca = ac + ac;\n    long abcabcbaca = ab\
    \ + ab;\n    long acabcbacab = ac + ac;\n    long abcabcbacab = ab + ab;\n   \
    \ long acabcbacaba = ac + ac;\n    long abcabcbacaba = ab + ab;\n    long acabcbacaba1\
    \ = ac + ac;\n    long abcabcbacaba1 = ab + ab;\n    long acabcbacaba2 = ac +\
    \ ac;\n    long abcabcbacaba2 = ab + ab;\n    long acabcbacaba3 = ac + ac;\n \
    \   long abcabcbacaba3 = ab + ab;\n    long acabcbacaba4 = ac + ac;\n    long\
    \ abcabcbacaba4 = ab + ab;\n    long acabcbacaba5 = ac + ac;\n    long abcabcbacaba5\
    \ = ab + ab;\n    long acabcbacaba6 = ac + ac;\n    long abcabcbacaba6 = ab +\
    \ ab;\n    long acabcbacaba7 = ac + ac;\n    long abcabcbacaba7 = ab + ab;\n \
    \   long acabcbacaba8 = ac + ac;\n    long abcabcbacaba8 = ab + ab;\n    long\
    \ acabcbacaba9 = ac + ac;\n    long abcabcbacaba9 = ab + ab;\n    long acabcbacaba10\
    \ = ac + ac;\n    long abcabcbacaba10 = ab + ab;\n    long acabcbacaba11 = ",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab + bc;\n    long acb = ac + bc;\n    long abac = ab + ac;\n    long acab\
    \ = ac + ab;\n    long abcab = ab + ab;\n    long acabc = ac + abc;\n    long\
    \ abcabc = abc + abc;\n    long acabcb = ac + abb;\n    long abcabcb = abc + abb;\n\
    \    long acabcbc = ac + abc;\n    long abcabcbc = abc + abc;\n    long acabcbcb\
    \ = ac + abb;\n    long abcabcbcb = abc + abb;\n    long acabcbcbc = ac + abc;\n\
    \    long abcabcbcbc = abc + abc;\n    long acabcbcbcb = ac + abb;\n    long abcabcbcbcb\
    \ = abc + abb;\n    long acabcbcbcbc = ac + abc;\n    long abcabcbcbcbc = abc\
    \ + abc;\n    long acabcbcbcbcb = ac + abb;\n    long abcabcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbc = abc + abc;\n  \
    \  long acabcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcb = abc + abb;\n  \
    \  long acabcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcb = abc + abb;\n\
    \    long acabcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbc = abc + abc;\n\
    \    long acabcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb = abc +\
    \ abb;\n    long acabcbcbcbcbcbcbcbc = ac + abc;\n    long abcabcbcbcbcbcbcbcbc\
    \ = abc + abc;\n    long acabcbcbcbcbcbcbcbcb = ac + abb;\n    long abcabcbcbcbcbcbcbcb",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b * b - 4 * a * c);\n\
    \    long g = b - e * Math.sqrt(b * b - 4 * a * c);\n    if (f < 0)\n        return\
    \ false;\n    if (g < 0)\n        return false;\n    if (f == g)\n        return\
    \ true;\n    long h = f - g;\n    if (h < 0)\n        return false;\n    if (h\
    \ == 1)\n        return true;\n    if (h == 2)\n        return a == c;\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to know if two sides form a right angled triangle, not\
    \ if two sides form a right angled triangle with one side 90 degrees.\n<|/ c |>\n\
    <| c |>\n: I missed that part, thanks for pointing it out. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to know if two sides form a right angled triangle, not if two sides form a right\
    \ angled triangle with one side 90 degrees.\n<|/ c |>\n<| c |>\n: I missed that\
    \ part, thanks for pointing it out. I've edited my answer to reflect that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. He wants to know if two sides\
    \ form a right angled triangle, not if two sides form a right angled triangle\
    \ with one side 90 degrees.\n<|/ c |>\n<| a tags=c#,math,geometry |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long abbc = ab * bc;\n    long acab\
    \ = ac * ab;\n    long abcab = ab * ab;\n    long acabc = ac * abc;\n    long\
    \ abcabc = ab * abc;\n    long acabbc = ac * abbc;\n    long abcabbc = ab * abbc;\n\
    \    long acabcab = ac * abcab;\n    long abcabcab = ab * abcab;\n    long acabcabc\
    \ = ac * abcabc;\n    long abcabcabc = ab * abcabc;\n    long acabcabbc = ac *\
    \ abcabbc;\n    long abcabcabbc = ab * abcabbc;\n    long acabcabcab = ac * abcabcab;\n\
    \    long abcabcabcab = ab * abcabcab;\n    long acabcabcabc = ac * abcabcabc;\n\
    \    long abcabcabcabc = ab * abcabcabc;\n    long acabcabcabbc = ac * abcabcabbc;\n\
    \    long abcabcabcabbc = ab * abcabcabbc;\n    long acabcabcabcab = ac * abcabcabcab;\n\
    \    long abcabcabcabcab = ab * abcabcabcab;\n    long acabcabcabcabc = ac * abcabcabcabc;\n\
    \    long abcabcabcabcabc = ab * abcabcabcabc;\n    long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n    long abcabcabcabcabbc = ab * abcabcabcabbc;\n    long\
    \ acabcabcabcabcab = ac * abcabcabcabcab;\n    long abcabcabcabcabcab = ab * abcabcabcabcab;\n\
    \    long acabcabcabcabcabc = ac * abcabcabcabcabc;\n    long abcabcabcabcabcabc\
    \ = ab * abcabcabcabcabc;\n    long acabcabcabcabcabbc = ac * abcabcabcabcabbc;\n\
    \    long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n    long acabcabcabcabcabcab\
    \ = ac * abcabcabcabcabcab;\n", "{\n    long ab = a - b;\n    long ac = a - c;\n\
    \    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n    long\
    \ abac = ab * ac;\n    long acab = ac * ab;\n    long abcab = ab * bc;\n    long\
    \ acbcab = ac * bc;\n    long abcabc = abcab + acbcab;\n    long acbcabc = acbcab\
    \ + abcabc;\n    long abcabcb = abcabc + acbcabc;\n    long acbcabcb = acbcabc\
    \ + abcabcb;\n    long abcabcbc = abcabcb + acbcabcb;\n    long acbcabcbc = acbcabcb\
    \ + abcabcbc;\n    long abcabcbcd = abcabcbc + acbcabcbc;\n    long acbcabcbcd\
    \ = acbcabcbc + abcabcbcd;\n    long abcabcbcde = abcabcbcd + acbcabcbcd;\n  \
    \  long acbcabcbcde = acbcabcbcd + abcabcbcde;\n    long abcabcbcdef = abcabcbcde\
    \ + acbcabcbcde;\n    long acbcabcbcdef = acbcabcbcde + abcabcbcdef;\n    long\
    \ abcabcbcdefg = abcabcbcdef + acbcabcbcdef;\n    long acbcabcbcdefg = acbcabcbcdef\
    \ + abcabcbcdefg;\n    long abcabcbcdefgh = abcabcbcdefg + acbcabcbcdefg;\n  \
    \  long acbcabcbcdefgh = acbcabcbcdefg + abcabcbcdefgh;\n    long abcabcbcdefghi\
    \ = abcabcbcdefgh + acbcabcbcdefgh;\n    long acbcabcbcdefghi = acbcabcbcdefgh\
    \ + abcabcbcdefghi;\n    long abcabcbcdefghij = abcabcbcdefghi + acbcabcbcdefghi;\n\
    \    long acbcabcbcdefghij = acbcabcbcdefghi + abcabcbcdefghij;\n    long abcabcbcdefghijk\
    \ = abcabcbcdefgh", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long e = Math.sqrt(d);\n    long f = b + e * c;\n    long\
    \ g = a + e * b;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a tags=c#,math,geometry |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\n: I tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n   \
    \ if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n\
    \    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n    if (g\
    \ < a)\n        return false;\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for me. `right_angle_triangle(2L, 3L, 4L)` returns\
    \ `true` instead of `false`. `right_angle_triangle(2L, 3L, 2L)` returns `false`\
    \ instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com. Works fine.\
    \ http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nIt doesn't work for me on ideone.com.\
    \ `right_angle_triangle(2L, 3L, 4L)` returns `true` instead of `false`. `right_angle_triangle(2L,\
    \ 3L, 2L)` returns `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com. Works fine. http://ideone.com/eJhqz\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long\
    \ g = (b - e * c) / a;\n    return (f < 0 && g < 0);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't seem to work. `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`.\n<|/ c |>\n<| c |>\n\
    I tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3,\
    \ 4, 5)` returns `true` while `right_angle_triangle(1, 4, 5)` returns `false`\n\
    <|/ c |>\n<| c |>\nI tested it on `right_angle_triangle(3, 4, 5)` returns `true`\
    \ while `right_angle_triangle(1, 4, 5)` returns `false`\n<|/ c |>\n<| c |>\nI\
    \ tested it on `right_angle_triangle(3, 4, 5)` returns `true` while `right_angle_triangle(1,\
    \ 4, 5)` returns `false`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long angle;\n\
    \    \n    // Calculate the angle between the three sides\n    angle = atan2(b,a)\
    \ - atan2(c,a);\n    \n    // Check if angle is between -90 and 90 degrees\n \
    \   if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n       \
    \ angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n\
    \    if (angle > PI)\n        angle -= PI;\n    else if (angle < -PI)\n      \
    \  angle += PI;\n    \n    // Check if angle is between -180 and 180 degrees\n",
  "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n   \
    \ long e = Math.sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e *\
    \ c) / a;\n    return ((f < 0 && g < 0) || (f > 0 && g > 0));\n}\n</code>\n<|/\
    \ a tags=c#,math,geometry |>\n<| a |>\n<code>", "{\n    long angle;\n    \n  \
    \  angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    \n    if (angle <\
    \ 0)\n    {\n        angle = -angle;\n    }\n    \n    if (angle < pi / 2)\n \
    \   {\n        return true;\n    }\n    \n    return false;\n}", "{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 && (b * b + 4 * a * c) <=\
    \ e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math |>\n<| c |>\n\
    This code does not work. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\nI tested\
    \ it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long\
    \ b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.Sqrt(d);\n    return ((b * b - 4 * a * c) >= 0 &&\
    \ (b * b + 4 * a * c) <= e && (b * b - 4 * a * c) >= -e);\n}\n</code>\n<|/ a tags=c#,math\
    \ |>\n<| c |>\nThis code does not work. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nI tested it with a = b = c = 1 and it works. I used the code from [here](http://www.mathsisfun.com/geometry/right-angle-triangle.html)\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n\
    <| c |>\nIt doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with a = b = c = 1\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.Sqrt(d);\n", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = b + e * Math.sqrt(b\
    \ * b - 4 * a * c);\n    if (f < 0)\n        return false;\n    long g = Math.sqrt(f);\n\
    \    return ((b * b - 4 * a * c) == (e * g));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI believe this would only work if you had the sides ordered from largest\
    \ to smallest.  If you had the sides ordered from smallest to largest, then the\
    \ triangle would not be a right angle triangle (ie. the sides would not be in\
    \ order).\n<|/ c |>\n<| c |>\nYes, you are right. I missed that part in the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,geometry,math |>\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long abcbc = abcb * bc;\n    long abcbcb = abcbcb * bc;\n \
    \   long abcbcbc = abcbcbc * bc;\n    long abcbcbcb = abcbcbcb * bc;\n    long\
    \ abcbcbcbc = abcbcbcbc * bc;\n    long abcbcbcbcb = abcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbc = abcbcbcbcbc * bc;\n    long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n\
    \    long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n\
    \    long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcbcbcb * bc;\n    long\
    \ ab", "{\n    long side1 = abs(b - c);\n    long side2 = abs(a - c);\n    long\
    \ side3 = abs(b - a);\n    long side4 = abs(a - b);\n    \n    if (side1 == side2\
    \ && side2 == side3 && side3 == side4)\n        return true;\n    else\n     \
    \   return false;\n}", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n \
    \       return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n\
    \        return false;\n    long f = (b * b) - 4 * a * c;\n    if (f < 0)\n  \
    \      return false;\n    long g = (b * b) - 4 * a * c;\n    if (g < 0)\n    \
    \    return false;\n    long h = (b * b) - 4 * a * c;\n    if (h < 0)\n      \
    \  return false;\n    long i = (b * b) - 4 * a * c;\n    if (i < 0)\n        return\
    \ false;\n    long j = (b * b) - 4 * a * c;\n    if (j < 0)\n        return false;\n\
    \    long k = (b * b) - 4 * a * c;\n    if (k < 0)\n        return false;\n  \
    \  long l = (b * b) - 4 * a * c;\n    if (l < 0)\n        return false;\n    long\
    \ m = (b * b) - 4 * a * c;\n    if (m < 0)\n        return false;\n    long n\
    \ = (b * b) - 4 * a * c;\n    if (n < 0)\n        return false;\n    long o =\
    \ (b * b) - 4 * a * c;\n    if (o < 0)\n        return false;\n    long p = (b\
    \ * b) - 4 * a * c;\n    if (p < 0)\n        return false;\n    long q = (b *\
    \ b) - 4 * a * c;\n    if (q < 0)\n        return false;\n    long r = (b * b)\
    \ - 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = (b * b) -\
    \ 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = (b * b) - 4\
    \ * a * c;\n    if (t < 0)\n        return false;\n    long u = (b * b) - 4 *\
    \ a * c;\n    if (u < 0)\n        return false;\n    long v = (b * b) - 4 * a\
    \ * c;\n    if (v < 0)\n        return false;\n    long w = (b * b) - 4 * a *\
    \ c;\n    if (w < 0)\n        return false;\n    long x = (b * b) - 4 * a * c;\n\
    \    if (x < 0)\n        return false;\n    long y = (b * b) - 4 * a * c;\n  \
    \  if (y < 0)\n        return false;\n    long z = (b * b) - 4 * a * c;\n    if\
    \ (z < 0)\n        return false;\n    long a = (b * b) - 4 * a * c;\n    if (a\
    \ < 0)\n        return false;\n    long b = (b * b) - 4 * a * c;\n    if (b <\
    \ 0)\n        return false;\n    long c = (b * b) - 4 * a * c;\n    if (c < 0)\n\
    \        return false;\n    long d = (b * b) - 4 * a * c;\n    if (d < 0)\n  \
    \      return false;\n    long e = (b * b) - 4", "{\n    long ab = a - b;\n  \
    \  long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac + bc;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = abc + ab;\n    long acb\
    \ = acb + ac;\n    long abc = abc + ac;\n    long acb = acb + ab;\n    long abc\
    \ = abc + ab;\n    long acb = acb + ac;\n    long abc = abc + ac;\n    long acb\
    \ = acb + ab;\n    long abc = abc + ab;\n    long acb = acb + ac;\n    long abc\
    \ = abc + ac;\n    long acb = acb + ab;\n    long abc = ", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b *\
    \ b) - (4 * a * c));\n    if (e < 0)\n        return false;\n    long f = ((b\
    \ * b) - (4 * a * c));\n    if (f < 0)\n        return false;\n    long g = ((b\
    \ * b) - (4 * a * c));\n    if (g < 0)\n        return false;\n    long h = ((b\
    \ * b) - (4 * a * c));\n    if (h < 0)\n        return false;\n    long s = (-b\
    \ + sqrt(h));\n    if (s < 0)\n        return false;\n    long t = (-b - sqrt(h));\n\
    \    if (t < 0)\n        return false;\n    long u = (-b + sqrt(h));\n    if (u\
    \ < 0)\n        return false;\n    long v = (-b - sqrt(h));\n    if (v < 0)\n\
    \        return false;\n    long w = (-b + sqrt(h));\n    if (w < 0)\n       \
    \ return false;\n    long x = (-b - sqrt(h));\n    if (x < 0)\n        return\
    \ false;\n    long y = (-b + sqrt(h));\n    if (y < 0)\n        return false;\n\
    \    long z = (-b - sqrt(h));\n    if (z < 0)\n        return false;\n    long\
    \ x1 = (-b + sqrt(h));\n    if (x1 < 0)\n        return false;\n    long y1 =\
    \ (-b - sqrt(h));\n    if (y1 < 0)\n        return false;\n    long z1 = (-b -\
    \ sqrt(h));\n    if (z1 < 0)\n        return false;\n    long x2 = (-b - sqrt(h));\n\
    \    if (x2 < 0)\n        return false;\n    long y2 = (-b + sqrt(h));\n    if\
    \ (y2 < 0)\n        return false;\n    long z2 = (-b + sqrt(h));\n    if (z2 <\
    \ 0)\n        return false;\n    long x3 = (-b + sqrt(h));\n    if (x3 < 0)\n\
    \        return false;\n    long y3 = (-b - sqrt(h));\n    if (y3 < 0)\n     \
    \   return false;\n    long z3 = (-b - sqrt(h));\n    if (z3 < 0)\n        return\
    \ false;\n    long x4 = (-b - sqrt(h));\n    if (x4 < 0)\n        return false;\n\
    \    long y4 = (-b + sqrt(h));\n    if (y4 < 0)\n        return false;\n    long\
    \ z4 = (-b + sqrt(h));\n    if (z4 < 0)\n        return false;\n    long x5 =\
    \ (-b + sqrt(h));\n    if (x5 < 0)\n        return false;\n    long y5 = (-b -\
    \ sqrt(h));\n    if (y5 < 0)\n        return false;\n    long z5 = (-b - sqrt(h));\n\
    \    if (z5 < 0)\n        return false;\n    long x6 = (-b - sqrt(h));", "{\n\
    \    long angle = acos((b*b + c*c - a*a) / (2.0 * b * c));\n    return (angle\
    \ > M_PI_2 && angle < M_PI);\n}", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = ((b * b) - (4 * a * c));\n    if\
    \ (e < 0)\n        return false;\n    long f = ((b * b) - (4 * a * c));\n    if\
    \ (f < 0)\n        return false;\n    long g = ((b * b) - (4 * a * c));\n    if\
    \ (g < 0)\n        return false;\n    long h = ((b * b) - (4 * a * c));\n    if\
    \ (h < 0)\n        return false;\n    long s = (-b + sqrt(h));\n    if (s < 0)\n\
    \        return false;\n    long t = (-b - sqrt(h));\n    if (t < 0)\n       \
    \ return false;\n    long u = (-b + sqrt(h));\n    if (u < 0)\n        return\
    \ false;\n    long v = (-b - sqrt(h));\n    if (v < 0)\n        return false;\n\
    \    long w = (-b + sqrt(h));\n    if (w < 0)\n        return false;\n    long\
    \ x = (-b - sqrt(h));\n    if (x < 0)\n        return false;\n    long y = (-b\
    \ + sqrt(h));\n    if (y < 0)\n        return false;\n    long z = (-b - sqrt(h));\n\
    \    if (z < 0)\n        return false;\n    long x1 = (-b + sqrt(h));\n    if\
    \ (x1 < 0)\n        return false;\n    long x2 = (-b - sqrt(h));\n    if (x2 <\
    \ 0)\n        return false;\n    long y1 = (-b - sqrt(h));\n    if (y1 < 0)\n\
    \        return false;\n    long y2 = (-b + sqrt(h));\n    if (y2 < 0)\n     \
    \   return false;\n    long z1 = (-b - sqrt(h));\n    if (z1 < 0)\n        return\
    \ false;\n    long z2 = (-b + sqrt(h));\n    if (z2 < 0)\n        return false;\n\
    \    long x3 = (-b - sqrt(h));\n    if (x3 < 0)\n        return false;\n    long\
    \ x4 = (-b + sqrt(h));\n    if (x4 < 0)\n        return false;\n    long y3 =\
    \ (-b + sqrt(h));\n    if (y3 < 0)\n        return false;\n    long y4 = (-b -\
    \ sqrt(h));\n    if (y4 < 0)\n        return false;\n    long z3 = (-b - sqrt(h));\n\
    \    if (z3 < 0)\n        return false;\n    long z4 = (-b + sqrt(h));\n    if\
    \ (z4 < 0)\n        return false;\n    long x5 = (-b - sqrt(h));\n    if (x5 <\
    \ 0)\n        return false;\n    long x6 = (-b + sqrt(h));\n    if (x6 < 0)\n\
    \        return false;\n    long y5 = (-b + sqrt(h));\n    if (y5 < 0)\n     \
    \   return false;\n    long y6 = (-b - sqrt(h", "{\n    long ab = a - b;\n   \
    \ long ac = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb\
    \ = ac - bc;\n    long abac = ab - ac;\n    long acab = ac - ab;\n    long abcab\
    \ = ab - abc;\n    long acabc = ac - abc;\n    long abcabc = ab - abc;\n    long\
    \ acabcb = ac - abcb;\n    long abcabcb = ab - abcb;\n    long acabcbb = ac -\
    \ abbb;\n    long abcabcbb = ab - abbb;\n    long acabcbbc = ac - abbcb;\n   \
    \ long abcabcbbc = ab - abbcb;\n    long acabcbbcb = ac - abbbcb;\n    long abcabcbbcb\
    \ = ab - abbbcb;\n    long acabcbbcbc = ac - abbbbcb;\n    long abcabcbbcbc =\
    \ ab - abbbbcb;\n    long acabcbbcbcb = ac - abbbbcb;\n    long abcabcbbcbcb =\
    \ ab - abbbbcb;\n    long acabcbbcbcbc = ac - abbbbbcb;\n    long abcabcbbcbcbc\
    \ = ab - abbbbbcb;\n    long acabcbbcbcbcb = ac - abbbbcbcb;\n    long abcabcbbcbcbcb\
    \ = ab - abbbbcbcb;\n    long acabcbbcbcbcbc = ac - abbbbcbcbcb;\n    long abcabcbbcbcbcbc\
    \ = ab - abbbbcbcbcb;\n    long acabcbbcbcbcbcb = ac - abbbbcbcbcbcb;\n    long\
    \ abcabcbbcbcbcbcb = ab - abbbbcbcbcbcb;\n    long acabcbbcbcbcbcbc = ac - abbbbcbcbcbcbcb;\n\
    \    long abcabcbbcbcbcbcbc = ab - abbbbcbcbcbcbcbc;\n    long acabcbbcbcbcbcbcbc\
    \ = ac - abbbbcbcbcbcbcbcbc;\n    long abcabcbbcbcbcbcbcbc = ab - abbbbcbcbcbcbcbcbcbc;\n\
    \    long acabcbb", "{\n    long side1 = abs(a) + abs(b) + abs(c);\n    long side2\
    \ = abs(a) + abs(b) - abs(c);\n    long side3 = abs(a) - abs(b) - abs(c);\n  \
    \  \n    if (side1 == side2 && side2 == side3)\n        return true;\n    \n \
    \   return false;\n}", "{\n    long angle;\n    bool isRightAngle;\n    \n   \
    \ angle = acos((b * b + c * c - a * a) / (2 * b * c));\n    isRightAngle = (angle\
    \ > M_PI);\n    \n    return isRightAngle;\n}", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + ab;\n    long ac2ab = ac * ac;\n    long ac2bc = ac * bc;\n\
    \    long ac2abc = ac2ab + ac2bc;\n    long ac2abbc = ac2ab * bc;\n    long ac2abbbc\
    \ = ac2ab * bc;\n    long ac2abbcc = ac2ab * bc;\n    long ac2bcab = ac2bc * ab;\n\
    \    long ac2bcba = ac2bc * ba;\n    long ac2bcabc = ac2bcab + ac2bcba;\n    long\
    \ ac2bcabbc = ac2bcab * bc;\n    long ac2bcabbcc = ac2bcab * bc;\n    long ac2bcabbccc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccb = ac2bcab * bc;\n    long ac2bcabbcccbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbca = ac2bcab * bc;\n    long ac2bcabbcccbcaa\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaa = ac2bcab * bc;\n    long ac2bcabbcccbcaaac\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacb = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcc = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbccc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccb = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbc\
    \ = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbca = ac2bcab * bc;\n    long\
    \ ac2bcabbcccbcaaacbcccbcaa = ac2bcab * bc;\n    long ac2bcabbcccbcaaacbcccbcaaa\
    \ = ac2bcab * bc;\n    long ac", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if\
    \ (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n  \
    \  if (f < 0)\n        return false;\n    long g = a * a + b * b - 4 * a * c;\n\
    \    if (g < 0)\n        return false;\n    long h = sqrt(g);\n    if (h > 1)\n\
    \        return false;\n    long i = a * h;\n    long j = b * h;\n    long k =\
    \ c * h;\n    long l = a * e - b * f - c * g;\n    if (l < 0)\n        return\
    \ false;\n    long m = a * f + b * e + c * g;\n    if (m < 0)\n        return\
    \ false;\n    long n = a * g + b * f + c * e;\n    if (n < 0)\n        return\
    \ false;\n    long o = a * e + b * g + c * f;\n    if (o < 0)\n        return\
    \ false;\n    long p = a * f + b * g + c * e;\n    if (p < 0)\n        return\
    \ false;\n    long q = a * g + b * e + c * f;\n    if (q < 0)\n        return\
    \ false;\n    long r = a * e + b * f + c * g;\n    if (r < 0)\n        return\
    \ false;\n    long s = a * f + b * g + c * e;\n    if (s < 0)\n        return\
    \ false;\n    long t = a * g + b * e + c * f;\n    if (t < 0)\n        return\
    \ false;\n    long u = a * e + b * f + c * g;\n    if (u < 0)\n        return\
    \ false;\n    long v = a * f + b * g + c * e;\n    if (v < 0)\n        return\
    \ false;\n    long w = a * g + b * e + c * f;\n    if (w < 0)\n        return\
    \ false;\n    long x = a * e + b * f + c * g;\n    if (x < 0)\n        return\
    \ false;\n    long y = a * f + b * g + c * e;\n    if (y < 0)\n        return\
    \ false;\n    long z = a * g + b * e + c * f;\n    if (z < 0)\n        return\
    \ false;\n    long a = a * h;\n    long b = b * h;\n    long c = c * h;\n    long\
    \ d = a * e - b * f - c * g;\n    if (d < 0)\n        return false;\n    long\
    \ e = a * f + b * e + c * g", "{\n    long d = b * b - 4 * a * c;\n    if (d <\
    \ 0) return false;\n    long e = Math.sqrt(d);\n    long f = (b + e * c) / 2;\n\
    \    long g = (a + e * b) / 2;\n    long h = (a + b * c) / 2;\n    return ((f\
    \ < 0 && g < 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a tags=c#,geometry\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the example in the question.\
    \ `right_angle_triangle(1,1,1)` returns `true`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I used the example in the question. `right_angle_triangle(1,1,1)`\
    \ returns `true`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example\
    \ in the question. `right_angle_triangle(1,1,1)` returns `true`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I used the example in the question. `right_angle_triangle(1,1,1)`\
    \ returns `true`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry,math,trigonometry\
    \ |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)` returns `true`,\
    \ but `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. `right_angle_triangle(1,1,1)` returns `true`, `right_angle_triangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it and it works fine. `right_angle_triangle(1,1,1)`\
    \ returns `true`, `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. `right_angle_triangle(1,1,1)` returns `true`,\
    \ `right_angle_triangle(1,2,2)` returns `false`\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. `right_angle_triangle(1,1,1)` returns `true`, `right_angle_triangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| a tags=c#,geometry,math,trigonometry |>\n<code>\n\
    public static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    This doesn't work. `IsRightAngleTriangle(1,1,1)` returns `true`, but `IsRightAngleTriangle(1,2,2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it and it works fine. `IsRightAngleTriangle(1,1,1)`\
    \ returns `true`, `IsRightAngleTriangle(1,2,2)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. `IsRightAngleTriangle(1,1,1)` returns `true`,\
    \ `IsRightAngleTriangle", "{\n    long ab = abs(b - a);\n    long ac = abs(c -\
    \ a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab\
    \ + ac;\n    long bcb = bc + cb;\n    long abbc = ab + bc;\n    long acbc = ac\
    \ + cb;\n    long abbcd = abbc + acbc;\n    long acbcd = acbc + bcd;\n    long\
    \ abbcde = abbcd + acbcd;\n    long acbcde = acbcd + bcd;\n    long abbcdef =\
    \ abbcde + acbcde;\n    long acbcdef = acbcde + bcd;\n    long abbcdefg = abbcdef\
    \ + acbcdef;\n    long acbcdefg = acbcdef + bcd;\n    long abbcdefgh = abbcdefg\
    \ + acbcdefg;\n    long acbcdefgh = acbcdefg + bcd;\n    long abbcdefghi = abbcdefgh\
    \ + acbcdefgh;\n    long acbcdefghi = acbcdefgh + bcd;\n    long abbcdefghij =\
    \ abbcdefghi + acbcdefghi;\n    long acbcdefghij = acbcdefghi + bcd;\n    long\
    \ abbcdefghijk = abbcdefghij + acbcdefghij;\n    long acbcdefghijk = acbcdefghij\
    \ + bcd;\n    long abbcdefghijkl = abbcdefghijk + acbcdefghijk;\n    long acbcdefghijkl\
    \ = acbcdefghijk + bcd;\n    long abbcdefghijklmn = abbcdefghijkl + acbcdefghijkl;\n\
    \    long acbcdefghijklmn = acbcdefghijkl + bcd;\n    long abbcdefghijklmnn =\
    \ abbcdefghijklmn + acbcdefghijklmn;\n    long acbcdefghijklmnn = acbcdefghijklmn\
    \ + bcd;\n    long abbcdefghijklmnno = abbcdefghijklmnn + acbcdefghijklmnno;\n\
    \    long acbcdefghijklmnno = acbcdefghijklmnno", "{\n    long angle;\n    bool\
    \ result = false;\n    angle = atan2(b,a) - atan2(c,a);\n    if (angle > 0)\n\
    \    {\n        result = true;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\n\
    <|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that does not use trigonometry\"\
    \n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n \
    \   if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f\
    \ = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 &&\
    \ g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = Math.sqrt(d);\n    long f = b + e * c;\n    long g = a + e * b;\n\
    \    long h = a - e * b;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0) ||\
    \ (f > 0 && h < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code doesn't\
    \ work. `right_angle_triangle(5L, 3L, 4L)` returns `true` instead of `false`.\
    \ See [this fiddle](https://dotnetfiddle.net/w4LgYQ).\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI\
    \ fixed the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n\
    \        return false;\n    long f = ((b * b) - 4 * a * c) / d + a;\n    if (f\
    \ < 0)\n        return false;\n    long g = ((b * b) - 4 * a * c) / d + a;\n \
    \   if (g < 0)\n        return false;\n    long h = ((b * b) - 4 * a * c) / d\
    \ + a;\n    if (h < 0)\n        return false;\n    long i = (b * b) - 4 * a *\
    \ c;\n    if (i < 0)\n        return false;\n    long j = (b * b) - 4 * a * c;\n\
    \    if (j < 0)\n        return false;\n    long k = (b * b) - 4 * a * c;\n  \
    \  if (k < 0)\n        return false;\n    long l = (b * b) - 4 * a * c;\n    if\
    \ (l < 0)\n        return false;\n    long m = (b * b) - 4 * a * c;\n    if (m\
    \ < 0)\n        return false;\n    long n = (b * b) - 4 * a * c;\n    if (n <\
    \ 0)\n        return false;\n    long o = (b * b) - 4 * a * c;\n    if (o < 0)\n\
    \        return false;\n    long p = (b * b) - 4 * a * c;\n    if (p < 0)\n  \
    \      return false;\n    long q = (b * b) - 4 * a * c;\n    if (q < 0)\n    \
    \    return false;\n    long r = (b * b) - 4 * a * c;\n    if (r < 0)\n      \
    \  return false;\n    long s = (b * b) - 4 * a * c;\n    if (s < 0)\n        return\
    \ false;\n    long t = (b * b) - 4 * a * c;\n    if (t < 0)\n        return false;\n\
    \    long u = (b * b) - 4 * a * c;\n    if (u < 0)\n        return false;\n  \
    \  long v = (b * b) - 4 * a * c;\n    if (v < 0)\n        return false;\n    long\
    \ w = (b * b) - 4 * a * c;\n    if (w < 0)\n        return false;\n    long x\
    \ = (b * b) - 4 * a * c;\n    if (x < 0)\n        return false;\n    long y =\
    \ (b * b) - 4 * a * c;\n    if (y < 0)\n        return false;\n    long z = (b\
    \ * b) - 4 * a * c;\n    if (z < 0)\n        return false;\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,geometry,math |>\n<| c |>\nThe code above is wrong.\
    \ `long d = b * b - 4 * a * c;` should be `long d = b * b + 4 * a * c;`\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I've fixed it.\n<|/", "{\n    long\
    \ ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc = ab +\
    \ bc;\n    long acb = ac + bc;\n    long ac = ac - bc;\n    long ab = ab - bc;\n\
    \    long abc = abc + ac;\n    long acb = acb + ab;\n    long ac = acb - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab;\n    long ac = acbc - ab;\n\
    \    long abc = abc - ac;\n    long acb = acbc - ab", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - (4\
    \ * a * c));\n    if (e < 0)\n        return false;\n    long f = ((b * b) - (4\
    \ * a * c));\n    if (f < 0)\n        return false;\n    long g = ((b * b) - (4\
    \ * a * c));\n    if (g < 0)\n        return false;\n    long h = (b * b) - (4\
    \ * a * c);\n    if (h < 0)\n        return false;\n    long x = (b * b) - (4\
    \ * a * c);\n    if (x < 0)\n        return false;\n    long y = (b * b) - (4\
    \ * a * c);\n    if (y < 0)\n        return false;\n    long z = (b * b) - (4\
    \ * a * c);\n    if (z < 0)\n        return false;\n    long x2 = (b * b) - (4\
    \ * a * c);\n    if (x2 < 0)\n        return false;\n    long y2 = (b * b) - (4\
    \ * a * c);\n    if (y2 < 0)\n        return false;\n    long z2 = (b * b) - (4\
    \ * a * c);\n    if (z2 < 0)\n        return false;\n    long x3 = ((b * b) -\
    \ (4 * a * c));\n    if (x3 < 0)\n        return false;\n    long y3 = ((b * b)\
    \ - (4 * a * c));\n    if (y3 < 0)\n        return false;\n    long z3 = ((b *\
    \ b) - (4 * a * c));\n    if (z3 < 0)\n        return false;\n    long x4 = ((b\
    \ * b) - (4 * a * c));\n    if (x4 < 0)\n        return false;\n    long y4 =\
    \ ((b * b) - (4 * a * c));\n    if (y4 < 0)\n        return false;\n    long z4\
    \ = ((b * b) - (4 * a * c));\n    if (z4 < 0)\n        return false;\n    long\
    \ x5 = ((b * b) - (4 * a * c));\n    if (x5 < 0)\n        return false;\n    long\
    \ y5 = ((b * b) - (4 * a * c));\n    if (y5 < 0)\n        return false;\n    long\
    \ z5 = ((b * b) - (4 * a * c));\n    if (z5 < 0)\n        return false;\n    long\
    \ x6 = ((b * b) - (4 * a * c));\n    if (x6 < 0)\n        return false;\n    long\
    \ y6 = ((b * b) - (4 * a * c));\n    if (y6 < 0)\n        return false;\n    long\
    \ z6 = ((b * b) - (4 * a * c));\n    if (z6 < 0)\n        return false;\n    long\
    \ x7 = ((b * b) - (4 * a * c));\n    if (x7 < 0)\n        return false;\n    long\
    \ y7 = ((b * b) - (4 * a * c));\n    if (y7 < 0)\n        return false;\n", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - (4 * a * c));\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - (4 * a * c));\n    if (f < 0)\n        return false;\n    long\
    \ g = ((b * b) - (4 * a * c));\n    if (g < 0)\n        return false;\n    long\
    \ h = (b * b) - (4 * a * c);\n    if (h < 0)\n        return false;\n    long\
    \ x = (b * b) - (4 * a * c);\n    if (x < 0)\n        return false;\n    long\
    \ y = (b * b) - (4 * a * c);\n    if (y < 0)\n        return false;\n    long\
    \ z = (b * b) - (4 * a * c);\n    if (z < 0)\n        return false;\n    long\
    \ w = (b * b) - (4 * a * c);\n    if (w < 0)\n        return false;\n    long\
    \ x1 = (b * b) - (4 * a * c);\n    if (x1 < 0)\n        return false;\n    long\
    \ y1 = (b * b) - (4 * a * c);\n    if (y1 < 0)\n        return false;\n    long\
    \ z1 = (b * b) - (4 * a * c);\n    if (z1 < 0)\n        return false;\n    long\
    \ w1 = (b * b) - (4 * a * c);\n    if (w1 < 0)\n        return false;\n    long\
    \ x2 = (b * b) - (4 * a * c);\n    if (x2 < 0)\n        return false;\n    long\
    \ y2 = (b * b) - (4 * a * c);\n    if (y2 < 0)\n        return false;\n    long\
    \ z2 = (b * b) - (4 * a * c);\n    if (z2 < 0)\n        return false;\n    long\
    \ w2 = (b * b) - (4 * a * c);\n    if (w2 < 0)\n        return false;\n    long\
    \ x3 = (b * b) - (4 * a * c);\n    if (x3 < 0)\n        return false;\n    long\
    \ y3 = (b * b) - (4 * a * c);\n    if (y3 < 0)\n        return false;\n    long\
    \ z3 = (b * b) - (4 * a * c);\n    if (z3 < 0)\n        return false;\n    long\
    \ w3 = (b * b) - (4 * a * c);\n    if (w3 < 0)\n        return false;\n    long\
    \ x4 = (b * b) - (4 * a * c);\n    if (x4 < 0)\n        return false;\n    long\
    \ y4 = (b * b) - (4 * a * c);\n    if (y4 < 0)\n        return false;\n    long\
    \ z4 = (b * b) - (4 * a * c);\n    if (z4 < 0)\n        return false;\n    long\
    \ w4 = (b * b) - (4 * a * c);\n    if (w4 < 0)\n        return false;\n    long\
    \ x5 = (b * b) - (4 * a * c);\n    if (x5 < 0)\n        return false;\n    long\
    \ y5 = (b * b) - (4 * a", "{\n    return ((b - a) * (c - b) <= 0);\n}", "{\n \
    \   long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2\
    \ * a);\n    long h = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0)\
    \ || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,geometry,math\
    \ |>\n<code>", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac;\n    long\
    \ bcb = bc + cb;\n    long abbc = abb + bcb;\n    long abcc = abc + cb \n    bool\
    \ isRightAngle = abbc > abcc;\n    return isRightAngle;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like this solution. One thing I noticed is that you used `abb`\
    \ instead of `abb`, which makes the code a little more readable. Also, you can\
    \ get rid of the `ab` variables by using `abc = abs(c - a);` instead.\n<|/ c |>\n\
    <| c |>\nYes, I noticed that too. Thanks for the suggestions.\n<|/ c |>\n<| c\
    \ |>\nI like your solution, but I believe it can be simplified by using abc instead\
    \ of abb and abc instead of abbc.\n<|/ c |>\n<| c |>\nYes, I agree. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=4 |>\nThe algorithm is simple enough:\
    \ you just need to check whether the triangle is right-angled or not by comparing\
    \ the sum of the lengths of the three sides. If the sum is equal to the length\
    \ of the hypotenuse, then the triangle is right-angled.\n<code>", "{\n    long\
    \ ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n   \
    \ long cb = abs(c - b);\n    \n    if (ab == ac)\n    {\n        if (ab == bc)\n\
    \        {\n            if (ab == cb)\n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long e = Math.sqrt(d);\n\
    \    return ((e > 0) && (e < b * b));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long\
    \ g = (c + e) / (2 * a);\n    return ((f >= 0) && (g >= 0) && (f + g == 1));\n\
    }\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis code doesn't work. `right_angle_triangle(5L,\
    \ 3L, 4L)` returns `true` but `right_angle_triangle(5L, 3L, 5L)` returns `false`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me either. `right_angle_triangle(5L, 3L,\
    \ 5L)` returns `true` but `right_angle_triangle(5L, 3L, 4L)` returns `false`\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out!\n<|/ c |>\n<| a |>\n<code>", "{\n    long\
    \ ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc = ab +\
    \ bc;\n    long acb = ac - bc;\n    long abac = ab - ac;\n    long acab = ac -\
    \ ab;\n    long abcab = ab - abc;\n    long acabc = ac - abc;\n    long abcabc\
    \ = ab - abc;\n    long acabcb = ac - abc;\n    long abcabcb = ab - abc;\n   \
    \ long acabcba = ac - abca;\n    long abcabcba = ab - abca;\n    long acabcbac\
    \ = ac - abca;\n    long abcabcbac = ab - abca;\n    long acabcbaca = ac - abca;\n\
    \    long abcabcbaca = ab - abca;\n    long acabcbacab = ac - abca;\n    long\
    \ abcabcbacab = ab - abca;\n    long acabcbacabc = ac - abca;\n    long abcabcbacabc\
    \ = ab - abca;\n    long acabcbacabcb = ac - abca;\n    long abcabcbacabcb = ab\
    \ - abca;\n    long acabcbacabcba = ac - abca;\n    long abcabcbacabcba = ab -\
    \ abca;\n    long acabcbacabcbac = ac - abca;\n    long abcabcbacabcbac = ab -\
    \ abca;\n    long acabcbacabcbaca = ac - abca;\n    long abcabcbacabcbaca = ab\
    \ - abca;\n    long acabcbacabcbacab = ac - abca;\n    long abcabcbacabcbacab\
    \ = ab - abca;\n    long acabcbacabcbacabc = ac - abca;\n    long abcabcbacabcbacabc\
    \ = ab - abca;\n    long acabcbacabcbacabcb = ac - abca;\n    long abcabcbacabcbacabcb\
    \ = ab - abca;\n    long acabcbacabcbacabcba = ac - abca;\n    long abcabcbacabcbacabcba\
    \ = ab - abca;\n    long acabcbacab", "{\n    long ab = abs(b - a);\n    long\
    \ ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab + ac);\n\
    \    long bcd = abs(bc + ab);\n    long acd = abs(ac + bc);\n    long abcd = abs(abc\
    \ + bcd);\n    long acdb = abs(acd + abc);\n    long acbc = abs(acb + acd);\n\
    \    long acdbc = abs(acdb + acbc);\n    long acbca = abs(acbc + acdb);\n    long\
    \ acdbca = abs(acdbc + acbca);\n    long acbcab = abs(acbca+ acdbc);\n    long\
    \ acdbcab = abs(acdbcab + acbcab);\n    long acbcabc = abs(acbcab + acdbcab);\n\
    \    long acdbcabc = abs(acdbcabc + acbcabc);\n    long acbcabca = abs(acbcabc\
    \ + acdbcabc);\n    long acdbcabca = abs(acdbcabca + acbcabca);\n    long acbcabcab\
    \ = abs(acbcabca + acdbcabca);\n    long acdbcabcab = abs(acdbcabcab + acbcabcab);\n\
    \    long acbcabcabc = abs(acbcabcab + acdbcabcab);\n    long acdbcabcabc = abs(acdbcabcabc\
    \ + acbcabcabc);\n    long acbcabcabca = abs(acbcabcabc + acdbcabcabc);\n    long\
    \ acdbcabcabca = abs(acdbcabcabca + acbcabcabca);\n    long acbcabcabcab = abs(acbcabcabca\
    \ + acdbcabcabca);\n    long acdbcabcabcab = abs(acdbcabcabcab + acbcabcabcab);\n\
    \    long acbcabcabcabc = abs(acbcabcabcab + acdbcabcabcab);\n    long acdbcabcabcabc\
    \ = abs(acdbcabcabcabc + acbcabcabcabc);\n    long acbcabcabcabca = abs(acbcabcabcabca\
    \ + acdbcabcabcabca);\n    long acdbcabcabcabca = abs(acdbcabcabcabca + acbcabcabcabca);\n\
    \    long acbcabcabcabcab = abs(acbcabcabcabca + acdbcabcabcabcab);", "{\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = b + e * (b - c);\n    return ((f - c) == e);\n\
    }\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nI believe this would fail for\
    \ `right_angle_triangle(1,1,1)` which should return `true` but returns `false`\n\
    <|/ c |>\n<| c |>\nI believe this would fail for `right_angle_triangle(1,1,1)`\
    \ which should return `true` but returns `false`\n<|/ c |>\n<| c |>\nI believe\
    \ this would fail for `right_angle_triangle(1,1,1)` which should return `true`\
    \ but returns `false`\n<|/ c |>\n<| c |>\nI believe this would fail for `right_angle_triangle(1,1,1)`\
    \ which should return `true` but returns `false`\n<|/ c |>\n<| c |>\nI believe\
    \ this would fail for `right_angle_triangle(1,1,1)` which should return `true`\
    \ but returns `false`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / 2;\n    long g = (b - e * c) / 2;\n    return ((f\
    \ >= 0) && (f <= g) && (e >= 0));\n}", "{\n    long d = b * b - 4 * a * c;\n \
    \   if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f\
    \ = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 &&\
    \ g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,geometry\
    \ |>\n<code>\npublic static bool IsRightAngledTriangle(long a, long b, long c)\n\
    {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n  \
    \  long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c +\
    \ e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| a tags=c#,geometry |>\n<code>\n\
    public static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e =\
    \ Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 *\
    \ a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| ", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + ab);\n\
    \    long abcd = abs(abc + bcd);\n    long acdb = abs(acd + abc);\n    long abcda\
    \ = abs(abcd + acb);\n    long acbca = abs(acbc + abc);\n    long acdbca = abs(acdbc\
    \ + abc);\n    long acbcab = abs(acbca+ acb);\n    long acdbcab = abs(acdbca +\
    \ acb);\n    long acbcabd = abs(acbcab + acd);\n    long acdbcabd = abs(acdbcab\
    \ + acd);\n    long acbcabdc = abs(acbcabd + acc);\n    long acdbcabdc = abs(acdbcabd\
    \ + acc);\n    long acbcabdcd = abs(acbcabdc + acd);\n    long acdbcabdcd = abs(acdbcabdc\
    \ + acd);\n    long acbcabdcda = abs(acbcabdcd + acd);\n    long acdbcabdcda =\
    \ abs(acdbcabdcd + acd);\n    long acbcabdcdaa = abs(acbcabdcda + acd);\n    long\
    \ acdbcabdcdaa = abs(acdbcabdcda + acd);\n    long acbcabdcdaaa = abs(acbcabdcdaa\
    \ + acd);\n    long acdbcabdcdaaa = abs(acdbcabdcdaa + acd);\n    long acbcabdcdaaaa\
    \ = abs(acbcabdcdaaa + acd);\n    long acdbcabdcdaaaa = abs(acdbcabdcdaaa + acd);\n\
    \    long acbcabdcdaaaab = abs(acbcabdcdaaaa + acd);\n    long acdbcabdcdaaaab\
    \ = abs(acdbcabdcdaaaa + acd);\n    long acbcabdcdaaaabc = abs(acbcabdcdaaaab\
    \ + acd);\n    long acdbcabdcdaaaabc = abs(acdbcabdcdaaaab + acd);\n    long acbcabdcdaaaabcc\
    \ = abs(acbcabdcdaaaabc + acd);\n    long acdbcabdcdaaaabcc = abs(acdbcabdcdaaaabc\
    \ + ac", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc\
    \ = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n\
    \    long acd = abs(ac + bc);\n    long abcd = abs(abc + bcd);\n    long acbd\
    \ = abs(acd + abc);\n    long abac = abs(abc + acb);\n    long abcab = abs(abc\
    \ + abc);\n    long abcabc = abs(abcab + acbc);\n    long abcabcd = abs(abcabc\
    \ + abcd);\n    long abcabcde = abs(abcabcde + acbcd);\n    long abcabcdef = abs(abcabcdef\
    \ + abcd);\n    long abcabcdefg = abs(abcabcdef + abce);\n    long abcabcdefgh\
    \ = abs(abcabcdefgh + acbdef);\n    long abcabcdefghi = abs(abcabcdefghi + acbdefg);\n\
    \    long abcabcdefghij = abs(abcabcdefghij + acbdefgh);\n    long abcabcdefghijk\
    \ = abs(abcabcdefghijk + acbdefghi);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghij);\n    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijk);\n\
    \    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl\
    \ = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n\
    \    long abcabcdefghijkl = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl\
    \ = abs(abcabcdefghijkl + acbdefghijkl);\n    long abcabcdefghijkl = abs(abcabcdefghijkl\
    \ + acbdefghijkl);\n    long abcabc", "{\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f =\
    \ (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0)\
    \ || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis\
    \ doesn't seem to work. `right_angle_triangle(2L, 1L, 2L)` returns `true` when\
    \ it should be `false`.\n<|/ c |>\n<| c |>\nIt does work. I've tested it before\
    \ posting it. The problem was with the `if` statement in the `right_angle_triangle`\
    \ function. I've edited my answer to fix it.\n<|/ c |>\n<| c |>\nAh yes, I see\
    \ now. Thanks for your help.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngleTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,geometry\
    \ |>\n<code>\npublic static bool IsRightAngleTriangle(long a, long b, long c)\n\
    {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n  \
    \  long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e\
    \ * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,geometry |>\n<code>\npublic static bool IsRightAngleTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n\
    \    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g <\
    \ 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(a\
    \ - d);\n    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc =\
    \ ab + ac;\n    long bcd = bc + bd;\n    long abcd = abc + bcd;\n    long acbd\
    \ = ac + bd;\n    long acbc = ac + bc;\n    long acdbc = ac + bd;\n    long acdbd\
    \ = ac + bd;\n    long acdbcd = ac + bd;\n    long acbcdd = ac + bd;\n    long\
    \ acbcdcd = ac + bd;\n    long acbcdcb = ac + bc;\n    long acbcdcd = ac + bd;\n\
    \    long acbcdcbd = ac + bd;\n    long acbcdcbc = ac + bc;\n    long acbcdcbcd\
    \ = ac + bd;\n    long acbcdcbcb = ac + bc;\n    long acbcdcbcd = ac + bd;\n \
    \   long acbcdcbcbd = ac + bd;\n    long acbcdcbcbc = ac + bc;\n    long acbcdcbcbcd\
    \ = ac + bd;\n    long acbcdcbcbcb = ac + bc;\n    long acbcdcbcbcd = ac + bd;\n\
    \    long acbcdcbcbcbd = ac + bd;\n    long acbcdcbcbcbc = ac + bc;\n    long\
    \ acbcdcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcb = ac + bc;\n    long acbcdcbcbcbcd\
    \ = ac + bd;\n    long acbcdcbcbcbcbd = ac + bd;\n    long acbcdcbcbcbcbc = ac\
    \ + bc;\n    long acbcdcbcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcbcb = ac +\
    \ bc;\n    long acbcdcbcbcbcbcd = ac + bd;\n    long acbcdcbcbcbcbcbd = ac + bd;\n\
    \    long acbcdcbcbcbcbcbc = ac + bc;\n    long acbcdcbcbcbcbcbcd = ac + bd;\n\
    \    long ", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return\
    \ false;\n    long e = Math.sqrt(d);\n    return ((b * b - 4 * a * c) > 0 && (b\
    \ * b + 4 * a * c) < e || \n            (b * b - 4 * a * c) > 0 && (b * b + 4\
    \ * a * c) > e || \n            (b * b + 4 * a * c) < e && (b * b - 4 * a * c)\
    \ > 0);\n}", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long cb = abs(c - b);\n    \n    if (ab == ac)\n    {\n\
    \        if (ab == bc)\n        {\n            if (ab == cb)\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            return false;\n        }\n    }\n    else\n    {\n        return\
    \ false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm,geometry |>\n<| c |>\nThis\
    \ code does not work. Try it with `right_angle_triangle(2L, 3L, 4L)` which should\
    \ return `true` but your code returns `false`.\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it before posting it. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| c |>\nI tested it again and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| c |>\nI tested it again and it returns true for right_angle_triangle(2L,\
    \ 3L, 4L) but false for right_angle_triangle(2L, 3L, 5L). So I guess your code\
    \ is wrong.\n<|/ c |>\n<| a tags=c++,algorithm,geometry |>\nI believe that this\
    \ is what you are looking for:\n<code>", "{\n    long ab = a - b;\n    long ac\
    \ = a - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac +\
    \ bc;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n    long acb = acb\
    \ + ac;\n    long acb = acb + ab;\n    long acb = acb + ac;\n    long acb = acb\
    \ + ab;\n    long acb = acb + ac;\n    long acb = acb + ab;\n", "{\n    long ab\
    \ = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long\
    \ abc = abs(ab + ac + bc);\n    long acb = abs(c - b);\n    long bcb = abs(b -\
    \ c);\n    long abbc = abs(ab + bc + bc);\n    long acbc = abs(c - b);\n    long\
    \ bcab = abs(b - c);\n    long cabb = abs(c - b);\n    long abcab = abs(ab + cab\
    \ + cab);\n    long accab = abs(c - a);\n    long bcabc = abs(b - c);\n    long\
    \ cabbc = abs(c - b);\n    long abcabc = abs(ab + cab + cab);\n    long accabc\
    \ = abs(c - a);\n    long bcabcb = abs(b - c);\n    long cabbcb = abs(c - b);\n\
    \    long abcabcb = abs(ab + cab + cab);\n    long accabcb = abs(c - a);\n   \
    \ long bcabcbc = abs(b - c);\n    long cabbcbc = abs(c - b);\n    long abcabcbc\
    \ = abs(ab + cab + cab);\n    long accabcbc = abs(c - a);\n    long bcabcbcb =\
    \ abs(b - c);\n    long cabbcbcb = abs(c - b);\n    long abcabcbcb = abs(ab +\
    \ cab + cab);\n    long accabcbcb = abs(c - a);\n    long bcabcbcbc = abs(b -\
    \ c);\n    long cabbcbcbc = abs(c - b);\n    long abcabcbcbc = abs(ab + cab +\
    \ cab);\n    long accabcbcbc = abs(c - a);\n    long bcabcbcbcb = abs(b - c);\n\
    \    long cabbcbcbcb = abs(c - b);\n    long abcabcbcbcb = abs(ab + cab + cab);\n\
    \    long accabcbcbcb = abs(c - a);\n    long bcabcbcbcbc = abs(b - c);\n    long\
    \ cabbcbcbcbc = abs(c - b);\n    long abcabcbcbcbc = abs(ab + cab + cab);\n  \
    \  long accabcbcbcbc = abs(c - a);\n    long bcabcbcbcbcb = abs(b - c);\n    long\
    \ cabbcbcbcbcb = abs(c - b);\n    long abcabcbcbcbcb = abs(ab + cab + cab);\n\
    \    long accabcbcbcbcb = abs(c - a);\n    long ", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + ac;\n\
    \    long bca = bc + ab;\n    long abbc = abc + bca;\n    long abcab = abbc +\
    \ abbc;\n    long abcabc = abcab + abcab;\n    long abcabcb = abcabca + abcabcb;\n\
    \    long abcabcbb = abcabcbb + abcabcbb;\n    long abcabcbbc = abcabcbbc + abcabcbbc;\n\
    \    long abcabcbbcd = abcabcbbcd + abcabcbbcd;\n    long abcabcbbcde = abcabcbbcde\
    \ + abcabcbbcde;\n    long abcabcbbcdef = abcabcbbcdef + abcabcbbcdef;\n    long\
    \ abcabcbbcdefg = abcabcbbcdef + abcabcbbcdefg;\n    long abcabcbbcdefgh = abcabcbbcdef\
    \ + abcabcbbcdefgh;\n    long abcabcbbcdefghi = abcabcbbcdef + abcabcbbcdefghi;\n\
    \    long abcabcbbcdefghij = abcabcbbcdef + abcabcbbcdefghij;\n    long abcabcbbcdefghijk\
    \ = abcabcbbcdef + abcabcbbcdefghijk;\n    long abcabcbbcdefghijkl = abcabcbbcdef\
    \ + abcabcbbcdefghijkl;\n    long abcabcbbcdefghijkll = abcabcbbcdef + abcabcbbcdefghijkll;\n\
    \    long abcabcbbcdefghijkllm = abcabcbbcdef + abcabcbbcdefghijkllm;\n    long\
    \ abcabcbbcdefghijkllmm = abcabcbbcdef + abcabcbbcdefghijkllmm;\n    long abcabcbbcdefghijkllmmn\
    \ = abcabcbbcdef + abcabcbbcdefghijkllmmn;\n    long abcabcbbcdefghijkllmmnm =\
    \ abcabcbbcdef + abcabcbbcdef", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = Math.sqrt(d);\n    return ((b * b\
    \ - 4 * a * c) > 0 && (b * b + 4 * a * c) < e && (b - c) > 0 && (b - c) < e);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(b - c);\n    long abbc = abs(b - ab);\n    long acbc = abs(c - ac);\n  \
    \  long acab = abs(c - ab);\n    long acbba = abs(b - ac);\n    long acbab = abs(b\
    \ - ab);\n    long acbabc = abs(c - ac);\n    long acbabb = abs(b - ac);\n   \
    \ long acbabab = abs(b - ab);\n    long acbabac = abs(c - ac);\n    long acbababc\
    \ = abs(b - ab);\n    long acbababb = abs(c - ac);\n    long acbababba = abs(b\
    \ - ab);\n    long acbababbc = abs(c - ac);\n    long acbababbca = abs(b - ab);\n\
    \    long acbababbcab = abs(c - ac);\n    long acbababbcaba = abs(b - ab);\n \
    \   long acbababbcabab = abs(c - ac);\n    long acbababbcababc = abs(b - ab);\n\
    \    long acbababbcababca = abs(c - ac);\n    long acbababbcababcab = abs(b -\
    \ ab);\n    long acbababbcababcabc = abs(c - ac);\n    long acbababbcababcabca\
    \ = abs(b - ab);\n    long acbababbcababcabcabcab = abs(c - ac);\n    long acbababbcababcabcabcaba\
    \ = abs(b - ab);\n    long acbababbcababcabcabcabab = abs(c - ac);\n    long acbababbcababcabcabcababc\
    \ = abs(b - ab);\n    long acbababbcababcabcabcababca = abs(c - ac);\n    long\
    \ acbababbcababcabcabcababcab = abs(b - ab);\n    long acbababbcababcabcabcababcabc\
    \ = abs(c - ac);\n    long acbababbcababcabcabcababcabca = abs(b - ab);\n    long\
    \ acbababbcababcabcabcababcabcab = abs(c - ac);\n    long acbababbcababcabcabcababcabcabc\
    \ = abs(b - ab);\n    long acbab", "{\n    long d = b * b - 4 * a * c;\n    if\
    \ (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = b +\
    \ e * Math.sqrt(b * b - 4 * a * c);\n    long g = a + e * Math.sqrt(b * b - 4\
    \ * a * c);\n    if (f < 0)\n        return false;\n    if (g < 0)\n        return\
    \ false;\n    if (f > g)\n        return false;\n    if (f == g)\n        return\
    \ true;\n    long h = f - g;\n    if (h > 0)\n        return false;\n    if (h\
    \ == 0)\n        return true;\n    long i = f + g;\n    if (i > 0)\n        return\
    \ false;\n    if (i == 0)\n        return true;\n    long j = (f - g) / 2;\n \
    \   if (j > 0)\n        return false;\n    if (j == 0)\n        return true;\n\
    \    long k = f + j;\n    if (k > 0)\n        return false;\n    if (k == 0)\n\
    \        return true;\n    long l = f - j;\n    if (l > 0)\n        return false;\n\
    \    if (l == 0)\n        return true;\n    long m = f + j;\n    if (m > 0)\n\
    \        return false;\n    if (m == 0)\n        return true;\n    long n = f\
    \ - j;\n    if (n > 0)\n        return false;\n    if (n == 0)\n        return\
    \ true;\n    long o = f + j;\n    if (o > 0)\n        return false;\n    if (o\
    \ == 0)\n        return true;\n    long p = f - j;\n    if (p > 0)\n        return\
    \ false;\n    if (p == 0)\n        return true;\n    long q = f + j;\n    if (q\
    \ > 0)\n        return false;\n    if (q == 0)\n        return true;\n    long\
    \ r = f - j;\n    if (r > 0)\n        return false;\n    if (r == 0)\n       \
    \ return true;\n    long s = f + j;\n    if (s > 0)\n        return false;\n \
    \   if (s == 0)\n        return true;\n    long t = f - j;\n    if (t > 0)\n \
    \       return false;\n    if (t == 0)\n        return true;\n    long u = f +\
    \ j;\n    if (u > 0)\n        return false;\n    if (u == 0)\n        return true;\n\
    \    long v = f - j;\n    if (v > 0)\n        return false;\n    if (v == 0)\n\
    \        return true;\n    long w = f + j;\n    if (w > 0)\n        return false;\n\
    \    if (w == 0)\n        return true;\n    long x = f - j;\n    if (x > 0)\n\
    \        return false;\n    if (x == 0)\n        return true;\n    long y = f\
    \ + j;\n    if (y > 0)\n        return false;\n    if (y == 0)\n        return\
    \ true;\n    long z = f - j;\n    if (z > 0)\n        return false;\n    if (z\
    \ == 0)\n        return true;\n    long a = f + j;\n    if (a > 0)\n        return\
    \ false;", "{\n    long side1 = b - a;\n    long side2 = c - b;\n    long side3\
    \ = a - c;\n    \n    long angle1 = std.math.angle(side1, side2, side3);\n   \
    \ long angle2 = std.math.angle(side2, side1, side3);\n    long angle3 = std.math.angle(side3,\
    \ side1, side2);\n    \n    if (angle1 < angle2 && angle1 < angle3)\n        return\
    \ true;\n    else if (angle2 < angle1 && angle2 < angle3)\n        return true;\n\
    \    else if (angle3 < angle1 && angle3 < angle2)\n        return true;\n    \n\
    \    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,geometry,trigonometry,math\
    \ |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n\
    \    long e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c\
    \ + e) / (2 * a);\n    long h = (b - e) / (2 * a);\n    return ((f < 0 && g <\
    \ 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\n</code>\n<|/ a tags=c#,math,geometry\
    \ |>\n<| c |>\nThis code does not work. Try it with the input `right_angle_triangle(2L,\
    \ 1L, 3L)`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try it yourself\
    \ here: http://ideone.com/yK6Uk\n<|/ c |>\n<| c |>\nIt doesn't work for `right_angle_triangle(2L,\
    \ 1L, 3L)`\n<|/ c |>\n<| c |>\nIt works for me. Try it yourself here: http://ideone.com/yK6Uk\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it yourself here: http://ideone.com/yK6Uk\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n\
    \    long acbc = acb * bc;\n    long abbc = abb * bc;\n    long abcab = abcab\
    \ * bc;\n    long acbcab = acbcab * bc;\n    long acbcabc = acbcabc * bc;\n  \
    \  long abcabcb = abcabcb * bc;\n    long abcabcba = abcabcba * bc;\n    long\
    \ acbcabcba = acbcabcba * bc;\n    long acbcabcbac = acbcabcbac * bc;\n    long\
    \ abcabcbaca = abcabcbaca * bc;\n    long acbcabcbaca = acbcabcbaca * bc;\n  \
    \  long acbcabcbacab = acbcabcbacab * bc;\n    long acbcabcbacabc = acbcabcbacabc\
    \ * bc;\n    long abcabcbacabca = abcabcbacabca * bc;\n    long acbcabcbacabca\
    \ = acbcabcbacabca * bc;\n    long acbcabcbacabcab = acbcabcbacabcab * bc;\n \
    \   long acbcabcbacabcabc = acbcabcbacabcabc * bc;\n    long abcabcbacabcabca\
    \ = abcabcbacabcabca * bc;\n    long acbcabcbacabcabca = acbcabcbacabcabca * bc;\n\
    \    long acbcabcbacabcabcab = acbcabcbacabcabcab * bc;\n    long acbcabcbacabcabcabc\
    \ = acbcabcbacabcabcabc * bc;\n    long abcabcbacabcabcabca = abcabcbacabcabcabca\
    \ * bc;\n    long acbcabcbacabcabcabca = acbcabcbacabcabcabca * bc;\n    long\
    \ acbcabcbacabcabcabcab = acbcabcbacabcabcabcab * bc;\n    long acbcabcbacabcabcabcabc\
    \ = acbcabcbacabcabcabcabc * bc;\n", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n\
    \    long abac = ab - ac;\n    long acab = ac - ab;\n    long abcab = ab - abc;\n\
    \    long acabc = ac - abc;\n    long abcabc = ab - abc;\n    long acabcb = ac\
    \ - abc;\n    long abcabcb = ab - abc;\n    long acabcba = ac - abca;\n    long\
    \ abcabcba = ab - abca;\n    long acabcbac = ac - abcab;\n    long abcabcbac =\
    \ ab - abcab;\n    long acabcbaca = ac - abcabc;\n    long abcabcbaca = ab - abcabc;\n\
    \    long acabcbacab = ac - abcabcba;\n    long abcabcbacab = ab - abcabcba;\n\
    \    long acabcbacabc = ac - abcabcbac;\n    long abcabcbacabc = ab - abcabcbac;\n\
    \    long acabcbacabca = ac - abcabcbaca;\n    long abcabcbacabca = ab - abcabcbaca;\n\
    \    long acabcbacabcab = ac - abcabcbacab;\n    long abcabcbacabcab = ab - abcabcbacab;\n\
    \    long acabcbacabcabc = ac - abcabcbacabc;\n    long abcabcbacabcabc = ab -\
    \ abcabcbacabc;\n    long acabcbacabcabca = ac - abcabcbacabca;\n    long abcabcbacabcabca\
    \ = ab - abcabcbacabca;\n    long acabcbacabcabcab = ac - abcabcbacabcab;\n  \
    \  long abcabcbacabcabcab = ab - abcabcbacabcab;\n    long acabcbacabcabcabc =\
    \ ac - abcabcbacabcabc;\n    long abcabcbacabcabcabc = ab - abcabcbacabcabc;\n\
    \    long acabcbacabcabcabca = ac - abcabcbacabcabca;\n    long abcabcbacabcabcabca\
    \ = ab - abcabcba", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long abc = ab + bc;\n    long acb = ac + ab;\n\
    \    long ac2ab = ac * ab;\n    long ac2bc = ac * bc;\n    long ac2abc = ac *\
    \ abc;\n    long ac2bab = ac * bab;\n    long ac2acb = ac * acb;\n    long ac2ac2ab\
    \ = ac * ac2ab;\n    long ac2b2ab = ac * ac2b;\n    long ac2b2ac = ac * ac2bc;\n\
    \    long ac2b2ac2ab = ac * ac2b2ab;\n    long ac2ac2b2ab = ac * ac2ac2b;\n  \
    \  long ac2b2ac2abc = ac * ac2b2ac2ab;\n    long ac2b2ac2b2abc = ac * ac2b2ac2b2ab;\n\
    \    long ac2b2ac2b2ab2c = ac * ac2b2ac2b2ab2c;\n    long ac2b2ac2b2ab2cb = ac\
    \ * ac2b2ac2b2ab2cb;\n    long ac2b2ac2b2ab2cbb = ac * ac2b2ac2b2ab2cbb;\n   \
    \ long ac2b2ac2b2ab2cbbc = ac * ac2b2ac2b2ab2cbbc;\n    long ac2b2ac2b2ab2cbbcb\
    \ = ac * ac2b2ac2b2ab2cbbcb;\n    long ac2b2ac2b2ab2cbbcbc = ac * ac2b2ac2b2ab2cbbcbc;\n\
    \    long ac2b2ac2b2ab2cbbcbcb = ac * ac2b2ac2b2ab2cbbcbcb;\n    long ac2b2ac2b2ab2cbbcbcbc\
    \ = ac * ac2b2ac2b2ab2cbbcbcbc;\n    long ac2b2ac2b2ab2cbbcbcbcb = ac * ac2b2ac2b2ab2cbbcbcbcb;\n\
    \    long ac2b2ac2b2ab2cbbcbcbcbc = ac * ac2b2ac2b2ab2cbbcbcbcbc;\n    long ac2b2ac2b2ab2cbbcbcbcbcb\
    \ = ac * ac2b2ac2b2ab2c", "{\n    long ab = abs(b - a);\n    long ac = abs(c -\
    \ a);\n    long bc = abs(b - c);\n    long ad = abs(d - a);\n    long bd = abs(b\
    \ - d);\n    long cd = abs(c - d);\n    long abc = ab + ac;\n    long bcd = bc\
    \ + cd;\n    long abd = ab + bd;\n    long acd = ac + cd;\n    long abbc = abb\
    \ + bcc;\n    long abbd = abb + bcd;\n    long abcc = abc + cdd;\n    long abbcc\
    \ = abbcc + bcc;\n    long abbccd = abbccd + bcd;\n    long abccd = abccd + cdd;\n\
    \    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long\
    \ abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd\
    \ = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd\
    \ + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n\
    \    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long\
    \ abcccd = abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd =\
    \ abcccd + cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd +\
    \ cdd;\n    long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n \
    \   long abbcccd = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd\
    \ = abbcccd + cdd;\n    long abcccd = abcccd + cdd;\n    long abbcccd = abbcccd\
    \ + cdd;\n    long ab", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n\
    \        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e) / (2\
    \ * a);\n    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f >\
    \ 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nThis code does\
    \ not work. Try it with `right_angle_triangle(2L, 1L, 3L)`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Are you sure you copied the code correctly? I tested\
    \ it with `right_angle_triangle(2L, 1L, 3L)` and it returned `true`.\n<|/ c |>\n\
    <| c |>\nYes, I copied the code correctly. Maybe the problem is with my compiler.\
    \ I'm using Visual Studio 2015.\n<|/ c |>\n<| c |>\nI tested it on Visual Studio\
    \ 2015 and it works fine. Are you sure you copied the code correctly? I tested\
    \ it with `right_angle_triangle(2L, 1L, 3L)` and it returned `true`.\n<|/ c |>\n\
    <| c |>\nI tested it on Visual Studio 2015 and it works fine. Are you sure you\
    \ copied the code correctly? I tested it with `right_angle_triangle(2L, 1L, 3L)`\
    \ and it returned `true`.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < ", "{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) - 4\
    \ * a * c) / d;\n    return e < 0;\n}", "{\n    long ab = abs(b - a);\n    long\
    \ ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n   \
    \ \n    if (ab == ac && ab == bc && ab == cb) return true;\n    else return false;\n\
    }", "{\n    long ab, bc, ac, ca;\n    \n    ab = b - a;\n    bc = c - b;\n   \
    \ ac = a - c;\n    ca = c - a;\n    \n    return (ab * bc > ab * ac) && (ab *\
    \ ca > bc * ac);\n}", "{\n    long ab = a - b;\n    long ac = a - c;\n    long\
    \ bc = b - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc\
    \ = acb * bc;\n    long acbcab = acbc * ab;\n    long acbcabc = acbcab * bc;\n\
    \    long acbcabcb = acbcabcb * bc;\n    long acbcabcbc = acbcabcbc * bc;\n  \
    \  long acbcabcbcb = acbcabcbcb * bc;\n    long acbcabcbcbc = acbcabcbcbc * bc;\n\
    \    long acbcabcbcbcb = acbcabcbcbcb * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long acbcabcbcbcbcb\
    \ = acbcabcbcbcbcb * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n \
    \   long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcb", "{\n    long d = b * b - 4 * a * c;\n    if (d <\
    \ 0)\n        return false;\n    long e = Math.sqrt(d);\n    long f = (b + e *\
    \ c) / a;\n    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f >\
    \ 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry,math |>\n<| c |>\nThis doesn't\
    \ work. Try it with `right_angle_triangle(2L, 1L, 3L)`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Can you give me an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\n`right_angle_triangle(2L, 1L, 3L)` returns `true`, but `right_angle_triangle(2L,\
    \ 1L, 2L)` returns `false`. So it fails for some edge cases.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Thanks for pointing that out. I updated my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer again. Thanks for pointing that out. I also\
    \ added a link to a C# implementation of this algorithm.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThis can be done by finding the equation of the line segment connecting\
    \ the two points and then finding the angle of the line segment with the x-axis.\
    \ If the angle is greater than 90 degrees, then the two points are collinear.\n\
    <|/ a tags=c#,geometry,math |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(2L,\
    \ 1L, 3L)`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I updated my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ algorithm is pretty simple. Just find the distance between each point and calculate\
    \ the angle between each point and the x-axis. If the angle is greater than 90\
    \ degrees, then the two points are collinear.\n<code>", "{\n    long d = b * b\
    \ - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b * b) -\
    \ 4 * a * c) / d;\n    return e < 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,geometry\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n    long\
    \ g = a * a + b * b - c * c;\n    if (g < 0)\n        return false;\n    long\
    \ h = sqrt(g);\n    long i = a * h;\n    long j = b * h;\n    long k = c * h;\n\
    \    long l = a * k;\n    long m = b * k;\n    long n = c * k;\n    long o = a\
    \ * l;\n    long p = b * l;\n    long q = c * l;\n    long r = a * m;\n    long\
    \ s = b * m;\n    long t = c * m;\n    long u = a * n;\n    long v = b * n;\n\
    \    long w = c * n;\n    long x = a * o;\n    long y = b * o;\n    long z = c\
    \ * o;\n    long a = a * p;\n    long b = b * p;\n    long c = c * p;\n    long\
    \ d = a * q;\n    long e = b * q;\n    long f = c * q;\n    long g = a * r;\n\
    \    long h = b * r;\n    long i = c * r;\n    long j = a * s;\n    long k = b\
    \ * s;\n    long l = c * s;\n    long m = a * t;\n    long n = b * t;\n    long\
    \ o = c * t;\n    long p = a * u;\n    long q = b * u;\n    long r = c * u;\n\
    \    long s = a * v;\n    long t = b * v;\n    long u = c * v;\n    long v = a\
    \ * w;\n    long w = b * w;\n    long x = c * w;\n    long y = a * x;\n    long\
    \ z = b * x;\n    long a = a * y;\n    long b = b * y;\n    long c = c * y;\n\
    \    long d = a * z;\n    long e = b * z;\n    long f = c * z;\n    long g = a\
    \ * e;\n    long h = b * e;\n    long i = c * e;\n    long j = a * f;\n    long\
    \ k = b * f;\n    long l = c * f;\n    long m = a * g;\n    long n = b * g;\n\
    \    long o = ", "{\n    long angle;\n    angle = atan2(c-b, a-b); \n    if (angle\
    \ < 0)\n        angle += pi;\n    return angle > pi / 2;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work. Try it with `right_angle_triangle(3, 4, 5)`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code.\n<|/ c |>\n\
    <| a tags=c++,geometry |>\n<code>", "{\n    long ab = a - b;\n    long ac = a\
    \ - c;\n    long bc = b - c;\n    long abc = ab + bc;\n    long acb = ac - bc;\n\
    \    long abac = ab + ac;\n    long acab = ac - ab;\n    long abcab = ab + bc;\n\
    \    long acbca = ac - bc;\n    long abcabc = ab + ac;\n    long acbcab = ac -\
    \ bc;\n    long abcabcd = ab + ac;\n    long acbcabd = ac - bc;\n    long abcabcde\
    \ = ab + ac;\n    long acbcabde = ac - bc;\n    long abcabcdef = ab + ac;\n  \
    \  long acbcabdef = ac - bc;\n    long abcabcdefg = ab + ac;\n    long acbcabdefg\
    \ = ac - bc;\n    long abcabcdefgh = ab + ac;\n    long acbcabdefgh = ac - bc;\n\
    \    long abcabcdefghi = ab + ac;\n    long acbcabdefghi = ac - bc;\n    long\
    \ abcabcdefghij = ab + ac;\n    long acbcabdefghij = ac - bc;\n    long abcabcdefghijk\
    \ = ab + ac;\n    long acbcabdefghijk = ac - bc;\n    long abcabcdefghijkl = ab\
    \ + ac;\n    long acbcabdefghijkl = ac - bc;\n    long abcabcdefghijkm = ab +\
    \ ac;\n    long acbcabdefghijkm = ac - bc;\n    long abcabcdefghijkn = ab + ac;\n\
    \    long acbcabdefghijkn = ac - bc;\n    long abcabcdefghijkno = ab + ac;\n \
    \   long acbcabdefghijkno = ac - bc;\n    long abcabcdefghijknop = ab + ac;\n\
    \    long acbcabdefghijknop = ac - bc;\n    long abcabcdefghijknopq = ab + ac;\n\
    \    long acbcabdefghijknopq = ac - bc;\n    long abcabcdefghijknopr = ab + ac;\n\
    \    ", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n\
    \    long f = (2 * b * b - a * c) / d;\n    if (f < 0)\n        return false;\n\
    \    long g = -(b * b + a * c) / d;\n    if (g < 0)\n        return false;\n \
    \   long h = -(b * b - a * c) / d;\n    if (h < 0)\n        return false;\n  \
    \  long i = a * a + b * b + c * c - 4 * a * b;\n    if (i < 0)\n        return\
    \ false;\n    long j = ((b * b) - 4 * a * c) / i;\n    if (j < 0)\n        return\
    \ false;\n    long k = ((b * b) - 4 * a * c) / j;\n    if (k < 0)\n        return\
    \ false;\n    long l = a * a + b * b + c * c - 4 * a * b;\n    if (l < 0)\n  \
    \      return false;\n    long m = ((b * b) - 4 * a * c) / l;\n    if (m < 0)\n\
    \        return false;\n    long n = a * a + b * b + c * c - 4 * a * b;\n    if\
    \ (n < 0)\n        return false;\n    long o = a * a + b * b + c * c - 4 * a *\
    \ b;\n    if (o < 0)\n        return false;\n    long p = a * a + b * b + c *\
    \ c - 4 * a * b;\n    if (p < 0)\n        return false;\n    long q = a * a +\
    \ b * b + c * c - 4 * a * b;\n    if (q < 0)\n        return false;\n    long\
    \ r = a * a + b * b + c * c - 4 * a * b;\n    if (r < 0)\n        return false;\n\
    \    long s = a * a + b * b + c * c - 4 * a * b;\n    if (s < 0)\n        return\
    \ false;\n    long t = a * a + b * b + c * c - 4 * a * b;\n    if (t < 0)\n  \
    \      return false;\n    long u = a * a + b * b + c * c - 4 * a * b;\n    if\
    \ (u < 0)\n        return false;\n    long v = a * a + b * b + c * c - 4 * a *\
    \ b;\n    if (v < 0)\n        return false;\n    long w = a * a + b * b + c *\
    \ c - 4 * a * b;\n    if (w < 0)\n        return false;\n    long x = a * a +\
    \ b * b + c * c - 4 * a * b;\n    if (x < 0)\n        return false;\n    long\
    \ y = a * a + b * b + c * c - 4 * a * b;\n    if (y < 0)\n        return false;\n\
    \    long z = a * a + b * b + c * c - 4 * a * b;\n    if (z < 0)", "{\n    long\
    \ side1 = abs(a) + abs(b) + abs(c);\n    long side2 = abs(a) + abs(b) - abs(c);\n\
    \    long side3 = abs(a) - abs(b) + abs(c);\n    long side4 = abs(a) - abs(b)\
    \ - abs(c);\n    long side5 = abs(a) + abs(b) - abs(c);\n    long side6 = abs(a)\
    \ - abs(b) + abs(c);\n    long side7 = abs(a) - abs(b) - abs(c);\n    long side8\
    \ = abs(a) + abs(b) + abs(c);\n    long side9 = abs(a) - abs(b) + abs(c);\n  \
    \  long side10 = abs(a) - abs(b) - abs(c);\n    long side11 = abs(a) + abs(b)\
    \ - abs(c);\n    long side12 = abs(a) - abs(b) + abs(c);\n    long side13 = abs(a)\
    \ - abs(b) - abs(c);\n    long side14 = abs(a) + abs(b) + abs(c);\n    long side15\
    \ = abs(a) - abs(b) + abs(c);\n    long side16 = abs(a) - abs(b) - abs(c);\n \
    \   long side17 = abs(a) + abs(b) + abs(c);\n    long side18 = abs(a) - abs(b)\
    \ + abs(c);\n    long side19 = abs(a) - abs(b) - abs(c);\n    long side20 = abs(a)\
    \ + abs(b) + abs(c);\n    long side21 = abs(a) - abs(b) + abs(c);\n    long side22\
    \ = abs(a) - abs(b) - abs(c);\n    long side23 = abs(a) + abs(b) - abs(c);\n \
    \   long side24 = abs(a) - abs(b) + abs(c);\n    long side25 = abs(a) - abs(b)\
    \ - abs(c);\n    long side26 = abs(a) + abs(b) - abs(c);\n    long side27 = abs(a)\
    \ - abs(b) + abs(c);\n    long side28 = abs(a) - abs(b) - abs(c);\n    long side29\
    \ = abs(a) + abs(b) + abs(c);\n    long side30 = abs(a) - abs(b) + abs(c);\n \
    \   long side31 = abs(a) - abs(b) - abs(c);\n    long side32 = abs(a) + abs(b)\
    \ + abs(c);\n    long side33 = abs(a) - abs(b) + abs(c);\n    long side34 = abs(a)\
    \ - abs(b) - abs(c);\n    long side35 = abs(a) + abs(b) + abs(c);\n    long side36\
    \ = abs(a) - abs(b) + abs(c);\n    long side37 = abs(a) - abs(b) - abs(c);\n \
    \   long side38", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n      \
    \  return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    return e < 0;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long angle1\
    \ = (a + b + c) / 2;\n    long angle2 = (a + b - c) / 2;\n    long angle3 = (a\
    \ - b - c) / 2;\n    \n    bool isRightAngle = angle1 == angle2 || angle1 == angle3\
    \ || angle2 == angle3;\n    \n    return isRightAngle;\n}", "{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a tags=c#,geometry\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would work if you had\
    \ a triangle with sides greater than 180 degrees.\n<|/ c |>\n<| c |>\nYes, it\
    \ would. But I didn't want to complicate the code too much. :)\n<|/ c |>\n<| c\
    \ |>\nI like this solution, however I wonder if it would work if you had a triangle\
    \ with sides greater than 180 degrees.\n<|/ c |>\n<| c |>\nYes, it would. But\
    \ I didn't want to complicate the code too much. :)\n<|/ c |>\n<| c |>\nI like\
    \ this solution, however I wonder if it would work if you had a triangle with\
    \ sides greater than 180 degrees.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>",
  "{\n    long side1 = (a + b + c) / 2;\n    long side2 = (b + c + a) / 2;\n    long\
    \ side3 = (c + a + b) / 2;\n    long side4 = side1;\n    long side5 = side2;\n\
    \    long side6 = side3;\n    long side7 = side4;\n    long side8 = side5;\n \
    \   long side9 = side6;\n    long side10 = side7;\n    long side11 = side8;\n\
    \    long side12 = side9;\n    long side13 = side10;\n    long side14 = side11;\n\
    \    long side15 = side12;\n    long side16 = side13;\n    long side17 = side14;\n\
    \    long side18 = side15;\n    long side19 = side16;\n    long side20 = side17;\n\
    \    long side21 = side18;\n    long side22 = side19;\n    long side23 = side20;\n\
    \    long side24 = side21;\n    long side25 = side22;\n    long side26 = side23;\n\
    \    long side27 = side24;\n    long side28 = side25;\n    long side29 = side26;\n\
    \    long side30 = side27;\n    long side31 = side28;\n    long side32 = side29;\n\
    \    long side33 = side30;\n    long side34 = side31;\n    long side35 = side32;\n\
    \    long side36 = side33;\n    long side37 = side34;\n    long side38 = side35;\n\
    \    long side39 = side36;\n    long side40 = side37;\n    long side41 = side38;\n\
    \    long side42 = side39;\n    long side43 = side40;\n    long side44 = side41;\n\
    \    long side45 = side42;\n    long side46 = side43;\n    long side47 = side44;\n\
    \    long side48 = side45;\n    long side49 = side46;\n    long side50 = side47;\n\
    \    long side51 = side48;\n    long side52 = side49;\n    long side53 = side50;\n\
    \    long side54 = side51;\n    long side55 = side52;\n    long side56 = side53;\n\
    \    long side57 = side54;\n    long side58 = side55;\n    long side59 = side56;\n",
  "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b -\
    \ c);\n    long acb = abs(c - b);\n    long abc = abs(b - c);\n    long abbc =\
    \ abs(b - b);\n    long acbc = abs(c - b);\n    long abac = abs(b - a);\n    long\
    \ abcab = abs(b - c);\n    long acbcab = abs(c - b);\n    long accabb = abs(c\
    \ - c);\n    long abcabc = abs(b - c);\n    long accabbc = abs(c - b);\n    long\
    \ abcabac = abs(b - c);\n    long accabbca = abs(c - b);\n    long abcabcab =\
    \ abs(b - c);\n    long accabbcab = abs(c - b);\n    long accabcabb = abs(c -\
    \ c);\n    long abcabcabc = abs(b - c);\n    long accabbcabc = abs(c - b);\n \
    \   long abcabcabca = abs(b - c);\n    long accabbcabca = abs(c - b);\n    long\
    \ abcabcabcab = abs(b - c);\n    long accabbcabcab = abs(c - b);\n    long accabcabbc\
    \ = abs(c - c);\n    long abcabcabcabc = abs(b - c);\n    long accabbcabcabc =\
    \ abs(c - b);\n    long abcabcabcabca = abs(b - c);\n    long accabbcabcabca =\
    \ abs(c - b);\n    long abcabcabcabcab = abs(b - c);\n    long accabbcabcabcab\
    \ = abs(c - b);\n    long accabcabbcabc = abs(c - c);\n    long abcabcabcabcabc\
    \ = abs(b - c);\n    long accabbcabcabcabc = abs(c - b);\n    long abcabcabcabcabca\
    \ = abs(b - c);\n    long accabbcabcabcabca = abs(c - b);\n    long abcabcabcabcabcab\
    \ = abs(b - c);\n    long accabbcabcabcabcab = abs(c - b);\n    long accabcabbcabcabc\
    \ = abs(c - c);\n    long abcabcabcabcabcabc = abs(b - c);\n    long accabbcabcabcabcabc\
    \ = abs(c - b);\n    long abcabcabcabcabcabca = abs(b - c);\n    long accabbcabcabcabcabca\
    \ = abs(c - b);\n    long abcabcabcabcabcabcab = abs(b - ", "{\n    long ab, bc,\
    \ ac;\n    \n    ab = b - a;\n    bc = c - b;\n    ac = a - c;\n    \n    if (ab\
    \ * bc > ab * ac)\n    {\n        return true;\n    }\n    \n    return false;\n\
    }", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b\
    \ - c);\n    long cb = abs(c - b);\n    long abc = ab + ac;\n    long bcb = bc\
    \ + cb;\n    long acb = ac + cb;\n    long abbc = ab + bc;\n    long bcbc = bc\
    \ + cb;\n    long acbc = ac + cb;\n    long abbcd = abbc + acb;\n    long bcbcd\
    \ = bcbc + acb;\n    long acbcd = acbc + acb;\n    long abbcdd = abbcd + acbc;\n\
    \    long bcbcd = bcbcd + acbc;\n    long acbcd = acbcd + acbc;\n    long abbcde\
    \ = abbcd + abbc;\n    long bcbcde = bcbcd + abbc;\n    long acbcde = acbcd +\
    \ abbc;\n    long abbcef = abbcde + abbcd;\n    long bcbcef = bcbcde + abbcd;\n\
    \    long acbcde = acbcde + abbcd;\n    long abbcef = abbcef + abbcd;\n    long\
    \ bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde + abbcd;\n    long abbcef\
    \ = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde\
    \ + abbcd;\n    long abbcef = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n\
    \    long acbcde = acbcde + abbcd;\n    long abbcef = abbcef + abbcd;\n    long\
    \ bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde + abbcd;\n    long abbcef\
    \ = abbcef + abbcd;\n    long bcbcef = bcbcef + abbcd;\n    long acbcde = acbcde\
    \ + abbcd;\n    long abbcef = abbcef + abbcd;\n    long bcbcef = bcbce", "{\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = Math.sqrt(d);\n    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2\
    \ * a);\n    return ((f >= 0 && f <= 1) || (g >= 0 && g <= 1));\n}", "{\n    long\
    \ ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n   \
    \ long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac\
    \ + bc);\n    long abcd = abs(abc + bcd);\n    long acbd = abs(acd + abc);\n \
    \   long acdbc = abs(acbd + acd);\n    long acdbcd = abs(acdbc + acbd);\n    long\
    \ acdbcda = abs(acdbcd + acdbc);\n    long acdbcdaa = abs(acdbcda + acdbc);\n\
    \    long acdbcdaaa = abs(acdbcdaa + acdbc);\n    long acdbcdaaab = abs(acdbcdaaab\
    \ + acdbc);\n    long acdbcdaaabc = abs(acdbcdaaabc + acdbc);\n    long acdbcdaaabcd\
    \ = abs(acdbcdaaabcd + acdbc);\n    long acdbcdaaabcdd = abs(acdbcdaaabcdd + acdbc);\n\
    \    long acdbcdaaabcddd = abs(acdbcdaaabcddd + acdbc);\n    long acdbcdaaabcdddd\
    \ = abs(acdbcdaaabcdddddd + acdbc);\n    long acdbcdaaabcddddd = abs(acdbcdaaabcddddd\
    \ + acdbc);\n    long acdbcdaaabcddddde = abs(acdbcdaaabcddddde + acdbc);\n  \
    \  long acdbcdaaabcdddddef = abs(acdbcdaaabcdddddef + acdbc);\n    long acdbcdaaabcdddddefg\
    \ = abs(acdbcdaaabcdddddefg + acdbc);\n    long acdbcdaaabcdddddefgh = abs(acdbcdaaabcdddddefgh\
    \ + acdbc);\n    long acdbcdaaabcdddddefghi = abs(acdbcdaaabcdddddefghi + acdbc);\n\
    \    long acdbcdaaabcdddddefghij = abs(acdbcdaaabcdddddefghij + acdbc);\n    long\
    \ acdbcdaaabcdddddefghijk = abs(acdbcdaaabcdddddefghijk + acdbc);\n    long acdbcdaaabcdddddefghijkl\
    \ = abs(ac", "{\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long\
    \ bc = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc + ab);\n\
    \    long acd = abs(ac + ab);\n    long abcd = abs(abc + bcd);\n    long acbd\
    \ = abs(acd + bc);\n    long acdbc = abs(acb + bc);\n    long acdbcd = abs(acdb\
    \ + bcd);\n    long acdbcda = abs(acdbc + abcd);\n    long acdbcdbc = abs(acdbca\
    \ + bcd);\n    long acdbcdbcd = abs(acdbcdb + abcd);\n    long acdbcdbcda = abs(acdbcdbc\
    \ + abcd);\n    long acdbcdbcdbc = abs(acdbcdbca + bcd);\n    long acdbcdbcdbcd\
    \ = abs(acdbcdbcdb + abcd);\n    long acdbcdbcdbcda = abs(acdbcdbcdbc + abcd);\n\
    \    long acdbcdbcdbcdbc = abs(acdbcdbcdbca + bcd);\n    long acdbcdbcdbcdbcd\
    \ = abs(acdbcdbcdbcdb + abcd);\n    long acdbcdbcdbcdbcda = abs(acdbcdbcdbcdbc\
    \ + abcd);\n    long acdbcdbcdbcdbcdbc = abs(acdbcdbcdbcdbca + bcd);\n    long\
    \ acdbcdbcdbcdbcdbcd = abs(acdbcdbcdbcdbcdb + abcd);\n    long acdbcdbcdbcdbcdbcda\
    \ = abs(acdbcdbcdbcdbcdbc + abcd);\n    long acdbcdbcdbcdbcdbcdbc = abs(acdbcdbcdbcdbcdbca\
    \ + bcd);\n    long acdbcdbcdbcdbcdbcdbcd = abs(acdbcdbcdbcdbcdbcdb + abcd);\n\
    \    long acdbcdbcdbcdbcdbcdbcda = abs(acdbcdbcdbcdbcdbcdbc + abcd);\n    long\
    \ acdbcdbcdbcdbcdbcdbcdbc = ", "{\n    long angle;\n    \n    angle = std.math.toDegrees(std.math.angle(std.math.radians(a),\
    \ std.math.radians(b), std.math.radians(c)));\n    \n    if (angle >= 90)\n  \
    \      return true;\n    \n    return false;\n}", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + ab);\n    long abcd\
    \ = abs(abc + bcd);\n    long acbd = abs(acd + bc);\n    long abcda = abs(abcd\
    \ + ac);\n    long acbda = abs(acbd + ab);\n    long acdbc = abs(acbd + bc);\n\
    \    long acdbca = abs(acdbc + ac);\n    long acdbcab = abs(acdbca + ab);\n  \
    \  long acdbcabc = abs(acdbcab + bc);\n    long acdbcabca = abs(acdbcabc + ac);\n\
    \    long acdbcabcab = abs(acdbcabca + ab);\n    long acdbcabcabc = abs(acdbcabcab\
    \ + bc);\n    long acdbcabcabca = abs(acdbcabcabc + ac);\n    long acdbcabcabcab\
    \ = abs(acdbcabcabca + ab);\n    long acdbcabcabcabc = abs(acdbcabcabcab + bc);\n\
    \    long acdbcabcabcabca = abs(acdbcabcabcabc + ac);\n    long acdbcabcabcabcab\
    \ = abs(acdbcabcabcabca + ab);\n    long acdbcabcabcabcabc = abs(acdbcabcabcabcab\
    \ + bc);\n    long acdbcabcabcabcabca = abs(acdbcabcabcabcabc + ac);\n    long\
    \ acdbcabcabcabcabcab = abs(acdbcabcabcabcabca + ab);\n    long acdbcabcabcabcabcabc\
    \ = abs(acdbcabcabcabcabcab + bc);\n    long acdbcabcabcabcabcabca = abs(acdbcabcabcabcabcab\
    \ + ac);\n    long acdbcabcabcabcabcabcab = abs(acdbcabcabcabcabcabca + ab);\n\
    \    long acdbcabcabcabcabcabcabc = abs(acdbcabcabcabcabcabcab + bc);\n    long\
    \ acdbcabcabcabcabcabcabca = abs(acdbcabcabcabcabcabcabc + ac);\n    long acdbcabcabcabcabcabcabcab\
    \ = abs(acdbcabcabcabcabcabcabcabca + ab);\n    long acdbcabcabcabcab", "{\n \
    \   long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb\
    \ = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc\
    \ = abb * bc;\n    long acbcbc = acbcb * bc;\n    long abcbc = abcb * bc;\n  \
    \  long acbcbcbc = acbcbcb * bc;\n    long abcbcbc = abcbcb * bc;\n    long acbcbcbcbc\
    \ = acbcbcbcb * bc;\n    long abcbcbcbc = abcbcbcb * bc;\n    long acbcbcbcbcbc\
    \ = acbcbcbcbcb * bc;\n    long abcbcbcbcbcbc = abcbcbcbcb * bc;\n    long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbc = abcbcbcbcbcb * bc;\n    long\
    \ acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcb\
    \ * bc;\n    long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcb * bc;\n    long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n    long\
    \ acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n    long abcbcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n    long acbcbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n    long abcbcbcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbcbc * bc;\n\
    \    long acbcbcbcbcbcbcbcbcbcbcbcbc = ac", "{\n    return ((b - a) * (c - b)\
    \ <= 0) && ((a - b) * (b - c) <= 0) && ((a - c) * (b - c) <= 0);\n}\n</code>\n\
    <|/ a tags=c++,algorithm,geometry |>\n<| c |>\nThis doesn't work if `a`, `b` and\
    \ `c` are equal.\n<|/ c |>\n<| c |>\n: It doesn't work for any three sides being\
    \ equal, which is what OP asked for. OP asked for \"right-angled triangle\", not\
    \ \"equilateral triangle\".\n<|/ c |>\n<| c |>\n: I see what you mean. Yes, this\
    \ doesn't work for any three sides being equal. I was just pointing out that OP\
    \ asked for \"right-angled triangle\", not \"equilateral triangle\".\n<|/ c |>\n\
    <| c |>\n: I see what you mean. Yes, this doesn't work for any three sides being\
    \ equal. I was just pointing out that OP asked for \"right-angled triangle\",\
    \ not \"equilateral triangle\".\n<|/ c |>\n<| c |>\n: I see what you mean. Yes,\
    \ this doesn't work for any three sides being equal. I was just pointing out that\
    \ OP asked for \"right-angled triangle\", not \"equilateral triangle\".\n<|/ c\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use Pythagoras theorem:\n<code>",
  "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b - c;\n    long abc\
    \ = ab * bc;\n    long acb = ac * bc;\n    long ac = ac * c;\n    long ab = ab\
    \ * c;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac *\
    \ b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * a;\n\
    \    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * b;\n \
    \   long abc = abc * ab;\n    long acb = acb * ac;\n    long ac = ac * c;\n  \
    \  long ab = ab * c;\n    long abc = abc * ab;\n    long acb = acb * ac;\n   \
    \ long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long\
    \ ac = ac * a;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac\
    \ = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n    long ac =\
    \ ac * c;\n    long ab = ab * c;\n    long abc = abc * ab;\n    long acb = acb\
    \ * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb *\
    \ ac;\n    long ac = ac * a;\n    long abc = abc * ab;\n    long acb = acb * ac;\n\
    \    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb * ac;\n \
    \   long ac = ac * c;\n    long ab = ab * c;\n    long abc = abc * ab;\n    long\
    \ acb = acb * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb\
    \ = acb * ac;\n    long ac = ac * a;\n    long abc = abc * ab;\n    long acb =\
    \ acb * ac;\n    long ac = ac * b;\n    long abc = abc * ab;\n    long acb = acb\
    \ * ac;\n    long ac = ac * ", "{\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    return\
    \ e < 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was about a right angle\
    \ triangle, not an equilateral triangle (which has two sides equal).\n<|/ c |>\n\
    <| c |>\nThe question was about a right angle triangle, not an equilateral triangle\
    \ (which has two sides equal).\n<|/ c |>\n<| c |>\nThe question was about a right\
    \ angle triangle, not an equilateral triangle (which has two sides equal).\n<|/\
    \ c |>\n<| a tags=c++,geometry |>\n<code>", "{\n    long d = b * b - 4 * a * c;\n\
    \    if (d < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n\
    \    if (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d;\n\
    \    if (f < 0)\n        return false;\n    long g = b * b - 4 * a * c;\n    if\
    \ (g < 0)\n        return false;\n    long h = ((b * b) - 4 * a * c) / g;\n  \
    \  if (h < 0)\n        return false;\n    long i = b * b - 4 * a * c;\n    if\
    \ (i < 0)\n        return false;\n    long j = (b * b) - 4 * a * c;\n    if (j\
    \ < 0)\n        return false;\n    long k = b * b - 4 * a * c;\n    if (k < 0)\n\
    \        return false;\n    long l = b * b - 4 * a * c;\n    if (l < 0)\n    \
    \    return false;\n    long m = b * b - 4 * a * c;\n    if (m < 0)\n        return\
    \ false;\n    long n = b * b - 4 * a * c;\n    if (n < 0)\n        return false;\n\
    \    long o = b * b - 4 * a * c;\n    if (o < 0)\n        return false;\n    long\
    \ p = b * b - 4 * a * c;\n    if (p < 0)\n        return false;\n    long q =\
    \ b * b - 4 * a * c;\n    if (q < 0)\n        return false;\n    long r = b *\
    \ b - 4 * a * c;\n    if (r < 0)\n        return false;\n    long s = b * b -\
    \ 4 * a * c;\n    if (s < 0)\n        return false;\n    long t = b * b - 4 *\
    \ a * c;\n    if (t < 0)\n        return false;\n    long u = b * b - 4 * a *\
    \ c;\n    if (u < 0)\n        return false;\n    long v = b * b - 4 * a * c;\n\
    \    if (v < 0)\n        return false;\n    long w = b * b - 4 * a * c;\n    if\
    \ (w < 0)\n        return false;\n    long x = b * b - 4 * a * c;\n    if (x <\
    \ 0)\n        return false;\n    long y = b * b - 4 * a * c;\n    if (y < 0)\n\
    \        return false;\n    long z = b * b - 4 * a * c;\n    if (z < 0)\n    \
    \    return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,geometry |>\n\
    <| c |>\nI believe this should be the accepted answer. Although it does require\
    \ a lot of calculations, it is the most efficient and accurate answer to the question.\n\
    <|/ c |>\n<| c |>\nI believe this should be the accepted answer. Although it does\
    \ require a lot of calculations, it is the most efficient and accurate answer\
    \ to the question.\n<|/ c |>", "{\n    long angle;\n    angle = atan2(b,a) - atan2(c,a);\n\
    \    return angle < -pi || angle > pi;\n}", "{\n    long angle;\n    angle = acos((b*b\
    \ + c*c - a*a) / (2.0*b*c));\n    return angle > M_PI_2;\n}", "{\n    return ((b\
    \ - a) * (c - b) <= 0) && ((a - b) * (b - c) <= 0) && ((a - c) * (b - c) <= 0);\n\
    }", "{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n\
    \    long e = ((b * b) - (4 * a * c));\n    if (e < 0)\n        return true;\n\
    \    long f = (d / 2);\n    long g = (e / 2);\n    if (g < 0)\n        return\
    \ false;\n    if (f < g)\n        return true;\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,geometry,trigonometry |>\n<| c |>\nI believe this fails for `right_angle_triangle(1,1,1)`\n\
    <|/ c |>\n<| c |>\nIt fails for `right_angle_triangle(1,1,1)` because `b * b -\
    \ 4 * a * c` is `0` which is not less than `0`.\n<|/ c |>\n<| c |>\nI believe\
    \ this fails for `right_angle_triangle(1,1,1)` because `b * b - 4 * a * c` is\
    \ `0` which is not less than `0`.\n<|/ c |>\n<| c |>\nI believe this fails for\
    \ `right_angle_triangle(1,1,1)` because `b * b - 4 * a * c` is `0` which is not\
    \ less than `0`.\n<|/ c |>\n<| c |>\nI believe this fails for `right_angle_triangle(1,1,1)`\
    \ because `b * b - 4 * a * c` is `0` which is not less than `0`.\n<|/ c |>\n<|\
    \ a tags=c++,geometry,trigonometry |>\n<code>", "{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(c -\
    \ b);\n    long abc = abs(b - c);\n    long abbc = abs(b - b);\n    long abac\
    \ = abs(b - a);\n    long acab = abs(c - a);\n    long acbc = abs(c - b);\n  \
    \  long abacb = abs(b - a);\n    long abacc = abs(b - c);\n    long abbcc = abs(b\
    \ - b);\n    long acabc = abs(c - a);\n    long acbcb = abs(c - b);\n    long\
    \ abacbc = abs(b - a);\n    long abacbc = abs(b - c);\n    long abbcc = abs(b\
    \ - b);\n    long acabbc = abs(c - a);\n    long acbcba = abs(c - b);\n    long\
    \ abacbca = abs(b - a);\n    long abacbca = abs(b - c);\n    long abbcca = abs(b\
    \ - b);\n    long acabbcca = abs(c - a);\n    long acbcbaa = abs(c - b);\n   \
    \ long abacbcab = abs(b - a);\n    long abacbcab = abs(b - c);\n    long abbccaa\
    \ = abs(b - b);\n    long acabbccaa = abs(c - a);\n    long acbcbaab = abs(c -\
    \ b);\n    long abacbcaba = abs(b - a);\n    long abacbcaba = abs(b - c);\n  \
    \  long abbccaab = abs(b - b);\n    long acabbccaab = abs(c - a);\n    long acbcbaaac\
    \ = abs(c - b);\n    long abacbcabab = abs(b - a);\n    long abacbcabab = abs(b\
    \ - c);\n    long abbccaaac = abs(b - b);\n    long acabbccaabb = abs(c - a);\n\
    \    long acbcbaaacb = abs(c - b);\n    long abacbcababc = abs(b - a);\n    long\
    \ abacbcababc = abs(b - c);\n    long abbccaaacb = abs(b - b);\n    long acabbccaabbc\
    \ = abs(c - a);\n    long acbcbaaacbc = abs(c - b);\n    long abacbcababbc = abs(b\
    \ - a);\n    long abacbcababbc = abs(b - c);", "{\n    long angle;\n    \n   \
    \ angle = acos((b*b + c*c - a*a) / (2.0*b*c));\n    \n    if (angle > M_PI) return\
    \ false;\n    \n    if (a < b) \n    {\n        if (a < c) \n        {\n     \
    \       if (b < c) return true;\n            else return false;\n        }\n \
    \       else return false;\n    }\n    else \n    {\n        if (b < c) \n   \
    \     {\n            if (a < c) return true;\n            else return false;\n\
    \        }\n        else return false;\n    }\n}\n</code>\n<|/ a tags=c++,geometry,trigonometry,math\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about a triangle with\
    \ sides a, b and c, not three sides a, b and c.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is correct, although I believe it can be simplified a bit. I'll\
    \ post an answer with my simplification.\n<|/ c |>\n<| a tags=c++,geometry,trigonometry,math\
    \ |>\n<code>", "{\n    long ab = a - b;\n    long ac = a - c;\n    long bc = b\
    \ - c;\n    long acb = ac * bc;\n    long abc = ab * bc;\n    long acbc = acb\
    \ * bc;\n    long acbcab = acbc * ab;\n    long acbcabc = acbcab * bc;\n    long\
    \ acbcabcb = acbcabcb * bc;\n    long acbcabcbc = acbcabcbc * bc;\n    long acbcabcbcb\
    \ = acbcabcbcb * bc;\n    long acbcabcbcbc = acbcabcbcbc * bc;\n    long acbcabcbcbcb\
    \ = acbcabcbcbcb * bc;\n    long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long\
    \ acbcabcbcbcbc = acbcabcbcbcbc * bc;\n    long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n\
    \    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcb"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
