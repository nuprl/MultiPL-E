name: HumanEval_116_sort_array
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
  \ to sort an array of non-negative integers according to\n    number of ones in\
  \ their binary representation in ascending order.\n    For similar number of ones,\
  \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
  \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
  \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L, 0L,\
  \ 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[] arr)\
  \ \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
  \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
  \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L,\
  \ 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
  \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
  \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
  \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
  \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
  \ 16L, 32L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[arr.length];\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    long sum = 0;\n    long temp = 0;\n    \n    while\
    \ (i < arr.length)\n    {\n        temp = arr[i];\n        j = i;\n        while\
    \ (j > 0 && temp == arr[j-1])\n        {\n            sum++;\n            j--;\n\
    \        }\n        \n        if (sum > 0)\n        {\n            result[k] =\
    \ sum;\n            sum = 0;\n        }\n        else\n        {\n           \
    \ result[k] = temp;\n        }\n        \n        k++;\n        i++;\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not answer the question. Your code does not sort\
    \ the array in ascending order as asked by the OP.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not answer the question. Your code does not sort\
    \ the array in ascending order as asked by the OP.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not answer the question. Your code does not sort\
    \ the array in ascending order as asked by the OP.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not answer the question. Your code does not sort\
    \ the array in ascending order as asked by the OP.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but this does not answer the question. Your code does not sort\
    \ the array in ascending order as asked by the OP.\n<|/ c |>\n<| a tags=sorting,java,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \            ones[i] = 1;\n        else\n            ones[i] = 0;\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \            result[i] = i;\n        else\n            zeros[i] = i;\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n\
    \        {\n            int j = zeros[i];\n            while(j != i)\n       \
    \     {\n                long tmp = result[j];\n                result[j] = result[i];\n\
    \                result[i] = tmp;\n                j = zeros[j];\n           \
    \ }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nI like this solution, although it does require a lot of extra memory\
    \ and extra time.\n<|/ c |>\n<| c |>\nI agree, it's very inefficient and memory\
    \ intensive. I'm looking for a more efficient solution. Thanks anyway!\n<|/ c\
    \ |>\n<| c |>\nI added a solution using only `int`s and `long`s.\n<|/ c |>\n<|\
    \ c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nI added a\
    \ solution using only `int`s and `long`s.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] a = {1, 5, 2,\
    \ 3, 4, 6};\n    int[] b = new int[a.length];\n    int[] c = new int[a.length];\n\
    \    int[] d = new int[a.length];\n    int[] e = new int[a.length];\n    int[]\
    \ f = new int[a.length];\n    int[] g = new int[a.length];\n    int[] h = new\
    \ int[a.length];\n    int[] i = new int[a.length];\n    int[] j = new int[a.length];\n\
    \    int[] k = new int[a.length];\n    int[] l = new int[a.length];\n    int[]\
    \ m = new int[a.length];\n    int[] n = new int[a.length];\n    int[] o = new\
    \ int[a.length];\n    int[] p = new int[a.length];\n", "{\n    long[] result =\
    \ new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int\
    \ n = arr.length;\n    \n    while (i < n) {\n        int count = 0;\n       \
    \ \n        while (j < n) {\n            if (arr[j] == 1) {\n                count++;\n\
    \                j++;\n            } else {\n                break;\n        \
    \    }\n        }\n        \n        if (count == 0) {\n            result[k]\
    \ = arr[i];\n            i++;\n        } else {\n            int count = 0;\n\
    \            \n            while (j < n) {\n                if (arr[j] == 0) {\n\
    \                    count++;\n                    j++;\n                } else\
    \ {\n                    break;\n                }\n            }\n          \
    \  \n            if (count == 0) {\n                result[k] = arr[i];\n    \
    \            i++;\n            } else {\n                long temp = 0;\n    \
    \            \n                while (j < n) {\n                    if (arr[j]\
    \ == 1) {\n                        temp += 1;\n                        j++;\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n                \n                while (j < n) {\n\
    \                    if (arr[j] == 0) {\n                        temp -= 1;\n\
    \                        j++;\n                    } else {\n                \
    \        break;\n                    }\n                }\n                \n\
    \                result[k] = temp;\n                i++;\n            }\n    \
    \    }\n        k++;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis is not the correct solution. Your solution sorts numbers in\
    \ descending order. But the question asks to sort numbers in ascending order.\n\
    <|/ c |>\n<| c |>\nThis solution is correct and works. I tested it on several\
    \ test cases and it works perfectly. Thanks!\n<|/ c |>\n<| c |>\nI tested it on\
    \ several test cases and it works perfectly. Thanks!\n<|/ c |>\n<| c |>\nI tested\
    \ it on several test cases and it works perfectly. Thanks!\n<|/ c |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\nThe solution is very simple. Just use bubble sort and sort it by comparing\
    \ two adjacent elements. \n<code>\ndef bubbleSort(arr):\n    length = len(arr)\n\
    \    for i in range(length):\n        for j in range(length - i - 1):\n      \
    \      if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1],\
    \ arr[j]\n    return arr\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the\
    \ correct solution. Your solution sorts numbers in descending order. But the question\
    \ asks to sort numbers in ascending order.\n<|/ c |>\n<| c |>\nThis solution is\
    \ correct and works. I tested it on several test case", "{\n    long[] result\
    \ = new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] > 1)\n\
    \        {\n            int j = 0;\n            while(j < i)\n            {\n\
    \                if(count[arr[j]] > 1)\n                {\n                  \
    \  int temp = arr[i];\n                    arr[i] = arr[j];\n                \
    \    arr[j] = temp;\n                }\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nI like your solution, however it fails for `sort_array([1L, 0L,\
    \ 2L, 3L, 4L])` which should return `[1L, 0L, 2L, 3L, 4L]`\n<|/ c |>\n<| c |>\n\
    Yes, I missed that case. Thanks for pointing it out. I fixed the code now.\n<|/\
    \ c |>\n<| c |>\nI like the solution, however I believe it can be optimized further\
    \ by not using two loops. One loop will suffice.\n<|/ c |>\n<| c |>\nI believe\
    \ it can be optimized further by not using two loops. One loop will suffice.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[arr.length];\n    int j = 0;\n    int k = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 0) \n        {\n \
    \           result[j++] = arr[i];\n        }\n        else\n        {\n      \
    \      int count = 0;\n            while(arr[i] != 0)\n            {\n       \
    \         arr[i] >>= 1;\n                count++;\n            }\n           \
    \ result[k++] = count;\n        }\n    }\n    for(int i = 0; i < j; i++)\n   \
    \ {\n        result[i] = result[i] ^ arr[i];\n    }\n    for(int i = j; i < arr.length;\
    \ i++)\n    {\n        result[i] = result[i] ^ arr[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\nI believe this can be done in O(n) time complexity and O(1) space complexity\
    \ by using a modified version of counting sort (also called radix sort).\nThe\
    \ idea is as follows:", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(arr[i] == 1)\n            ones++;\n        else\n           \
    \ zeros++;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n            ones = 0;\n   \
    \     }\n        else\n        {\n            result[i] = zeros;\n           \
    \ zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(result[i] > result[i + 1])\n        {\n            long temp = result[i];\n\
    \            result[i] = result[i + 1];\n            result[i + 1] = temp;\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n    long max\
    \ = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n  \
    \      if(arr[i] > 0)\n        {\n            ones += 1;\n            max += arr[i];\n\
    \        }\n        else\n        {\n            zeros += 1;\n            min\
    \ += arr[i];\n        }\n    }\n    long ones_count = ones;\n    long zeros_count\
    \ = zeros;\n    long max_count = max;\n    long min_count = min;\n    long ones_sum\
    \ = 0;\n    long zeros_sum = 0;\n    long max_sum = 0;\n    long min_sum = 0;\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n    \
    \    {\n            ones_sum += arr[i];\n        }\n        else\n        {\n\
    \            zeros_sum += arr[i];\n        }\n    }\n    long ones_average = ones_sum\
    \ / ones_count;\n    long zeros_average = zeros_sum / zeros_count;\n    long max_average\
    \ = max_sum / max_count;\n    long min_average = min_sum / min_count;\n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        result[i] = (arr[i] - ones_average) * ones_count + ones_average;\n  \
    \      }\n        else\n        {\n            result[i] = (arr[i] - zeros_average)\
    \ * zeros_count + zeros_average;\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    arr.sort()\n    count = 0\n    i = 0\n\
    \    while(i < len(arr)):\n        if(arr[i] == 1):\n            count += 1\n\
    \        i += 1\n    i = 0\n    while(i < len(arr)):\n        if(arr[i] == 0):\n\
    \            count -= 1\n        i += 1\n    i = 0\n    while(i < len(arr)):\n\
    \        if(arr[i] == 1):\n            arr[i] = 0\n        elif(arr[i] == 0):\n\
    \            arr[i] = 1\n        i += 1\n    i = 0\n    while(i < len(arr)):\n\
    \        if(arr[i] == 1):\n            arr[i] = 1\n        elif(arr[i] == 0):\n\
    \            arr[i] = 0\n        i += 1\n    i = 0\n    while(i < len(arr)):\n\
    \        if(arr[i] == 1):\n            arr[i] = 0\n        elif(arr[i] == 0):\n\
    \            arr[i] = 1\n        i += 1\n    i = 0\n    while(i < len(arr)):\n\
    \        if(arr[i] == 1):\n            arr[i] = 1\n        elif(arr[i] == ", "{\n\
    \    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        long ones = arr[i];\n        for(int j = i; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == ones)\n            {\n           \
    \     long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j]\
    \ = temp;\n            }\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = arr[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis doesn't work if there\
    \ are duplicates in the array.\n<|/ c |>\n<| c |>\nIt does work, just not in the\
    \ way you think it does. I tested it and it works.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are duplicates in the array. Try it with `sort_array([1L, 5L,\
    \ 2L, 3L, 4L, 2L])`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it and it works.\
    \ I added a test case to my answer.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are duplicates in the array. Try it with `sort_array([1L, 5L, 2L, 3L, 4L, 2L])`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = { 1L, 5L, 2L, 3L, 4L };\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = i;\n\
    \    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        for(int j = 0;\
    \ j < count[i]; ++j)\n        {\n            int tmp = result[i];\n          \
    \  int j = count[i];\n            int k = j;\n            while(j > 0)\n     \
    \       {\n                result[i] = result[j];\n                count[i] =\
    \ count[j];\n                j--;\n            }\n            result[i] = tmp;\n\
    \            count[i] = k;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis solution is O(n^2)\
    \ complexity, which is very slow for large arrays. It's better to sort it using\
    \ counting sort or radix sort or bucket sort.\n<|/ c |>\n<| c |>\n, you're right.\
    \ I didn't realize that counting sort is O(n). I'll edit my answer.\n<|/ c |>\n\
    <| c |>\n, I've edited my answer. Now it uses counting sort and it's O(n).\n<|/\
    \ c |>\n<| c |>\n, I've edited my answer. Now it uses counting sort and it's O(n).\n\
    <|/ c |>\n<| c |>\n, I've edited my answer. Now it uses counting sort and it's\
    \ O(n).\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        long v = arr[i];\n        if(v == 0)\n            ++zeros;\n \
    \       else if(v == 1)\n            ++ones;\n        else\n        {\n      \
    \      long v1 = ones;\n            long v2 = zeros;\n            ones = zeros\
    \ = 0;\n            while(true)\n            {\n                long m = std.math.min(v1,\
    \ v2);\n                if(m == v1)\n                    ++v1;\n             \
    \   else if(m == v2)\n                    ++v2;\n                else\n      \
    \              break;\n            }\n            long t = std.math.min(ones,\
    \ zeros);\n            long r = std.math.min(ones, zeros);\n            while(r\
    \ != 0)\n            {\n                long m = std.math.min(ones, zeros);\n\
    \                if(m == ones)\n                    ones = t;\n              \
    \  else if(m == zeros)\n                    zeros = t;\n                else\n\
    \                    break;\n                t = std.math.min(ones, zeros);\n\
    \                r = std.math.min(ones, zeros);\n            }\n            result[i]\
    \ = t;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,c#,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a bit.\
    \ For example, you can replace `long r = std.math.min(ones, zeros);` with `long\
    \ r = ones - zeros;` and then replace `while(r != 0)` with `while(ones != zeros)`.\
    \ Also, you can replace `long t = std.math.min(ones, zeros);` with `long t = ones\
    \ - zeros;` and then replace `while(t != 0)` with `while(ones != zeros)`. And\
    \ finally, you can replace `result[i] = t;` with `result[i] = ones - zeros;`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I didn't know about `min` function. I will try to\
    \ optimize it further.\n<|/ c |>\n<| c |>\n: I optimized it further, but still\
    \ have some bugs. I posted my new solution. Can you please check it?\n<|/ c |>\n\
    <| c |>\n: I fixed the bugs. Can you please check it?\n<|/ c |>\n<| c |>\n: I\
    \ fixed the bugs. Can you please check it?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static void Main(string[] args)\n{\n    int[] arr = new int[] { ", "{\n\
    \    long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n \
    \   int k = 0;\n    \n    while (i < arr.length) {\n        int count = 0;\n \
    \       \n        while (j < arr.length) {\n            if (arr[j] == 1) {\n \
    \               count++;\n            }\n            j++;\n        }\n       \
    \ \n        if (count == 0) {\n            result[k] = arr[i];\n            i++;\n\
    \        } else {\n            int count = 0;\n            \n            while\
    \ (j < arr.length) {\n                if (arr[j] == 0) {\n                   \
    \ count++;\n                }\n                j++;\n            }\n         \
    \   \n            if (count == 0) {\n                result[k] = arr[i];\n   \
    \             i++;\n            } else {\n                long temp = 0;\n   \
    \             \n                while (j < arr.length) {\n                   \
    \ temp = temp * 10 + arr[j];\n                    j++;\n                }\n  \
    \              \n                if (temp > 0) {\n                    result[k]\
    \ = temp;\n                    k++;\n                }\n            }\n      \
    \  }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java\
    \ |>\n<| c |>\nThe question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your solution sorts them in descending order.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order. Your solution sorts them\
    \ in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your solution sorts them in descending order.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your solution\
    \ sorts them in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of non-negative integers according to number of ones in their binary\
    \ representation in ascending order. Your solution sorts them in descending order.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones--;\n        }\n        else\n        {\n        \
    \    zeros--;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones--;\n        }\n        else\n        {\n        \
    \    zeros--;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones--;\n        }\n        else\n        {\n        \
    \    zeros--;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            result[i] = ones;\n      \
    \  }\n        else\n        {\n            result[i] = zeros;\n        }\n   \
    \ }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        result[i] = 0;\n        for(int j = 0; j < count[arr[i]]; ++j)\n\
    \        {\n            result[i] += 1 << j;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; ++i)\n    {\n        result[i] = arr[i] + result[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n\
    <| c |>\nThis solution doesn't work for negative numbers, it just sorts them in\
    \ ascending order.\n<|/ c |>\n<| c |>\n: It does work for negative numbers. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work for negative\
    \ numbers. Try it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers. Try it\
    \ yourself.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > 0)\n        {\n            ones++;\n      \
    \      max = Math.max(max, arr[i]);\n            min = Math.min(min, arr[i]);\n\
    \        }\n        else\n        {\n            zeros++;\n        }\n    }\n\
    \    long onesMax = ones * max;\n    long onesMin = ones * min;\n    long zerosMax\
    \ = zeros * max;\n    long zerosMin = zeros * min;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > 0)\n        {\n            long onesDiff =\
    \ arr[i] - onesMax;\n            long zerosDiff = arr[i] - zerosMax;\n       \
    \     long diff = onesDiff - zerosDiff;\n            if(diff > 0)\n          \
    \  {\n                result[i] = zerosMax + diff;\n            }\n          \
    \  else\n            {\n                result[i] = zerosMin + diff;\n       \
    \     }\n        }\n        else\n        {\n            long onesDiff = arr[i]\
    \ - onesMin;\n            long zerosDiff = arr[i] - zerosMin;\n            long\
    \ diff = onesDiff - zerosDiff;\n            if(diff > 0)\n            {\n    \
    \            result[i] = zerosMin + diff;\n            }\n            else\n \
    \           {\n                result[i] = zerosMax + diff;\n            }\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. For example,\
    \ `sort_array([-2L, -3L, -4L, -5L, -6L])` returns `[-6L, -5L, -4L, -3L, -2L]`\
    \ instead of `[-6L, -5L, -4L, -3L, -2L]`.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works correctly for negative numbers as well.\n\
    <|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    int i, j, k;\n    \n    for(i = 0; i < arr.length; ++i)\n    {\n        ones[i]\
    \ = 0;\n        for(j = i; j < arr.length; ++j)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                ones[i]++;\n                break;\n \
    \           }\n        }\n    }\n    \n    for(i = 0; i < arr.length; ++i)\n \
    \   {\n        for(j = i; j < arr.length; ++j)\n        {\n            if(ones[j]\
    \ > ones[i])\n            {\n                k = j;\n                while(ones[k]\
    \ > ones[i])\n                    k--;\n                \n                result[i]\
    \ = arr[k];\n                arr[k] = arr[i];\n                arr[i] = k;\n \
    \           }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_array([-2L, -3L,\
    \ -4L, -5L, -6L])`.\n<|/ c |>\n<| c |>\nI didn't test it for negative numbers.\
    \ I wrote it for positive numbers. But I guess it can be easily modified to work\
    \ for negative numbers. I'll try to do it.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to include a solution for negative numbers. I tested it and it works.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added a solution for negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a solution for negative numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n      \
    \  zeros[i] = 0;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    ones[arr[i]-1]++;\n        zeros[arr[i]-1]--;\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = ones[i];\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        result[i] = result[i] + zeros[i];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if the array is all zeroes. Try it with `sort_array([0L,\
    \ 0L, 0L, 0L, 0L])`.\n<|/ c |>\n<| c |>\nIt works. I tested it on `sort_array([0L,\
    \ 0L, 0L, 0L, 0L])` and it returned `[0, 0, 0, 0, 0]`.\n<|/ c |>\n<| c |>\nIt\
    \ works. I tested it on `sort_array([0L, 0L, 0L, 0L, 0L])` and it returned `[0,\
    \ 0, 0, 0, 0]`.\n<|/ c |>\n<| c |>\nIt works. I tested it on `sort_array([0L,\
    \ 0L, 0L, 0L, 0L])` and it returned `[0, 0, 0, 0, 0]`.\n<|/ c |>\n<| c |>\nIt\
    \ works. I tested it on `sort_array([0L, 0L, 0L, 0L, 0L])` and it returned `[0,\
    \ 0, 0, 0, 0]`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int j = 0;\n    int k = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n    \
    \    {\n            result[j++] = arr[i];\n        }\n        else\n        {\n\
    \            int count = 0;\n            while(arr[i] > 0)\n            {\n  \
    \              arr[i] >>= 1;\n                count++;\n            }\n      \
    \      int dec = (int)std.math.pow(2,count);\n            result[k++] = dec;\n\
    \        }\n    }\n    for(int i = 0; i < result.length; i++)\n    {\n       \
    \ result[i] = result[i] ^ arr[i];\n    }\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result[i] ^ arr[i];\n    }\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = result[i] ^ arr[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n\
    <| a tags=sorting,algorithm,arrays |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4, 6};\n    int[] result = new int[arr.length];\n\
    \    int j = 0;\n    int k = 0;\n    for (int i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] > 0) {\n            result[j++] = arr[i];\n        } else\
    \ {\n            int count = 0;\n            while (arr[i] > 0) {\n          \
    \      arr[i] >>= 1;\n                count++;\n            }\n            int\
    \ dec = (int) Math.pow(2,count);\n            result[k++] = dec;\n        }\n\
    \    }\n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i]\
    \ ^ arr[i];\n    }\n    for (int i = 0; i < result.length; i++) {\n        result[i]\
    \ = result[i] ^ arr[i];\n    }\n    for (int i = 0; i < result.length; i++) {\n\
    \        result[i] = result[i] ^ arr[i];\n    }\n    System.out.println(Arrays.toString(result));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4, 6};\n    int[] result = new int[arr.length];\n\
    \    int j = 0;\n    int k = 0;\n    for (int i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] > 0) {\n            result[j++] = arr[i];\n        } else\
    \ {\n            int count = 0;\n            while (arr[i] > 0) {\n          \
    \      arr[i] >>= 1;\n                count++;\n            }\n            int\
    \ dec = (int) Math.pow(2,count);\n            result[k++] = dec;\n        }\n\
    \    }\n    for (int i = 0; i < result.length; i++) {\n        result[i] = result[i]\
    \ ^ arr[i];\n    }\n    for (int i = 0; i < result.length; i++) {\n        result[i]\
    \ = result[i] ^ arr[i];\n    }\n    for (int i = 0; i < result.length; i++) {\n\
    \        result[i] = result[i] ^ arr[i];\n    }\n    System.out.println(Arrays.toString(result));",
  "{\n    long[] result = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int count = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        \n        if(count == 0)\n    \
    \    {\n            result[i] = arr[i];\n        }\n        else\n        {\n\
    \            int decimal = count * 10;\n            \n            for(int j =\
    \ 0; j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n  \
    \              {\n                    decimal -= arr[j];\n                }\n\
    \            }\n            \n            result[i] = decimal;\n        }\n  \
    \  }\n    \n    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[arr.length];\n    int pos = 0;\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        ones += arr[i];\n\
    \        zeros -= arr[i];\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(arr[i] == 1)\n        {\n            result[pos++] = ones;\n\
    \            ones = 0;\n        }\n        else\n        {\n            result[pos++]\
    \ = zeros;\n            zeros = 0;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[pos++] = arr[i];\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you for your answer. Your solution is very similar\
    \ to my own. My solution works only for positive numbers. Your solution works\
    \ only for negative numbers. I edited my question to make it more clear.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution for both positive and\
    \ negative numbers.\n<|/ c |>\n<| c |>\nThank you for your answer. Your solution\
    \ is very similar to my own. My solution works only for positive numbers. Your\
    \ solution works only for negative numbers. I edited my question to make it more\
    \ clear.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for both\
    \ positive and negative numbers.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ Your solution is very similar to my own. My solution works only for positive\
    \ numbers. Your solution works only for negative numbers. I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Solution\
    \ {\n    public static void main(String[] args) {\n        int[] arr = {1, 5,\
    \ 2, 3, 4, 6};\n        System.out.println(Arrays.toString(sort(arr)));\n    }",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n   \
    \     if(count[arr[i]] > 1)\n        {\n            int j = 0;\n            while(j\
    \ < i)\n            {\n                if(count[arr[j]] > 1)\n               \
    \ {\n                    int temp = arr[i];\n                    arr[i] = arr[j];\n\
    \                    arr[j] = temp;\n                    \n                  \
    \  temp = result[i];\n                    result[i] = result[j];\n           \
    \         result[j] = temp;\n                    \n                    temp =\
    \ count[arr[i]];\n                    count[arr[i]] = count[arr[j]];\n       \
    \             count[arr[j]] = temp;\n                    \n                  \
    \  temp = j;\n                    j = i;\n                    i = temp;\n    \
    \            }\n                else\n                {\n                    j++;\n\
    \                }\n            }\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`\n<|/\
    \ c |>\n<| c |>\nYes, I forgot about negative numbers. I edited my answer. Thank\
    \ you for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    long temp = 0;\n    long count = 0;\n    long ones = 0;\n\
    \    long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ ten_thousands = 0;\n    long hundred_thousands = 0;\n    long millions = 0;\n\
    \    long billions = 0;\n    long trillions = 0;\n    long quadrillions = 0;\n\
    \    long quintillions = 0;\n    long sextillions = 0;\n    long septillions =\
    \ 0;\n    long octillions = 0;\n    long nonillions = 0;\n    long decillions\
    \ = 0;\n    long undecillions = 0;\n    long duodecillions = 0;\n    long tredecillions\
    \ = 0;\n    long quattuordecillions = 0;\n    long quindecillions = 0;\n    long\
    \ sexdecillions = 0;\n    long septendecillions = 0;\n    long octodecillions\
    \ = 0;\n    long novemdecillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septenvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillions\
    \ = 0;\n    long septenvigintillions = 0;\n    long octovigintillions = 0;\n \
    \   long novemvigintillions = 0;\n    long vigintillions = 0;\n    long unvigintillions\
    \ = 0;\n    long duovigintillions = 0;\n    long trevigintillions = 0;\n    long\
    \ quattuorvigintillions = 0;\n    long quinvigintillions = 0;\n    long sexvigintillion",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    int i = 0;\n    int j = 0;\n  \
    \  int k = 0;\n    for(; i < arr.length; ++i)\n    {\n        ones[i] = 1;\n \
    \       zeros[i] = 0;\n    }\n    for(; i < arr.length; ++i)\n    {\n        for(j\
    \ = i; j < arr.length; ++j)\n        {\n            if(arr[j] == 0)\n        \
    \    {\n                zeros[k] = arr[j];\n                ++k;\n           \
    \ }\n        }\n        for(j = i; j < arr.length; ++j)\n        {\n         \
    \   if(arr[j] == 1)\n            {\n                ones[k] = arr[j];\n      \
    \          ++k;\n            }\n        }\n        for(j = 0; j < arr.length;\
    \ ++j)\n        {\n            if(ones[j] > zeros[j])\n            {\n       \
    \         long temp = ones[j];\n                ones[j] = zeros[j];\n        \
    \        zeros[j] = temp;\n            }\n        }\n    }\n    for(; i < arr.length;\
    \ ++i)\n    {\n        for(j = 0; j < arr.length; ++j)\n        {\n          \
    \  if(ones[j] > zeros[j])\n            {\n                long temp = ones[j];\n\
    \                ones[j] = zeros[j];\n                zeros[j] = temp;\n     \
    \       }\n        }\n    }\n    for(; i < arr.length; ++i)\n    {\n        result[i]\
    \ = zeros[i];\n    }\n    for(; i < arr.length; ++i)\n    {\n        result[i]\
    \ = ones[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting it. I don't know why you\
    \ think it doesn't.\n<|/ c |>\n<| c |>\nI tested it on `sort_array([1L, 5L, 2L,\
    \ 3L, 4L])` and it returns `[1L, 2L, 3L, 4L, 5L]` instead of `[1L, 2L, 3L, 4L,\
    \ 5L]`\n<|/ c |>\n<| c |>\nI tested it on `sort_array([1L, 5L, 2L, 3L, 4L])` and\
    \ it returns `[1L, 2L, 3L, 4L, 5L]` instead of `[1L, 2L, 3L, 4L, 5L]`\n<|/ c |>\n\
    <| c |>\nI tested it on `sort_array([1L, 5", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    int i = 0;\n    int j = 0;\n   \
    \ int k = 0;\n    while (i < arr.length)\n    {\n        ones[i] = 0;\n      \
    \  while (j < arr.length && arr[j] == 1)\n        {\n            ones[i] += 1;\n\
    \            ++j;\n        }\n        if (j == arr.length)\n        {\n      \
    \      result[k] = arr[i];\n            ++k;\n            ++i;\n            j\
    \ = 0;\n        }\n    }\n    while (j < arr.length)\n    {\n        ones[j] =\
    \ 0;\n        while (i < arr.length && arr[i] == 1)\n        {\n            ones[j]\
    \ += 1;\n            ++i;\n        }\n        if (i == arr.length)\n        {\n\
    \            result[k] = arr[j];\n            ++k;\n            ++j;\n       \
    \     i = 0;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works perfectly\
    \ fine. However I still don't understand why my code didn't work. Could you please\
    \ explain why my code didn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer.\n<|/ c |>\n<| a |>\nI wrote a solution in C#, hope it helps:\n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
  "{\n    long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int count = 0;\n    \n    while (i < arr.length)\n\
    \    {\n        long num = arr[i];\n        \n        if (num == 0)\n        {\n\
    \            result[k] = arr[i];\n            i++;\n            k++;\n       \
    \ }\n        else if (num == 1)\n        {\n            count++;\n        }\n\
    \        else\n        {\n            int pos = count / 2;\n            int temp;\n\
    \            \n            if (pos == 0)\n            {\n                temp\
    \ = arr[i];\n                arr[i] = arr[pos];\n                arr[pos] = temp;\n\
    \            }\n            else\n            {\n                temp = arr[i];\n\
    \                arr[i] = arr[pos];\n                arr[pos] = temp;\n      \
    \      }\n            \n            i++;\n            j++;\n            k++;\n\
    \        }\n    }\n    \n    while (j < arr.length)\n    {\n        long num =\
    \ arr[j];\n        \n        if (num == 0)\n        {\n            result[k] =\
    \ arr[j];\n            j++;\n            k++;\n        }\n        else if (num\
    \ == 1)\n        {\n            count++;\n        }\n        else\n        {\n\
    \            int pos = count / 2;\n            int temp;\n            \n     \
    \       if (pos == 0)\n            {\n                temp = arr[j];\n       \
    \         arr[j] = arr[pos];\n                arr[pos] = temp;\n            }\n\
    \            else\n            {\n                temp = arr[j];\n           \
    \     arr[j] = arr[pos];\n                arr[pos] = temp;\n            }\n  \
    \          j++;\n            k++;\n        }\n    }\n    \n    while (k < arr.length)\n\
    \    {\n        long num = arr[k];\n        \n        if (num == 0)\n        {\n\
    \            result[k] = arr[k];\n            k++;\n        }\n        else if\
    \ (num == 1)\n        {\n            count++;\n        }\n        else\n     \
    \   {\n            int pos = count / 2;\n            int temp;\n            \n\
    \            if (pos == 0)\n            {\n                temp = arr[k];\n  \
    \              arr[k] = arr[pos];\n                arr[pos] = temp;\n        \
    \    }\n            else\n            {\n                temp = arr[k];\n    \
    \            arr[k] = arr[pos];\n                arr[pos] = temp;\n          \
    \  }\n            k++;\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis is not the best solution.\
    \ Using a binary search is much faster.\n<|/ c |>\n<| c |>\nI agree, but I wanted\
    \ to show an alternative solution. Binary search is much faster than the one I\
    \ posted.\n<|/ c |>", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long zeros = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > 0)\n        {\n            ones++;\n      \
    \  }\n        else\n        {\n            zeros++;\n        }\n        if(ones\
    \ > zeros)\n        {\n            max = ones;\n        }\n        else\n    \
    \    {\n            max = zeros;\n        }\n        result[i] = max;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. What do you mean by \"\
    doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L,\
    \ 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting.\
    \ What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a tags=arrays,sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        result[i] = count[arr[i]];\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nI didn't downvote, but I suspect it's because you didn't explain what\
    \ was wrong with OP's code, and why you chose to implement it this way.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer. Thanks for your feedback.\n\
    <|/ c |>\n<| c |>\nI didn't downvote either, but this doesn't answer the question.\
    \ OP wants to sort an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order. Your code sorts them in descending\
    \ order. Also, your code is O(n^2), which is very inefficient.\n<|/ c |>\n<| c\
    \ |>\nI added some explanation to the answer. Thanks for your feedback.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer. Thanks for your feedback.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[arr.length];\n\
    \    int j = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 0)\n        {\n            result[j++] = i;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 0)\n        {\n            result[j++] = i;\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         result[j++] = i;", "{\n    long[] result = new long[arr.length];\n \
    \   int n = arr.length;\n    for(int i = 0; i < n; i++) {\n        int count =\
    \ 0;\n        for(int j = 0; j < n; j++) {\n            if(arr[j] == 1) {\n  \
    \              count++;\n            }\n        }\n        if(count == 0) {\n\
    \            result[i] = arr[i];\n        } else {\n            int decimal =\
    \ count * 10 + arr[i] % 10;\n            result[i] = decimal;\n        }\n   \
    \ }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the right solution. Try this array `[1L, 0L, 2L, 3L,\
    \ 4L]`\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case\
    \ to my answer.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a solution that is O(nlogn)\
    \ but uses more space than other solutions posted so far. \n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long maxOnes = 0;\n    long maxZeros = 0;\n    long maxOnesIndex =\
    \ 0;\n    long maxZerosIndex = 0;\n    long maxOnesIndex2 = 0;\n    long maxZerosIndex2\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n        if(ones > maxOnes)\n        {\n            maxOnes\
    \ = ones;\n            maxOnesIndex = i;\n        }\n        if(zeros > maxZeros)\n\
    \        {\n            maxZeros = zeros;\n            maxZerosIndex = i;\n  \
    \      }\n        if(ones == maxOnes)\n        {\n            if(zeros > maxZeros2)\n\
    \            {\n                maxZeros2 = zeros;\n                maxZerosIndex2\
    \ = i;\n            }\n        }\n        if(zeros == maxZeros)\n        {\n \
    \           if(ones > maxOnes2)\n            {\n                maxOnes2 = ones;\n\
    \                maxOnesIndex2 = i;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n   \
    \         result[i] = arr[maxOnesIndex];\n            arr[maxOnesIndex] = arr[i];\n\
    \            arr[i] = 1;\n        }\n        else\n        {\n            result[i]\
    \ = arr[maxZerosIndex];\n            arr[maxZerosIndex] = arr[i];\n          \
    \  arr[i] = 0;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(arr[i] == 1)\n        {\n            result[i] = arr[maxOnesIndex2];\n\
    \            arr[maxOnesIndex2] = arr[i];\n            arr[i] = 1;\n        }\n\
    \        else\n        {\n            result[i] = arr[maxZerosIndex2];\n     \
    \       arr[maxZerosIndex2] = arr[i];\n            arr[i] = 0;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not the correct solution. Try this test case: sort_array([0L,\
    \ 1L, 2L, 3L, 4L])\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\nThis solution is still not correct. Try this\
    \ test case: sort_array([0L, 1L, 2L, 3L, 4L])\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my ", "{\n    long[] result = new long[arr.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < arr.length)\
    \ \n    {\n        if (arr[i] == 1) \n        {\n            result[k] = arr[i];\n\
    \            count++;\n            i++;\n        }\n        else \n        {\n\
    \            if (count > 0) \n            {\n                result[k] = arr[i\
    \ - 1];\n                count--;\n                i++;\n            }\n     \
    \       else\n            {\n                result[k] = arr[j];\n           \
    \     count++;\n                j++;\n            }\n        }\n        k++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nI like this solution, but I believe it can be optimized a little\
    \ more. For example, instead of checking if arr[i] == 1, you can just check if\
    \ arr[i] != 0. This will save you a lot of unnecessary comparisons.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the problem is that `arr[i] == 1` will always be\
    \ true for negative numbers. So I thought that `arr[i] != 0` would be a better\
    \ choice.\n<|/ c |>\n<| c |>\nI agree with you. But the problem is that `arr[i]\
    \ == 1` will always be true for negative numbers. So I thought that `arr[i] !=\
    \ 0` would be a better choice.\n<|/ c |>\n<| c |>\nI agree with you. But the problem\
    \ is that `arr[i] == 1` will always be true for negative numbers. So I thought\
    \ that `arr[i] != 0` would be a better choice.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. But the problem is that `arr[i] == 1` will always be true for negative\
    \ numbers. So I thought that `arr[i] != 0` would be a better choice.\n<|/ c |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n  \
    \      }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones--;\n        }\n        else\n        {\n\
    \            zeros--;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            zeros++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones--;\n        }\n        else\n        {\n\
    \            zeros--;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            zeros++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones--;\n        }\n        else\n        {\n\
    \            zeros--;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            ones++;\n        }\n        else\n        {\n\
    \            zeros++;\n        }\n    }\n    \n    for(int ", "{\n    long[] result\
    \ = new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n  \
    \  int l = 0;\n    int count = 0;\n    while (i < arr.length) {\n        if (arr[i]\
    \ == 1) {\n            count++;\n        } else {\n            result[k] = arr[i];\n\
    \            k++;\n        }\n        i++;\n    }\n    while (j < count) {\n \
    \       result[l] = arr[j];\n        l++;\n        j++;\n    }\n    while (k <\
    \ arr.length) {\n        result[k] = arr[k];\n        k++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int ones\
    \ = 0;\n    \n    while (i < arr.length)\n    {\n        if (arr[i] == 1)\n  \
    \      {\n            ones++;\n        }\n        else\n        {\n          \
    \  count++;\n        }\n        \n        if (count == 1)\n        {\n       \
    \     result[k] = arr[i];\n            k++;\n            count = 0;\n        }\n\
    \        \n        if (ones == 1)\n        {\n            ones = 0;\n        \
    \    j++;\n        }\n        \n        if (j == arr.length)\n        {\n    \
    \        result[k] = arr[i];\n            k++;\n            j = 0;\n        }\n\
    \        \n        i++;\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L,\
    \ -5L, -6L])`\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question.\
    \ I'll edit the answer to include that requirement.\n<|/ c |>\n<| c |>\nI edited\
    \ the answer to include a solution for negative numbers as well.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        int[] arr = {1L, 5L, 2L, 3L, 4L};\n        System.out.println(Arrays.toString(sort(arr)));\n\
    \    }", "{\n    long[] result = new long[arr.length];\n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        int count = 0;\n        for(int j = 0; j <\
    \ arr.length; j++)\n        {\n            if(arr[j] == 1)\n            {\n  \
    \              count++;\n            }\n        }\n        result[i] = count;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] res = new long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        long ones = arr[i];\n        long rest = ones;\n        for(int\
    \ j = i + 1; j < arr.length; j++)\n        {\n            long twos = arr[j];\n\
    \            if(twos == 0)\n            {\n                rest = 0;\n       \
    \         break;\n            }\n            else if(ones == twos)\n         \
    \   {\n                rest = rest * 10 + twos;\n                break;\n    \
    \        }\n            else\n            {\n                rest = rest * 10\
    \ + twos;\n            }\n        }\n        res[i] = rest;\n    }\n    Arrays.sort(res);\n\
    \    return res;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\n\
    This doesn't work. Try sort_array([0L, 1L, 2L, 3L, 4L]) it returns [1L, 0L, 2L,\
    \ 3L, 4L]\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. Try sort_array([0L,\
    \ 1L, 2L, 3L, 4L]) it returns [1L, 0L, 2L, 3L, 4L]\n<|/ c |>\n<| c |>\nYes, it\
    \ works. But it takes O(n^2) time, which is not the best case for sorting algorithms.\
    \ I posted a solution that is O(nlogn).\n<|/ c |>\n<| c |>\nI tested it before\
    \ posting. I posted a solution that is O(nlogn).\n<|/ c |>\n<| c |>\nI tested\
    \ it before posting. I posted a solution that is O(nlogn).\n<|/ c |>\n<| a dscore=1\
    \ |>\nI believe that this is what you are looking for:\n<code>\nfunction sortArray(arr)\
    \ {\n    var sortedArray = [];\n    var oneCount = 0;\n    var twoCount = 0;\n\
    \    var threeCount = 0;\n    var fourCount = 0;\n    var fiveCount = 0;\n   \
    \ var sixCount = 0;\n    var sevenCount = 0;\n    var eightCount = 0;\n    var\
    \ nineCount = 0;\n    var tenCount = 0;\n    var elevenCount = 0;\n    var twelveCount\
    \ = 0;\n    var thirteenCount = 0;\n    var fourteenCount = 0;\n    var fifteenCount\
    \ = 0;\n    var sixteenCount = 0;\n    var seventeenCount = 0;\n    var eighteenCount\
    \ = 0;\n    var nineteenCount = 0;\n    var twentyCount = 0;\n    var thirtyCount\
    \ = 0;\n    var fortyCount = 0;\n    var fiftyCount = 0;\n    var sixty", "{\n\
    \    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        ones[i] = 1;\n        zeros[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         zeros[i]++;\n        }\n        else\n        {\n            ones[i]++;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(ones[i] > zeros[i])\n        {\n            result[i] = ones[i];\n   \
    \     }\n        else\n        {\n            result[i] = zeros[i];\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. Try `sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])`\n<|/ c |>\n<| c |>\nThe question was about sorting non-negative\
    \ integers. I assume that negative numbers are also non-negative.\n<|/ c |>\n\
    <| c |>\nYes, negative numbers are also non-negative. Your solution doesn't work\
    \ for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`\n<|/ c |>\n\
    <| c |>\nThe question was about sorting non-negative integers. I assume that negative\
    \ numbers are also non-negative.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ non-negative integers. I assume that negative numbers are also non-negative.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = {1L, 5L, 2L, 3L, 4L};\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long[] result = new long[arr.length];\n    \n    int ones = 0;\n \
    \   int zeros = 0;\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n   \
    \     if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else\n\
    \        {\n            zeros++;\n        }\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i]\
    \ = ones;\n        }\n        else\n        {\n            result[i] = zeros;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(result[i] > result[i+1])\n        {\n            int temp = result[i];\n\
    \            result[i] = result[i+1];\n            result[i+1] = temp;\n     \
    \   }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I appreciate your effort, but this doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])` - it returns `[1L, 2L, 3L, 4L, 5L]` instead of `[1L, 2L, 3L,\
    \ 4L, 5L]`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try it again with\
    \ your example and see if it works.\n<|/ c |>\n<| c |>\nYes, it works now. Thank\
    \ you! I guess I missed something in the question. Sorry for that.\n<|/ c |>\n\
    <| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = new int[]{1L,\
    \ 5L, 2L, 3L, 4L};\n    int[] arr2 = new int[]{-2L, -3L, -4L, -5L, -6L};\n   \
    \ int[] arr3 = new int[]{1L, 0L, 2L, 3L, 4L};\n    int[] arr4 = new int[]{1L,\
    \ 0L, 2L, 3L, 4L};\n    int[] arr5 = new int[]{1L, 0L, 2L, 3L, 4L};\n    int[]\
    \ arr6 = new int[]{1L, 0L, 2L, 3L, 4L};\n    int[] arr7 = new int[]{1L, 0L, 2L,\
    \ 3L, 4L};\n    int[] arr8 = new int[]{1L, 0L, 2L, 3L, 4L};\n    int[] arr9 =\
    \ new int[]{1L, 0L, ", "{\n    long[] res = new long[arr.length];\n    int[] count\
    \ = new int[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        res[i] = count[arr[i]];\n    }\n    \n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n    }\n    \n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        res[i] = count[arr[i]];\n \
    \   }\n    \n    return res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long[] ones_counter = new long[arr.length];\n    long[] zeros_counter = new\
    \ long[arr.length];\n    long[] ones_counter2 = new long[arr.length];\n    long[]\
    \ zeros_counter2 = new long[arr.length];\n    long[] ones_counter3 = new long[arr.length];\n\
    \    long[] zeros_counter3 = new long[arr.length];\n    long[] ones_counter4 =\
    \ new long[arr.length];\n    long[] zeros_counter4 = new long[arr.length];\n \
    \   long[] ones_counter5 = new long[arr.length];\n    long[] zeros_counter5 =\
    \ new long[arr.length];\n    long[] ones_counter6 = new long[arr.length];\n  \
    \  long[] zeros_counter6 = new long[arr.length];\n    long[] ones_counter7 = new\
    \ long[arr.length];\n    long[] zeros_counter7 = new long[arr.length];\n    long[]\
    \ ones_counter8 = new long[arr.length];\n    long[] zeros_counter8 = new long[arr.length];\n\
    \    long[] ones_counter9 = new long[arr.length];\n    long[] zeros_counter9 =\
    \ new long[arr.length];\n    long[] ones_counter10 = new long[arr.length];\n \
    \   long[] zeros_counter10 = new long[arr.length];\n    long[] ones_counter11\
    \ = new long[arr.length];\n    long[] zeros_counter11 = new long[arr.length];\n\
    \    long[] ones_counter12 = new long[arr.length];\n    long[] zeros_counter12\
    \ = new long[arr.length];\n    long[] ones_counter13 = new long[arr.length];\n\
    \    long[] zeros_counter13 = new long[arr.length];\n    long[] ones_counter14\
    \ = new long[arr.length];\n    long[] zeros_counter14 = new long[arr.length];\n\
    \    long[] ones_counter15 = new long[arr.length];\n    long[] zeros_counter15\
    \ = new long[arr.length];\n    long[] ones_counter16 = new long[arr.length];\n\
    \    long[] zeros_counter16 = new long[arr.length];\n    long[] ones_counter17\
    \ = new long[arr.length];\n    long[] zeros_counter17 = new long[arr.length];\n\
    \    long[] ", "{\n    long[] result = new long[arr.length];\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int j =\
    \ 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n          \
    \  {\n                count++;\n            }\n        }\n        result[i] =\
    \ count;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L,\
    \ 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing out.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    long[] ones_counter = new long[arr.length];\n    long[] zeros_counter = new\
    \ long[arr.length];\n    long[] ones_counter2 = new long[arr.length];\n    long[]\
    \ zeros_counter2 = new long[arr.length];\n    long[] ones_counter3 = new long[arr.length];\n\
    \    long[] zeros_counter3 = new long[arr.length];\n    long[] ones_counter4 =\
    \ new long[arr.length];\n    long[] zeros_counter4 = new long[arr.length];\n \
    \   long[] ones_counter5 = new long[arr.length];\n    long[] zeros_counter5 =\
    \ new long[arr.length];\n    long[] ones_counter6 = new long[arr.length];\n  \
    \  long[] zeros_counter6 = new long[arr.length];\n    long[] ones_counter7 = new\
    \ long[arr.length];\n    long[] zeros_counter7 = new long[arr.length];\n    long[]\
    \ ones_counter8 = new long[arr.length];\n    long[] zeros_counter8 = new long[arr.length];\n\
    \    long[] ones_counter9 = new long[arr.length];\n    long[] zeros_counter9 =\
    \ new long[arr.length];\n    long[] ones_counter10 = new long[arr.length];\n \
    \   long[] zeros_counter10 = new long[arr.length];\n    long[] ones_counter11\
    \ = new long[arr.length];\n    long[] zeros_counter11 = new long[arr.length];\n\
    \    long[] ones_counter12 = new long[arr.length];\n    long[] zeros_counter12\
    \ = new long[arr.length];\n    long[] ones_counter13 = new long[arr.length];\n\
    \    long[] zeros_counter13 = new long[arr.length];\n    long[] ones_counter14\
    \ = new long[arr.length];\n    long[] zeros_counter14 = new long[arr.length];\n\
    \    long[] ones_counter15 = new long[arr.length];\n    long[] zeros_counter15\
    \ = new long[arr.length];\n    long[] ones_counter16 = new long[arr.length];\n\
    \    long[] zeros_counter16 = new long[arr.length];\n    long[] ones_counter17\
    \ = new long[arr.length];\n    long[] zeros_counter17 = new long[arr.length];\n\
    \    long[] ", "{\n    long[] result = new long[arr.length];\n    long ones =\
    \ 0;\n    long zeros = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] == 1){\n            ones++;\n        }\n        else\
    \ if(arr[i] == 0){\n            zeros++;\n        }\n        else{\n         \
    \   if(ones > zeros){\n                max = ones;\n            }\n          \
    \  else{\n                max = zeros;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            result[i]\
    \ = max;\n        }\n        else if(arr[i] == 0){\n            result[i] = -max;\n\
    \        }\n        else{\n            result[i] = arr[i];\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any library functions. I must implement it myself.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that uses only basic\
    \ operations.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        long ones = arr[i];\n\
    \        long twos = ~ones;\n        \n        long onesCount = 0;\n        long\
    \ twosCount = 0;\n        \n        while(onesCount < ones && twosCount < twos)\n\
    \        {\n            if(onesCount == ones)\n            {\n               \
    \ result[i] = onesCount;\n                onesCount++;\n            }\n      \
    \      else if(twosCount == twos)\n            {\n                result[i] =\
    \ twosCount;\n                twosCount++;\n            }\n            else\n\
    \            {\n                long temp = onesCount;\n                onesCount\
    \ = onesCount << 1;\n                twosCount = twosCount << 1;\n           \
    \     result[i] = temp;\n            }\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for answering! I understand\
    \ your solution and it works perfectly for small arrays. However, when I try it\
    \ on larger arrays, it takes too long to finish. Do you know any way to make it\
    \ faster?\n<|/ c |>\n<| c |>\nI added a faster solution. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThank you so much! It works perfectly! I really appreciate your\
    \ help!\n<|/ c |>\n<| a tags=sorting,algorithm,arrays |>\nI wrote a solution in\
    \ Java, hope it helps.\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[]\
    \ zeros = new long[arr.length];\n    long[] temp = new long[arr.length];\n   \
    \ \n    for (int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 1;\n  \
    \      zeros[i] = 0;\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        temp[i] = arr[i];\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        for (int j = 0; j < arr.length; j++)\n        {\n     \
    \       if (ones[j] == 1)\n            {\n                ones[j] = 0;\n     \
    \           temp[j] = 0;\n            }\n            else\n            {\n   \
    \             if (temp[j] > 0)\n                {\n                    temp[j]\
    \ = 0;\n                }\n                else\n                {\n         \
    \           temp[j] = temp[j] + 1;\n                }\n            }\n       \
    \ }\n    }\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n        result[i]\
    \ = temp[i];\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThis is not the correct solution. Your solution sorts numbers in\
    \ descending order. For example, sort_array([1L, 5L, 2L, 3L, 4L]) returns [1L,\
    \ 2L, 3L, 4L, 5L]. Your solution returns [1L, 2L, 3L, 4L, 5L] instead.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| c\
    \ |>\nThe bug is still there. sort_array([1L, 5L, 2L, 3L, 4L]) returns [1L, 2L,\
    \ 3L, 4L, 5L]. Your solution returns [1L, 2L, 3L, 4L, 5L] instead.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| c |>\n\
    The bug is still there. sort_array([1L, 5L, 2L, 3L, 4L]) returns [1L, 2L, 3L,\
    \ 4L, 5L]. Your solution returns [1L, 2L, 3L, 4L, 5L] instead.\n<|/ c |>\n<| a\
    \ tags=sorting,algorithm,arrays |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = {1L, 5L, 2L, 3L, 4L};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the correct ", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n  \
    \  for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n     \
    \   {\n            ones++;\n        }\n        else\n        {\n            zeros++;\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = ones;\n        }\n        else\n \
    \       {\n            result[i] = zeros;\n        }\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        if(result[i] < 0)\n        {\n        \
    \    result[i] = -result[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(result[i] < 0)\n        {\n            result[i] = -result[i];\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i]\
    \ < 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n    \
    \    {\n            result[i] = -result[i];\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n        {\n     \
    \       result[i] = -result[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(result[i] < 0)\n        {\n            result[i] = -result[i];\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i]\
    \ < 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n    \
    \    {\n            result[i] = -result[i];\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n        {\n     \
    \       result[i] = -result[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(result[i] < 0)\n        {\n            result[i] = -result[i];\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i]\
    \ < 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n    \
    \    {\n            result[i] = -result[i];\n        }\n    }\n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        if(result[i] < 0)\n        {\n     \
    \       result[i] = -result[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(result[i] < 0)\n        {\n            result[i] = -result[i];\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i]\
    \ < 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] < ", "{\n \
    \   long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n  \
    \  int k = 0;\n    long temp = 0;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isThirty = false;\n    bool isForty = false;\n\
    \    bool isFifty = false;\n    bool isSixty = false;\n    bool isSeventy = false;\n\
    \    bool isEighty = false;\n    bool isNinety = false;\n    bool isHundred =\
    \ false;\n    bool isThousand = false;\n    bool isOneHundred = false;\n    bool\
    \ isOneThousand = false;\n    bool isOneMillion = false;\n    bool isOneBillion\
    \ = false;\n    bool isOneTrillion = false;\n    bool isOneQuadrillion = false;\n\
    \    bool isOneQuintillion = false;\n    bool isOneBillionEighty = false;\n  \
    \  bool isOneTrillionEighty = false;\n    bool isOneQuadrillionEighty = false;\n\
    \    bool isOneQuintillionEighty = false;\n    bool isOneBillionThirtyEighty =\
    \ false;\n    bool isOneTrillionThirtyEighty = false;\n    bool isOneQuadrillionThirtyEighty\
    \ = false;\n    bool isOneQuintillionThirtyEighty = false;\n    bool isOneBillionFiftyEighty\
    \ = false;\n    bool isOneTrillionFiftyEighty = false;\n    bool isOneQuadrillionFiftyEighty\
    \ = false;\n    bool isOneQuintillionFiftyEighty = false;\n    bool isOneBillionSixtyEighty\
    \ = false;\n    bool isOneTrillionSixtyEighty = false;\n    bool is", "{\n   \
    \ long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long\
    \ min = 0;\n    long temp = 0;\n    \n    while(i < arr.length)\n    {\n     \
    \   ones = arr[i];\n        zeros = 0;\n        max = ones;\n        min = ones;\n\
    \        \n        while(j < arr.length)\n        {\n            if(arr[j] ==\
    \ ones)\n            {\n                ones++;\n                zeros++;\n  \
    \              if(max < ones)\n                    max = ones;\n             \
    \   if(min > ones)\n                    min = ones;\n            }\n         \
    \   else\n            {\n                zeros++;\n                if(max < zeros)\n\
    \                    max = zeros;\n                if(min > zeros)\n         \
    \           min = zeros;\n            }\n            j++;\n        }\n       \
    \ \n        temp = max;\n        max = min;\n        min = temp;\n        \n \
    \       result[i] = max;\n        i++;\n    }\n    \n    while(j < arr.length)\n\
    \    {\n        result[i] = arr[j];\n        i++;\n        j++;\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = 0;\n\
    \        for(int j = 0; j < count[arr[i]]; ++j)\n        {\n            result[i]\
    \ += (long)Math.pow(2,j);\n        }\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`\
    \ which should return `[-6L, -5L, -4L, -3L, -2L]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Now it works with negative numbers as well.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`\
    \ which should return `[-6L, -5L, -4L, -3L, -2L]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Now it works with negative numbers as well.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`\
    \ which should return `[-6L, -5L, -4L, -3L, -2L]`.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n        long val = arr[i];\n\
    \        if(val == 1)\n            ones++;\n        else\n            zeros++;\n\
    \    }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        long val\
    \ = arr[i];\n        if(val == 1)\n        {\n            ones--;\n          \
    \  val <<= 1;\n        }\n        else\n        {\n            zeros--;\n    \
    \        val >>= 1;\n        }\n        result[i] = val;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        long val = arr[i];\n        if(ones\
    \ > zeros)\n        {\n            val <<= ones;\n            ones = 0;\n    \
    \    }\n        else\n        {\n            val >>= zeros;\n            zeros\
    \ = 0;\n        }\n        result[i] = val;\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the question.\
    \ He wants to sort an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order. Your solution sorts them\
    \ according to their decimal value.\n<|/ c |>\n<| c |>\nI thought the question\
    \ was about sorting an array of non-negative integers according to their binary\
    \ representation in ascending order. He also said that he wants to sort them according\
    \ to decimal value. I think my solution solves the problem he asked for. He didn't\
    \ say anything about decimal value. I just pointed out that his solution sorts\
    \ them according to their binary representation in ascending order. He didn't\
    \ say anything about decimal value.\n<|/ c |>\n<| c |>\nI agree with you. Your\
    \ solution sorts them according to their binary representation in ascending order.\
    \ He didn't say anything about decimal value. I just pointed out that his solution\
    \ sorts them according to their binary representation in ascending order. He didn't\
    \ say anything about decimal value.\n<|/ c |>\n<| c |>\nI agree with you. Your\
    \ solution sorts them according to their binary representation in ascending order.\
    \ He didn't say anything about decimal value. I just pointed out that his solution\
    \ sorts them according to their binary representation in ascending order. He didn't\
    \ say anything about decimal value.\n<|/ c |>\n<| c |>\nI agree with you. Your\
    \ solution sorts them according to their binary representation in ascending order.\
    \ He didn't say anything about decimal value. I just pointed ", "{\n    long[]\
    \ result = new long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n  \
    \      {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ `Arrays.sort` sorts lexicographically, not numerically.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I just realized that and fixed the code. Thanks.\n<|/ c |>\n\
    <| c |>\nThis still doesn't work. `Arrays.sort` sorts lexicographically, not numerically.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I just realized that and fixed the code.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThis still doesn't work. `Arrays.sort` sorts lexicographically,\
    \ not numerically.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    long\
    \ ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++){\n \
    \       if(arr[i] == 1){\n            ones++;\n        }\n        else{\n    \
    \        zeros++;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] == 1){\n            result[i] = ones;\n        }\n\
    \        else{\n            result[i] = zeros;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(result[i] > result[i+1])\n        \
    \    swap(result, i, i+1);\n    }\n    \n    return result;\n}", "{\n    long[]\
    \ res = new long[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        long ones = arr[i];\n        long twos = 0;\n        for(int j = 0; j\
    \ < ones; ++j)\n        {\n            if(ones & 1L << j) \n                twos\
    \ |= 1L << j;\n        }\n        res[i] = twos;\n    }\n    Arrays.sort(res);\n\
    \    return res;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    The OP wants to sort an array of non-negative integers according to number of\
    \ ones in their binary representation in ascending order. For similar number of\
    \ ones, sort based on decimal value.\n<|/ c |>\n<| c |>\nYes, I missed that detail.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with\
    \ `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        long count = 0;\n\
    \        for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       \n        if(count == 0)\n        {\n            result[i] = arr[i];\n\
    \        }\n        else\n        {\n            int dec = 0;\n            for(int\
    \ j = 0; j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n\
    \                {\n                    dec++;\n                }\n          \
    \  }\n            \n            result[i] = dec;\n        }\n    }\n    \n   \
    \ Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThe question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your solution sorts them in descending order.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting an array of non-negative integers according to number of ones\
    \ in their binary representation in ascending order. Your solution sorts them\
    \ in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. Your solution sorts them in descending order.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your solution\
    \ sorts them in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of non-negative integers according to number of ones in their binary\
    \ representation in ascending order. Your solution sorts them in descending order.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[arr.length];\n    long[] ones = new long[arr.length];\n  \
    \  long[] zeros = new long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        ones[i] = 1;\n        zeros[i] = 0;\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        int count = 0;\n        for(int j = 0;\
    \ j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n            {\n\
    \                count++;\n            }\n        }\n        if(count == 0)\n\
    \        {\n            result[i] = arr[i];\n        }\n        else\n       \
    \ {\n            int pos = 0;\n            for(int j = 0; j < arr.length; j++)\n\
    \            {\n                if(arr[j] == 1)\n                {\n         \
    \           if(pos == 0)\n                    {\n                        result[i]\
    \ = arr[i];\n                        pos = j;\n                    }\n       \
    \             else\n                    {\n                        int tmp = arr[pos];\n\
    \                        arr[pos] = arr[i];\n                        arr[i] =\
    \ tmp;\n                    }\n                }\n            }\n        }\n \
    \   }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 0)\n\
    \        {\n            result[i] = arr[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing\
    \ it out. Now it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = count[arr[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n\
    \    counts = [0] * len(arr)\n    for x in arr:\n        counts[x] += 1\n    sorted_arr\
    \ = [x for x, count in zip(arr, counts) if count == 1]\n    sorted_arr.sort(key=lambda\
    \ x: (-counts[x], x))\n    return sorted_arr\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\n<code>\ndef sort_array(arr):\n    counts = [0] * len(arr)\n    for x in\
    \ arr:\n        counts[x] += 1\n    sorted_arr = [x for x, count in zip(arr, counts)\
    \ if count == 1]\n    sorted_arr.sort(key=lambda x: (-counts[x], x))\n    return\
    \ sorted_arr\n</code>\n<|/ a tags=sorting,algorithm,arrays dscore=0 |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation of what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_array(arr):\n\
    \    counts = [0] * len(arr)\n    for x in arr:\n        counts[x] += 1\n    sorted_arr\
    \ = [x for x, count in zip(arr, counts) if count == 1]\n    sorted_arr.sort(key=lambda\
    \ x: (-counts[x], ", "{\n    long[] result = new long[arr.length];\n    long ones\
    \ = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n\
    \        if(arr[i] == 1) ones++;\n        else zeros++;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) \n        {\n \
    \           result[i] = ones;\n            ones--;\n        }\n        else \n\
    \        {\n            result[i] = zeros;\n            zeros--;\n        }\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++) \n    {\n        if(result[i]\
    \ < result[i+1]) \n        {\n            long temp = result[i];\n           \
    \ result[i] = result[i+1];\n            result[i+1] = temp;\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c\
    \ |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I used the example you provided. What\
    \ is the problem you are facing?\n<|/ c |>\n<| c |>\nIt doesn't work for `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the example you provided. What is the\
    \ problem you are facing?\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the example you provided. What is the problem you are facing?\n<|/ c |>\n<|\
    \ a tags=sorting,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = {1L, 5L, 2L, 3L, 4L};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example\
    \ you provided. What is the problem you are facing?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the example you provided. What is the problem you are\
    \ facing?\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example you\
    \ provided. What is the problem you are facing?", "{\n    long[] result = new\
    \ long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    long[] tmp = new long[arr.length];\n    \n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 0)\n        {\n   \
    \         zeros[i] = 1;\n        }\n        else\n        {\n            ones[i]\
    \ = 1;\n        }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        tmp[i] = ones[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        for(int j = 0; j < arr.length; ++j)\n        {\n            if(ones[j]\
    \ > ones[i])\n            {\n                tmp[i] = ones[j];\n             \
    \   ones[i] = ones[i];\n                ones[j] = tmp[i];\n            }\n   \
    \     }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n       \
    \ result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(ones[i] > 0)\n        {\n            result[i] = result[i]\
    \ / ones[i];\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the array.\
    \ My solution works well for small arrays, but for large ones it takes too much\
    \ time to sort them.\n<|/ c |>\n<| c |>\nI guess it depends on the size of the\
    \ array. My solution works well for small arrays, but for large ones it takes\
    \ too much time to sort them.\n<|/ c |>\n<| c |>\nI guess it depends on the size\
    \ of the array. My solution works well for small arrays, but for large ones it\
    \ takes too much time to sort them.\n<|/ c |>\n<| c |>\nI guess it depends on\
    \ the size of the array. My solution works well for small arrays, but for large\
    \ ones it takes too much time to sort them.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    int i = 0;\n    int j = 0;\n   \
    \ \n    for(int k = 0; k < arr.length; k++)\n    {\n        ones[k] = arr[k];\n\
    \    }\n    \n    for(int k = 0; k < arr.length; k++)\n    {\n        if(ones[k]\
    \ == 0)\n        {\n            result[i] = 0;\n        }\n        else\n    \
    \    {\n            int count = 0;\n            int j = 0;\n            while(ones[j]\
    \ != 0)\n            {\n                j++;\n                count++;\n     \
    \       }\n            result[i] = count;\n            i++;\n        }\n    }\n\
    \    \n    for(int k = 0; k < arr.length; k++)\n    {\n        ones[k] = 0;\n\
    \    }\n    \n    for(int k = 0; k < arr.length; k++)\n    {\n        for(int\
    \ l = 0; l < arr.length; l++)\n        {\n            if(ones[l] == 0)\n     \
    \       {\n                ones[l] = arr[l];\n            }\n        }\n    }\n\
    \    \n    for(int k = 0; k < arr.length; k++)\n    {\n        for(int l = 0;\
    \ l < arr.length; l++)\n        {\n            if(ones[l] == 0)\n            {\n\
    \                ones[l] = 0;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis doesn't\
    \ work if there are duplicates in the array.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ because of the `if(ones[k] == 0)` condition. `ones[k]` will never be `0` because\
    \ `k` will never be `arr.length-1`.\n<|/ c |>\n<| c |>\nI fixed the bug and added\
    \ a test case to show that it works.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ there are duplicates in the array.\n<|/ c |>\n<| c |>\nIt doesn't work because\
    \ of the `if(ones[k] == 0)` condition. `ones[k]` will never be `0` because `k`\
    \ will never be `arr.length-1`.\n<|/ c |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 5,\
    \ 2, 3, 4, 6};\n    System.out.println(Arrays.toString(arr));\n    arr = sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}", "{\n    long[] result = new\
    \ long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n        long\
    \ ones = arr[i];\n        long twos = ~ones;\n        long threes = ~twos;\n \
    \       long fours = ~threes;\n        long fives = ~fours;\n        long sixes\
    \ = ~fives;\n        long sevens = ~sixes;\n        long eights = ~sevens;\n \
    \       long nines = ~eights;\n        long tens = ~nines;\n        long elevens\
    \ = ~tens;\n        long twelves = ~elevens;\n        long thirteens = ~twelves;\n\
    \        long fourteens = ~thirteens;\n        long fifteens = ~fourteens;\n \
    \       long sixteens = ~fifteens;\n        long seventeens = ~sixteens;\n   \
    \     long eighteens = ~seventeens;\n        long nineteens = ~eighteens;\n  \
    \      long twenty = ~nineteens;\n        long thirty = ~twenty;\n        long\
    \ forty = ~thirty;\n        long fifty = ~forty;\n        long sixty = ~fifty;\n\
    \        long seventy = ~sixty;\n        long eighty = ~seventy;\n        long\
    \ ninety = ~eighty;\n        long hundreds = ~ninety;\n        long thousands\
    \ = ~hundreds;\n        long millions = ~thousands;\n        long billions = ~millions;\n\
    \        long trillions = ~billions;\n        long quadrillions = ~trillions;\n\
    \        long quintillions = ~quadrillions;\n        long sextillions = ~quintillions;\n\
    \        long septillions = ~sextillions;\n        long octillions = ~septillions;\n\
    \        long nonillions = ~octillions;\n        long decillions = ~nonillions;\n\
    \        long undecillions = ~decillions;\n        long duodecillions = ~undecillions;\n\
    \        long tredecillions = ~duodecillions;\n        long quattuordecillions\
    \ = ~tredecillions;\n        long quindecillions = ~quattu", "{\n    long[] result\
    \ = new long[arr.length];\n    long ones = 0;\n    long tens = 0;\n    long hundreds\
    \ = 0;\n    long thousands = 0;\n    long total = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        total += arr[i];\n        if(arr[i] == 1)\n        {\n\
    \            ones++;\n        }\n        else if(arr[i] == 10)\n        {\n  \
    \          tens++;\n        }\n        else if(arr[i] == 100)\n        {\n   \
    \         hundreds++;\n        }\n        else if(arr[i] == 1000)\n        {\n\
    \            thousands++;\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else if(arr[i] == 10)\n        {\n            result[i] =\
    \ tens;\n        }\n        else if(arr[i] == 100)\n        {\n            result[i]\
    \ = hundreds;\n        }\n        else if(arr[i] == 1000)\n        {\n       \
    \     result[i] = thousands;\n        }\n        else\n        {\n           \
    \ result[i] = total;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI like this solution, very simple, easy to understand, and it works\
    \ great!\n<|/ c |>\n<| a tags=sorting,algorithm,arrays |>\nI came up with this\
    \ solution:\n<code>\ndef sort_array(arr):\n    sorted_arr = []\n    sorted_arr.append(arr[0])\n\
    \    sorted_arr.append(arr[1])\n    sorted_arr.append(arr[2])\n    sorted_arr.append(arr[3])\n\
    \    sorted_arr.append(arr[4])\n    sorted_arr.append(arr[5])\n    sorted_arr.append(arr[6])\n\
    \    sorted_arr.append(arr[7])\n    sorted_arr.append(arr[8])\n    sorted_arr.append(arr[9])\n\
    \    sorted_arr.append(arr[10])\n    sorted_arr.append(arr[-1])\n    sorted_arr.append(arr[-2])\n\
    \    sorted_arr.append(arr[-3])\n    sorted_arr.append(arr[-4])\n    sorted_arr.append(arr[-5])\n\
    \    sorted_arr.append(arr[-6])\n    sorted_arr.append(arr[-7])\n    sorted_arr.append(arr[-8])\n\
    \    sorted_arr.append(arr[-9])\n    sorted_arr.append(arr[-10])\n    sorted_arr.append(arr[-11])\n\
    \    sorted_arr.append(arr[-12])\n    sorted_arr.append(arr[-13])\n    sorted_arr.append(arr[-14])\n\
    \    sorted_arr.append(arr[-15])\n    sorted_arr.append(arr[-16])\n    sorted_arr.append(arr[-17])\n\
    \    sorted_arr.append(arr[-18])\n    sorted_arr.append(arr[-19])", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n        if(arr[i] >\
    \ max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] < min)\n\
    \        {\n            min = arr[i];\n        }\n    }\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones--;\n\
    \        }\n        else\n        {\n            zeros--;\n        }\n       \
    \ if(ones < 0)\n        {\n            ones = -ones;\n        }\n        if(zeros\
    \ < 0)\n        {\n            zeros = -zeros;\n        }\n        if(ones > zeros)\n\
    \        {\n            int temp = ones;\n            ones = zeros;\n        \
    \    zeros = temp;\n        }\n        if(ones > 0)\n        {\n            result[i]\
    \ = max;\n        }\n        else\n        {\n            result[i] = min;\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if there are multiple ones in the array. For\
    \ example, `sort_array([1L, 0L, 2L, 3L, 4L])` returns `[1L, 0L, 2L, 3L, 4L]`.\n\
    <|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if there are multiple ones in the array. For example,\
    \ `sort_array([1L, 0L, 2L, 3L, 4L])` returns `[1L, 0L, 2L, 3L, 4L]`.\n<|/ c |>\n\
    <| c |>\nIt works now. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are multiple ones in the array. For example, `sort_array([1L, 0L, 2L, 3L, 4L])`\
    \ returns `[1L, 0L, 2L, 3L, 4L]`.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \     {\n            ones++;\n        }\n        else\n        {\n           \
    \ zeros++;\n        }\n        if(arr[i] > max)\n        {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n    }\n    long onesMax = ones * max;\n    long onesMin = ones * min;\n\
    \    long zerosMax = zeros * max;\n    long zerosMin = zeros * min;\n    long\
    \ maxOnes = max * ones;\n    long maxZeros = max * zeros;\n    long minOnes =\
    \ min * ones;\n    long minZeros = min * zeros;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = maxOnes;\n\
    \        }\n        else if(arr[i] == 0)\n        {\n            result[i] = maxZeros;\n\
    \        }\n        else\n        {\n            result[i] = (maxOnes - maxZeros);\n\
    \        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = minOnes;\n        }\n        else\
    \ if(arr[i] == 0)\n        {\n            result[i] = minZeros;\n        }\n \
    \       else\n        {\n            result[i] = (maxOnes - minZeros);\n     \
    \   }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = onesMax;\n        }\n        else\
    \ if(arr[i] == 0)\n        {\n            result[i] = zerosMax;\n        }\n \
    \       else\n        {\n            result[i] = (onesMax - zerosMax);\n     \
    \   }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ == 1)\n        {\n            result[i] = onesMin;\n        }\n        else\
    \ if(arr[i] == 0)\n        {\n            result[i] = zerosMin;\n        }\n \
    \       else\n        {\n            result[i] = (onesMin - zerosMin);\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| c |>\nI like your solution, however it fails for negative numbers. I\
    \ added a solution that works for negative numbers, please take a look.\n<|/ c\
    \ |>\n<| a tags=algorithm,sorting,arrays |>\nI wrote a solution that works for\
    \ negative numbers and works for any number of ones and zeros. It uses two sorting\
    \ algorithm", "{\n    long[] result = new long[arr.length];\n    for(int i = 0;\
    \ i < arr.length; ++i)\n    {\n        long ones = arr[i];\n        long twos\
    \ = ~ones;\n        long threes = ~twos;\n        long fours = ~threes;\n    \
    \    long fives = ~fours;\n        long sixes = ~fives;\n        long sevens =\
    \ ~sixes;\n        long eights = ~sevens;\n        long nines = ~eights;\n   \
    \     long tens = ~nines;\n        long elevens = ~tens;\n        long twelves\
    \ = ~elevens;\n        long thirteens = ~twelves;\n        long fourteens = ~thirteens;\n\
    \        long fifteens = ~fourteens;\n        long sixteens = ~fifteens;\n   \
    \     long seventeens = ~sixteens;\n        long eighteens = ~seventeens;\n  \
    \      long nineteens = ~eighteens;\n        long twenty = ~nineteens;\n     \
    \   long thirty = ~twenty;\n        long forty = ~thirty;\n        long fifty\
    \ = ~forty;\n        long sixty = ~fifty;\n        long seventy = ~sixty;\n  \
    \      long eighty = ~seventy;\n        long ninety = ~eighty;\n        long hundreds\
    \ = ~ninety;\n        long thousands = ~hundreds;\n        long millions = ~thousands;\n\
    \        long billions = ~millions;\n        long trillions = ~billions;\n   \
    \     long quadrillions = ~trillions;\n        long quintillions = ~quadrillions;\n\
    \        long sextillions = ~quintillions;\n        long septillions = ~sextillions;\n\
    \        long octillions = ~septillions;\n        long nonillions = ~octillions;\n\
    \        long decillions = ~nonillions;\n        long undecillions = ~decillions;\n\
    \        long duodecillions = ~undecillions;\n        long tredecillions = ~duodecillions;\n\
    \        long quattuordecillions = ~tredecillions;\n        long quindecillions\
    \ = ~quat", "{\n    long[] result = new long[arr.length];\n    int[] count = new\
    \ int[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n   \
    \     count[arr[i]]++;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(count[arr[i]] > 1)\n        {\n            int j = 0;\n\
    \            while(j < arr.length && count[arr[j]] > 1)\n            {\n     \
    \           j++;\n            }\n            \n            int k = j;\n      \
    \      while(k != i && count[arr[k]] > 1)\n            {\n                k--;\n\
    \            }\n            \n            int temp;\n            if(k != i)\n\
    \            {\n                temp = arr[i];\n                arr[i] = arr[k];\n\
    \                arr[k] = temp;\n            }\n            \n            temp\
    \ = result[i];\n            result[i] = result[k];\n            result[k] = temp;\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            ones[i] = 1;\n        else\n\
    \            ones[i] = 0;\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(ones[i] == 0)\n            zeros[i] = 1;\n        else\n    \
    \        zeros[i] = 0;\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(ones[i] != zeros[i])\n            result[i] = arr[ones[i]];\n    \
    \    else\n            result[i] = arr[zeros[i]];\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it fails when the\
    \ array contains negative numbers. I added a solution that handles negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nThanks for your solution. Your solution is very\
    \ elegant. However I cannot use any library functions. I should implement it myself.\n\
    <|/ c |>\n<| c |>\nI added a solution that handles negative numbers as well.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = new int[]{1, 5, 2, 3, 4, 6};\n    int[] result = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n   \
    \         result[i] = 1;\n        else\n            result[i] = 0;\n    }\n  \
    \  for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] == 0)\n  \
    \          result[i] = 1;\n        else\n            result[i] = 0;\n    }\n \
    \   for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] != arr[i])\n\
    \            System.out.println(arr[i] + \" \" + result[i]);\n    }\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work. Try it with `int[] arr\
    \ = new int[]{1, 5, 2, 3, 4, 6};`\n<|/ c |>\n<| c |>\nI added a solution that\
    \ handles negative numbers as well.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = new int[]{1, 5, 2, 3,\
    \ 4, 6};\n    int[] result = new int[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            result[i] = 1;\n        else\n\
    \            result[i] = 0;\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(result[i] == 0)\n            result[i] = 1;\n        else\n\
    \            result[i] = 0;\n    }", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    int i, j, k;\n    \n    for(i =\
    \ 0; i < arr.length; i++)\n    {\n        ones[i] = 0;\n        for(j = 0; j <\
    \ arr.length; j++)\n        {\n            if(arr[j] == 1)\n            {\n  \
    \              ones[i]++;\n                break;\n            }\n        }\n\
    \    }\n    \n    for(i = 0; i < arr.length; i++)\n    {\n        for(j = 0; j\
    \ < arr.length; j++)\n        {\n            if(ones[j] > ones[i])\n         \
    \   {\n                k = j;\n                break;\n            }\n       \
    \ }\n        \n        result[i] = arr[k];\n        arr[k] = arr[i];\n       \
    \ arr[i] = k;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis solution does not work if the array is sorted in descending order.\
    \ For example, the array `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]` will be sorted\
    \ as `[-4, -3, -2, -1, 0, 1, 2, 3, 4]` instead of `[-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5]`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the solution to\
    \ handle descending order as well.\n<|/ c |>\n<| c |>\nThank you for pointing\
    \ that out. I've updated the solution to handle descending order as well.\n<|/\
    \ c |>\n<| a tags=sorting,arrays,algorithm |>\nI believe this can be solved using\
    \ counting sort and binary search. \nThe idea is to count the number of 1's in\
    \ the binary representation of each number in the array. \nThe counting sort will\
    \ then be used to sort the array in ascending order based on the number of 1's\
    \ in the binary representation. \nThe binary search will then be used to find\
    \ the index of the first number in the array that has the number of 1's equal\
    \ to the number of 1's in the binary representation of that number. \nThe binary\
    \ search will then be used to find the index of the last number in the array that\
    \ has the number of 1's equal to the number of 1's in the binary representation\
    \ of that number. \nThe binary search will then be used to find the index of the\
    \ number in the array that has the number of 1's equal to the number of 1's in\
    \ the binary representation of that number. \nThe binary search will then be used\
    \ to find the index of the number in the array that has the number of 1's equal\
    \ to the number of 1's in the binary representation of that number. \nThe binary\
    \ search will then be used to find the index of the number in the array that has\
    \ the number of 1's equal to the number of 1's in the binary representation of\
    \ that number. \nThe binary search will then be used to find the index of the\
    \ number in the array that has the number of 1's equal to the number of 1's in\
    \ the binary representation of that number. \nThe binary search will ", "{\n \
    \   long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else\n\
    \        {\n            zeros++;\n        }\n        if(ones > zeros)\n      \
    \  {\n            max = ones;\n        }\n        else\n        {\n          \
    \  max = zeros;\n        }\n        result[i] = max;\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis is\
    \ not the correct answer. Try this array `[1L, 0L, 2L, 3L, 4L]`\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. Can you give me the test case?\n<|/ c |>\n\
    <| c |>\nThe test case is `sort_array([1L, 0L, 2L, 3L, 4L])`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you give me the test case?\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine. Can you give me the test case?\n<|/ c |>\n\
    <| a tags=sorting,algorithm,arrays |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4, 6};\n    int[] result = new int[arr.length];\n\
    \    Arrays.sort(arr);\n    int ones = 0;\n    int zeros = 0;\n    int max = 0;\n\
    \    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == 1) {\n    \
    \        ones++;\n        } else {\n            zeros++;\n        }\n        if\
    \ (ones > zeros) {\n            max = ones;\n        } else {\n            max\
    \ = zeros;\n        }\n        result[i] = max;\n    }\n    for (int i = 0; i\
    \ < arr.length; i++) {\n        result[i] = arr[i];\n    }\n    System.out.println(Arrays.toString(result));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the correct answer. Try this\
    \ array `[1L, 0L, 2L, 3L, 4L]`\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Can you give me the test case?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you give me the test case?\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. Can ", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] = i;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(count[arr[i]] > 1)\n        {\n            int j = i;\n   \
    \         while(count[arr[j]] > 1)\n            {\n                j++;\n    \
    \        }\n            int k = j;\n            while(count[arr[k]] > 1)\n   \
    \         {\n                k++;\n            }\n            int temp;\n    \
    \        if(arr[j] < arr[k])\n            {\n                temp = arr[j];\n\
    \                arr[j] = arr[k];\n                arr[k] = temp;\n          \
    \  }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not correct. `sort_array([1L, 5L, 2L, 3L, 4L])` returns\
    \ `[1L, 2L, 3L, 4L, 5L]`, not `[1L, 2L, 3L, 4L, 5L]`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing out. I fixed the code.\n<|/ c |>\n<| c |>\nThis solution does not\
    \ work for negative numbers. `sort_array([-2L, -3L, -4L, -5L, -6L])` returns `[-6L,\
    \ -5L, -4L, -3L, -2L]`, not `[-6L, -5L, -4L, -3L, -2L]`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing out. I fixed the code.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1L, 5L,\
    \ 2L, 3L, 4L};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ int[] count = new int[arr.length];\n    int pos = 0;\n    \n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n       \
    \ {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]--;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    \n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(count[arr[i]] == 1)\n\
    \        {\n            result[pos++] = arr[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]", "{\n    long[] res\
    \ = new long[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n  \
    \      int count = 0;\n        for(int j = 0; j < arr.length; ++j)\n        {\n\
    \            if(arr[j] == 1)\n            {\n                ++count;\n      \
    \      }\n        }\n        res[i] = count;\n    }\n    Arrays.sort(res);\n \
    \   return res;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c\
    \ |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n        if(arr[i] >\
    \ max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] < min)\n\
    \        {\n            min = arr[i];\n        }\n    }\n    long ones_count =\
    \ ones;\n    long zeros_count = zeros;\n    long max_count = max;\n    long min_count\
    \ = min;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] ==\
    \ 1)\n        {\n            ones_count --;\n        }\n        else\n       \
    \ {\n            zeros_count --;\n        }\n        if(ones_count > zeros_count)\n\
    \        {\n            result[i] = max_count;\n        }\n        else\n    \
    \    {\n            result[i] = min_count;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThis doesn't work.\
    \ Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing out. I've fixed the bug and added a test case. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing out. I've fixed the bug and added a test\
    \ case. Hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n            ones[i] = 1;\n        else\n\
    \            ones[i] = 0;\n    }\n    for(int i = 0; i < arr.length; i++)\n  \
    \  {\n        if(ones[i] == 1)\n        {\n            for(int j = i; j < arr.length;\
    \ j++)\n            {\n                if(arr[j] == 1)\n                {\n  \
    \                  zeros[j] = 1;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            for(int j = i; j < arr.length;\
    \ j++)\n            {\n                if(arr[j] == 1)\n                {\n  \
    \                  if(zeros[j] == 1)\n                    {\n                \
    \        zeros[j] = 0;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones[i] == 1)\n        {\n            for(int j = i;\
    \ j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n     \
    \           {\n                    if(zeros[j] == 1)\n                    {\n\
    \                        zeros[j] = 0;\n                        break;\n     \
    \               }\n                }\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(ones[i] == 1)\n        {\n  \
    \          for(int j = i; j < arr.length; j++)\n            {\n              \
    \  if(arr[j] == 1)\n                {\n                    if(zeros[j] == 1)\n\
    \                    {\n                        zeros[j] = 0;\n              \
    \          break;\n                    }\n                }\n            }\n \
    \       }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones[i]\
    \ == 1)\n        {\n            for(int j = i; j < arr.length; j++)\n        \
    \    {\n                if(arr[j] == 1)\n                {\n                 \
    \   if(zeros[j] == 1)\n                    {\n                        zeros[j]\
    \ = 0;\n                        break;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(ones[i] == 1)\n        {\n            for(int j = i; j < arr.length;\
    \ j++)\n            {\n                if(arr[j] == 1)\n                {\n  \
    \                  if(zeros[j] == 1)\n                    {\n                \
    \        zeros[j] = 0;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(ones[i] == 1)\n        {\n            for(int j = i;\
    \ j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n     \
    \           {\n                    if(zeros[j] == 1)\n                    {\n\
    \                        zeros[j] = 0;\n                        break;\n     \
    \               }\n                }\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < arr.length", "{\n    long[] result = new long[arr.length];\n    long[]\
    \ count = new long[arr.length];\n    long ones = 0;\n    long zeros = 0;\n   \
    \ long max = 0;\n    long min = 0;\n    long sum = 0;\n    long sum2 = 0;\n  \
    \  long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n\
    \    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 =\
    \ 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long\
    \ sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n\
    \    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21\
    \ = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long\
    \ sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n\
    \    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32\
    \ = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long\
    \ sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n\
    \    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43\
    \ = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long\
    \ sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n\
    \    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54\
    \ = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long\
    \ sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n\
    \    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65\
    \ = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long\
    \ sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n\
    \    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76\
    \ = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;", "{\n \
    \   long[] result = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int count = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        result[i] = count;\n    }\n   \
    \ \n    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n \
    \       for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       result[i] = count;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int\
    \ j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n      \
    \      {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    int count = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n\
    \            if(arr[j] == 1)\n            {\n                count++;\n      \
    \      }\n        }\n        result[i] = count;\n    }\n    \n    for(int i =\
    \ 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int j =\
    \ 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n          \
    \  {\n                count++;\n            }\n        }\n        result[i] =\
    \ count;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n      \
    \  int count = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n  \
    \          if(arr[j] == 1)\n            {\n                count++;\n        \
    \    }\n        }\n        result[i] = count;\n    }\n    \n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        int count = 0;\n        for(int j = 0;\
    \ j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n            {\n\
    \                count++;\n            }\n        }\n        result[i] = count;\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        int count\
    \ = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j]\
    \ == 1)\n            {\n                count++;\n            }\n        }\n \
    \       result[i] = count;\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n\
    \        {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        result[i] = count;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int\
    \ j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == 1)\n      \
    \      {\n                count++;\n            }\n        }", "{\n    long[]\
    \ result = new long[arr.length];\n    long[] ones = new long[arr.length];\n  \
    \  long[] zeros = new long[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        ones[i] = 1;\n        zeros[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n        for(int\
    \ j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == i)\n      \
    \      {\n                count++;\n            }\n        }\n        if(count\
    \ == 1)\n        {\n            result[i] = i;\n        }\n        else if(count\
    \ == 2)\n        {\n            int temp = 0;\n            for(int j = 0; j <\
    \ arr.length; j++)\n            {\n                if(arr[j] == i)\n         \
    \       {\n                    temp++;\n                }\n            }\n   \
    \         int decimal = temp / 2;\n            result[i] = decimal;\n        }\n\
    \        else\n        {\n            int temp = 0;\n            for(int j = 0;\
    \ j < arr.length; j++)\n            {\n                if(arr[j] == i)\n     \
    \           {\n                    temp++;\n                }\n            }\n\
    \            int decimal = temp / 2;\n            result[i] = decimal;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        int\
    \ count = 0;\n        for(int j = 0; j < arr.length; j++)\n        {\n       \
    \     if(arr[j] == i)\n            {\n                count++;\n            }\n\
    \        }\n        if(count == 1)\n        {\n            result[i] = i;\n  \
    \      }\n        else if(count == 2)\n        {\n            int temp = 0;\n\
    \            for(int j = 0; j < arr.length; j++)\n            {\n            \
    \    if(arr[j] == i)\n                {\n                    temp++;\n       \
    \         }\n            }\n            int decimal = temp / 2;\n            result[i]\
    \ = decimal;\n        }\n        else\n        {\n            int temp = 0;\n\
    \            for(int j = 0; j < arr.length; j++)\n            {\n            \
    \    if(arr[j] == i)\n                {\n                    temp++;\n       \
    \         }\n            }\n            int decimal = temp / 2;\n            result[i]\
    \ = decimal;\n        }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n\
    \        {\n            if(arr[j] == i)\n            {\n                count++;\n\
    \            }\n        }\n        if(count == 1)\n        {\n            result[i]\
    \ = i;\n        }\n        else if(count == 2)\n        {\n            int temp\
    \ = 0;\n            for(int j = 0; j < arr.length; j++)\n            {\n     \
    \           if(arr[j] == i)\n                {\n                    temp++;\n\
    \                }\n            }\n            int decimal = temp / 2;\n     \
    \       result[i] = decimal;\n        }\n        else\n        {\n           \
    \ int temp = 0;\n            for(int j = 0; j < arr.length; j++)\n           \
    \ {\n                if(arr[j] == i)\n                {\n                    temp++;\n\
    \                }\n            }\n", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        count[arr[i]]++;\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        result[i] = arr[i];\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; ++i)\n    {\n        if(count[arr[i]] == 1)\n        {\n     \
    \       int pos = i;\n            for(int j = i; j < arr.length; ++j)\n      \
    \      {\n                if(count[arr[j]] > 1)\n                {\n         \
    \           pos = j;\n                    break;\n                }\n        \
    \    }\n            \n            int tmp = arr[pos];\n            arr[pos] =\
    \ arr[i];\n            arr[i] = tmp;\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int count = 0;\n    while(i < arr.length)\n    {\n      \
    \  while(j < arr.length && arr[j] == 0)\n        {\n            j++;\n       \
    \ }\n        if(j >= arr.length)\n        {\n            break;\n        }\n \
    \       while(k >= 0 && arr[k] == 0)\n        {\n            k--;\n        }\n\
    \        if(k >= 0)\n        {\n            count++;\n        }\n        result[i]\
    \ = count;\n        i++;\n        j++;\n        k++;\n    }\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(arr[i] == 1)\n        {\n            ones++;\n        }\n        else\n\
    \        {\n            zeros++;\n        }\n        if(arr[i] > max)\n      \
    \  {\n            max = arr[i];\n        }\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            result[i] = ones;\n\
    \        }\n        else\n        {\n            result[i] = zeros;\n        }\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == max)\n\
    \        {\n            result[i] = max;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \            ones++;\n        else\n            zeros++;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n            ones = 0;\n        }\n        else\n  \
    \      {\n            result[i] = zeros;\n            zeros++;\n        }\n  \
    \  }\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(result[i] > result[i+1])\n\
    \        {\n            long temp = result[i];\n            result[i] = result[i+1];\n\
    \            result[i+1] = temp;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        if(count[arr[i]] == 1)\n        {\n            int j = i;\n  \
    \          while(j > 0 && count[arr[j-1]] == 1)\n            {\n             \
    \   result[j] = arr[j-1];\n                j--;\n            }\n            result[j]\
    \ = arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work if the array contains negative numbers. Try `sort_array([1L,\
    \ 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't implement\
    \ the sorting algorithm correctly. Your code doesn't sort the array in ascending\
    \ order when there are two or more equal numbers. Try `sort_array([1L, 0L, 2L,\
    \ 3L, 4L])`.\n<|/ c |>\n<| c |>\nI didn't implement the sorting algorithm correctly.\
    \ Your code doesn't sort the array in ascending order when there are two or more\
    \ equal numbers. Try `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\n\
    I didn't implement the sorting algorithm correctly. Your code doesn't sort the\
    \ array in ascending order when there are two or more equal numbers. Try `sort_array([1L,\
    \ 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nI didn't implement the sorting algorithm\
    \ correctly. Your code doesn't sort the array in ascending order when there are\
    \ two or more equal numbers. Try `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[arr.length];\n    long[] ones = new long[arr.length];\n    long[] zeros\
    \ = new long[arr.length];\n    long[] ones_counter = new long[arr.length];\n \
    \   long[] zeros_counter = new long[arr.length];\n    \n    for(int i = 0; i <\
    \ arr.length; ++i)\n    {\n        ones[i] = 1;\n        zeros[i] = 0;\n     \
    \   ones_counter[i] = 0;\n        zeros_counter[i] = 0;\n    }\n    \n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        for(int j = 0; j < arr.length; ++j)\n\
    \        {\n            if(arr[i] > arr[j])\n            {\n                long\
    \ temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        for(int j = 0; j < arr.length; ++j)\n        {\n            if(ones[i]\
    \ > ones[j])\n            {\n                long temp = ones[i];\n          \
    \      ones[i] = ones[j];\n                ones[j] = temp;\n            }\n  \
    \      }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n      \
    \  for(int j = 0; j < arr.length; ++j)\n        {\n            if(zeros[i] > zeros[j])\n\
    \            {\n                long temp = zeros[i];\n                zeros[i]\
    \ = zeros[j];\n                zeros[j] = temp;\n            }\n        }\n  \
    \  }\n    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        for(int j\
    \ = 0; j < arr.length; ++j)\n        {\n            if(ones_counter[i] > ones_counter[j])\n\
    \            {\n                long temp = ones_counter[i];\n               \
    \ ones_counter[i] = ones_counter[j];\n                ones_counter[j] = temp;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        for(int j = 0; j < arr.length; ++j)\n        {\n            if(zeros_counter[i]\
    \ > zeros_counter[j])\n            {\n                long temp = zeros_counter[i];\n\
    \                zeros_counter[i] = zeros_counter[j];\n                zeros_counter[j]\
    \ = temp;\n            }\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        for(int j = 0; j < arr.length; ++j)\n        {\n      \
    \      if(ones[i] > ones[j])\n            {\n                long temp = ones[i];\n\
    \                ones[i] = ones[j];\n                ones[j] = temp;\n       \
    \     }\n        }\n    }\n    \n    for(int i = 0; i < arr.length; ++i)\n   \
    \ {\n        for(int j = 0; j < arr.length; ++j)\n        {\n            if(zeros[i]\
    \ > zeros[j])\n            {\n                long temp = zeros[i];\n        \
    \        zeros[i] = zeros[j];\n                zero", "{\n    long[] result =\
    \ new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n    }\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        for(int j = 0; j < count[arr[i]];\
    \ j++)\n        {\n            int temp = result[i];\n            result[i] =\
    \ result[j];\n            result[j] = temp;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis solution is\
    \ O(n^2) in time and O(n) in space. Not very efficient.\n<|/ c |>\n<| c |>\nYes,\
    \ but it's O(n) time and O(1) space. Not very efficient.\n<|/ c |>\n<| c |>\n\
    Yes, but it's O(n) time and O(1) space. Not very efficient.\n<|/ c |>\n<| c |>\n\
    Yes, but it's O(n) time and O(1) space. Not very efficient.\n<|/ c |>\n<| c |>\n\
    Yes, but it's O(n) time and O(1) space. Not very efficient.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\ndef sort_array(arr):\n    count = {}\n    for x in arr:\n      \
    \  count[x] = count.setdefault(x, 0) + 1\n    sorted_arr = []\n    for x in arr:\n\
    \        sorted_arr.append(x)\n        sorted_arr.sort(key=lambda x: count[x])\n\
    \    return sorted_arr\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c\
    \ |>\nThis solution is O(n^2) in time and O(n) in space. Not very efficient.\n\
    <|/ c |>\n<| c |>\nYes, but it's O(n) time and O(1) space. Not very efficient.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n\
    \    count = {}\n    for x in arr:\n        count[x] = count.setdefault(x, 0)\
    \ + 1\n    sorted_arr = []\n    for x in arr:\n        sorted_arr.append(x)\n\
    \        sorted_arr.sort(key=lambda x: count[x])\n    return sorted_arr\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\ndef sort_array(arr):\n\
    \    count = {}\n    for x in arr:\n        count[x] = count.setdefault(x, 0)\
    \ + 1\n    sorted_arr", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        for(int j = 0; j < count[arr[i]]; ++j)\n        {\n          \
    \  int temp = result[i];\n            result[i] = result[j];\n            result[j]\
    \ = temp;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm\
    \ |>\n<| c |>\nThis is not the correct answer. Try it with the input `[1L, 0L,\
    \ 2L, 3L, 4L]`.\n<|/ c |>\n<| c |>\nI believe this answer is correct. Can you\
    \ please explain why you think it isn't?\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is correct. Can you please explain why you think it isn't?\n<|/ c |>\n<| c |>\n\
    I believe this answer is correct. Can you please explain why you think it isn't?\n\
    <|/ c |>\n<| c |>\nThis is not the correct answer. Try it with the input `[1L,\
    \ 0L, 2L, 3L, 4L]`.\n<|/ c |>\n<| a dscore=5 |>\nThe best solution I found is\
    \ this:\n<code>\ndef sort(arr):\n    arr.sort()\n    arr.sort(key=lambda x: -x.count())\n\
    \    return arr\n</code>\n<|/ a tags=sorting,arrays,algorithm |>\n<| c |>\nThis\
    \ is not the correct answer. Try it with the input `[1L, 0L, 2L, 3L, 4L]`.\n<|/\
    \ c |>\n<| c |>\nThis is not the correct answer. Try it with the input `[1L, 0L,\
    \ 2L, 3L, 4L]`.\n<|/ c |>\n<| c |>\nThis is not the correct answer. Try it with\
    \ the input `[1L, 0L, 2L, 3L, 4L]`.\n<|/ c |>\n<| c |>\nThis is not the correct\
    \ answer. Try it with the input `[1L, 0L, 2L, 3L, 4L]`.\n<|/ c |>\n<| c |>\nThis\
    \ is not the correct answer. Try it with the input `[1L, 0L, 2L, 3L, 4L]`.\n<|/\
    \ c |>", "{\n    long[] result = new long[arr.length];\n    int[] count = new\
    \ int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[count[arr[i]]\
    \ - 1];\n        count[arr[i]]--;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`.\n<|/ c |>\n<| c |>\n:\
    \ Thanks for pointing that out. I've fixed the code accordingly.\n<|/ c |>\n<|\
    \ a tags=sorting,algorithm,arrays |>\n<code>\ndef sort(arr):\n    arr.sort()\n\
    \    arr.reverse()\n    return arr\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`.\n\
    <|/ c |>\n<| a |>\n<code>\ndef sort(arr):\n    arr.sort()\n    arr.reverse()\n\
    \    return arr\n</code>\n<|/ a dscore=4 tags=sorting,algorithm,arrays |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L,\
    \ -5L, -6L])`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try\
    \ `sort_array([-2L, -3L, -4L, -5L, -6L])`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\ndef sort(arr):\n    arr.sort()\n    arr.reverse()\n\
    \    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `sort_array([-2L, -3L, -4L, -5L, -6L])`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\ndef sort(arr):\n\
    \    arr.sort()\n    arr.reverse()\n    return arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\n", "{\n    long[] result = new long[arr.length];\n    int i = 0;\n\
    \    long ones = 0;\n    long twos = 0;\n    long threes = 0;\n    long fours\
    \ = 0;\n    long fives = 0;\n    long sixes = 0;\n    long sevens = 0;\n    long\
    \ eights = 0;\n    long nines = 0;\n    long tens = 0;\n    long hundreds = 0;\n\
    \    long thousands = 0;\n    long ten_thousands = 0;\n    long hundred_thousands\
    \ = 0;\n    long thousand_thousands = 0;\n    long hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_thousands = 0;\n    long hundred_thousand_hundred_thousand_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousands = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_thousands = 0;\n \
    \   long hundred_thousand_hundred_thousand_hundred_thousand_thousands = 0;\n \
    \   long thousand_hundred_thousand_hundred_thousand_hundred_thousands = 0;\n \
    \   long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousand_hundred_thousands\
    \ = 0;\n    long thousand_hundred_thousand_hundred_thousand_hund", "{\n    long[]\
    \ res = new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        res[i] = count[arr[i]];\n    }\n\
    \    Arrays.sort(res);\n    return res;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not an answer to the question. He wants to sort an array\
    \ of non-negative integers according to number of ones in their binary representation\
    \ in ascending order. For similar number of ones, sort based on decimal value.\n\
    <|/ c |>\n<| c |>\nI edited the question to make it clearer. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nI edited the answer to make it clearer. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nI edited the answer to make it clearer. Sorry for the confusion.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[arr.length];\n    int[] count = new int[arr.length];\n    for(int i\
    \ = 0; i < arr.length; i++) \n    {\n        count[arr[i]]++;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        result[i] = count[arr[i]];\n  \
    \  }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you very much! I didn't know that there is an Arrays.sort\
    \ function in Java.\n<|/ c |>\n<| c |>\nYou're welcome. Arrays.sort is very useful\
    \ in many situations. You can find more information here: https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-int:A-\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = new int[]{1L, 5L, 2L, 3L, 4L};\n    System.out.println(Arrays.toString(sort_array(arr)));\n\
    }", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long\
    \ zeros = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        if(arr[i] > 0)\n        {\n            ones++;\n        }\n     \
    \   else\n        {\n            zeros++;\n        }\n        if(ones > zeros)\n\
    \        {\n            max = ones;\n        }\n        else\n        {\n    \
    \        max = zeros;\n        }\n        result[i] = max;\n    }\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        ones--;\n        }\n        else\n        {\n            zeros--;\n \
    \       }\n        if(ones > zeros)\n        {\n            max = ones;\n    \
    \    }\n        else\n        {\n            max = zeros;\n        }\n       \
    \ result[i] = max;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] res = new long[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        long ones = arr[i];\n        long tens = ones * 10;\n        long\
    \ hundreds = tens * 100;\n        long thousands = hundreds * 1000;\n        long\
    \ millions = thousands * 1000000;\n        long billions = millions * 1000000000;\n\
    \        long trillions = billions * 1000000000000;\n        long quadrillions\
    \ = trillions * 1000000000000000;\n        long quintillions = quadrillions *\
    \ 100000000000000000;\n        long sextillions = quintillions * 1000000000000000000;\n\
    \        long septillions = sextillions * 10000000000000000000;\n        long\
    \ octillions = septillions * 100000000000000000000;\n        long nonillions =\
    \ octillions * 10000000000000000000000;\n        long decillions = nonillions\
    \ * 10000000000000000000000000;\n        long undecillions = decillions * 100000000000000000000000000;\n\
    \        long duodecillions = undecillions * 10000000000000000000000000000;\n\
    \        long tredecillions = duodecillions * 10000000000000000000000000000000;\n\
    \        long quattuordecillions = tredecillions * 1000000000000000000000000000000000;\n\
    \        long quindecillions = quattuordecillions * 10000000000000000000000000000000000;\n\
    \        long sexdecillions = quindecillions * 10000000000000000000000000000000001;\n\
    \        long septendecillions = sexdecillions * 10000000000000000000000000000000010;\n\
    \        long octodecillions = septendecillions * 100000000000000000000000000000000100;\n\
    \        long novemdecillions = octodecillions * 1000000000000000000000000000000001000;\n\
    \        long vigintillions = novemdecillions * 10000000000000000000000000000000010000;\n\
    \        long unvigintillions = vigintillions * 10000000000000000000000000000000010000;\n\
    \        long duovigintillions = unvigintillions * 1000000000000000000000000000000001000;\n\
    \        long trevigintillions = duovigintillions * 10000000000000000000000000000000010000;\n\
    \        long quattuorvigintillions = trevigintillions * 1000000000000000000000000000000001000;\n\
    \        long quinvigintillions = qu", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] zeros = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        if(arr[i] == 1)\n   \
    \         ones[i] = 1;\n        else\n            ones[i] = 0;\n    }\n    for(int\
    \ i = 0; i < arr.length; ++i)\n    {\n        if(ones[i] == 1)\n            result[i]\
    \ = i;\n        else\n            zeros[i] = i;\n    }\n    for(int i = 0; i <\
    \ arr.length; ++i)\n    {\n        if(ones[i] == 1)\n        {\n            int\
    \ j = zeros[i];\n            while(j != i)\n            {\n                result[j]\
    \ = result[i];\n                j = zeros[j];\n            }\n            result[j]\
    \ = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays\
    \ |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\nfunction sortArray(arr) {\n\
    \    var result = [];\n    var ones = [];\n    var zeros = [];\n    var temp =\
    \ [];\n    for(var i=0; i<arr.length; i++) {\n        if(arr[i] == 1) {\n    \
    \        ones.push(i);\n        } else {\n            zeros.push(i);\n       \
    \ }\n    }\n    for(var i=0; i<ones.length; i++) {\n        for(var j=0; j<ones.length;\
    \ j++) {\n            if(ones[j] == i) {\n                temp.push(ones[j]);\n\
    \                temp.push(zeros[j]);\n                result.push(temp);\n  \
    \              temp = [];\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\n\
    function sortArray(arr) {\n    var result = [];\n    var ones = [];\n    var zeros\
    \ = [];\n    var temp = [];\n    for(var i=0; i<arr.length; i++) {\n        if(arr[i]\
    \ == 1) {\n            ones.push(i);\n        } else {\n            zeros.push(i);\n\
    \        }\n    }\n    for(var i=0; i<ones.length; i++) {\n        for(var j=0;\
    \ j<ones.length; j++) {\n            if(ones[j] == i) {\n                temp.push(ones[j]);\n\
    \                temp.push(zeros[j]);\n                result.push(temp);\n  \
    \              temp = [];\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,sorting,arrays |>\n<code>\n\
    function sortArray(arr) {\n    var result = [];\n    var ones = [];\n    var zeros\
    \ = [];\n    var temp = [];\n    for(var i=0; i<arr.length; i++) {\n        if(arr[i]\
    \ == 1) {\n            ones.push(i);\n        } else {\n            zeros.push(i);\n\
    \        }\n    }\n    for(var i=0; i<ones.length; i++) {\n        for(var j=0;\
    \ j<ones.length; j++) {\n            if(ones[j] == i) {\n                temp.",
  "{\n    long[] result = new long[arr.length];\n    int[] count = new int[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n  \
    \  }\n    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = 0;\n\
    \        for(int j = 0; j < count[arr[i]]; ++j)\n        {\n            result[i]\
    \ += (1 << j);\n        }\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] /= count[arr[i]];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nThis doesn't work. Try it with\
    \ `sort_array([1L, 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt works. I tested it\
    \ with `sort_array([1L, 5L, 2L, 3L, 4L])` and it returned `[1L, 2L, 3L, 4L, 5L]`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it with `sort_array([1L, 5L, 2L, 3L, 4L])`\
    \ and it returned `[1L, 2L, 3L, 4L, 5L]`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a dscore=2 |>\n\
    This can be done in O(n) time complexity using radix sort. \nThe idea is to sort\
    \ each number in O(n) time using radix sort and store it in a map with key as\
    \ the radix and value as the number of occurrences of that radix.\nThe radix sort\
    \ is done in O(n) time complexity and O(n) space complexity. \n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport\
    \ java.util.Map;", "{\n    long[] result = new long[arr.length];\n    int[] count\
    \ = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n    {\n   \
    \     count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n    {\n\
    \        result[i] = count[arr[i]];\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very similar to mine. My solution works well for small arrays but\
    \ fails for large arrays. I tested it on arrays of size 10^6 and it took around\
    \ 2 seconds. Your solution took around 1 second. My solution took around 3 seconds.\
    \ I guess my solution is O(nlogn) while yours is O(n^2). My solution is O(nlogn)\
    \ because you sort the array and then you count the ones. Your solution is O(n^2)\
    \ because you count the ones and then you sort the array. Both solutions are O(nlogn)\
    \ because you sort the array and then you count the ones. I guess my solution\
    \ is O(nlogn) because you sort the array and then you count the ones. Your solution\
    \ is O(n^2) because you count the ones and then you sort the array. Both solutions\
    \ are O(nlogn) because you sort the array and then you count the ones. I guess\
    \ my solution is O(nlogn) because you sort the array and then you count the ones.\
    \ Your solution is O(n^2) because you count the ones and then you sort the array.\
    \ Both solutions are O(nlogn) because you sort the array and then you count the\
    \ ones. I guess my solution is O(nlogn) because you sort the array and then you\
    \ count the ones. Your solution is O(n^2) because you count the ones and then\
    \ you sort the array. Both solutions are O(nlogn) because you sort the array and\
    \ then you count the ones. I guess my solution is O(nlogn) because you sort the\
    \ array and then you count the ones. Your solution is O(n^2) because you count\
    \ the ones and then you sort the array. Both solutions are O(nlogn) because you\
    \ sort the array and then you count the ones. I guess my solution is O(nlogn)\
    \ because you sort the array and then you count the ones. Your solution is O(n^2)\
    \ because you count the ones and then you sort the array. Both solutions are O(nlogn)\
    \ because you sort the array and then you ", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    if(count == 0)\n        {\n            result[i] = arr[i];\n        }\n \
    \       else\n        {\n            int dec = 0;\n            for(int j = 0;\
    \ j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n     \
    \           {\n                    dec += pow(10, j);\n                }\n   \
    \         }\n            result[i] = dec;\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c\
    \ |>\nThis doesn't work. Try it with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/\
    \ c |>\n<| c |>\nI didn't test it, but I believe it works. I tested it on `sort_array([1L,\
    \ 0L, 2L, 3L, 4L])` and it returns `[1L, 2L, 3L, 4L, 0L]`.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `sort_array([1L, 0L, 2L, 3L, 4L])`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `sort_array([1L, 0L, 2L, 3L, 4L])` and it returns `[1L,\
    \ 2L, 3L, 4L, 0L]`.\n<|/ c |>\n<| c |>\nI tested it on `sort_array([1L, 0L, 2L,\
    \ 3L, 4L])` and it returns `[1L, 2L, 3L, 4L, 0L]`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3,\
    \ 4, 6};\n    int[] arr2 = new int[arr.length];\n    int count = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        for (int j = 0; j < arr.length; j++)\
    \ {\n            if (arr[i] == 1) {\n                count++;\n            }\n\
    \        }\n        if (count == 0) {\n            arr2[i] = arr[i];\n       \
    \ }\n        else {\n            int dec = 0;\n            for (int j = 0; j <\
    \ arr.length; j++) {\n                if (arr[j] == 1) {\n                   \
    \ dec += Math.pow(10, j);\n                }\n            }\n            arr2[i]\
    \ = dec;\n        }\n    }\n    Arrays.sort(arr2);\n    for (int i = 0; i < arr2.length;\
    \ i++) {\n        System.out.println(arr2[i]);\n    }\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| ", "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n\
    \    long zeros = 0;\n    for(int i = 0; i < arr.length; ++i)\n    {\n       \
    \ long value = arr[i];\n        if(value == 1)\n        {\n            ones++;\n\
    \        }\n        else\n        {\n            zeros++;\n        }\n    }\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        long value = arr[i];\n\
    \        if(value == 1)\n        {\n            result[i] = ones;\n        }\n\
    \        else\n        {\n            result[i] = zeros;\n        }\n    }\n \
    \   Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This is not the correct answer. Your code does not sort the array in ascending\
    \ order. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting an array of non-negative integers according to number\
    \ of ones in their binary representation in ascending order. Your code sorts them\
    \ in descending order. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n<|/ c |>\n\
    <| c |>\nThe question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Your code\
    \ sorts them in descending order. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Your code sorts them in descending order. Try it with `sort_array([1L, 5L, 2L,\
    \ 3L, 4L])`\n<|/ c |>\n<| c |>\nThe question was about sorting an array of non-negative\
    \ integers according to number of ones in their binary representation in ascending\
    \ order. Your code sorts them in descending order. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        long count = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] == 1)\n            {\n              \
    \  count++;\n            }\n        }\n        result[i] = count;\n    }\n   \
    \ Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    int i = 0;\n    int j = 0;\n   \
    \ int k = 0;\n    int n = 0;\n    int m = arr.length;\n    \n    while (i < m)\
    \ {\n        if (arr[i] == 1) {\n            ones[k] = 1;\n            k++;\n\
    \        } else {\n            ones[k] = 0;\n            k++;\n        }\n   \
    \     i++;\n    }\n    \n    while (j < n) {\n        if (ones[j] == 1) {\n  \
    \          result[j] = ones[j];\n            j++;\n        } else {\n        \
    \    result[j] = arr[j];\n            j++;\n        }\n    }\n    \n    while\
    \ (j < n) {\n        if (ones[j] == 1) {\n            result[j] = arr[j];\n  \
    \          j++;\n        } else {\n            result[j] = ones[j];\n        \
    \    j++;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your solution works fine for small arrays,\
    \ but for large arrays it takes too much time to execute.\n<|/ c |>\n<| c |>\n\
    I tested it on large arrays and it works fine. Can you post your test case?\n\
    <|/ c |>\n<| c |>\nI tested it on large arrays and it works fine. Can you post\
    \ your test case?\n<|/ c |>\n<| c |>\nI tested it on large arrays and it works\
    \ fine. Can you post your test case?\n<|/ c |>\n<| c |>\nI tested it on large\
    \ arrays and it works fine. Can you post your test case?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] res = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        long ones = arr[i];\n\
    \        long twos = ~ones;\n        long threes = ~twos;\n        long fours\
    \ = ~threes;\n        long fives = ~fours;\n        long sixes = ~fives;\n   \
    \     long sevens = ~sixes;\n        long eights = ~sevens;\n        long nines\
    \ = ~eights;\n        long tens = ~nines;\n        long elevens = ~tens;\n   \
    \     long twelves = ~elevens;\n        long thirteens = ~twelves;\n        long\
    \ fourteens = ~thirteens;\n        long fifteens = ~fourteens;\n        long sixteens\
    \ = ~fifteens;\n        long seventeens = ~sixteens;\n        long eighteens =\
    \ ~seventeens;\n        long nineteens = ~eighteens;\n        long twenty = ~nineteens;\n\
    \        long thirty = ~twenty;\n        long forty = ~thirty;\n        long fifty\
    \ = ~forty;\n        long sixty = ~fifty;\n        long seventy = ~sixty;\n  \
    \      long eighty = ~seventy;\n        long ninety = ~eighty;\n        long hundreds\
    \ = ~ninety;\n        long thousands = ~hundreds;\n        long tenthousands =\
    \ ~thousands;\n        long hundredthousands = ~tenthousands;\n        long millions\
    \ = ~hundredthousands;\n        long billions = ~millions;\n        long trillions\
    \ = ~billions;\n        long quadrillions = ~trillions;\n        long quintillions\
    \ = ~quadrillions;\n        long sextillions = ~quintillions;\n        long septillions\
    \ = ~sextillions;\n        long octillions = ~septillions;\n        long nonillions\
    \ = ~octillions;\n        long decillions = ~nonillions;\n        long undecillions\
    \ = ~decillions;\n        long duodecillions = ~undecillions;\n        long tredecillions\
    \ = ~duodecillions;\n        long qu", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    Arrays.sort(result);\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. `sort_array([-2L, -3L, -4L, -5L, -6L])` returns\
    \ `[-6L, -5L, -4L, -3L, -2L]`\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. `sort_array([-2L, -3L, -4L, -5L,\
    \ -6L])` returns `[-6L, -5L, -4L, -3L, -2L]`\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with negative numbers. I tested it and it works.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if the array contains negative numbers. `sort_array([-2L,\
    \ -3L, -4L, -5L, -6L])` returns `[-6L, -5L, -4L, -3L, -2L]`\n<|/ c |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    long ones = 0;\n    long zeros = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            ones++;\n        }\n \
    \       else\n        {\n            zeros++;\n        }\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n     \
    \       result[i] = ones;\n        }\n        else\n        {\n            result[i]\
    \ = zeros;\n        }\n    }\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(result[i] > result[i + 1])\n        {\n            long temp = result[i];\n\
    \            result[i] = result[i + 1];\n            result[i + 1] = temp;\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = arr.length;\n\
    \    \n    while(i < m) {\n        n = arr[++i];\n        while(j < m) {\n   \
    \         m = arr[++j];\n            if(n != m) {\n                if(std.bitCount(n)\
    \ == std.bitCount(m)) {\n                    if(std.bitCount(n) == 1) {\n    \
    \                    result[k] = n;\n                        k++;\n          \
    \          }\n                    else {\n                        int res = std.bitCount(n)\
    \ - std.bitCount(m);\n                        if(res == 1) {\n               \
    \             result[k] = n;\n                            k++;\n             \
    \           }\n                        else {\n                            result[k]\
    \ = m;\n                            k++;\n                        }\n        \
    \            }\n                }\n                else {\n                  \
    \  if(std.bitCount(n) == 1) {\n                        result[k] = n;\n      \
    \                  k++;\n                    }\n                    else {\n \
    \                       int res = std.bitCount(n) - std.bitCount(m);\n       \
    \                 if(res == 1) {\n                            result[k] = m;\n\
    \                            k++;\n                        }\n               \
    \         else {\n                            result[k] = n;\n               \
    \             k++;\n                        }\n                    }\n       \
    \         }\n            }\n            else {\n                result[k] = n;\n\
    \                k++;\n            }\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have negative numbers\
    \ in the array.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ The only thing that can go wrong is if the array has negative numbers. But I\
    \ thought that was not a problem in this case.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it doesn't work. Try it with this array: `[-5L, -6L, -4L, -3L, -2L,\
    \ 1L, 0L, 2L, 3L, 4L]`\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited\
    \ my answer with the new code. Thanks for pointing out my mistake.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I edited my answer with the new code.\
    \ Thanks for pointing out my mistake.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] arr = {-5, -6, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| c |>\n", "{\n    long[] result\
    \ = new long[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        int count = 0;\n        for(int j = 0; j < arr.length; j++)\n   \
    \     {\n            if(arr[j] == 1)\n            {\n                count++;\n\
    \            }\n        }\n        \n        if(count == 0)\n        {\n     \
    \       result[i] = arr[i];\n        }\n        else\n        {\n            int\
    \ decimal = count - 1;\n            int power = 1;\n            for(int j = 0;\
    \ j < arr.length; j++)\n            {\n                if(arr[j] == 1)\n     \
    \           {\n                    decimal -= power;\n                    power\
    \ *= 10;\n                }\n            }\n            result[i] = decimal;\n\
    \        }\n    }\n    \n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to mine, but I still don't understand why my solution\
    \ doesn't work. Can you please explain why my solution doesn't work?\n<|/ c |>\n\
    <| c |>\nI added a comment to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to mine, but I still don't understand why my solution\
    \ doesn't work. Can you please explain why my solution doesn't work?\n<|/ c |>\n\
    <| c |>\nI added a comment to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to mine, but I still don't understand why my solution\
    \ doesn't work. Can you please explain why my solution doesn't work?\n<|/ c |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 5, 2, 3, 4, 6};\n    int[] result = new int[arr.length];\n\
    \    Arrays.sort(arr);\n    int index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] == 1) {\n            result[index++] = i;\n     \
    \   }\n    }\n    System.out.println(Arrays.toString(result));\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution is very similar\
    \ to mine, but I still don't understand why my solution doesn't work. Can you\
    \ please explain why my solution doesn't work?\n<|/ c |>\n<| c |>\nI added a comment\
    \ to my answer.\n<|/ c |>\n<| a |>\n<code>\npublic class SortArray {\n    public\
    \ static void main(String[] args) {\n        int[] arr = {1, 5, 2, 3, 4, 6};\n\
    \        int[] result = ", "{\n    long[] result = new long[arr.length];\n   \
    \ for(int i = 0; i < arr.length; ++i)\n    {\n        int count = 0;\n       \
    \ for(int j = 0; j < arr.length; ++j)\n        {\n            if(arr[j] == 1)\n\
    \            {\n                ++count;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] arr = {1, 5, 2, 3, 4, 6};\n   \
    \ Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n    int[]\
    \ count = new int[arr.length];\n    \n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        count[arr[i]]++;\n    }\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = arr[i];\n    }\n    \n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (count[arr[i]] == 1)\n        {\n    \
    \        int pos = i;\n            while (pos > 0 && count[arr[pos-1]] == 1)\n\
    \            {\n                result[pos] = arr[pos-1];\n                pos--;\n\
    \            }\n            result[pos] = arr[i];\n        }\n    }\n    \n  \
    \  return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<|\
    \ c |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n<|/\
    \ c |>\n<| c |>\nIt works fine for me. Can you give me an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nIt doesn't work for `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `sort_array([1L, 5L,\
    \ 2L, 3L, 4L])`.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[arr.length];\n    int\
    \ pos = 0;\n    int neg = 0;\n    int zero = 0;\n    int one = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        result[pos++] = arr[i];\n        }\n        else if(arr[i] < 0)\n   \
    \     {\n            result[neg++] = arr[i];\n        }\n        else if(arr[i]\
    \ == 0)\n        {\n            result[zero++] = arr[i];\n        }\n        else\n\
    \        {\n            result[one++] = arr[i];\n        }\n    }\n    \n    Arrays.sort(result);\n\
    \    \n    for(int i = 0; i < result.length; i++)\n    {\n        if(result[i]\
    \ > 0)\n        {\n            result[i] = -result[i];\n        }\n    }\n   \
    \ \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    I like your solution, but I believe it can be improved by using a single loop\
    \ and a couple of variables to keep track of the current number of ones and zeros\
    \ in the array and to keep track of the current position in the result array.\
    \ Also, since we're only dealing with positive numbers, we can use an int to store\
    \ the current number of ones and zeros instead of an enum.\n<|/ c |>\n<| c |>\n\
    I agree with you that a single loop would be better. I'll try to implement it\
    \ this way and update my answer accordingly.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer accordingly. Thanks for your suggestions.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport java.util.Arrays;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
