language: d
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_bfxbrfp.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp_bfxbrfp.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp_bfxbrfp.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x50b6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c# |>\n\
    <| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c#\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis answer was flagged\
    \ as low-quality because of its length and content. While I agree that it is an\
    \ answer, it would be better if you could add some explanation as to why it is\
    \ the correct answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \           result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a \nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp93tox920.d(20): Error: declaration expected, not `<`\n/tmp/tmp93tox920.d(27):
    Error: declaration expected, not `for`\n/tmp/tmp93tox920.d(27): Error: no identifier
    for declarator `i`\n/tmp/tmp93tox920.d(27): Error: declaration expected, not `<`\n/tmp/tmp93tox920.d(27):
    Error: no identifier for declarator `i`\n/tmp/tmp93tox920.d(27): Error: declaration
    expected, not `++`\n/tmp/tmp93tox920.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93tox920.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i++] = item;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n            result[i++] =\
    \ item;\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[]\
    \ result = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i++] = item;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,c# dscore=1 |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9vza4rze.d(21): Error: declaration expected, not `<`\n/tmp/tmp9vza4rze.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmp9vza4rze.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vza4rze.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i;\n    for (i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp266i5014.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp266i5014.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp266i5014.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x821e8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpn5svorbw.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpn5svorbw.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpn5svorbw.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd8706554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpw7fhm48c.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpw7fhm48c.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpw7fhm48c.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xefcdf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array. Try\
    \ it with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it.  Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n  \
    \  for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8k01pli5.d(20): Error: declaration expected, not `<`\n/tmp/tmp8k01pli5.d(23):
    Error: unterminated character constant\n/tmp/tmp8k01pli5.d(33): Error: declaration
    expected, not `for`\n/tmp/tmp8k01pli5.d(33): Error: no identifier for declarator
    `i`\n/tmp/tmp8k01pli5.d(33): Error: declaration expected, not `<`\n/tmp/tmp8k01pli5.d(33):
    Error: no identifier for declarator `i`\n/tmp/tmp8k01pli5.d(33): Error: declaration
    expected, not `++`\n/tmp/tmp8k01pli5.d(37): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8k01pli5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > 0) \n        {\n            result[j++] = l[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppw2zs92z.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmppw2zs92z.__unittest_L23_C1() [0x427fb1]\n??:?
    void tmppw2zs92z.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0x7c0d0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis is not the best solution. Try sorting an array of 1000 elements\
    \ and you will see that your algorithm will take more than 10 seconds to complete.\n\
    <|/ c |>\n<| c |>\nI agree with you, this is just a simple solution. But the OP\
    \ asked for a solution in C#, so I posted this solution. Anyway, I edited my answer\
    \ to add an alternative solution in C#.\n<|/ c |>\n<| c |>\nThe OP asked for a\
    \ solution in C#, so I posted this solution. Anyway, I edited my answer to add\
    \ an alternative solution in C#.\n<|/ c |>\n<| c |>\nThe OP asked for a solution\
    \ in C#, so I posted this solution. Anyway, I edited my answer to add an alternative\
    \ solution in C#.\n<|/ c |>\n<| c |>\nI see that you have added a C# solution,\
    \ but you haven't added a C# solution to the question. Your C# solution doesn't\
    \ even compile.\n<|/ c |>\n<| a |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] arr = new int[] { 1, -4, 2, 5, 6, -9, 3, -7, 8, 10, -12, 4 };\n \
    \   Array.Sort(arr);\n    Console.WriteLine(string.Join(\",\", arr));\n}\n</code>\n\
    <|/ a tags=arrays,c#,sorting,algorithm dscore=2 |>\n<| c |>\nThis is not the best\
    \ solution. Try sorting an array of 1000 elements and you will see that your algorithm\
    \ will take more than 10 seconds to complete.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, this is just a simple solution. But the OP asked for a solution in C#,\
    \ so I posted this solution. Anyway, I edited my answer to add an alternative\
    \ solution in C#.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static void Main(string[]\
    \ args)\n{\n    int[] arr = new int[] { 1, -4, 2, 5, 6, -9, 3, -7, 8, 10, -12,\
    \ 4 };\n    Array.Sort(arr);\n    Console.WriteLine(string.Join(\",\", arr));\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpli78j2vb.d(20): Error: declaration expected, not `<`\n/tmp/tmpli78j2vb.d(35):
    Error: unterminated character constant\n/tmp/tmpli78j2vb.d(35): Error: unterminated
    character constant\n/tmp/tmpli78j2vb.d(42): Error: function declaration without
    return type. (Note that constructors are always named `this`)\n/tmp/tmpli78j2vb.d(42):
    Error: no identifier for declarator `Array.Sort(arr)`\n/tmp/tmpli78j2vb.d(43):
    Error: unexpected `(` in declarator\n/tmp/tmpli78j2vb.d(43): Error: unexpected
    `(` in declarator\n/tmp/tmpli78j2vb.d(43): Error: basic type expected, not `","`\n/tmp/tmpli78j2vb.d(43):
    Error: found `","` when expecting `)`\n/tmp/tmpli78j2vb.d(43): Error: no identifier
    for declarator `Console.WriteLine(string.Join(_error_), arr)`\n/tmp/tmpli78j2vb.d(43):
    Error: semicolon expected following function declaration\n/tmp/tmpli78j2vb.d(43):
    Error: declaration expected, not `)`\n/tmp/tmpli78j2vb.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli78j2vb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ negative numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n\
    \    []\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [-5L, -3L, 2L, 3L, 9L, 0L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only positive and negative numbers in\
    \ the array.\n    >>> get_positive_negative([-1L, 2L, -4L, 5L, 6L])\n    []\n\
    \    >>> get_positive_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [-5L, -3L, 2L, 3L, 9L, 0L, 123L, 1L]\n    \n*/\nlong[] get_positive_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] > 0 && l[i] < 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only positive numbers in the\
    \ array.\n    >>> get_positive_positive([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>>\
    \ get_positive_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_positive_positive(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] > 0 && l[i] > 0)\n            result[i]\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn only numbers in the array\
    \ that are divisible by 3.\n    >>> get_divisible_by_three([-1L, 2L, -4L, 5L,\
    \ 6L])\n    []\n    >>> get_divisible_by_three([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3825eonk.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3825eonk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6pl12oak.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp6pl12oak.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp6pl12oak.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x57489554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkkzkq1n6.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpkkzkq1n6.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpkkzkq1n6.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xa383554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > 0)\n        {\n            result[j++] = l[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl28yxp95.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmpl28yxp95.__unittest_L23_C1() [0x427fb1]\n??:?
    void tmpl28yxp95.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0x60c9d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n\
    \        {\n            result[i] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd8qm7c6_.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpd8qm7c6_.__unittest_L23_C1() [0x427fb5]\n??:?
    void tmpd8qm7c6_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x723cb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n        {\n            result[i] = item;\n    \
    \        i++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ugtsfyo.d(21): Error: declaration expected, not `<`\n/tmp/tmp4ugtsfyo.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmp4ugtsfyo.d(34): Error: no
    identifier for declarator `i`\n/tmp/tmp4ugtsfyo.d(34): Error: declaration expected,
    not `++`\n/tmp/tmp4ugtsfyo.d(35): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4ugtsfyo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with the input `[-3L, 2L, -5L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]`\n<|/ c |>\n<| c |>\n: I missed the negative numbers. I\
    \ edited the answer to include them.\n<|/ c |>\n<| c |>\n: I added a second solution\
    \ that doesn't require any additional libraries.\n<|/ c |>\n<| c |>\n: I added\
    \ a third solution that doesn't require any additional libraries.\n<|/ c |>\n\
    <| c |>\n: I added a fourth solution that doesn't require any additional libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void Main(string[] args)\n{\n\
    \    int[] arr = new int[] { -1, 2, -4, 5, 6 };\n    int[] result = new int[arr.Length];\n\
    \    int i = 0;\n    foreach (int item in arr)\n    {\n        if (item > 0)\n\
    \        {\n            result[i++] = item;\n        }\n    }\n    Console.WriteLine(string.Join(\"\
    ,\", result));\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with the input `[-3L, 2L, -5L, 3L, 9L, 0L, 123L, 1L, -10L]`\n<|/\
    \ c |>\n<| c |>\n: I missed the negative numbers. I edited the answer to include\
    \ them.\n<|/ c |>\n<| c |>\n: I added a second solution that doesn't require any\
    \ additional libraries.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqyled7pv.d(21): Error: declaration expected, not `<`\n/tmp/tmpqyled7pv.d(24):
    Error: unterminated character constant\n/tmp/tmpqyled7pv.d(30): Error: unterminated
    character constant\n/tmp/tmpqyled7pv.d(33): Error: unterminated character constant\n/tmp/tmpqyled7pv.d(36):
    Error: unterminated character constant\n/tmp/tmpqyled7pv.d(45): Error: declaration
    expected, not `foreach`\n/tmp/tmpqyled7pv.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyled7pv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; i++)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp93tr6vqr.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp93tr6vqr.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp93tr6vqr.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd7b4c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan9w_0jq.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpan9w_0jq.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpan9w_0jq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xeffa1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        if(l[i] > 0)\n            res[i]\
    \ = l[i];\n    return res;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<|\
    \ c |>\nThis doesn't work. `get_positive([-1L, 2L, -4L, 5L, 6L])` returns `[-4L,\
    \ 2L, 5L, 6L]` instead of `[2L, 5L, 6L]`.\n<|/ c |>\n<| c |>\n: I fixed the bug.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n: I\
    \ fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \           result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c#,algorithm |>\n<| c |>\nThis doesn't work. `GetPositive([-1L,\
    \ 2L, -4L, 5L, 6L])` returns `[-4L, 2L, 5L, 6L]` instead of `[2L, 5L, 6L]`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,algorithm |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=array\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc5os6f_q.d(18): Error: declaration expected, not `<`\n/tmp/tmpc5os6f_q.d(21):
    Error: unterminated character constant\n/tmp/tmpc5os6f_q.d(37): Error: declaration
    expected, not `for`\n/tmp/tmpc5os6f_q.d(37): Error: no identifier for declarator
    `i`\n/tmp/tmpc5os6f_q.d(37): Error: declaration expected, not `<`\n/tmp/tmpc5os6f_q.d(37):
    Error: no identifier for declarator `i`\n/tmp/tmpc5os6f_q.d(37): Error: declaration
    expected, not `++`\n/tmp/tmpc5os6f_q.d(41): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5os6f_q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \        r[i] = l[i];\n    }\n    return r;\n}\n/*\nReturn only negative numbers\
    \ in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n\
    \    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[] l) \n\
    {\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        if (l[i] < 0) \n            r[i] = l[i];\n    }\n    return\
    \ r;\n}\n/*\nReturn only numbers in the array that are even.\n    >>> get_even([2L,\
    \ 4L, 6L, 8L, 10L])\n    [4L, 8L]\n    >>> get_even([2L, 4L, 6L, 8L, 10L, -12L])\n\
    \    [4L, 8L]\n    \n*/\nlong[] get_even(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] % 2 == 0) \n\
    \            r[i] = l[i];\n    }\n    return r;\n}\n/*\nReturn only numbers in\
    \ the array that are odd.\n    >>> get_odd([2L, 4L, 6L, 8L, 10L])\n    [6L, 10L]\n\
    \    >>> get_odd([2L, 4L, 6L, 8L, 10L, -12L])\n    [6L, 10L]\n    \n*/\nlong[]\
    \ get_odd(long[] l) \n{\n    long[] r = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n    {\n        if (l[i] % 2 != 0) \n            r[i]\
    \ = l[i];\n    }\n    return r;\n}\n/*\nReturn only numbers in the array that\
    \ are divisible by 3.\n    >>> get_divisible_by_3([2L, 4L, 6L, 8L, 10L])\n   \
    \ [6L, 8L]\n    >>> get_divisible_by_3([2L, 4L, 6L, 8L, 10L, -12L])\n    [6L,\
    \ 8L]\n    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] % 3 == 0) \n\
    \            r\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0c6uoe1.d(89): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpg0c6uoe1.d(98): Error: found `End of File` when expecting `}`
    following compound statement\n/tmp/tmpg0c6uoe1.d(98): Error: found `End of File`
    when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpg0c6uoe1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppgu8dxf3.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmppgu8dxf3.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmppgu8dxf3.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xbaeda554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] res = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tres[i] = l[i];\n\
    \t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n  \
    \  assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp1cv3wpdm.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp1cv3wpdm.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp1cv3wpdm.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x3accc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyc7zc5fz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpyc7zc5fz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpyc7zc5fz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1f48a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \       {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}\n</code>\n\
    <|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis code doesn't work. `get_positive`\
    \ returns `null` if the array is empty.\n<|/ c |>\n<| c |>\nYes, it returns null\
    \ if the array is empty. That's what the OP asked for. He didn't ask for an empty\
    \ array to be returned though.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ the answer to account for that.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the answer to account for that.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated the answer to account for that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\n\
    This code doesn't work. `GetPositive` returns `null` if the array is empty.\n\
    <|/ c |>\n<| c |>\nIt returns an empty array if the array is empty. That's what\
    \ the OP asked for. He didn't ask for an empty array to be returned though.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis code doesn't work. `GetPositive`\
    \ returns `null` if the array is empty.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzbl5abc.d(23): Error: declaration expected, not `<`\n/tmp/tmpuzbl5abc.d(26):
    Error: unterminated character constant\n/tmp/tmpuzbl5abc.d(29): Error: unterminated
    character constant\n/tmp/tmpuzbl5abc.d(29): Error: unterminated character constant\n/tmp/tmpuzbl5abc.d(32):
    Error: unterminated character constant\n/tmp/tmpuzbl5abc.d(35): Error: unterminated
    character constant\n/tmp/tmpuzbl5abc.d(38): Error: unterminated character constant\n/tmp/tmpuzbl5abc.d(46):
    Error: declaration expected, not `foreach`\n/tmp/tmpuzbl5abc.d(51): Error: no
    identifier for declarator `i`\n/tmp/tmpuzbl5abc.d(51): Error: declaration expected,
    not `++`\n/tmp/tmpuzbl5abc.d(52): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuzbl5abc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n\
    \            r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpw5fsnajq.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpw5fsnajq.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpw5fsnajq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x772f6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           break;\n    }\n    for(; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < 0)\n        {\n            res[i] = -l[i];\n        }\n        else\n    \
    \    {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nThis doesn't work if you have a negative number\
    \ in the array and you want the negative number to be positive.\n<|/ c |>\n<|\
    \ c |>\nI added a solution that does work if you have negative numbers in the\
    \ array.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a negative number in\
    \ the array and you want the negative number to be positive.\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a negative number in the array and you want the\
    \ negative number to be positive.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number in the array and you want the negative number to be positive.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] positives = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n        {\n            positives[i]\
    \ = array[i];\n        }\n    }\n    return positives;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array and\
    \ you want the negative number to be positive.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a negative number in the array and you want the negative number\
    \ to be positive.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number in the array and you want the negative number to be positive.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array and\
    \ you want the negative number to be positive.\n<|/ c |>\n<| a |>\n<code>\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphf90jgff.d(32): Error: declaration expected, not `<`\n/tmp/tmphf90jgff.d(35):
    Error: unterminated character constant\n/tmp/tmphf90jgff.d(41): Error: unterminated
    character constant\n/tmp/tmphf90jgff.d(44): Error: unterminated character constant\n/tmp/tmphf90jgff.d(47):
    Error: unterminated character constant\n/tmp/tmphf90jgff.d(54): Error: declaration
    expected, not `for`\n/tmp/tmphf90jgff.d(54): Error: no identifier for declarator
    `i`\n/tmp/tmphf90jgff.d(54): Error: declaration expected, not `<`\n/tmp/tmphf90jgff.d(54):
    Error: no identifier for declarator `i`\n/tmp/tmphf90jgff.d(54): Error: declaration
    expected, not `++`\n/tmp/tmphf90jgff.d(59): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf90jgff.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i] = item;\n\
    \        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c#,arrays |>\n<code>\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpks607oug.d(21): Error: declaration expected, not `<`\n/tmp/tmpks607oug.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmpks607oug.d(33): Error: no
    identifier for declarator `i`\n/tmp/tmpks607oug.d(33): Error: declaration expected,
    not `++`\n/tmp/tmpks607oug.d(34): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpks607oug.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan9w_0jq.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpan9w_0jq.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpan9w_0jq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xeffa1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_bfxbrfp.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp_bfxbrfp.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp_bfxbrfp.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x50b6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzakua3gn.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpzakua3gn.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpzakua3gn.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xa6547554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,.net\
    \ |>\n<| c |>\nThis doesn't work. `get_positive` returns a `long[]` but `Array.Copy`\
    \ expects an `int[]`.\n<|/ c |>\n<| c |>\n: I fixed the return type. Thanks.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,.net |>\n<| c |>\n\
    This doesn't work. `GetPositive` returns a `int[]` but `Array.Copy` expects an\
    \ `int[]`.\n<|/ c |>\n<| c |>\n: I fixed the return type. Thanks.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprgkeblg3.d(21): Error: declaration expected, not `<`\n/tmp/tmprgkeblg3.d(24):
    Error: unterminated character constant\n/tmp/tmprgkeblg3.d(34): Error: declaration
    expected, not `for`\n/tmp/tmprgkeblg3.d(34): Error: no identifier for declarator
    `i`\n/tmp/tmprgkeblg3.d(34): Error: declaration expected, not `<`\n/tmp/tmprgkeblg3.d(34):
    Error: no identifier for declarator `i`\n/tmp/tmprgkeblg3.d(34): Error: declaration
    expected, not `++`\n/tmp/tmprgkeblg3.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgkeblg3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int item\
    \ in array)\n    {\n        if (item > 0)\n        {\n            result[i] =\
    \ item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \        {\n            result[i] = item;\n            i++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    \nunittest\n{\n    alias candidate = get_positive;\n\n  \
    \  assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpby3kfwcn.d(21): Error: declaration expected, not `<`\n/tmp/tmpby3kfwcn.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmpby3kfwcn.d(34): Error: no
    identifier for declarator `i`\n/tmp/tmpby3kfwcn.d(34): Error: declaration expected,
    not `++`\n/tmp/tmpby3kfwcn.d(35): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpby3kfwcn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > 0) \n\t\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmvsc0bqe.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpmvsc0bqe.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpmvsc0bqe.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x2c307554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11186752)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11186752)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11186752)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11186752)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic class ArrayUtils {\n    public static\
    \ int[] getPositives(int[] arr) {\n        int[] result = new int[arr.length];\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > 0) {\n\
    \                result[i] = arr[i];\n            }\n        }\n        return\
    \ result;\n    }\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\n\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_h0io6lf.d(20): Error: declaration expected, not `<`\n/tmp/tmp_h0io6lf.d(42):
    Error: declaration expected, not `for`\n/tmp/tmp_h0io6lf.d(42): Error: no identifier
    for declarator `i`\n/tmp/tmp_h0io6lf.d(42): Error: declaration expected, not `<`\n/tmp/tmp_h0io6lf.d(42):
    Error: no identifier for declarator `i`\n/tmp/tmp_h0io6lf.d(42): Error: declaration
    expected, not `++`\n/tmp/tmp_h0io6lf.d(45): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_h0io6lf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6p0sayz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpe6p0sayz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpe6p0sayz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xde3a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppgu8dxf3.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmppgu8dxf3.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmppgu8dxf3.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xbaeda554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp641v4hiu.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp641v4hiu.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp641v4hiu.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x5884f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ negative numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n\
    \    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only positive numbers in the array.\n\
    \    >>> get_positive_int([-5L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive_int([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwgqzalcv.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x4285ed]\n??:? void tmpwgqzalcv.__unittest_L48_C1() [0x4280d1]\n??:?
    void tmpwgqzalcv.__modtest() [0x428370]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ab0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428a37]\n??:? _d_run_main [0x4289a2]\n??:? main [0x428383]\n??:?
    __libc_start_main [0xc6612554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      res[i] = l[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo6obr_ct.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpo6obr_ct.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpo6obr_ct.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x8827a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n        else\n            break;\n    return result.slice(0,\
    \ i);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx0htpe81.d(19): Error: no property `slice` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0htpe81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n\
    \        if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n\
    \    int[] result = new int[array.Length];\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    for (int i = 0; i < array.Length; i++)\n    {\n    \
    \    if (array[i] > 0)\n            result[i] = array[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=2 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \           result[i] = array[i];\n    }\n    return result;\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe9o_f1ns.d(20): Error: declaration expected, not `<`\n/tmp/tmpe9o_f1ns.d(27):
    Error: declaration expected, not `for`\n/tmp/tmpe9o_f1ns.d(27): Error: no identifier
    for declarator `i`\n/tmp/tmpe9o_f1ns.d(27): Error: declaration expected, not `<`\n/tmp/tmpe9o_f1ns.d(27):
    Error: no identifier for declarator `i`\n/tmp/tmpe9o_f1ns.d(27): Error: declaration
    expected, not `++`\n/tmp/tmpe9o_f1ns.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe9o_f1ns.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative\
    \ numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    []\n\
    \    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  [-5L, -3L, -2L, -3L, -9L, -123L, -1L]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i\
    \ < l.length; ++i)\n    {\n        if(l[i] < 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only numbers in the array that are divisible\
    \ by 3.\n    >>> get_divisible_by_3([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_3([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_divisible_by_3(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n \
    \       if(l[i] % 3 == 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only numbers in the array that are divisible by 5.\n    >>> get_divisible_by_5([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_5([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\n\
    long[] get_divisible_by_5(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] % 5 == 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ numbers in the array that are divisible by 7.\n    >>> get_divisible_by_7([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_7([5L, 3L, -5L, 2L, -3L,\
    \ \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfbf7ce3i.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfbf7ce3i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j++] = l[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcl68_np9.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmpcl68_np9.__unittest_L23_C1() [0x427fb1]\n??:?
    void tmpcl68_np9.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0x75cc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array. Try\
    \ it with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ realized that after I posted it. I edited my answer to fix it.\n<|/ c |>\n<|\
    \ c |>\n: I edited my answer to fix the negative numbers problem.\n<|/ c |>\n\
    <| c |>\n: I edited my answer to fix the negative numbers problem.\n<|/ c |>\n\
    <| c |>\n: I edited my answer to fix the negative numbers problem.\n<|/ c |>\n\
    <| a tags=arrays,c#,algorithm |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i++]\
    \ = item;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the array. Try it\
    \ with `GetPositives([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\n: Yes, I realized\
    \ that after I posted it. I edited my answer to fix it.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n        {\n            result[i++] = item;\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if there are negative numbers in the array. Try it with `GetPositives([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n  \
    \  int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaercwyrc.d(21): Error: declaration expected, not `<`\n/tmp/tmpaercwyrc.d(24):
    Error: unterminated character constant\n/tmp/tmpaercwyrc.d(44): Error: declaration
    expected, not `foreach`\n/tmp/tmpaercwyrc.d(49): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaercwyrc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            result[i] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpt7ayc97x.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpt7ayc97x.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpt7ayc97x.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x36e52554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkk1l90uf.d(22): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkk1l90uf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6pl12oak.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp6pl12oak.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp6pl12oak.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x57489554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n\
    \        {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3mp881df.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp3mp881df.__unittest_L23_C1() [0x427fb5]\n??:?
    void tmp3mp881df.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x2183554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7hbhw8lt.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp7hbhw8lt.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmp7hbhw8lt.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x72ec5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n        {\n            result[i]\
    \ = item;\n            i++;\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmz2nkiw3.d(21): Error: declaration expected, not `<`\n/tmp/tmpmz2nkiw3.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmpmz2nkiw3.d(34): Error: no
    identifier for declarator `i`\n/tmp/tmpmz2nkiw3.d(34): Error: declaration expected,
    not `++`\n/tmp/tmpmz2nkiw3.d(35): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmz2nkiw3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; i++)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp94gmrl7p.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94gmrl7p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_positive([-1L, 2L, -4L, 5L,\
    \ 6L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer accordingly.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try it with `get_positive([-1L, 2L, -4L,\
    \ 5L, 6L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer\
    \ accordingly.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int[] getPositive(int[]\
    \ arr) {\n    int[] result = new int[arr.length];\n    int i = 0;\n    for(; i\
    \ < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nThis\
    \ doesn't work. Try it with `getPositive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated the answer accordingly.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\npublic static int[] getPositive(int[] arr) {\n    int[]\
    \ result = new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n\
    \    {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static int[] getPositive(int[] arr) {\n    int[] result = new int[arr.length];\n\
    \    int i = 0;\n    for(; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n\
    \            result[i] = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,java |>\n<| c |>\nThis doesn't work. Try it with `getPositive([-1L,\
    \ 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the\
    \ answer accordingly.\n<|/ c |>\n<| a tags=arrays,java |>\n<code>\npublic static\
    \ int[] getPositive(int[] arr) {\n    int\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp51j6rfzw.d(21): Error: declaration expected, not `<`\n/tmp/tmp51j6rfzw.d(24):
    Error: unterminated character constant\n/tmp/tmp51j6rfzw.d(27): Error: unterminated
    character constant\n/tmp/tmp51j6rfzw.d(30): Error: unterminated character constant\n/tmp/tmp51j6rfzw.d(33):
    Error: unterminated character constant\n/tmp/tmp51j6rfzw.d(40): Error: declaration
    expected, not `for`\n/tmp/tmp51j6rfzw.d(40): Error: no identifier for declarator
    `i`\n/tmp/tmp51j6rfzw.d(40): Error: declaration expected, not `<`\n/tmp/tmp51j6rfzw.d(40):
    Error: declaration expected, not `++`\n/tmp/tmp51j6rfzw.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51j6rfzw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7hbhw8lt.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp7hbhw8lt.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmp7hbhw8lt.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x72ec5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 tags=arrays,c# |>\n<| a dscore=2 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n   \
    \     {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for(int i = 0; i < array.Length; i++)\n    {\n        if(array[i] > 0)\n   \
    \     {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n        {\n           \
    \ result[i] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| a |>\n<code>\npublic static int[] GetPositive\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1uehcfc.d(22): Error: declaration expected, not `<`\n/tmp/tmpf1uehcfc.d(29):
    Error: declaration expected, not `for`\n/tmp/tmpf1uehcfc.d(29): Error: no identifier
    for declarator `i`\n/tmp/tmpf1uehcfc.d(29): Error: declaration expected, not `<`\n/tmp/tmpf1uehcfc.d(29):
    Error: no identifier for declarator `i`\n/tmp/tmpf1uehcfc.d(29): Error: declaration
    expected, not `++`\n/tmp/tmpf1uehcfc.d(34): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1uehcfc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if the array is empty or contains\
    \ only negative numbers. Try it with `get_positive(new long[0])`.\n<|/ c |>\n\
    <| c |>\n: Yes, I know. That's why I wrote \"Return only positive numbers in the\
    \ array.\" The OP didn't specify what should happen with empty arrays or arrays\
    \ with only negative numbers. I assumed that he would want to return an empty\
    \ array in this case.\n<|/ c |>\n<| c |>\nI see, I missed that part. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \       {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \       {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n \
    \       {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] \nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzyhut3ua.d(22): Error: declaration expected, not `<`\n/tmp/tmpzyhut3ua.d(25):
    Error: unterminated character constant\n/tmp/tmpzyhut3ua.d(28): Error: unterminated
    character constant\n/tmp/tmpzyhut3ua.d(28): Error: unterminated character constant\n/tmp/tmpzyhut3ua.d(38):
    Error: declaration expected, not `for`\n/tmp/tmpzyhut3ua.d(38): Error: no identifier
    for declarator `i`\n/tmp/tmpzyhut3ua.d(38): Error: declaration expected, not `<`\n/tmp/tmpzyhut3ua.d(38):
    Error: no identifier for declarator `i`\n/tmp/tmpzyhut3ua.d(38): Error: declaration
    expected, not `++`\n/tmp/tmpzyhut3ua.d(43): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyhut3ua.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzakua3gn.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpzakua3gn.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpzakua3gn.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xa6547554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmprkr568f8.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmprkr568f8.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmprkr568f8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x2eb8e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but i want to know\
    \ why my code is not working and why it gives me wrong output. Can you please\
    \ explain me the reason behind this ?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ but i want to know why my code is not working and why it gives me wrong output.\
    \ Can you please explain me the reason behind this ?\n<|/ c |>\n<| c |>\nThe reason\
    \ is that you were trying to find the first positive number in the array and you\
    \ were not doing it correctly. My code does exactly what you asked for: it finds\
    \ the first positive number in the array. Your code was trying to find all the\
    \ positive numbers in the array and you were not doing it correctly. My code does\
    \ exactly what you asked for: it finds the first positive number in the array.\
    \ Your code was trying to find all the positive numbers in the array and you were\
    \ not doing it correctly. My code does exactly what you asked for: it finds the\
    \ first positive number in the array. Your code was trying to find all the positive\
    \ numbers in the array and you were not doing it correctly.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i want to know why my code is\
    \ not working and why it gives me wrong output. Can you please explain me the\
    \ reason behind this ?\n<|/ c |>\n<| a tags=arrays,java |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, -4, -5, 6, -7, 8, -9, 10, -11,\
    \ 12, 13, -14, 15};\n    System.out.println(Arrays.toString(arr));\n    System.out.println(getFirstPositive(arr));\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm_1ko1yv.d(20): Error: declaration expected, not `<`\n/tmp/tmpm_1ko1yv.d(41):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpm_1ko1yv.d(41):
    Error: no identifier for declarator `System`\n/tmp/tmpm_1ko1yv.d(41): Error: declaration
    expected, not `out`\n/tmp/tmpm_1ko1yv.d(42): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmpm_1ko1yv.d(42): Error: no identifier for declarator
    `System`\n/tmp/tmpm_1ko1yv.d(42): Error: declaration expected, not `out`\n/tmp/tmpm_1ko1yv.d(43):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_1ko1yv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a negative number in the\
    \ array. For example, `get_positive([-1L, 2L, -4L, 5L, 6L])` returns `[-4L, 5L,\
    \ 6L]` instead of `[2L, 5L, 6L]`.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require the array to be sorted.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require the array to be sorted.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int j = 0;\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n        {\n            result[j++] =\
    \ array[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int j = 0;\n    for (int i =\
    \ 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n        {\n   \
    \         result[j++] = array[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int j = 0;\n    for\
    \ (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n     \
    \   {\n            result[j++] = array[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int j = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ > 0)\n        {\n            result[j++] = array[i];\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int j = 0;\n    for (int i = 0; i < array.\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xievrrk.d(22): Error: declaration expected, not `<`\n/tmp/tmp8xievrrk.d(25):
    Error: unterminated character constant\n/tmp/tmp8xievrrk.d(28): Error: unterminated
    character constant\n/tmp/tmp8xievrrk.d(31): Error: unterminated character constant\n/tmp/tmp8xievrrk.d(39):
    Error: declaration expected, not `for`\n/tmp/tmp8xievrrk.d(39): Error: no identifier
    for declarator `i`\n/tmp/tmp8xievrrk.d(39): Error: declaration expected, not `<`\n/tmp/tmp8xievrrk.d(39):
    Error: no identifier for declarator `i`\n/tmp/tmp8xievrrk.d(39): Error: declaration
    expected, not `++`\n/tmp/tmp8xievrrk.d(44): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xievrrk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. Try it with the example in the question.\n<|/ c |>\n\
    <| c |>\nI tested it with the example in the question and it works. I added a\
    \ test case to my answer.\n<|/ c |>\n<| c |>\nI tested it with the example in\
    \ the question and it works. I added a test case to my answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it with the example in the question and it works. I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\nI tested it with the example in the question\
    \ and it works. I added a test case to my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhsgxlbx.d(20): Error: declaration expected, not `<`\n/tmp/tmpmhsgxlbx.d(23):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmhsgxlbx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only negative\
    \ numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    [2L,\
    \ 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[] l) \n\
    {\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < 0)\n            result[i] = l[i];\n    }\n  \
    \  return result;\n}\n/*\nReturn only zeros in the array.\n    >>> get_zero([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_zero([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    [0L, 123L, 1L]\n    \n*/\nlong[] get_zero(long[] l) \n\
    {\n    long[] result = new long[l.length];\n    int i = 0;\n    for(; i < l.length;\
    \ ++i)\n    {\n        if(l[i] == 0)\n            result[i] = l[i];\n    }\n \
    \   return result;\n}\n/*\nReturn only positive numbers in the array.\n    >>>\
    \ get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\ndouble[] get_positive(double[] l) \n{\n    double[] result =\
    \ new double[l.length];\n    int i = 0;\n    for(; i < l.length; ++i)\n    {\n\
    \        if(l[i] > 0)\n            result[i] = l[i];\n    }\n    return result;\n\
    }\n/*\nReturn only negative numbers in the array.\n    >>> get_negative([-1L,\
    \ 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjiq953po.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjiq953po.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjwm4bkq8.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjwm4bkq8.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpjwm4bkq8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1de59554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > 0) \n\t\t{\n\t\t\t\
    result[i] = l[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy0fv0mfr.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpy0fv0mfr.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpy0fv0mfr.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x9e0d6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_positive([-1L, 2L, -4L, 5L,\
    \ 6L])`\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `GetPositive([-1L, 2L, -4L, 5L,\
    \ 6L])`\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated the code accordingly.\n\
    <|/ c |>\n<| a tags=arrays,c#,sorting,algorithm |>\n<code>\npublic static int[]\
    \ GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n   \
    \ int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=arrays,c#,sorting,algorithm |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item \nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbfg53ppc.d(21): Error: declaration expected, not `<`\n/tmp/tmpbfg53ppc.d(24):
    Error: unterminated character constant\n/tmp/tmpbfg53ppc.d(27): Error: unterminated
    character constant\n/tmp/tmpbfg53ppc.d(30): Error: unterminated character constant\n/tmp/tmpbfg53ppc.d(33):
    Error: unterminated character constant\n/tmp/tmpbfg53ppc.d(36): Error: unterminated
    character constant\n/tmp/tmpbfg53ppc.d(44): Error: declaration expected, not `foreach`\n/tmp/tmpbfg53ppc.d(48):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfg53ppc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6pl12oak.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp6pl12oak.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp6pl12oak.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x57489554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \       {\n            result[i] = l[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4imx_9a8.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp4imx_9a8.__unittest_L23_C1() [0x427fb5]\n??:?
    void tmp4imx_9a8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x20d67554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have a negative number in the array. `get_positive([-1L,\
    \ 2L, -4L, 5L, 6L])` returns `[-4L, 5L, 6L]` instead of `[2L, 5L, 6L]`.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works with negative numbers. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i;\n    for (i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ > 0)\n            result[i] = array[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] GetPositive(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i;\n    for (i\
    \ = 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i;\n    for (i = 0; i <\
    \ array.Length; i++)\n    {\n        if (array[i] > 0)\n            result[i]\
    \ = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[]\
    \ result = new int[array.Length];\n    int i;\n    for (i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n            result[i] = array[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i;\n    for (i = 0; i < array.Length; i++)\n\
    \    {\n        if (array[i] > 0)\n            result[i] = array[i];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static\
    \ int[] GetPositive(int[] array)\n{\n    int\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjzj3icbu.d(21): Error: declaration expected, not `<`\n/tmp/tmpjzj3icbu.d(24):
    Error: unterminated character constant\n/tmp/tmpjzj3icbu.d(35): Error: declaration
    expected, not `for`\n/tmp/tmpjzj3icbu.d(35): Error: no identifier for declarator
    `i`\n/tmp/tmpjzj3icbu.d(35): Error: declaration expected, not `<`\n/tmp/tmpjzj3icbu.d(35):
    Error: no identifier for declarator `i`\n/tmp/tmpjzj3icbu.d(35): Error: declaration
    expected, not `++`\n/tmp/tmpjzj3icbu.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjzj3icbu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j++] = l[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcl68_np9.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmpcl68_np9.__unittest_L23_C1() [0x427fb1]\n??:?
    void tmpcl68_np9.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0x75cc8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; i++)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp93tr6vqr.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp93tr6vqr.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp93tr6vqr.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd7b4c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp641v4hiu.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp641v4hiu.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp641v4hiu.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x5884f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI believe this would only work for positive numbers.\
    \ Try it with `get_positive([-1L, 2L, -4L, 5L, 6L])`\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot about that. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c#,arrays,algorithm\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    var positives\
    \ = new List<int>();\n    foreach (var item in array)\n    {\n        if (item\
    \ > 0)\n        {\n            positives.Add(item);\n        }\n    }\n    return\
    \ positives.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static int[] GetPositives(int[] array)\n{\n    var positives = new List<int>();\n\
    \    foreach (var item in array)\n    {\n        if (item > 0)\n        {\n  \
    \          positives.Add(item);\n        }\n    }\n    return positives.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,arrays,algorithm |>\n<| c |>\nPlease don't post only\
    \ code as an answer, but also provide an explanation of what your code does and\
    \ how it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n\
    \    var positives = new List<int>();\n    foreach (var item in array)\n    {\n\
    \        if (item > 0)\n        {\n            positives.Add(item);\n        }\n\
    \    }\n    return positives.ToArray();\n}\n</code>\n<|/ a tags=c#,arrays,algorithm\
    \ dscore=0 |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    var positives = new List<int>();\n    foreach (var item in array)\n\
    \    {\n        if (item > 0)\n        {\n            positives.Add(item);\n \
    \       }\n    }\n    return positives.ToArray();\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppl3jxjpg.d(22): Error: declaration expected, not `<`\n/tmp/tmppl3jxjpg.d(35):
    Error: declaration expected, not `foreach`\n/tmp/tmppl3jxjpg.d(40): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl3jxjpg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjwm4bkq8.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjwm4bkq8.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpjwm4bkq8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1de59554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n/*\nReturn only negative numbers\
    \ in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>>\
    \ get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [-5L,\
    \ -3L, -2L, -3L, -9L, -123L, -1L]\n    \n*/\nlong[] get_negative(long[] l) \n\
    {\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] < 0)\n            r[i] = l[i];\n    }\n    return r;\n\
    }\n/*\nReturn only zeros in the array.\n    >>> get_zero([-1L, 2L, -4L, 5L, 6L])\n\
    \    []\n    >>> get_zero([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]\n    \n*/\nlong[] get_zero(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++)\n    {\n        if (l[i] == 0)\n            r[i] = l[i];\n    }\n    return\
    \ r;\n}\n/*\nReturn only numbers in the array that are divisible by 3.\n    >>>\
    \ get_divisible_by_three([-1L, 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_three([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_divisible_by_three(long[] l) \n{\n    long[] r = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ % 3 == 0)\n            r[i] = l[i];\n    }\n    return r;\n}\n/*\nReturn only\
    \ numbers in the array that are divisible by 5.\n    >>> get_divisible_by_five([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_divisible_by_five([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, \nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjoph92ph.d(74): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjoph92ph.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \        {\n            res[i] = l[i];\n        }\n        else\n        {\n \
    \           break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxk4uxx6y.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpxk4uxx6y.__unittest_L27_C1() [0x427fb5]\n??:?
    void tmpxk4uxx6y.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60c81554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i++] = item;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays |>\n<code>\npublic\
    \ static int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i++] = item;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach\
    \ (int item in array)\n    {\n        if (item > 0)\n            result[i++] =\
    \ item;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a\
    \ tags=c#,arrays |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n\
    \    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int item\
    \ in array)\n    {\n        if (item > 0)\n            result[i++] = item;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i++] = item;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    \nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoqb0a8s7.d(21): Error: declaration expected, not `<`\n/tmp/tmpoqb0a8s7.d(29):
    Error: declaration expected, not `foreach`\n/tmp/tmpoqb0a8s7.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqb0a8s7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           r[i] = l[i];\n        else\n            break;\n    }\n    return\
    \ r;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4uplx4p4.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp4uplx4p4.__unittest_L23_C1() [0x427fb5]\n??:?
    void tmp4uplx4p4.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xef0a6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu36hk1_p.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpu36hk1_p.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpu36hk1_p.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x3b276554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to remove negative numbers\
    \ from the array. Your code removes all the negative numbers from the array.\n\
    <|/ c |>\n<| c |>\nI thought he wanted to remove all negative numbers from the\
    \ array. He didn't say he wanted to remove all negative numbers from the array\
    \ but only positive numbers. I edited my answer to make it clearer.\n<|/ c |>\n\
    <| c |>\nI agree with you, but OP didn't say that he wanted to remove all negative\
    \ numbers from the array. He said he wanted to remove only positive numbers from\
    \ the array. He didn't say that he wanted to remove all negative numbers from\
    \ the array but only positive numbers. He said he wanted to remove only positive\
    \ numbers from the array. He didn't say that he wanted to remove all negative\
    \ numbers from the array but only positive numbers. He said he wanted to remove\
    \ only positive numbers from the array. He didn't say that he wanted to remove\
    \ all negative numbers from the array but only positive numbers. He said he wanted\
    \ to remove only positive numbers from the array. He didn't say that he wanted\
    \ to remove all negative numbers from the array but only positive numbers. He\
    \ said he wanted to remove only positive numbers from the array. He didn't say\
    \ that he wanted to remove all negative numbers from the array but only positive\
    \ numbers. He said he wanted to remove only positive numbers from the array. He\
    \ didn't say that he wanted to remove all negative numbers from the array but\
    \ only positive numbers. He said he wanted to remove only positive numbers from\
    \ the array. He didn't say that he wanted to remove all negative numbers from\
    \ the array but only positive numbers. He said he wanted to remove only positive\
    \ numbers from the array. He didn't say that he wanted to remove all negative\
    \ numbers from the array but only positive numbers. He said he wanted to remove\
    \ only positive numbers from the array. He didn't say that he wanted to remove\
    \ all negative numbers from the array but only positive numbers. He said he wanted\
    \ to remove only positive numbers from the array. He didn't say that he wanted\
    \ to remove all negative numbers from the array but only positive numbers. He\
    \ said he wanted to remove only positive numbers from the array. He didn't say\
    \ that he wanted to remove all negative numbers from the array but only positive\
    \ numbers. He said he wanted to remove only positive numbers from the array. He\
    \ didn't say that he wanted to remove all negative \nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8cey6m13.d(20): Error: declaration expected, not `<`\n/tmp/tmp8cey6m13.d(23):
    Error: unterminated character constant\n/tmp/tmp8cey6m13.d(26): Error: unterminated
    character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29):
    Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated
    character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29):
    Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated
    character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29):
    Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated
    character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29):
    Error: unterminated character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated
    character constant\n/tmp/tmp8cey6m13.d(29): Error: unterminated character constant\n/tmp/tmp8cey6m13.d(34):
    Error: declaration expected, not `assert`\n/tmp/tmp8cey6m13.d(35): Error: declaration
    expected, not `assert`\n/tmp/tmp8cey6m13.d(36): Error: declaration expected, not
    `assert`\n/tmp/tmp8cey6m13.d(37): Error: declaration expected, not `assert`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cey6m13.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbx8i42zc.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmpbx8i42zc.__unittest_L24_C1() [0x427fb1]\n??:?
    void tmpbx8i42zc.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0x31111554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyc7zc5fz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpyc7zc5fz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpyc7zc5fz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1f48a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7hbhw8lt.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp7hbhw8lt.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmp7hbhw8lt.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x72ec5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan9w_0jq.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpan9w_0jq.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpan9w_0jq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xeffa1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=java,arrays |>\n<code>\npublic class ArrayUtils {\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpreeok_p5.d(20): Error: declaration expected, not `<`\n/tmp/tmpreeok_p5.d(29):
    Error: declaration expected, not `assert`\n/tmp/tmpreeok_p5.d(30): Error: declaration
    expected, not `assert`\n/tmp/tmpreeok_p5.d(31): Error: declaration expected, not
    `assert`\n/tmp/tmpreeok_p5.d(32): Error: declaration expected, not `assert`\n/tmp/tmpreeok_p5.d(33):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpreeok_p5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {1, 2, -4, 5};\n    System.out.println(Arrays.toString(arr));\n\
    \    arr = removeNegatives(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy1ekyxnl.d(22): Error: declaration expected, not `<`\n/tmp/tmpy1ekyxnl.d(28):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpy1ekyxnl.d(28):
    Error: no identifier for declarator `System`\n/tmp/tmpy1ekyxnl.d(28): Error: declaration
    expected, not `out`\n/tmp/tmpy1ekyxnl.d(29): Error: no identifier for declarator
    `arr`\n/tmp/tmpy1ekyxnl.d(29): Error: declaration expected, not `=`\n/tmp/tmpy1ekyxnl.d(30):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpy1ekyxnl.d(30):
    Error: no identifier for declarator `System`\n/tmp/tmpy1ekyxnl.d(30): Error: declaration
    expected, not `out`\n/tmp/tmpy1ekyxnl.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1ekyxnl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > 0) \n    \
    \    {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzakua3gn.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpzakua3gn.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpzakua3gn.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xa6547554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; i++)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprylj4ee6.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprylj4ee6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_bfxbrfp.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp_bfxbrfp.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp_bfxbrfp.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x50b6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=arrays,c#,sorting |>\n<| a |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    Array.Sort(array);\n\
    \    int i = 0;\n    while (i < array.Length && array[i] > 0)\n    {\n       \
    \ result[i] = array[i];\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,sorting dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    Array.Sort(array);\n    int i = 0;\n    while (i < array.Length && array[i]\
    \ > 0)\n    {\n        result[i] = array[i];\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] GetPositives(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    Array.Sort(array);\n    int i = 0;\n    while (i < array.Length && array[i]\
    \ > 0)\n    {\n        result[i] = array[i];\n        i++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,c#,sorting |>\n<| a tags=arrays,c#,sorting\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    Array.Sort(array);\n    int i = 0;\n    while\
    \ (i < array.Length && array[i] > 0)\n    {\n        result[i] = array[i];\n \
    \       i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] result = new\
    \ int[array.Length];\n    Array.Sort(array);\n    int i = 0;\n    while (i < array.Length\
    \ && array[i] > 0)\n    {\n        result[i] = array[i];\n        i++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 tags=arrays,c#,sorting |>\n<|\
    \ a dscore=0 |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n  \
    \  int[] result = new int[array.Length];\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8n8fem9x.d(22): Error: declaration expected, not `<`\n/tmp/tmp8n8fem9x.d(29):
    Error: function declaration without return type. (Note that constructors are always
    named `this`)\n/tmp/tmp8n8fem9x.d(29): Error: no identifier for declarator `Array.Sort(array)`\n/tmp/tmp8n8fem9x.d(31):
    Error: declaration expected, not `while`\n/tmp/tmp8n8fem9x.d(34): Error: no identifier
    for declarator `i`\n/tmp/tmp8n8fem9x.d(34): Error: declaration expected, not `++`\n/tmp/tmp8n8fem9x.d(35):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8n8fem9x.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpredqt8xw.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpredqt8xw.__unittest_L19_C1() [0x427fb5]\n??:?
    void tmpredqt8xw.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9458554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjwm4bkq8.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjwm4bkq8.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpjwm4bkq8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1de59554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm35hoqnk.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpm35hoqnk.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpm35hoqnk.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x47eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu36hk1_p.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpu36hk1_p.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpu36hk1_p.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x3b276554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nThis doesn't work if you have a negative number\
    \ in the array. Try it with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n\
    <| c |>\nYes, I see that now. Thanks for pointing that out. I've edited my answer\
    \ to include a fix for that.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a negative number in the array. Try it with `get_positive([-1L, 2L, -4L, 5L,\
    \ 6L])`.\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing that out. I've\
    \ edited my answer to include a fix for that.\n<|/ c |>\n<| a tags=c#,arrays |>\n\
    <code>\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpat0u83h7.d(22): Error: declaration expected, not `<`\n/tmp/tmpat0u83h7.d(25):
    Error: unterminated character constant\n/tmp/tmpat0u83h7.d(28): Error: unterminated
    character constant\n/tmp/tmpat0u83h7.d(31): Error: unterminated character constant\n/tmp/tmpat0u83h7.d(34):
    Error: unterminated character constant\n/tmp/tmpat0u83h7.d(42): Error: declaration
    expected, not `assert`\n/tmp/tmpat0u83h7.d(43): Error: declaration expected, not
    `assert`\n/tmp/tmpat0u83h7.d(44): Error: declaration expected, not `assert`\n/tmp/tmpat0u83h7.d(45):
    Error: declaration expected, not `assert`\n/tmp/tmpat0u83h7.d(46): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpat0u83h7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6p0sayz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpe6p0sayz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpe6p0sayz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xde3a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqbxttc75.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpqbxttc75.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpqbxttc75.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x42f8a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjwm4bkq8.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjwm4bkq8.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpjwm4bkq8.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x1de59554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            r[i] = l[i];\n        }\n    }\n    return r;\n}\n</code>\n\
    <|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis is not the most efficient solution.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(1)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(n)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(n)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(n)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(n)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and `O(n)`\
    \ memory allocation. `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity\
    \ and `O(n)` memory allocation. `O(n)` complexity and `O(n)` memory allocation.\
    \ `O(n)` complexity and `O(n)` memory allocation. `O(n)` complexity and \nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4rzsmz3c.d(22): Error: declaration expected, not `<`\n/tmp/tmp4rzsmz3c.d(30):
    Error: declaration expected, not `assert`\n/tmp/tmp4rzsmz3c.d(31): Error: declaration
    expected, not `assert`\n/tmp/tmp4rzsmz3c.d(32): Error: declaration expected, not
    `assert`\n/tmp/tmp4rzsmz3c.d(33): Error: declaration expected, not `assert`\n/tmp/tmp4rzsmz3c.d(34):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rzsmz3c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0eypsqz.d(22): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0eypsqz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7hbhw8lt.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp7hbhw8lt.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmp7hbhw8lt.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x72ec5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `get_positive([-1L, 2L, -4L, 5L, 6L])` returns\
    \ `[-4L, 2L, 5L, 6L]`\n<|/ c |>\n<| c |>\nYes, I forgot about that. Fixed now.\
    \ Thanks.\n<|/ c |>\n<| a |>\n<code>\npublic static int[] getPositives(int[] arr)\
    \ {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            result[i] = arr[i];\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays dscore=0 |>\n\
    <| a tags=java,arrays |>\n<code>\npublic static void main(String[] args) {\n \
    \   int[] arr = {-1, 2, -4, -5, 6, -7, -8, 9, 10, 11, 12};\n    int[] arr1 = new\
    \ int[arr.length];\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            arr1[i] = arr[i];\n        }\n    }\n    System.out.println(Arrays.toString(arr1));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-1, 2, -4, -5, 6, -7, -8, 9, 10, 11, 12};\n    int[]\
    \ arr1 = new int[arr.length];\n    for(int i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] > 0){\n            arr1[i] = arr[i];\n        }\n    }\n    System.out.println(Arrays.toString(arr1));\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {-1, 2, -4, -5, 6, -7, -8, 9, 10,\
    \ 11, 12};\n    int[] arr1 = new int[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0){\n            arr1[i] = arr[i];\n        }\n \
    \   }\n    System.out.println(Arrays.toString(arr1));\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = {-1, 2, -4, -5, 6, -7, -8, 9, 10, 11, 12};\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozy6p6kg.d(20): Error: declaration expected, not `<`\n/tmp/tmpozy6p6kg.d(23):
    Error: unterminated character constant\n/tmp/tmpozy6p6kg.d(32): Error: declaration
    expected, not `for`\n/tmp/tmpozy6p6kg.d(32): Error: no identifier for declarator
    `i`\n/tmp/tmpozy6p6kg.d(32): Error: declaration expected, not `<`\n/tmp/tmpozy6p6kg.d(32):
    Error: no identifier for declarator `i`\n/tmp/tmpozy6p6kg.d(32): Error: declaration
    expected, not `++`\n/tmp/tmpozy6p6kg.d(35): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpozy6p6kg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = new int[]{1,2,3,4,5,6,7,8,9,10};\n  \
    \  int[] arr2 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr3 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr4 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr5 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr6 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr7 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr8 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr9 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr10 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr11 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr12 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr13 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr14 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr15 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr16 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr17 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr18 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr19 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr20 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr21 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] arr22 = new int[]{1,2,3,4,5,6,7,8,9,10};\n    int[] arr23 = new int[]{1,2,3,4,5,6,7,8,9,10};\n\
    \    int[] \nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkj1orj2y.d(22): Error: declaration expected, not `<`\n/tmp/tmpkj1orj2y.d(28):
    Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(28): Error: declaration
    expected, not `{`\n/tmp/tmpkj1orj2y.d(29): Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(29):
    Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(30): Error: semicolon
    expected, not `{`\n/tmp/tmpkj1orj2y.d(30): Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(31):
    Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(31): Error: declaration
    expected, not `{`\n/tmp/tmpkj1orj2y.d(32): Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(32):
    Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(33): Error: semicolon
    expected, not `{`\n/tmp/tmpkj1orj2y.d(33): Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(34):
    Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(34): Error: declaration
    expected, not `{`\n/tmp/tmpkj1orj2y.d(35): Error: semicolon expected, not `{`\n/tmp/tmpkj1orj2y.d(35):
    Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(36): Error: semicolon
    expected, not `{`\n/tmp/tmpkj1orj2y.d(36): Error: declaration expected, not `{`\n/tmp/tmpkj1orj2y.d(37):
    Error: semicolon expected, not `{`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkj1orj2y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6p0sayz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpe6p0sayz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpe6p0sayz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xde3a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp641v4hiu.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp641v4hiu.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp641v4hiu.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x5884f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > 0) \n        {\n            result[j++] = l[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpygipe4tp.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284cd]\n??:? void tmpygipe4tp.__unittest_L23_C1() [0x427fb1]\n??:?
    void tmpygipe4tp.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430655]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b415]\n??:? runModuleUnitTests [0x42c381]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428917]\n??:? _d_run_main [0x428882]\n??:? main [0x428263]\n??:?
    __libc_start_main [0xc17c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] positives = new int[array.Length];\n    int positive =\
    \ 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ > 0)\n        {\n            positives[positive] = array[i];\n            positive++;\n\
    \        }\n    }\n    return positives;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[]\
    \ positives = new int[array.Length];\n    int positive = 0;\n    for (int i =\
    \ 0; i < array.Length; i++)\n    {\n        if (array[i] > 0)\n        {\n   \
    \         positives[positive] = array[i];\n            positive++;\n        }\n\
    \    }\n    return positives;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| a dscore=1\
    \ |>\n<code>\npublic static int[] GetPositives(int[] array)\n{\n    int[] positives\
    \ = new int[array.Length];\n    int positive = 0;\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        if (array[i] > 0)\n        {\n            positives[positive]\
    \ = array[i];\n            positive++;\n        }\n    }\n    return positives;\n\
    }\n</code>\n<|/ a tags=arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static int[]\
    \ GetPositives(int[] array)\n{\n    int[] positives = new int[array.Length];\n\
    \    int positive = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n  \
    \      if (array[i] > 0)\n        {\n            positives[positive] = array[i];\n\
    \            positive++;\n        }\n    }\n    return positives;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| a tags=arrays,c# |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] positives = new int[array.Length];\n    int positive =\
    \ 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i]\
    \ > 0)\n        {\n            positives[positive] = array[i];\n            positive++;\n\
    \        }\n    }\n    return positives;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=arrays,c# |>\n<code>\npublic static int[] GetPositives(int\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvn71ieq.d(22): Error: declaration expected, not `<`\n/tmp/tmpgvn71ieq.d(30):
    Error: declaration expected, not `for`\n/tmp/tmpgvn71ieq.d(30): Error: no identifier
    for declarator `i`\n/tmp/tmpgvn71ieq.d(30): Error: declaration expected, not `<`\n/tmp/tmpgvn71ieq.d(30):
    Error: no identifier for declarator `i`\n/tmp/tmpgvn71ieq.d(30): Error: declaration
    expected, not `++`\n/tmp/tmpgvn71ieq.d(35): Error: no identifier for declarator
    `positive`\n/tmp/tmpgvn71ieq.d(35): Error: declaration expected, not `++`\n/tmp/tmpgvn71ieq.d(36):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvn71ieq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis code will fail if `l` is empty or contains only negative numbers.\
    \ `get_positive` should return an empty array in this case.\n<|/ c |>\n<| c |>\n\
    Yes, I agree. I've added a comment to the code explaining why it fails.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i] = item;\n\
    \        i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| c |>\nThis code will fail if `array` is empty or contains only negative numbers.\
    \ `GetPositive` should return an empty array in this case.\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic static int[] GetPositive(int[] array)\n{\n    int[] result\
    \ = new int[array.Length];\n    int i = 0;\n    foreach (int item in array)\n\
    \    {\n        if (item > 0)\n            result[i] = item;\n        i++;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code will\
    \ fail if `array` is empty or contains only negative numbers. `GetPositive` should\
    \ return an empty array in this case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static int[] GetPositive(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    int i = 0;\n    foreach (int item in array)\n    {\n        if (item > 0)\n\
    \            result[i] = item;\n        i++;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays |>\n<| c |>\nThis code will fail if `array` is empty or contains\
    \ only negative numbers. `GetPositive` should return an empty array in this case.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int[] GetPositive(int[] array)\n\
    {\n    int[] result = new int[array.Length];\n    int i = 0;\n    foreach (int\
    \ item in array)\n    {\n        if (item > 0)\n            result[i] = item;\n\
    \        i++;\n    }\n    return result;\n\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3bwxngeo.d(21): Error: declaration expected, not `<`\n/tmp/tmp3bwxngeo.d(27):
    Error: unterminated character constant\n/tmp/tmp3bwxngeo.d(35): Error: declaration
    expected, not `foreach`\n/tmp/tmp3bwxngeo.d(39): Error: no identifier for declarator
    `i`\n/tmp/tmp3bwxngeo.d(39): Error: declaration expected, not `++`\n/tmp/tmp3bwxngeo.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bwxngeo.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; i++)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp93tr6vqr.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp93tr6vqr.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp93tr6vqr.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd7b4c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\n</code>\n<|/ a tags=arrays,c# |>\n\
    <| a tags=arrays,c# |>\n<code>\npublic static void Main(string[] args)\n{\n  \
    \  int[] arr = new int[] { 1, 2, 3, -4, -5, -6, -7, -8, -9, -10, -11 };\n    int[]\
    \ arr2 = new int[arr.Length];\n    int[] arr3 = new int[arr.Length];\n    int[]\
    \ arr4 = new int[arr.Length];\n    int[] arr5 = new int[arr.Length];\n    int[]\
    \ arr6 = new int[arr.Length];\n    int[] arr7 = new int[arr.Length];\n    int[]\
    \ arr8 = new int[arr.Length];\n    int[] arr9 = new int[arr.Length];\n    int[]\
    \ arr10 = new int[arr.Length];\n    int[] arr11 = new int[arr.Length];\n    int[]\
    \ arr12 = new int[arr.Length];\n    int[] arr13 = new int[arr.Length];\n    int[]\
    \ arr14 = new int[arr.Length];\n    int[] arr15 = new int[arr.Length];\n    int[]\
    \ arr16 = new int[arr.Length];\n    int[] arr17 = new int[arr.Length];\n    int[]\
    \ arr18 = new int[arr.Length];\n    int[] arr19 = new int[arr.Length];\n    int[]\
    \ arr20 = new int[arr.Length];\n    int[] arr21 = new int[arr.Length];\n    int[]\
    \ arr22 = new int[arr.Length];\n    int[] arr23 = new int[arr.Length];\n    int[]\
    \ arr24 = new int[arr.Length];\n    int[] arr25 = new int[arr.Length];\n    int[]\
    \ arr26 = new int[arr.Length];\n    int[] arr27 = new int[arr.Length];\n    int[]\
    \ arr28 = new int[arr.Length];\n    int[] arr29 = new int[arr.Length];\n    int[]\
    \ arr30 = new int[arr.Length];\n    int[] arr31 = new int[arr.Length];\n    int[]\
    \ arr32 = new int[arr.Length];\n    int[] arr33 = new int[arr.Length];\n    int[]\
    \ arr34 = new int[arr.Length];\n    int[] arr35 = new int[arr.Length];\n    \n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg4j6u4c_.d(20): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4j6u4c_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n\
    \            r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3hs8mybr.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp3hs8mybr.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmp3hs8mybr.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xad7bd554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n/*\nReturn only\
    \ negative numbers in the array.\n    >>> get_negative([-1L, 2L, -4L, 5L, 6L])\n\
    \    [2L, 5L, 6L]\n    >>> get_negative([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L, 1L]\n    \n*/\nlong[] get_negative(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    int i = 0;\n    for (;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < 0)\n            result[i] = l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn only zeros in the array.\n    >>> get_zero([-1L,\
    \ 2L, -4L, 5L, 6L])\n    []\n    >>> get_zero([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    [0L, 123L, 1L]\n    \n*/\nlong[] get_zero(long[] l) \n\
    {\n    long[] result = new long[l.length];\n    int i = 0;\n    for (; i < l.length;\
    \ ++i)\n    {\n        if (l[i] == 0)\n            result[i] = l[i];\n    }\n\
    \    return result;\n}\n/*\nReturn only positive numbers in the array.\n    >>>\
    \ get_positive_int([-5L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,\
    \ 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,\
    \ 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L,\
    \ 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L,\
    \ 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L,\
    \ 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L,\
    \ 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, \nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp34u1ss_f.d(59): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp34u1ss_f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic static int[] getPositives(int[] arr) {\n    int[]\
    \ result = new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n\
    \    {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static int[] getPositives(int[] arr) {\n    int[] result\
    \ = new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n   \
    \ {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\npublic\
    \ static int[] getPositives(int[] arr) {\n    int[] result = new int[arr.length];\n\
    \    int i = 0;\n    for(; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n\
    \            result[i] = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static int[] getPositives(int[]\
    \ arr) {\n    int[] result = new int[arr.length];\n    int i = 0;\n    for(; i\
    \ < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=1\
    \ |>\n<code>\npublic static int[] getPositives(int[] arr) {\n    int[] result\
    \ = new int[arr.length];\n    int i = 0;\n    for(; i < arr.length; ++i)\n   \
    \ {\n        if(arr[i] > 0)\n            result[i] = arr[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\n\
    public static int[] getPositives(int[] arr) {\n    int[] result = new int[arr.length];\n\
    \    int i = 0;\n    for(; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n\
    \            result[i] = arr[i];\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=java,arrays |>\n<code>\npublic static int[] getPositives(int[]\
    \ arr) {\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp60o4_tlg.d(21): Error: declaration expected, not `<`\n/tmp/tmp60o4_tlg.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp60o4_tlg.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp60o4_tlg.d(28): Error: declaration expected, not `<`\n/tmp/tmp60o4_tlg.d(28):
    Error: declaration expected, not `++`\n/tmp/tmp60o4_tlg.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60o4_tlg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic static int[] GetPositives(int[]\
    \ array)\n{\n    int[] result = new int[array.Length];\n    for(int i = 0; i <\
    \ array.Length; i++)\n    {\n        if(array[i] > 0)\n            result[i] =\
    \ array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,arrays,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmsg6rwad.d(20): Error: declaration expected, not `<`\n/tmp/tmpmsg6rwad.d(27):
    Error: declaration expected, not `for`\n/tmp/tmpmsg6rwad.d(27): Error: no identifier
    for declarator `i`\n/tmp/tmpmsg6rwad.d(27): Error: declaration expected, not `<`\n/tmp/tmpmsg6rwad.d(27):
    Error: no identifier for declarator `i`\n/tmp/tmpmsg6rwad.d(27): Error: declaration
    expected, not `++`\n/tmp/tmpmsg6rwad.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsg6rwad.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    res[i] = l[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpdat06czx.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpdat06czx.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpdat06czx.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xe5884554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan9w_0jq.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpan9w_0jq.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpan9w_0jq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xeffa1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            res[i] = l[i];\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan9w_0jq.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpan9w_0jq.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpan9w_0jq.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xeffa1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. Try it\
    \ with `get_positive([-1L, 2L, -4L, 5L, 6L])`.\n<|/ c |>\n<| c |>\n: I didn't\
    \ say it wouldn't. He said he wanted only positive numbers. I said it wouldn't.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. He didn't say he wanted only positive\
    \ numbers. He said he wanted only positive numbers. He didn't say he wanted only\
    \ positive numbers. He said he wanted only positive numbers. He didn't say he\
    \ wanted only positive numbers. He said he wanted only positive numbers. He didn't\
    \ say he wanted only positive numbers. He said he wanted only positive numbers.\
    \ He didn't say he wanted only positive numbers. He said he wanted only positive\
    \ numbers. He didn't say he wanted only positive numbers. He said he wanted only\
    \ positive numbers. He didn't say he wanted only positive numbers. He said he\
    \ wanted only positive numbers. He didn't say he wanted only positive numbers.\
    \ He said he wanted only positive numbers. He didn't say he wanted only positive\
    \ numbers. He said he wanted only positive numbers. He didn't say he wanted only\
    \ positive numbers. He said he wanted only positive numbers. He didn't say he\
    \ wanted only positive numbers. He said he wanted only positive numbers. He didn't\
    \ say he wanted only positive numbers. He said he wanted only positive numbers.\
    \ He didn't say he wanted only positive numbers. He said he wanted only positive\
    \ numbers. He didn't say he wanted only positive numbers. He said he wanted only\
    \ positive numbers. He didn't say he wanted only positive numbers. He said he\
    \ wanted only positive numbers. He didn't say he wanted only positive numbers.\
    \ He said he wanted only positive numbers. He didn't say he wanted only positive\
    \ numbers. He said he wanted only positive numbers. He didn't say he wanted only\
    \ positive numbers. He said he wanted only positive numbers. He didn't say he\
    \ wanted only positive numbers. He said he wanted only positive numbers. He didn't\
    \ say he wanted only positive numbers. \nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpso50bgqg.d(21): Error: declaration expected, not `<`\n/tmp/tmpso50bgqg.d(24):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(27): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(27): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(27):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30):
    Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated
    character constant\n/tmp/tmpso50bgqg.d(30): Error: unterminated character constant\n/tmp/tmpso50bgqg.d(30):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpso50bgqg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for (; i < l.length; ++i)\n    {\n        if (l[i] > 0)\n\
    \            result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L,\
    \ 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphnmeiq98.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmphnmeiq98.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmphnmeiq98.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x60cc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        {\n\
    \            res[i] = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a tags=arrays,c# |>\n<| c |>\nThanks for your answer. Your code works but i\
    \ would like to know if there is a way to do it without using loops.\n<|/ c |>\n\
    <| c |>\nI added a solution without loops\n<|/ c |>\n<| c |>\nThanks again for\
    \ your answer. Your code works but i would like to know if there is a way to do\
    \ it without using loops.\n<|/ c |>\n<| c |>\nI added a solution without loops\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimyh8yo1.d(22): Error: declaration expected, not `<`\n/tmp/tmpimyh8yo1.d(39):
    Error: semicolon expected, not `.`\n/tmp/tmpimyh8yo1.d(39): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpimyh8yo1.d(40): Error: semicolon
    expected, not `.`\n/tmp/tmpimyh8yo1.d(40): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpimyh8yo1.d(41): Error: semicolon expected, not `.`\n/tmp/tmpimyh8yo1.d(41):
    Error: no identifier for declarator `.Text`\n/tmp/tmpimyh8yo1.d(42): Error: semicolon
    expected, not `.`\n/tmp/tmpimyh8yo1.d(42): Error: no identifier for declarator
    `.Threading.Tasks`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimyh8yo1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6pl12oak.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp6pl12oak.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp6pl12oak.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x57489554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns only positive numbers\
    \ in the array.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ only positive numbers in the array.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself. It returns only positive numbers in the array.\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it yourself. It returns only positive numbers in the\
    \ array.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>\npublic static void\
    \ Main(string[] args)\n{\n    int[] arr = new int[] { 1, 2, 3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11 };\n    int[] result = new int[arr.Length];\n    Array.Sort(arr);\n\
    \    int i = 0;\n    while (i < arr.Length)\n    {\n        if (arr[i] < 0)\n\
    \        {\n            result[result.Length - i] = arr[i];\n            i++;\n\
    \        }\n        else\n        {\n            result[result.Length - i] = arr[i];\n\
    \        }\n    }\n    Console.WriteLine(string.Join(\",\", result));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are negative numbers in\
    \ the array.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns only\
    \ positive numbers in the array.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ It returns only positive numbers in the array.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It returns only positive numbers in the array.\n<|/ c\
    \ |>\n<| c |>\n: It does work. Try it yourself. It returns only positive numbers\
    \ in the array.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9bw_xcc.d(20): Error: declaration expected, not `<`\n/tmp/tmph9bw_xcc.d(23):
    Error: unterminated character constant\n/tmp/tmph9bw_xcc.d(43): Error: function
    declaration without return type. (Note that constructors are always named `this`)\n/tmp/tmph9bw_xcc.d(43):
    Error: no identifier for declarator `Array.Sort(arr)`\n/tmp/tmph9bw_xcc.d(45):
    Error: declaration expected, not `while`\n/tmp/tmph9bw_xcc.d(50): Error: no identifier
    for declarator `i`\n/tmp/tmph9bw_xcc.d(50): Error: declaration expected, not `++`\n/tmp/tmph9bw_xcc.d(51):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9bw_xcc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = new int[] {1, 2, 3, 4, 5};\n   \
    \ System.out.println(Arrays.toString(arr));\n    arr = removeNegatives(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvxc55h4.d(22): Error: declaration expected, not `<`\n/tmp/tmpwvxc55h4.d(28):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpwvxc55h4.d(28):
    Error: no identifier for declarator `System`\n/tmp/tmpwvxc55h4.d(28): Error: declaration
    expected, not `out`\n/tmp/tmpwvxc55h4.d(29): Error: no identifier for declarator
    `arr`\n/tmp/tmpwvxc55h4.d(29): Error: declaration expected, not `=`\n/tmp/tmpwvxc55h4.d(30):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmpwvxc55h4.d(30):
    Error: no identifier for declarator `System`\n/tmp/tmpwvxc55h4.d(30): Error: declaration
    expected, not `out`\n/tmp/tmpwvxc55h4.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvxc55h4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > 0)\n\t\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp641v4hiu.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp641v4hiu.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmp641v4hiu.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x5884f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    r[i] = l[i];\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L,\
    \ 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n\
    \    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe6p0sayz.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpe6p0sayz.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpe6p0sayz.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xde3a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x, l) \n    {\n        if(x>0) \n        {\n\
    \            r[i++] = x;\n        }\n    }\n    return r;\n}\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x > 0).ToList();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about LINQ, not LINQ to Objects.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought that he was asking about LINQ to Objects.\n<|/ c |>\n<| c |>\nHe asked\
    \ about LINQ to Objects, not LINQ to SQL.\n<|/ c |>\n<| c |>\nI see that now.\
    \ Thanks.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(x =>\
    \ x > 0).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about LINQ, not LINQ to Objects.\n<|/ c |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = list.Where(x => x > 0).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about LINQ, not LINQ\
    \ to Objects.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(x\
    \ => x > 0).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about LINQ, not LINQ to Objects.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = list.Where(x => x > 0).ToList();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about LINQ, not LINQ\
    \ to Objects.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x =>\
    \ x > 0).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about LINQ, not LINQ to Objects.\n<|/ c |>\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj4qefxk9.d(14): Error: no identifier for declarator `l`\n/tmp/tmpj4qefxk9.d(14):
    Error: found `)` when expecting `;`\n/tmp/tmpj4qefxk9.d(21): Error: found `return`
    when expecting `)`\n/tmp/tmpj4qefxk9.d(23): Error: declaration expected, not `<`\n/tmp/tmpj4qefxk9.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpj4qefxk9.d(31): Error: unterminated
    character constant\n/tmp/tmpj4qefxk9.d(45): Error: declaration expected, not `<`\n/tmp/tmpj4qefxk9.d(48):
    Error: unterminated character constant\n/tmp/tmpj4qefxk9.d(53): Error: declaration
    expected, not `<`\n/tmp/tmpj4qefxk9.d(56): Error: unterminated character constant\n/tmp/tmpj4qefxk9.d(61):
    Error: declaration expected, not `<`\n/tmp/tmpj4qefxk9.d(64): Error: unterminated
    character constant\n/tmp/tmpj4qefxk9.d(69): Error: declaration expected, not `<`\n/tmp/tmpj4qefxk9.d(72):
    Error: unterminated character constant\n/tmp/tmpj4qefxk9.d(77): Error: declaration
    expected, not `<`\n/tmp/tmpj4qefxk9.d(80): Error: unterminated character constant\n/tmp/tmpj4qefxk9.d(86):
    Error: declaration expected, not `assert`\n/tmp/tmpj4qefxk9.d(87): Error: declaration
    expected, not `assert`\n/tmp/tmpj4qefxk9.d(88): Error: declaration expected, not
    `assert`\n/tmp/tmpj4qefxk9.d(89): Error: declaration expected, not `assert`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4qefxk9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > 0) \n      \
    \  {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiroddkd_.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpiroddkd_.__unittest_L22_C1() [0x427fb5]\n??:?
    void tmpiroddkd_.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xb74a1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6ab7l64.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpf6ab7l64.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpf6ab7l64.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc9795554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \           result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjigyrju5.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpjigyrju5.__unittest_L21_C1() [0x427fb5]\n??:?
    void tmpjigyrju5.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xd3ede554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n        \
    \    result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpv2ekjz6h.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpv2ekjz6h.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpv2ekjz6h.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc050d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    for(; i < l.length; ++i)\n    {\n        if(l[i] > 0)\n \
    \       {\n            res[i] = l[i];\n        }\n        else\n        {\n  \
    \          break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9bamud_4.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmp9bamud_4.__unittest_L27_C1() [0x427fb5]\n??:?
    void tmp9bamud_4.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0xc3f43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the array.\n   \
    \ >>> get_positive([-1L, 2L, -4L, 5L, 6L])\n    [2L, 5L, 6L]\n    >>> get_positive([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L, 2L, 3L, 9L, 123L,\
    \ 1L]\n    \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i] > 0)\n      \
    \      result[i] = l[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) ==\
    \ [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu36hk1_p.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284d5]\n??:? void tmpu36hk1_p.__unittest_L20_C1() [0x427fb5]\n??:?
    void tmpu36hk1_p.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b446]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b80]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43065d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b41d]\n??:? runModuleUnitTests [0x42c389]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428998]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42891f]\n??:? _d_run_main [0x42888a]\n??:? main [0x428267]\n??:?
    __libc_start_main [0x3b276554]\n1/1 unittests FAILED\n'''
  stdout: b''
