name: HumanEval_2_truncate_number
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating point\
  \ number, it can be decomposed into\n    and integer part (largest integer smaller\
  \ than given number) and decimals\n    (leftover part always smaller than 1).\n\n\
  \    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n\
  \    \n*/\nfloat truncate_number(float number) \n"
tests: "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
  \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) ==\
  \ 0.0);\n}\nvoid main(){}"
completions: ["{\n    float remainder;\n    float intPart;\n    float decimalPart;\n\
    \    intPart = (float)trunc(number);\n    decimalPart = number - intPart;\n  \
    \  \n    if (decimalPart > 0.0) \n    {\n        remainder = decimalPart % 1;\n\
    \        decimalPart = decimalPart - remainder;\n    }\n    \n    return intPart\
    \ + decimalPart;\n}", "{\n    float remainder;\n    float integerPart;\n    float\
    \ decimalPart;\n    \n    integerPart = floor(number);\n    decimalPart = number\
    \ - integerPart;\n    \n    if (decimalPart > 0.0) {\n        remainder = truncate_number(decimalPart);\n\
    \    } else {\n        remainder = 0.0f;\n    }\n    \n    return remainder;\n\
    }", "{\n    int int_part;\n    float decimal_part;\n    \n    int_part = int(number);\n\
    \    \n    if (int_part == number)\n    {\n        decimal_part = 0.0;\n    }\n\
    \    else\n    {\n        decimal_part = number - int_part;\n    }\n    \n   \
    \ return decimal_part;\n}", "{\n    int decimal_part = int(number);\n    float\
    \ remainder = number - decimal_part;\n    return remainder;\n}", "{\n    float\
    \ remainder;\n    float quotient;\n    int exponent;", "{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 10.0;\n        number = number / 10.0;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}", "{\n    int\
    \ int_part;\n    float frac_part;\n    int_part = trunc(number);\n    frac_part\
    \ = number - int_part;\n    return frac_part;\n}", "{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}", "{\n    float\
    \ result = number;\n    float decimals = 0.0;\n    \n    while(number > 0.0) {\n\
    \        decimals += 1.0;\n        number -= floorf(number);\n    }\n    \n  \
    \  result = number - decimals;\n    \n    return result;\n}", "{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    \n    while(result > 1.0)\n    {\n\
    \        result -= 1.0;\n        decimals += 1.0;\n    }\n    \n    while(result\
    \ < 0.0)\n    {\n        result += 1.0;\n        decimals -= 1.0;\n    }\n   \
    \ \n    return result + decimals;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;", "{\n    float remainder;\n    int integer_part;\n \
    \   \n    integer_part = int(number);\n    remainder      = number - integer_part;\n\
    \    \n    return remainder;\n}", "{\n    float decimals = 0.0;\n    float remainder\
    \ = 0.0;\n    float quotient = 0.0;\n    float temp = 0.0;\n    float temp2 =\
    \ 0.0;\n    float temp3 = 0.0;\n    float temp4 = 0.0;\n    float temp5 = 0.0;\n\
    \    float temp6 = 0.0;\n    float temp7 = 0.0;\n    float temp8 = 0.0;\n    float\
    \ temp9 = 0.0;\n    float temp10 = 0.0;\n    float temp11 = 0.0;\n    float temp12\
    \ = 0.0;\n    float temp13 = 0.0;\n    float temp14 = 0.0;\n    float temp15 =\
    \ 0.0;\n    float temp16 = 0.0;\n    float temp17 = 0.0;\n    float temp18 = 0.0;\n\
    \    float temp19 = 0.0;\n    float temp20 = 0.0;\n    float temp21 = 0.0;\n \
    \   float temp22 = 0.0;\n    float temp23 = 0.0;\n    float temp24 = 0.0;\n  \
    \  float temp25 = 0.0;\n    float temp26 = 0.0;\n    float temp27 = 0.0;\n   \
    \ float temp28 = 0.0;\n    float temp29 = 0.0;\n    float temp30 = 0.0;\n    float\
    \ temp31 = 0.0;\n    float temp32 = 0.0;\n    float temp33 = 0.0;\n    float temp34\
    \ = 0.0;\n    float temp35 = 0.0;\n    float temp36 = 0.0;\n    float temp37 =\
    \ 0.0;\n    float temp38 = 0.0;\n    float temp39 = 0.0;\n    float temp40 = 0.0;\n\
    \    float temp41 = 0.0;\n    float temp42 = 0.0;\n    float temp43 = 0.0;\n \
    \   float temp44 = 0.0;\n    float temp45 = 0.0;\n    float temp46 = 0.0;\n  \
    \  float temp47 = 0.0;\n    float temp48 = 0.0;\n    float temp49 = 0.0;\n   \
    \ float temp50 = 0.0;\n    float temp51 = 0.0;\n    float temp52 = 0.0;\n    float\
    \ temp53 = 0.0;\n    float temp54 = 0.0;\n    float temp55 = 0.0;\n    float temp56\
    \ = 0.0;\n    float temp57 = 0.0;\n    float temp58 = 0.0;\n    float temp59 =\
    \ 0.0;\n    float temp60 = 0.0;\n    float temp61 = 0.0;\n    float temp62 = 0.0;\n\
    \    float temp63 = 0.0;\n    float temp64 = 0.0;\n    float temp65 = 0.0;\n \
    \   float temp66 = 0.0;\n    float temp67 = 0.0;\n    float temp68 = 0.0;\n  \
    \  ", "{\n    float remainder;\n    int integerPart;\n    \n    integerPart =\
    \ int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }", "{\n    long long int int_part;\n    long long int decimal_part;\n    \n \
    \   int_part = trunc(number);\n    decimal_part = number - int_part;\n    \n \
    \   return float(decimal_part);\n}", "{\n    float remainder;\n    int integerPart;\n\
    \    int decimalPart;\n    \n    integerPart = int(number);\n    decimalPart =\
    \ number - integerPart;\n    \n    remainder = number - integerPart * pow(10.0,\
    \ decimalPart);\n    \n    return remainder;\n}", "{\n    float trunc_number =\
    \ number;\n    float remainder;\n    float decimals;\n    \n    while(trunc_number\
    \ >= 1)\n    {\n        remainder = trunc_number % 1;\n        trunc_number =\
    \ trunc_number / 1;\n        decimals = remainder;\n    }\n    return decimals;\n\
    }", "{\n    float remainder;\n    float quotient;\n    float decimals;\n    int\
    \ exponent;", "{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}", "{\n\
    \    int decimal_part = int(number);\n    float trunc_number = number - decimal_part;\n\
    \    return trunc_number;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
