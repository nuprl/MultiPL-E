name: HumanEval_2_truncate_number
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating point\
  \ number, it can be decomposed into\n    and integer part (largest integer smaller\
  \ than given number) and decimals\n    (leftover part always smaller than 1).\n\n\
  \    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n\
  \    \n*/\nfloat truncate_number(float number) \n"
tests: "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
  \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) ==\
  \ 0.0);\n}\nvoid main(){}"
completions: ["{\n    float remainder;\n    float intPart;\n    float decimalPart;\n\
    \    intPart = (float)trunc(number);\n    decimalPart = number - intPart;\n  \
    \  \n    if (decimalPart > 0.0) \n    {\n        remainder = decimalPart % 1;\n\
    \        decimalPart = decimalPart - remainder;\n    }\n    \n    return intPart\
    \ + decimalPart;\n}", "{\n    float remainder;\n    float integerPart;\n    float\
    \ decimalPart;\n    \n    integerPart = floor(number);\n    decimalPart = number\
    \ - integerPart;\n    \n    if (decimalPart > 0.0) {\n        remainder = truncate_number(decimalPart);\n\
    \    } else {\n        remainder = 0.0f;\n    }\n    \n    return remainder;\n\
    }", "{\n    int int_part;\n    float decimal_part;\n    \n    int_part = int(number);\n\
    \    \n    if (int_part == number)\n    {\n        decimal_part = 0.0;\n    }\n\
    \    else\n    {\n        decimal_part = number - int_part;\n    }\n    \n   \
    \ return decimal_part;\n}", "{\n    int decimal_part = int(number);\n    float\
    \ remainder = number - decimal_part;\n    return remainder;\n}", "{\n    float\
    \ remainder;\n    float quotient;\n    int exponent;", "{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 10.0;\n        number = number / 10.0;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}", "{\n    int\
    \ int_part;\n    float frac_part;\n    int_part = trunc(number);\n    frac_part\
    \ = number - int_part;\n    return frac_part;\n}", "{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}", "{\n    float\
    \ result = number;\n    float decimals = 0.0;\n    \n    while(number > 0.0) {\n\
    \        decimals += 1.0;\n        number -= floorf(number);\n    }\n    \n  \
    \  result = number - decimals;\n    \n    return result;\n}", "{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    \n    while(result > 1.0)\n    {\n\
    \        result -= 1.0;\n        decimals += 1.0;\n    }\n    \n    while(result\
    \ < 0.0)\n    {\n        result += 1.0;\n        decimals -= 1.0;\n    }\n   \
    \ \n    return result + decimals;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;", "{\n    float remainder;\n    int integer_part;\n \
    \   \n    integer_part = int(number);\n    remainder      = number - integer_part;\n\
    \    \n    return remainder;\n}", "{\n    float decimals = 0.0;\n    float remainder\
    \ = 0.0;\n    float quotient = 0.0;\n    float temp = 0.0;\n    float temp2 =\
    \ 0.0;\n    float temp3 = 0.0;\n    float temp4 = 0.0;\n    float temp5 = 0.0;\n\
    \    float temp6 = 0.0;\n    float temp7 = 0.0;\n    float temp8 = 0.0;\n    float\
    \ temp9 = 0.0;\n    float temp10 = 0.0;\n    float temp11 = 0.0;\n    float temp12\
    \ = 0.0;\n    float temp13 = 0.0;\n    float temp14 = 0.0;\n    float temp15 =\
    \ 0.0;\n    float temp16 = 0.0;\n    float temp17 = 0.0;\n    float temp18 = 0.0;\n\
    \    float temp19 = 0.0;\n    float temp20 = 0.0;\n    float temp21 = 0.0;\n \
    \   float temp22 = 0.0;\n    float temp23 = 0.0;\n    float temp24 = 0.0;\n  \
    \  float temp25 = 0.0;\n    float temp26 = 0.0;\n    float temp27 = 0.0;\n   \
    \ float temp28 = 0.0;\n    float temp29 = 0.0;\n    float temp30 = 0.0;\n    float\
    \ temp31 = 0.0;\n    float temp32 = 0.0;\n    float temp33 = 0.0;\n    float temp34\
    \ = 0.0;\n    float temp35 = 0.0;\n    float temp36 = 0.0;\n    float temp37 =\
    \ 0.0;\n    float temp38 = 0.0;\n    float temp39 = 0.0;\n    float temp40 = 0.0;\n\
    \    float temp41 = 0.0;\n    float temp42 = 0.0;\n    float temp43 = 0.0;\n \
    \   float temp44 = 0.0;\n    float temp45 = 0.0;\n    float temp46 = 0.0;\n  \
    \  float temp47 = 0.0;\n    float temp48 = 0.0;\n    float temp49 = 0.0;\n   \
    \ float temp50 = 0.0;\n    float temp51 = 0.0;\n    float temp52 = 0.0;\n    float\
    \ temp53 = 0.0;\n    float temp54 = 0.0;\n    float temp55 = 0.0;\n    float temp56\
    \ = 0.0;\n    float temp57 = 0.0;\n    float temp58 = 0.0;\n    float temp59 =\
    \ 0.0;\n    float temp60 = 0.0;\n    float temp61 = 0.0;\n    float temp62 = 0.0;\n\
    \    float temp63 = 0.0;\n    float temp64 = 0.0;\n    float temp65 = 0.0;\n \
    \   float temp66 = 0.0;\n    float temp67 = 0.0;\n    float temp68 = 0.0;\n  \
    \  ", "{\n    float remainder;\n    int integerPart;\n    \n    integerPart =\
    \ int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }", "{\n    long long int int_part;\n    long long int decimal_part;\n    \n \
    \   int_part = trunc(number);\n    decimal_part = number - int_part;\n    \n \
    \   return float(decimal_part);\n}", "{\n    float remainder;\n    int integerPart;\n\
    \    int decimalPart;\n    \n    integerPart = int(number);\n    decimalPart =\
    \ number - integerPart;\n    \n    remainder = number - integerPart * pow(10.0,\
    \ decimalPart);\n    \n    return remainder;\n}", "{\n    float trunc_number =\
    \ number;\n    float remainder;\n    float decimals;\n    \n    while(trunc_number\
    \ >= 1)\n    {\n        remainder = trunc_number % 1;\n        trunc_number =\
    \ trunc_number / 1;\n        decimals = remainder;\n    }\n    return decimals;\n\
    }", "{\n    float remainder;\n    float quotient;\n    float decimals;\n    int\
    \ exponent;", "{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}", "{\n\
    \    int decimal_part = int(number);\n    float trunc_number = number - decimal_part;\n\
    \    return trunc_number;\n}", "{\n    float decimalPart;\n    float integerPart;\n\
    \    \n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n\
    \    \n    return decimalPart;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    remainder = number - integer_part;\n   \
    \ \n    return remainder;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    int decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder;\n    \n    return\
    \ decimal_part;\n}", "{\n    float remainder;\n    int integer_part;\n    \n \
    \   integer_part = int(number);\n    remainder = number - integer_part;\n    \n\
    \    return remainder;\n}", "{\n    float remainder;\n    float quotient;\n  \
    \  float decimals;\n    float result;", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder / pow(10.0, trunc(log10(remainder)));\n\
    \    \n    return decimal_part;\n}", "{\n    float remainder;\n    int integerPart;\n\
    \    int decimalPart;", "{\n    int integer_part;\n    float decimal_part;\n \
    \   \n    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    return decimal_part;\n}", "{\n    float result = number;\n    \n  \
    \  float decimalPart = (number - int(number));\n    \n    if (decimalPart > 0.0f)\n\
    \    {\n        result = number - decimalPart;\n    }\n    \n    return result;\n\
    }", "{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    \n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}", "{\n    int int_part;\n    float decimal_part;\n    int_part\
    \ = trunc(number);\n    decimal_part = number - int_part;\n    return decimal_part;\n\
    }\n/*\n Given a positive floating point number, it can be decomposed into\n  \
    \  and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).", "{\n    float remainder;\n    float\
    \ decimals;\n    float integerPart;\n    \n    integerPart = number;\n    \n \
    \   decimals = number - integerPart;\n    \n    while(decimals > 0.0f) {\n   \
    \     decimals = decimals - 1.0f;\n        integerPart = integerPart + 1.0f;\n\
    \    }\n    \n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }\n/*\n Given a positive floating point number, it can be decomposed into\n  \
    \  and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).", "{\n    long long int intPart =\
    \ (long long int) number;\n    long long int decimalPart = (long long int) number\
    \ - intPart;\n    \n    if (intPart == 0)\n        return 0;\n    \n    return\
    \ (float) decimalPart;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    remainder = number - integer_part;\n   \
    \ \n    return decimal_part;\n}", "{\n    float remainder;\n    int integerPart;\n\
    \    \n    integerPart = int(number);\n    remainder = number - integerPart;\n\
    \    \n    return remainder;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    \n    integer_part = trunc(number);\n    remainder = number - integer_part;\n\
    \    \n    return remainder;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder;\n    \n    return\
    \ decimal_part;\n}", "{\n    float decimals = 0.0;\n    float remainder = 0.0;\n\
    \    float quotient = 0.0;\n    \n    quotient = number / FLT_EPSILON;\n    \n\
    \    if (number < 0.0) \n    {\n        quotient = -quotient;\n    }\n    \n \
    \   remainder = number - quotient * FLT_EPSILON;\n    \n    if (remainder > FLT_EPSILON)\
    \ \n    {\n        decimals = remainder / FLT_EPSILON;\n    }\n    \n    return\
    \ quotient + decimals;\n}", "{\n    int decimal_part = int(number);\n    float\
    \ trunc_number = number - decimal_part;\n    return trunc_number;\n}", "{\n  \
    \  float remainder;\n    float quotient;\n    float decimals;\n    float result;",
  "{\n    int int_part;\n    float frac_part;\n    int_part = trunc(number);\n   \
    \ frac_part = number - int_part;\n    return frac_part;\n}", "{\n    float trunc_number\
    \ = number;\n    float remainder = 0;\n    float int_part = 0;\n    float decimal_part\
    \ = 0;\n    \n    while(trunc_number > 0)\n    {\n        remainder = trunc_number\
    \ % 10;\n        int_part = int_part * 10 + remainder;\n        trunc_number =\
    \ trunc_number / 10;\n    }\n    \n    decimal_part = int_part * pow(10, (int_part\
    \ - 1));\n    \n    return decimal_part;\n}", "{\n    float result = number;\n\
    \    \n    while(result > 1) {\n        result /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    int int_part;\n    float decimal_part;\n    \n    int_part\
    \ = trunc(number);\n    \n    decimal_part = number - int_part;\n    \n    return\
    \ decimal_part;\n}", "{\n    float remainder;\n    int integer_part;\n    float\
    \ decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder;\n    \n    return\
    \ decimal_part;\n}", "{\n    int decimal_part = int(number);\n    float trunc_number\
    \ = number - decimal_part;\n    return trunc_number;\n}", "{\n    int intPart\
    \ = (int) number;\n    float decimalPart = number - intPart;\n    \n    return\
    \ decimalPart;\n}", "{\n    int int_part;\n    float decimal_part;\n    \n   \
    \ int_part = trunc(number);\n    \n    decimal_part = number - int_part;\n   \
    \ \n    return decimal_part;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    int decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder / FLT_EPSILON;\n\
    \    \n    return decimal_part;\n}", "{\n    int int_part;\n    float frac_part;\n\
    \    \n    int_part = trunc(number);\n    frac_part = number - int_part;\n   \
    \ \n    return frac_part;\n}", "{\n    int int_part;\n    float decimal_part;\n\
    \    \n    int_part = int(number);\n    \n    decimal_part = number - int_part;\n\
    \    \n    return decimal_part;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    \n    integer_part = int(number);\n    remainder = number - integer_part;\n\
    \    \n    return remainder;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;", "{\n    float remainder;\n    float quotient;\n   \
    \ float decimals;\n    float result;\n    \n    quotient = number / 10;\n    remainder\
    \ = number % 10;\n    decimals = remainder;\n    \n    if (remainder > 0)\n  \
    \  {\n        result = quotient + decimals;\n    }\n    else\n    {\n        result\
    \ = quotient;\n    }\n    \n    return result;\n}", "{\n    float remainder;\n\
    \    float quotient;\n    int integer_part;", "{\n    float result = number;\n\
    \    \n    while(result > 1) {\n        result /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    float remainder;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }", "{\n    float remainder;\n    int integer_part;\n    float decimal_part;",
  "{\n    float remainder;\n    float quotient;\n    float decimals;\n    float result;\n\
    \    \n    quotient = number / 10;\n    remainder = number % 10;\n    decimals\
    \ = remainder;\n    \n    result = quotient;\n    \n    return result;\n}", "{\n\
    \    float remainder;\n    int integerPart;\n    \n    integerPart = int(number);\n\
    \    remainder = number - integerPart;\n    \n    return remainder;\n}", "{\n\
    \    float remainder;\n    int integer_part;\n    \n    integer_part = trunc(number);\n\
    \    remainder = number - integer_part;\n    \n    return remainder;\n}", "{\n\
    \    long long int int_part;\n    float decimal_part;", "{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    if (decimalPart > 0.0f)\n  \
    \  {\n        remainder = number-integerPart;\n        \n        if (remainder\
    \ > 0.0f)\n        {\n            integerPart += 1.0f;\n        }\n    }\n   \
    \ \n    return integerPart;\n}", "{\n    float result = number;\n    float remainder;\n\
    \    int exponent;\n    \n    exponent = std.math.frexp(number, &remainder);\n\
    \    \n    if (exponent == 0)\n    {\n        result = remainder;\n    }\n   \
    \ else\n    {\n        result = number / powf(10.0, -exponent);\n    }\n    \n\
    \    return result;\n}", "{\n    float result = number;\n    float remainder;\n\
    \    int exponent;", "{\n    float result = number;\n    float decimals = 1;\n\
    \    float remainder = 0;\n    \n    while(number > 0)\n    {\n        remainder\
    \ = number % 10;\n        number = number / 10;\n        decimals = decimals *\
    \ 10 + remainder;\n    }\n    \n    result = result / decimals;\n    \n    return\
    \ result;\n}", "{\n    float result = number;\n    \n    while(result > 1) {\n\
    \        result = result / 10;\n    }\n    \n    return result;\n}", "{\n    float\
    \ decimals = 0.0;\n    float remainder = 0.0;\n    float quotient = 0.0;\n   \
    \ float temp = 0.0;\n    float temp2 = 0.0;\n    float temp3 = 0.0;\n    float\
    \ temp4 = 0.0;\n    float temp5 = 0.0;\n    float temp6 = 0.0;\n    float temp7\
    \ = 0.0;\n    float temp8 = 0.0;\n    float temp9 = 0.0;\n    float temp10 = 0.0;\n\
    \    float temp11 = 0.0;\n    float temp12 = 0.0;\n    float temp13 = 0.0;\n \
    \   float temp14 = 0.0;\n    float temp15 = 0.0;\n    float temp16 = 0.0;\n  \
    \  float temp17 = 0.0;\n    float temp18 = 0.0;\n    float temp19 = 0.0;\n   \
    \ float temp20 = 0.0;\n    float temp21 = 0.0;\n    float temp22 = 0.0;\n    float\
    \ temp23 = 0.0;\n    float temp24 = 0.0;\n    float temp25 = 0.0;\n    float temp26\
    \ = 0.0;\n    float temp27 = 0.0;\n    float temp28 = 0.0;\n    float temp29 =\
    \ 0.0;\n    float temp30 = 0.0;\n    float temp31 = 0.0;\n    float temp32 = 0.0;\n\
    \    float temp33 = 0.0;\n    float temp34 = 0.0;\n    float temp35 = 0.0;\n \
    \   float temp36 = 0.0;\n    float temp37 = 0.0;\n    float temp38 = 0.0;\n  \
    \  float temp39 = 0.0;\n    float temp40 = 0.0;\n    float temp41 = 0.0;\n   \
    \ float temp42 = 0.0;\n    float temp43 = 0.0;\n    float temp44 = 0.0;\n    float\
    \ temp45 = 0.0;\n    float temp46 = 0.0;\n    float temp47 = 0.0;\n    float temp48\
    \ = 0.0;\n    float temp49 = 0.0;\n    float temp50 = 0.0;\n    float temp51 =\
    \ 0.0;\n    float temp52 = 0.0;\n    float temp53 = 0.0;\n    float temp54 = 0.0;\n\
    \    float temp55 = 0.0;\n    float temp56 = 0.0;\n    float temp57 = 0.0;\n \
    \   float temp58 = 0.0;\n    float temp59 = 0.0;\n    float temp60 = 0.0;\n  \
    \  float temp61 = 0.0;\n    float temp62 = 0.0;\n    float temp63 = 0.0;\n   \
    \ float temp64 = 0.0;\n    float temp65 = 0.0;\n    float temp66 = 0.0;\n    float\
    \ temp67 = 0.0;\n    float temp68 = 0.0;\n    ", "{\n    float remainder;\n  \
    \  int integer_part;\n    \n    integer_part = trunc(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}", "{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}", "{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    \n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}", "{\n    float decimals\
    \ = number % 1;\n    float remainder = number - decimals;\n    float integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = remainder < 0.5 ? remainder\
    \ : remainder - 1;\n    decimal_part = remainder - integer_part;\n    \n    return\
    \ decimal_part;\n}", "{\n    int integer_part;\n    float decimal_part;\n    \n\
    \    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    return decimal_part;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    \n    integer_part = trunc(number);\n    remainder = number - integer_part;\n\
    \    \n    return remainder;\n}", "{\n    float remainder;\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    remainder\
    \ = number - integer_part;\n    \n    decimal_part = remainder;\n    \n    return\
    \ decimal_part;\n}", "{\n    float result = number;\n    \n    while(result >\
    \ 1) {\n        result = result / 10;\n    }\n    \n    return result;\n}", "{\n\
    \    float remainder;\n    int integer_part;\n    \n    integer_part = trunc(number);\n\
    \    remainder = number - integer_part;\n    \n    return remainder;\n}", "{\n\
    \    int int_part;\n    float frac_part;\n    int_part = trunc(number);\n    frac_part\
    \ = number - int_part;\n    return frac_part;\n}", "{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part;\n    \n    return remainder;\n}", "{\n    long long int int_part;\n\
    \    long long int decimal_part;\n    \n    int_part = trunc(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return float(decimal_part);\n}", "{\n    float\
    \ remainder;\n    float trunc_number;\n    float int_part;\n    float decimal_part;\n\
    \    \n    int_part = floor(number);\n    decimal_part = number - int_part;\n\
    \    \n    remainder = number - int_part;\n    \n    trunc_number = int_part;\n\
    \    \n    if (remainder > 0)\n    {\n        trunc_number += 1;\n    }\n    \n\
    \    return decimal_part;\n}", "{\n    int int_part;\n    float frac_part;\n \
    \   \n    int_part = int(number);\n    frac_part = number - int_part;\n    \n\
    \    return frac_part;\n}", "{\n    float remainder;\n    int integerPart;\n \
    \   \n    remainder = number % 1;\n    integerPart = int(number);\n    \n    if\
    \ (remainder == 0)\n        return integerPart;\n    else\n        return integerPart\
    \ + 1;\n}", "{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float result;\n    \n    quotient = number;\n    decimals = 1;\n    \n  \
    \  while(quotient > 1)\n    {\n        remainder = quotient % 1;\n        quotient\
    \ = quotient / 1;\n        decimals = decimals + 1;\n    }\n    \n    result =\
    \ remainder;\n    \n    return result;\n}", "{\n    float remainder;\n    int\
    \ integerPart;\n    \n    integerPart = int(number);\n    remainder = number -\
    \ integerPart;\n    \n    return remainder;\n}", "{\n    long long int int_part;\n\
    \    long long int decimal_part;\n    \n    int_part = trunc(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return float(decimal_part);\n}", "{\n    float\
    \ remainder;\n    float decimals;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    remainder = number - integerPart;\n    decimals = remainder\
    \ * pow(10.0, floor(log10(remainder)));\n    \n    return decimals;\n}", "{\n\
    \    float result = number;\n    \n    float remainder;\n    \n    float integer_part;\n\
    \    \n    float decimal_part;\n    \n    float decimal_part_remainder;\n    \n\
    \    float decimal_part_remainder_magnitude;\n    \n    float decimal_part_remainder_magnitude2;\n\
    \    \n    float decimal_part_remainder_magnitude3;\n    \n    float decimal_part_remainder_magnitude4;\n\
    \    \n    float decimal_part_remainder_magnitude5;\n    \n    float decimal_part_remainder_magnitude6;\n\
    \    \n    float decimal_part_remainder_magnitude7;\n    \n    float decimal_part_remainder_magnitude8;\n\
    \    \n    float decimal_part_remainder_magnitude9;\n    \n    float decimal_part_remainder_magnitude10;\n\
    \    \n    float decimal_part_remainder_magnitude11;\n    \n    float decimal_part_remainder_magnitude12;\n\
    \    \n    float decimal_part_remainder_magnitude13;\n    \n    float decimal_part_remainder_magnitude14;\n\
    \    \n    float decimal_part_remainder_magnitude15;\n    \n    float decimal_part_remainder_magnitude16;\n\
    \    \n    float decimal_part_remainder_magnitude17;\n    \n    float decimal_part_remainder_magnitude18;\n\
    \    \n    float decimal_part_remainder_magnitude19;\n    \n    float decimal_part_remainder_magnitude20;\n\
    \    \n    float decimal_part_remainder_magnitude21;\n    \n    float decimal_part_remainder_magnitude22;\n\
    \    \n    float decimal_part_remainder_magnitude23;\n    \n    float decimal_part_remainder_magnitude24;\n\
    \    \n    float decimal_part_remainder_magnitude25;\n    \n    float decimal_part_remainder_magnitude26;\n\
    \    \n    float decimal_part_remainder_magnitude27;\n    \n    float decimal_part_remainder_magnitude28;\n\
    \    \n    float decimal_part_remainder_magnitude29;\n    \n    float decimal_part_remainder_magnitude30;\n\
    \    \n    float decimal_part_remainder_magnitude31;\n    \n    float decimal_part_remainder_magnitude32;\n\
    \    \n    float decimal_part_remainder_magnitude33;\n    \n    float decimal_part_remainder_magnitude34;\n\
    \    \n    float decimal_part_remainder_magnitude35;\n    \n    float decimal_part_remainder_magnitude36;\n\
    \    \n    float decimal_part_remainder_magnitude37;\n    \n    float decimal_part_remainder_magnitude38;\n\
    \    \n    float decimal_part_remainder_magnitude39;\n    \n    float decimal_part_remainder_magnitude40;\n\
    \    \n    float decimal_part_remainder_magnitude4", "{\n    float result = number;\n\
    \    \n    while(result > 1) {\n        result = result / 10;\n    }\n    \n \
    \   return result;\n}", "{\n    float result = number;\n    float decimals = 1;\n\
    \    float remainder = 0;\n    \n    while(number > 0)\n    {\n        remainder\
    \ = number % 10;\n        number = number / 10;\n        decimals = decimals *\
    \ 10 + remainder;\n    }\n    \n    result = result / decimals;\n    return result;\n\
    }", "{\n    float remainder;\n    int integer_part;\n    \n    integer_part =\
    \ trunc(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }", "{\n    float remainder;\n    float decimals;", "{\n    float remainder;\n\
    \    float intPart;\n    float decimalPart;\n    intPart = (float)trunc(number);\n\
    \    decimalPart = number - intPart;\n    remainder = decimalPart > 0.0 ? decimalPart\
    \ : 0.0;\n    return remainder;\n}", "{\n    float result = number;\n    \n  \
    \  while(result > 1)\n    {\n        result /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    int int_part;\n    float decimal_part = number - truncate_number(int_part);\n\
    \    return decimal_part;\n}\n/*\n Given a positive floating point number, it\
    \ can be decomposed into\n    and integer part (largest integer smaller than given\
    \ number) and decimals\n    (leftover part always smaller than 1).", "{\n    float\
    \ remainder;\n    float integerPart;\n    float decimalPart;\n    \n    integerPart\
    \ = floor(number);\n    decimalPart = number - integerPart;\n    \n    if (decimalPart\
    \ > 0.0f)\n    {\n        remainder = truncate_number(decimalPart);\n    }\n \
    \   else\n    {\n        remainder = 0.0f;\n    }\n    \n    return remainder;\n\
    }", "{\n    int integer_part;\n    float decimal_part = number - truncate_number(floorf(number));\n\
    \    \n    integer_part = trunc(number);\n    \n    return decimal_part + integer_part;\n\
    }", "{\n    int decimal_part = int(number);\n    float trunc_number = number -\
    \ decimal_part;\n    return trunc_number;\n}", "{\n    float remainder;\n    int\
    \ integer_part;\n    int decimal_part;\n    \n    integer_part = int(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\n</code>\n<|/ a tags=c++,truncate |>\n<| a\
    \ tags=c++,truncate |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace\
    \ std;", "{\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    remainder = number - integer_part;\n    \n    return remainder;\n}\n\
    /*\n Given a positive floating point number, it can be decomposed into\n    and\
    \ integer part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).", "{\n    int integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    return decimal_part;\n}", "{\n    float remainder;\n    float integerPart;\n\
    \    float decimalPart;\n    \n    integerPart = floor(number);\n    decimalPart\
    \ = number - integerPart;\n    \n    if (decimalPart > 0.0) \n    {\n        remainder\
    \ = truncate_number(decimalPart);\n    }\n    \n    return remainder;\n}", "{\n\
    \    float result = number;\n    \n    while(result > 1)\n    {\n        result\
    \ /= 10;\n    }\n    \n    return result;\n}", "{\n    float remainder;\n    int\
    \ integerPart;\n    \n    integerPart = int(number);\n    remainder = number -\
    \ integerPart;\n    \n    return remainder;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
