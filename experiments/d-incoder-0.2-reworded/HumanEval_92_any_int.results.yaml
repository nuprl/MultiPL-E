language: d
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) && std.math.isInfinite(y)\
    \ && std.math.isInfinite(z) && std.math.isFinite(x+y+z);\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpud5ldls4.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpud5ldls4.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpud5ldls4.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpud5ldls4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInside(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltcylty5.d(28): Error: undefined identifier `isInside` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltcylty5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)) || (std.int(z) == std.int(x)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0jtixqp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (x == y ||\
    \ x == z || y == z) \n    {\n        result = true;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpp3e219c0.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmpp3e219c0.__unittest_L37_C1() [0x427a5c]\n??:?
    void tmpp3e219c0.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c4b]\n??:?
    __libc_start_main [0x7b857554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplwbq3v3e.d(49): Error: expression expected, not `unittest`\n/tmp/tmplwbq3v3e.d(50):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplwbq3v3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isnan(x) || std.math.isnan(y) || std.math.isnan(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) {\n        return result;\n    }\n    \n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isnan(x) && std.math.isnan(y) && std.math.isnan(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.is\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpga24lbxg.d(94): Error: identifier expected following `.`, not
    `is`\n/tmp/tmpga24lbxg.d(95): Error: found `unittest` when expecting `)`\n/tmp/tmpga24lbxg.d(110):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpga24lbxg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y )\n    {\n        if ( x == z )\n\
    \        {\n            return true;\n        }\n        else\n        {\n   \
    \         return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2asb452z.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmp2asb452z.__unittest_L44_C1() [0x427a50]\n??:?
    void tmp2asb452z.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c3f]\n??:?
    __libc_start_main [0xda85554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._max(std.math._abs(x), std.math._abs(y), std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm9twlu0r.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28):
    Error: undefined identifier `_max` in module `std.math`, did you mean function
    `fmax`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9twlu0r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (std.math.isInt(x)\
    \ && std.math.isInt(y) && std.math.isInt(z)) {\n        result = std.math.isEqual(x\
    \ + y, z);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpefev88pm.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpefev88pm.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpefev88pm.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpefev88pm.d(31): Error: undefined identifier `isEqual` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefev88pm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && !std.math.isInt(z))\
    \ || (!std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vsfnnss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyjuydn0r.d(49): Error: found `unittest` when expecting `,`\n/tmp/tmpyjuydn0r.d(64):
    Error: found `void` when expecting `,`\n/tmp/tmpyjuydn0r.d(64): Error: found `{`
    when expecting `,`\n/tmp/tmpyjuydn0r.d(64): Error: expression expected, not `}`\n/tmp/tmpyjuydn0r.d(64):
    Error: found `End of File` when expecting `,`\n/tmp/tmpyjuydn0r.d(64): Error:
    found `End of File` when expecting `)`\n/tmp/tmpyjuydn0r.d(64): Error: found `End
    of File` when expecting `)`\n/tmp/tmpyjuydn0r.d(64): Error: found `End of File`
    instead of statement\n/tmp/tmpyjuydn0r.d(64): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyjuydn0r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == x + y) && (x == x + z) && (x ==\
    \ y + z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmk6mrs4g.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427edd]\n??:? void tmpmk6mrs4g.__unittest_L30_C1() [0x427a80]\n??:?
    void tmpmk6mrs4g.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282b3]\n??:? _d_run_main [0x42821e]\n??:? main [0x427c6f]\n??:?
    __libc_start_main [0x34ae9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppnr0g5fc.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmppnr0g5fc.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmppnr0g5fc.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppnr0g5fc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) >= std.math._abs(x + y + z));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla5ojyix.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y )\n\
    \    {\n        if ( x == z )\n        {\n            result = true;\n       \
    \ }\n    }\n    else\n    {\n        if ( y == z )\n        {\n            result\
    \ = true;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvlk36f2a.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpvlk36f2a.__unittest_L47_C1() [0x427a60]\n??:?
    void tmpvlk36f2a.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0xb7f38554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptoqgg62e.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmptoqgg62e.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptoqgg62e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma5hj23r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y ||\
    \ x == z || y == z ) \n    {\n        result = true;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjsgrt62x.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmpjsgrt62x.__unittest_L37_C1() [0x427a5c]\n??:?
    void tmpjsgrt62x.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c4b]\n??:?
    __libc_start_main [0x6498b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpok4xl_f1.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpok4xl_f1.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpok4xl_f1.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpok4xl_f1.d(30): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok4xl_f1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == x + y) && (x == x + z) && (x ==\
    \ y + z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmk6mrs4g.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427edd]\n??:? void tmpmk6mrs4g.__unittest_L30_C1() [0x427a80]\n??:?
    void tmpmk6mrs4g.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282b3]\n??:? _d_run_main [0x42821e]\n??:? main [0x427c6f]\n??:?
    __libc_start_main [0x34ae9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z) || std.math.isInfinite(x+y+z);\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuxhutv9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y ||\
    \ x == z )\n        result = true;\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqlz_myea.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpqlz_myea.__unittest_L35_C1() [0x427a54]\n??:?
    void tmpqlz_myea.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0x55519554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54ygxeap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z || y == z) return true;\n\
    \    else return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvo_ypur0.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpvo_ypur0.__unittest_L31_C1() [0x427a54]\n??:?
    void tmpvo_ypur0.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0x65153554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)) || (std.int(z) == std.int(x)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0jtixqp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.rem(x,y) == 0.0f) && (std.math.rem(y,z)\
    \ == 0.0f) && (std.math.rem(x,z) == 0.0f));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrb11nxx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y )\n    {\n        if ( x == z )\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n    {\n        if ( x == z )\n            return true;\n        else\n\
    \            return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7ze1j9nq.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmp7ze1j9nq.__unittest_L43_C1() [0x427a5c]\n??:?
    void tmp7ze1j9nq.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c4b]\n??:?
    __libc_start_main [0x20258554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && !std.math.isInt(z))\
    \ || (!std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)) || (!std.math.isInt(x)\
    \ && !std.math.isInt(y) && !std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpllqhw_1o.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllqhw_1o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isinf(x) ||\
    \ std.math.isinf(y) || std.math.isinf(z))\n        return false;\n    \n    if\
    \ (x == y || x == z || y == z)\n        return true;\n    \n    if (std.typecons.is_integer(x)\
    \ && std.typecons.is_integer(y) && std.typecons.is_integer(z))\n        return\
    \ std.math.isclose(x, y, std.epsilon);\n    \n    return false;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgw7w18p5.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpgw7w18p5.d(37): Error: undefined identifier `is_integer` in
    module `std.typecons`\n/tmp/tmpgw7w18p5.d(37): Error: undefined identifier `is_integer`
    in module `std.typecons`\n/tmp/tmpgw7w18p5.d(37): Error: undefined identifier
    `is_integer` in module `std.typecons`\n/tmp/tmpgw7w18p5.d(38): Error: undefined
    identifier `isclose` in module `std.math`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgw7w18p5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z) return true;\n    if (y\
    \ == z) return true;\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvyikhz3o.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmpvyikhz3o.__unittest_L32_C1() [0x427a58]\n??:?
    void tmpvyikhz3o.__modtest() [0x427c34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c47]\n??:?
    __libc_start_main [0xe05b8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInside(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltcylty5.d(28): Error: undefined identifier `isInside` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltcylty5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int._toInt(x) == std.int._toInt(y)\
    \ + std.int._toInt(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n   \
    \ assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppgsqqkus.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmppgsqqkus.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmppgsqqkus.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppgsqqkus.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)\
    \ && std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yeiwhnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if ( x == y )\n    {\n\
    \        if ( x == z )\n        {\n            result = true;\n        }\n   \
    \ }\n    else\n    {\n        if ( y == z )\n        {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpygk76ija.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpygk76ija.__unittest_L45_C1() [0x427a60]\n??:?
    void tmpygk76ija.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0x3a94b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y )\n\
    \    {\n        if ( x == z )\n        {\n            result = true;\n       \
    \ }\n    }\n    else\n    {\n        if ( z == x )\n        {\n            result\
    \ = true;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxri40yhn.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpxri40yhn.__unittest_L47_C1() [0x427a60]\n??:?
    void tmpxri40yhn.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0xb5640554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if ( x == y )\n    {\n\
    \        if ( x == z )\n        {\n            result = true;\n        }\n   \
    \ }\n    else\n    {\n        if ( y == z )\n        {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpygk76ija.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpygk76ija.__unittest_L45_C1() [0x427a60]\n??:?
    void tmpygk76ija.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0x3a94b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)\
    \ && std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yeiwhnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54ygxeap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int._tofloat(x) == std.int._tofloat(y)\
    \ && std.int._tofloat(x) == std.int._tofloat(z);\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp81hyhian.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp81hyhian.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp81hyhian.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp81hyhian.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp81hyhian.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y)\n    {\n        if (z == 0)\n    \
    \        return true;\n        else\n            return false;\n    }\n    else\n\
    \    {\n        if (z == 0)\n            return false;\n        else\n       \
    \     return true;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmps2tqq9to.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmps2tqq9to.__unittest_L43_C1() [0x427a96]\n??:?
    void tmps2tqq9to.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c53]\n??:?
    __libc_start_main [0x328a7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = true;\n    \n    if (x == y || x\
    \ == z) {\n        result = true;\n    }\n    \n    else if (y == z) {\n     \
    \   result = true;\n    }\n    \n    else if (z == x) {\n        result = true;\n\
    \    }\n    \n    else {\n        result = false;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuax_dkho.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ecd]\n??:? void tmpuax_dkho.__unittest_L48_C1() [0x427a74]\n??:?
    void tmpuax_dkho.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282a3]\n??:? _d_run_main [0x42820e]\n??:? main [0x427c63]\n??:?
    __libc_start_main [0x50196554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdgyvo7eu.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpdgyvo7eu.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpdgyvo7eu.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpdgyvo7eu.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdgyvo7eu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.typecons.is_integer(x)\
    \ && std.typecons.is_integer(y) && std.typecons.is_integer(z)) {\n        return\
    \ std.math.isclose(x, y, z);\n    }\n    \n    return false;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprwf22tn3.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmprwf22tn3.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmprwf22tn3.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmprwf22tn3.d(29): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmprwf22tn3.d(29): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmprwf22tn3.d(29): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmprwf22tn3.d(31): Error: undefined identifier `is_integer` in
    module `std.typecons`\n/tmp/tmprwf22tn3.d(31): Error: undefined identifier `is_integer`
    in module `std.typecons`\n/tmp/tmprwf22tn3.d(31): Error: undefined identifier
    `is_integer` in module `std.typecons`\n/tmp/tmprwf22tn3.d(32): Error: undefined
    identifier `isclose` in module `std.math`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprwf22tn3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int._toInt(x) == std.int._toInt(y)\
    \ && std.int._toInt(x) == std.int._toInt(z);\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8auuq2dp.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp8auuq2dp.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp8auuq2dp.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp8auuq2dp.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8auuq2dp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfs_th9ug.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpfs_th9ug.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpfs_th9ug.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpfs_th9ug.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpfs_th9ug.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpfs_th9ug.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfs_th9ug.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._abs(x + y + z));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxnnu7kd_.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpxnnu7kd_.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpxnnu7kd_.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpxnnu7kd_.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnnu7kd_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == x + y) && (x == x + z) && (y ==\
    \ y + z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6puryr65.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427edd]\n??:? void tmp6puryr65.__unittest_L30_C1() [0x427a84]\n??:?
    void tmp6puryr65.__modtest() [0x427c60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282b3]\n??:? _d_run_main [0x42821e]\n??:? main [0x427c73]\n??:?
    __libc_start_main [0x33bec554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7blr3an5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z || y == z) return true;\n\
    \    else return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvo_ypur0.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpvo_ypur0.__unittest_L31_C1() [0x427a54]\n??:?
    void tmpvo_ypur0.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0x65153554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z))\n        return result;\n    \n \
    \   if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n       \
    \ return result;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \        return result;\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z))\n        return result;\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && std.math.isinf(z))\n        return result;\n    \n\
    \    if (std.math.isinf(x) && !std.math.isinf(y) && !std.math.isinf(z))\n    \
    \    return result;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n\
    \        return result;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z))\n        return result;\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && !std.math.isinf(z))\n        return result;\n    \n\
    \    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n      \
    \  return result;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && std.math.isinf(z))\n\
    \        return result;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z))\n        return result;\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && !std.math.isinf(z))\n        return result;\n    \n\
    \    if (std.math.isinf(x) && !std.math.isinf(y) && std.math.isinf(z))\n     \
    \   return result;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && !std.math.isinf(z))\n\
    \        return result;\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z))\n        return result;\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && std.math.isinf(z))\n        return result;\n    \n\
    \    if (std.math.isinf(x) && !std.math.isin\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqig904tb.d(81): Error: found `unittest` when expecting `)`\n/tmp/tmpqig904tb.d(96):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqig904tb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsri74qf.d(57): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmpqsri74qf.d(58): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsri74qf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y || x == z || y == z )\n        return\
    \ true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp777h6ed1.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmp777h6ed1.__unittest_L33_C1() [0x427a54]\n??:?
    void tmp777h6ed1.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0xc1c2a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7blr3an5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._int(std.math._abs(x) + std.math._abs(y) + std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_int` in module `std.math`, did you mean function
    `rint`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjajvgvf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54ygxeap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)\
    \ && std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yeiwhnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) && std.math.isInfinite(y)\
    \ && std.math.isInfinite(z) && std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnq4o2nd.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpfnq4o2nd.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpfnq4o2nd.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpfnq4o2nd.d(28): Error: undefined identifier
    `isInt` in module `std.math`\n/tmp/tmpfnq4o2nd.d(28): Error: undefined identifier
    `isInt` in module `std.math`\n/tmp/tmpfnq4o2nd.d(28): Error: undefined identifier
    `isInt` in module `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnq4o2nd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(x+y) || std.math.isInfinite(x+z) || std.math.isInfinite(y+z)\
    \ || std.math.isInfinite(x+y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdl9gnwi.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpkdl9gnwi.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdl9gnwi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y )\n\
    \    {\n        if ( x == z )\n        {\n            result = true;\n       \
    \ }\n        else\n        {\n            result = false;\n        }\n    }\n\
    \    else\n    {\n        result = false;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphkrcev8x.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmphkrcev8x.__unittest_L48_C1() [0x427a60]\n??:?
    void tmphkrcev8x.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0xa7ca3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == x + y) && (x == x + z) && (x ==\
    \ y + z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmk6mrs4g.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427edd]\n??:? void tmpmk6mrs4g.__unittest_L30_C1() [0x427a80]\n??:?
    void tmpmk6mrs4g.__modtest() [0x427c5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282b3]\n??:? _d_run_main [0x42821e]\n??:? main [0x427c6f]\n??:?
    __libc_start_main [0x34ae9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25vvpe6f.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp25vvpe6f.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25vvpe6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7blr3an5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_76mfzpi.d(48): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp_76mfzpi.d(49): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_76mfzpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    \n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(y) && std.math.isnan(x)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(y) && std.math.isinf(z)\
    \ && std.math.isnan(x)) return false;\n    \n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    \n    if (std.math.isnan(x) && std.math.isinf(z)\
    \ && std.math.isnan(y)) return false;\n    \n    if (std.math.isnan(y) && std.math.isinf(z)\
    \ && std.math.isnan(x)) return false;\n    \n    if (std.math.isnan(z) && std.math.isinf(y)\
    \ && std.math.isnan(x)) return false;\n    \n    if (std.math.isnan(z) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(y) && std.math.isnan(x)\
    \ && std.math.isinf(z)) return false;\n    \n    if (std.math.isinf(y) && std.math.isinf(z)\
    \ && std.math.isnan(x)) return false;\n    \n    if (std.math.isinf(z) && std.math.isnan(y)\
    \ && std.math.isnan(x)) return false;\n    \n    if (std.math.isinf(z) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwxoadv8u.d(65): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmpwxoadv8u.d(66): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxoadv8u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppo24p0ne.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma5hj23r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeciyqcx.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeciyqcx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.rem(x,y) == 0.0f) && (std.math.rem(y,z)\
    \ == 0.0f) && (std.math.rem(x,z) == 0.0f));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpxrb11nxx.d(28): Error: undefined identifier `rem` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrb11nxx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) && \n     \
    \       (std.int(y) == std.int(z)) && \n            (std.int(z) == std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(std.int(\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwxhyyzpm.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpwxhyyzpm.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(29):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(29): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected
    following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following
    `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`,
    not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected
    following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following
    `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`,
    not `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpwxhyyzpm.d(30): Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpwxhyyzpm.d(30): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwxhyyzpm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (x == y && x == z) return true;\n\
    \    if (x == y && !std.math.isnan(z)) return true;\n    if (x == z && y == z)\
    \ return true;\n    if (x == z && y == y && z == z) return true;\n    if (x ==\
    \ z && y == y && !std.math.isnan(z)) return true;\n    if (x == z && y == y &&\
    \ !std.math.isnan(y)) return true;\n    if (x == y && y == z && z == z) return\
    \ true;\n    if (x == y && y == z && z == y && z == z) return true;\n    if (x\
    \ == y && y == z && z == y && !std.math.isnan(z)) return true;\n    if (x == y\
    \ && y == z && z == y && !std.math.isnan(y)) return true;\n    if (x == y && y\
    \ == z && z == y \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bnqlmcp.d(53): Error: found `unittest` when expecting `)`\n/tmp/tmp1bnqlmcp.d(68):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bnqlmcp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isinf(x) ||\
    \ std.math.isinf(y) || std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n        return\
    \ false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isnan(z))\n\
    \        return false;\n    \n    if (std.math.isnan(x) && std.math.isinf(y) &&\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isnan(x) &&\
    \ std.math.isnan(y) && std.math.isnan(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isnan(y) && std.math.isnan(z))\n        return\
    \ false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isnan(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && std.math.isnan(y) &&\
    \ std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(x) &&\
    \ std.math.isinf(y) && std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isnan(x) && std.math.isinf(y) && std.math.isinf(z))\n        return\
    \ false;\n    \n    if (std.math.isnan(x) && std.math.isnan(y) && std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isnan(x) && std.math.isnan(y) &&\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isinf(x) &&\
    \ std.math.isnan(y) && std.math.isnan(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && std.math.isnan(z))\n        return\
    \ false;\n    \n    if (std.math.isinf(x) && std.math.isnan(y) && std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) &&\
    \ std.math.isinf(z))\n        return false;\n    \n    if (std.math.isnan(x) &&\
    \ std.math.isinf(y) && std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isnan(x) && std.math.isnan(y\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3t8taed.d(83): Error: found `unittest` when expecting `,`\n/tmp/tmp_3t8taed.d(98):
    Error: found `void` when expecting `,`\n/tmp/tmp_3t8taed.d(98): Error: found `{`
    when expecting `,`\n/tmp/tmp_3t8taed.d(98): Error: expression expected, not `}`\n/tmp/tmp_3t8taed.d(98):
    Error: found `End of File` when expecting `,`\n/tmp/tmp_3t8taed.d(98): Error:
    found `End of File` when expecting `)`\n/tmp/tmp_3t8taed.d(98): Error: found `End
    of File` when expecting `)`\n/tmp/tmp_3t8taed.d(98): Error: found `End of File`
    instead of statement\n/tmp/tmp_3t8taed.d(98): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_3t8taed.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && st\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpidc4m82r.d(49): Error: found `unittest` when expecting `)`\n/tmp/tmpidc4m82r.d(64):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidc4m82r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y || x == z || y == z )\n        return\
    \ true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp777h6ed1.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmp777h6ed1.__unittest_L33_C1() [0x427a54]\n??:?
    void tmp777h6ed1.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0xc1c2a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(z, std.math.add(x, y), rel_tol=1e-9);\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk170roaa.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmpk170roaa.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk170roaa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeciyqcx.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeciyqcx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (std.math.isInt(x)\
    \ && std.math.isInt(y) && std.math.isInt(z)) {\n        result = std.math.isEqual(std.math.add(x,y),\
    \ z);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl92qmemw.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpl92qmemw.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpl92qmemw.d(30): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpl92qmemw.d(31): Error: undefined identifier `isEqual` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl92qmemw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(x + y)) || (std.int(y)\
    \ == std.int(x + z)) || (std.int(z) == std.int(x + y)));\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6wks_02g.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp6wks_02g.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp6wks_02g.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp6wks_02g.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmp6wks_02g.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmp6wks_02g.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wks_02g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpok4xl_f1.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpok4xl_f1.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpok4xl_f1.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpok4xl_f1.d(30): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok4xl_f1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._int(std.math._abs(x) + std.math._abs(y) + std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_int` in module `std.math`, did you mean function
    `rint`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjajvgvf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeciyqcx.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeciyqcx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_hgg9tg.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg_hgg9tg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeaja3awc.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpeaja3awc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) >= std.math._abs(x + y + z));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla5ojyix.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z) || std.math.isInfinite(x+y+z);\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuxhutv9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && !std.math.isInt(z))\
    \ || (!std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8vsfnnss.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vsfnnss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if ( x == y || x ==\
    \ z || y == z )\n    {\n        result = true;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptn103xf_.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmptn103xf_.__unittest_L35_C1() [0x427a5c]\n??:?
    void tmptn103xf_.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c4b]\n??:?
    __libc_start_main [0xdf38a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == x + y) && (x == x + z) && (x ==\
    \ y + z));\n}\n</code>\n<|/ a tags=c++,math,algorithm |>\n<| c |>\nThis doesn't\
    \ work if all three numbers are negative.\n<|/ c |>\n<| c |>\n: It does work if\
    \ all three numbers are negative.\n<|/ c |>\n<| c |>\n: It does work if all three\
    \ numbers are negative.\n<|/ c |>\n<| c |>\n: It does work if all three numbers\
    \ are negative.\n<|/ c |>\n<| c |>\n: It does work if all three numbers are negative.\n\
    <|/ c |>\n<| a tags=c++,math,algorithm |>\n<code>\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr921zu70.d(30): Error: declaration expected, not `<`\n/tmp/tmpr921zu70.d(33):
    Error: unterminated character constant\n/tmp/tmpr921zu70.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmpr921zu70.d(54): Error: declaration expected, not
    `assert`\n/tmp/tmpr921zu70.d(55): Error: declaration expected, not `assert`\n/tmp/tmpr921zu70.d(56):
    Error: declaration expected, not `assert`\n/tmp/tmpr921zu70.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpr921zu70.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpr921zu70.d(59): Error: declaration expected, not `assert`\n/tmp/tmpr921zu70.d(60):
    Error: declaration expected, not `assert`\n/tmp/tmpr921zu70.d(61): Error: declaration
    expected, not `assert`\n/tmp/tmpr921zu70.d(62): Error: declaration expected, not
    `assert`\n/tmp/tmpr921zu70.d(63): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr921zu70.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7blr3an5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if (std.int(x) == std.int(y)\
    \ + std.int(z) && std.int(y) == std.int(z) && std.int(z) == std.int(x)) {\n  \
    \      result = true;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo3ernwwi.d(29): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpo3ernwwi.d(29): Error: identifier expected following `.`, not `int`\n/tmp/tmpo3ernwwi.d(29):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpo3ernwwi.d(29): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpo3ernwwi.d(29): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpo3ernwwi.d(29): Error: identifier expected
    following `.`, not `int`\n/tmp/tmpo3ernwwi.d(29): Error: identifier expected following
    `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3ernwwi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_76mfzpi.d(48): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp_76mfzpi.d(49): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_76mfzpi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma5hj23r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)\
    \ && std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yeiwhnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z) return true;\n    else return\
    \ false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpboj0j2nn.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ea5]\n??:? void tmpboj0j2nn.__unittest_L31_C1() [0x427a4c]\n??:?
    void tmpboj0j2nn.__modtest() [0x427c28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa35]\n??:? runModuleUnitTests [0x42b9a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42827b]\n??:? _d_run_main [0x4281e6]\n??:? main [0x427c3b]\n??:?
    __libc_start_main [0x87b37554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isnan(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isnan(y) && std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isnan(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isnan(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isnan(y) && std.math.isnan(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) && std.math.isnan(y) && std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphafasb7w.d(105): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmphafasb7w.d(106): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphafasb7w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeciyqcx.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeciyqcx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma5hj23r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z) || std.math.isInfinite(x+y+z);\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuxhutv9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y || x == z )\n        return true;\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5mipz282.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ea5]\n??:? void tmp5mipz282.__unittest_L33_C1() [0x427a4c]\n??:?
    void tmp5mipz282.__modtest() [0x427c28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa35]\n??:? runModuleUnitTests [0x42b9a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42827b]\n??:? _d_run_main [0x4281e6]\n??:? main [0x427c3b]\n??:?
    __libc_start_main [0x30f5c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) >= std.math._abs(x + y + z));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpla5ojyix.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla5ojyix.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if (std.math.isInt(x)\
    \ && std.math.isInt(y) && std.math.isInt(z)) {\n        result = std.math.isEqual(x,\
    \ y, z);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiwjf6pyb.d(29): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpiwjf6pyb.d(29): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpiwjf6pyb.d(29): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpiwjf6pyb.d(30): Error: undefined identifier `isEqual` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwjf6pyb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsri74qf.d(57): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmpqsri74qf.d(58): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsri74qf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInside(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltcylty5.d(28): Error: undefined identifier `isInside` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltcylty5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y || x == z || y == z ) return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa3_7udvx.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpa3_7udvx.__unittest_L31_C1() [0x427a54]\n??:?
    void tmpa3_7udvx.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0xf5e0c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbye4zrai.d(29): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmpbye4zrai.d(28): Error: found `{` when expecting `)`\n/tmp/tmpbye4zrai.d(28):
    Error: found `alias` when expecting `)`\n/tmp/tmpbye4zrai.d(31): Error: found
    `candidate` when expecting `;` following `return` statement\n/tmp/tmpbye4zrai.d(31):
    Error: found `=` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbye4zrai.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxseo4_iu.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxseo4_iu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnhev98ex.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnhev98ex.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n    {\n        return false;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return false;\n \
    \   }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z))\n    {\n        return true;\n    }\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && std.math.isinf(z))\n    {\n        return true;\n \
    \   }\n    \n    if (std.math.isinf(y) && std.math.isinf(z) && !std.math.isinf(x))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isinf(y) && std.math.isinf(z)\
    \ && std.math.isinf(x))\n    {\n        return true;\n    }\n    \n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z))\n    {\n        return true;\n  \
    \  }\n    \n    if (std.math.isnan(x) && std.math.isnan(y) && !std.math.isnan(z))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return true;\n    }\n    \n    if (std.math.isnan(y)\
    \ && std.math.isnan(z) && !std.math.isnan(x))\n    {\n        return true;\n \
    \   }\n    \n    if (std.math.isnan(y) && std.math.isnan(z) && std.math.isnan(x))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return true;\n    }\n    \n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpguk7e039.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpguk7e039.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpguk7e039.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpguk7e039.d(33): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(33): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(33): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(38): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(38): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(38): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(48): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(48): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(48): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(53): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(53): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(53): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(58): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpguk7e039.d(58): Error: undefined identifier `isinf` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguk7e039.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.remainder(x, z) == std.math.remainder(y,\
    \ z)) && (std.math.remainder(x, z) == std.math.remainder(y, z)));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6si_s_pd.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ff5]\n??:? void tmp6si_s_pd.__unittest_L30_C1() [0x427bfc]\n??:?
    void tmp6si_s_pd.__modtest() [0x427d74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd61]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430210]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fced]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aba5]\n??:? runModuleUnitTests [0x42bb11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428444]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4283cb]\n??:? _d_run_main [0x428336]\n??:? main [0x427d87]\n??:?
    __libc_start_main [0x98be7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y ||\
    \ x == z )\n        result = true;\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqlz_myea.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpqlz_myea.__unittest_L35_C1() [0x427a54]\n??:?
    void tmpqlz_myea.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0x55519554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    \n    float xx = std.math.abs(x);\n\
    \    float yy = std.math.abs(y);\n    float zz = std.math.abs(z);\n    \n    if\
    \ (std.math.isnan(xx) || std.math.isnan(yy) || std.math.isnan(zz)) return false;\n\
    \    if (std.math.isinf(xx) || std.math.isinf(yy) || std.math.isinf(zz)) return\
    \ false;\n    \n    float xy = std.math.abs(x*y);\n    float yz = std.math.abs(y*z);\n\
    \    float zx = std.math.abs(z*x);\n    \n    if (std.math.isnan(xy) || std.math.isnan(yz)\
    \ || std.math.isnan(zx)) return false;\n    if (std.math.isinf(xy) || std.math.isinf(yz)\
    \ || std.math.isinf(zx)) return false;\n    \n    float xz = std.math.abs(x*z);\n\
    \    float yx = std.math.abs(y*x);\n    float zy = std.math.abs(z*y);\n    \n\
    \    if (std.math.isnan(xz) || std.math.isnan(yx) || std.math.isnan(zy)) return\
    \ false;\n    if (std.math.isinf(xz) || std.math.isinf(yx) || std.math.isinf(zy))\
    \ return false;\n    \n    float xx = std.math.abs(x*x);\n    float yy = std.math.abs(y*y);\n\
    \    float zz = std.math.abs(z*z);\n    \n    if (std.math.isnan(xx) || std.math.isnan(yy)\
    \ || std.math.isnan(zz)) return false;\n    if (std.math.isinf(xx) || std.math.isinf(yy)\
    \ || std.math.isinf(zz)) return false;\n    \n    float xy = std.math.abs(x*y);\n\
    \    float yz = std.math.abs(y*z);\n    float zx = std.math.abs(z*x);\n    \n\
    \    if (std.math.isnan(xy) || std.math.isnan(yz) || std.math.isnan(zx)) return\
    \ false;\n    if (std.math.isinf(xy) || std.math.isinf(yz) || std.math.isin\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkuwy5h19.d(65): Error: found `unittest` when expecting `)`\n/tmp/tmpkuwy5h19.d(80):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuwy5h19.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y )\n    {\n        if ( x == z )\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n    {\n        if ( x == z )\n            return false;\n        else\n\
    \            return true;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6_b7i8hk.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eb5]\n??:? void tmp6_b7i8hk.__unittest_L43_C1() [0x427a8e]\n??:?
    void tmp6_b7i8hk.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42828b]\n??:? _d_run_main [0x4281f6]\n??:? main [0x427c4b]\n??:?
    __libc_start_main [0x3580e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25vvpe6f.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp25vvpe6f.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25vvpe6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    float sum = (x\
    \ + y + z);\n    \n    if (sum == x)\n    {\n        result = true;\n    }\n \
    \   else if (sum == y)\n    {\n        result = true;\n    }\n    else if (sum\
    \ == z)\n    {\n        result = true;\n    }\n    else\n    {\n        result\
    \ = false;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0yxho6kt.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eed]\n??:? void tmp0yxho6kt.__unittest_L51_C1() [0x427a94]\n??:?
    void tmp0yxho6kt.__modtest() [0x427c70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa7d]\n??:? runModuleUnitTests [0x42b9e9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282c3]\n??:? _d_run_main [0x42822e]\n??:? main [0x427c83]\n??:?
    __libc_start_main [0x2a6c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = true;\n    if (x < y && x < z) \n\
    \    {\n        result = true;\n    }\n    else if (y < x && y < z) \n    {\n\
    \        result = true;\n    }\n    else if (z < x && z < y) \n    {\n       \
    \ result = true;\n    }\n    else \n    {\n        result = false;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwlfg_f8u.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ed5]\n??:? void tmpwlfg_f8u.__unittest_L47_C1() [0x427aaa]\n??:?
    void tmpwlfg_f8u.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282ab]\n??:? _d_run_main [0x428216]\n??:? main [0x427c67]\n??:?
    __libc_start_main [0x8a4ad554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x + y + z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj977bue2.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpj977bue2.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj977bue2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(x, y, z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeciyqcx.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeciyqcx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    float xx = x;\n\
    \    float yy = y;\n    float zz = z;\n    \n    if (xx < yy && xx < zz)\n   \
    \ {\n        result = true;\n    }\n    else if (yy < zz)\n    {\n        result\
    \ = true;\n    }\n    else if (zz < xx)\n    {\n        result = true;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5cotjyg3.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ef5]\n??:? void tmp5cotjyg3.__unittest_L49_C1() [0x427ace]\n??:?
    void tmp5cotjyg3.__modtest() [0x427c78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa85]\n??:? runModuleUnitTests [0x42b9f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428344]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282cb]\n??:? _d_run_main [0x428236]\n??:? main [0x427c8b]\n??:?
    __libc_start_main [0xf24df554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n    {\n        return false;\n    }\n    \n    float xx\
    \ = std.math.reciprocal(x);\n    float yy = std.math.reciprocal(y);\n    float\
    \ zz = std.math.reciprocal(z);\n    \n    float xy = x * y;\n    float xz = x\
    \ * z;\n    float yz = y * z;\n    \n    float xx = std.math.reciprocal(xx);\n\
    \    float yy = std.math.reciprocal(yy);\n    float zz = std.math.reciprocal(zz);\n\
    \    \n    float xy = std.math.reciprocal(xy);\n    float xz = std.math.reciprocal(xz);\n\
    \    float yz = std.math.reciprocal(yz);\n    \n    float xx = std.math.reciprocal(xx);\n\
    \    float yy = std.math.reciprocal(yy);\n    float zz = std.math.reciprocal(zz);\n\
    \    \n    float xy = std.math.reciprocal(xy);\n    float xz = std.math.reciprocal(xz);\n\
    \    float yz = std.math.reciprocal(yz);\n    \n    float xx = std.math.reciprocal(xx);\n\
    \    float yy = std.math.reciprocal(yy);\n    float zz = std.math.reciprocal(zz);\n\
    \    \n    float xy = std.math.reciprocal(xy);\n    float xz = std.math.reciprocal(xz);\n\
    \    float yz = std.math.reciprocal(yz);\n    \n    float xx = std.math.reciprocal(xx);\n\
    \    float yy = std.math.reciprocal(yy);\n    float zz = std.math.reciprocal(zz);\n\
    \    \n    float xy = std.math.reciprocal(xy);\n    float xz = std.math.reciprocal(xz);\n\
    \    float yz = std.math.reciprocal(yz);\n    \n    float xx = std.math.reciprocal(xx);\n\
    \    float yy = std.math.reciprocal(yy);\n    float zz = std.math.reciprocal(zz);\n\
    \    \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp1jrkno8.d(77): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1jrkno8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y )\n\
    \    {\n        if ( x == z )\n        {\n            result = true;\n       \
    \ }\n        else\n        {\n            result = false;\n        }\n    }\n\
    \    else\n    {\n        result = true;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp94qvze3c.d(53): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmp94qvze3c.__unittest_L48_C1() [0x427a92]\n??:?
    void tmp94qvze3c.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0x3273e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp7blr3an5.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7blr3an5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(z) && std.math.isInt(y))\
    \ || (std.math.isInt(y) && std.math.isInt(x) && std.math.isInt(z)) || (std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmplciv93wf.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplciv93wf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(z, x + y, rel_tol=1e-9);\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmponiph4be.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmponiph4be.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponiph4be.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z) || std.math.isInfinite(x+y+z);\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmptuxhutv9.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuxhutv9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (x == y && x == z) return true;\n \
    \   if (x == y || x == z) return false;\n    if (y == z) return true;\n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z)) return true;\n\
    \    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z)) return false;\n\
    \    \n    float xi = std.math.trunc(x);\n    float yi = std.math.trunc(y);\n\
    \    float zi = std.math.trunc(z);\n    \n    if (xi == yi && xi == zi) return\
    \ true;\n    if (xi == yi || xi == zi) return false;\n    if (yi == zi && yi ==\
    \ xi) return true;\n    if (yi == zi || yi == xi) return false;\n    if (zi ==\
    \ xi) return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8oatucdc.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmp8oatucdc.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmp8oatucdc.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmp8oatucdc.d(32): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmp8oatucdc.d(32): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmp8oatucdc.d(32): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmp8oatucdc.d(33): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmp8oatucdc.d(33): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmp8oatucdc.d(33): Error: undefined identifier `isinf` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oatucdc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)) || (std.int(z) == std.int(x)));\n}\n/*\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2h_pf6q6.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp2h_pf6q6.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp2h_pf6q6.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp2h_pf6q6.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmp2h_pf6q6.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmp2h_pf6q6.d(28): Error: identifier expected
    following `.`, not `int`\n/tmp/tmp2h_pf6q6.d(30): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2h_pf6q6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    if (std.math.isIntegral(x)\
    \ && std.math.isIntegral(y) && std.math.isIntegral(z))\n    {\n        result\
    \ = std.math.isEqual(x, y, z);\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfzoftvq4.d(29): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpfzoftvq4.d(29):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpfzoftvq4.d(29): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpfzoftvq4.d(31):
    Error: undefined identifier `isEqual` in module `std.math`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfzoftvq4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isinf(x) ||\
    \ std.math.isinf(y) || std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n        return\
    \ true;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n\
    \        return true;\n    \n    if (std.math.isinf(y) && std.math.isinf(z) &&\
    \ !std.math.isinf(x))\n        return true;\n    \n    if (std.math.isinf(y) &&\
    \ !std.math.isinf(z) && std.math.isinf(x))\n        return true;\n    \n    if\
    \ (std.math.isinf(y) && !std.math.isinf(z) && !std.math.isinf(x))\n        return\
    \ false;\n    \n    if (std.math.isnan(x) && !std.math.isnan(y) && !std.math.isnan(z))\n\
    \        return false;\n    \n    if (std.math.isnan(x) && std.math.isnan(y) &&\
    \ !std.math.isnan(z))\n        return false;\n    \n    if (std.math.isnan(x)\
    \ && !std.math.isnan(y) && std.math.isnan(z))\n        return false;\n    \n \
    \   if (std.math.isnan(x) && std.math.isnan(y) && std.math.isnan(z))\n       \
    \ return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) &&\
    \ !std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(y)\
    \ && std.math.isinf(z) && !std.math.isinf(x))\n        return false;\n    \n \
    \   if (std.math.isinf(y) && !std.math.isinf(z) && std.math.isinf(x))\n      \
    \  return false;\n    \n    if (std.math.isinf(y) && !std.math.isinf(z) && !std.math.isinf(x))\n\
    \        return false;\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpul8q46k_.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpul8q46k_.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpul8q46k_.d(28): Error: undefined identifier `isnan` in module
    `std.math`\n/tmp/tmpul8q46k_.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(31): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(34): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(34): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(34): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(37): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(37): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(37): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(40): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(40): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(40): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(43): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(46): Error: undefined identifier `isinf` in module
    `std.math`\n/tmp/tmpul8q46k_.d(46): Error: undefined identifier `isinf` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpul8q46k_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpmkxzitje.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpmkxzitje.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmkxzitje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    float xx = x;\n\
    \    float yy = y;\n    float zz = z;\n    \n    if (xx < yy && xx < zz)\n   \
    \ {\n        result = true;\n    }\n    else if (yy < zz)\n    {\n        result\
    \ = true;\n    }\n    else\n    {\n        result = false;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9ab4stb9.d(53): unittest failure\n----------------\n??:?
    _d_unittestp [0x427eed]\n??:? void tmp9ab4stb9.__unittest_L49_C1() [0x427a90]\n??:?
    void tmp9ab4stb9.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbc5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa7d]\n??:? runModuleUnitTests [0x42b9e9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282c3]\n??:? _d_run_main [0x42822e]\n??:? main [0x427c7f]\n??:?
    __libc_start_main [0x123ca554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z) && std.math.isInt(x + y) && std.math.isInt(x + z) && std.math.isInt(y\
    \ + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmpma5hj23r.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma5hj23r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n    {\n        return false;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return false;\n \
    \   }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z))\n    {\n        return true;\n    }\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && std.math.isinf(z))\n    {\n        return true;\n \
    \   }\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && !std.math.isinf(z))\n\
    \    {\n        return false;\n    }\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z))\n    {\n        return false;\n    }\n    \n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z))\n    {\n        return true;\n  \
    \  }\n    \n    if (std.math.isnan(x) && std.math.isnan(y) && !std.math.isnan(z))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return true;\n    }\n    \n    if (std.math.isnan(x)\
    \ && !std.math.isnan(y) && !std.math.isnan(z))\n    {\n        return false;\n\
    \    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n\
    \    {\n        return true;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z))\n    {\n        return true;\n    }\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && std.math.isinf(z))\n    {\n        return true;\n \
    \   }\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && !std.math.isinf(z))\n\
    \    {\n        return false;\n    }\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z))\n    {\n        return true;\n    }\n    \n    if (std.math.is\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20qbnnl6.d(108): Error: identifier expected following `.`, not
    `is`\n/tmp/tmp20qbnnl6.d(109): Error: found `unittest` when expecting `)`\n/tmp/tmp20qbnnl6.d(124):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20qbnnl6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25vvpe6f.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp25vvpe6f.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25vvpe6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = true;\n    \n    if (x < y && x\
    \ < z) \n    {\n        result = true;\n    }\n    else if (y < x && y < z) \n\
    \    {\n        result = true;\n    }\n    else if (z < x && z < y) \n    {\n\
    \        result = true;\n    }\n    else \n    {\n        result = false;\n  \
    \  }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf2di5kme.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ed5]\n??:? void tmpf2di5kme.__unittest_L49_C1() [0x427aaa]\n??:?
    void tmpf2di5kme.__modtest() [0x427c54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa65]\n??:? runModuleUnitTests [0x42b9d1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282ab]\n??:? _d_run_main [0x428216]\n??:? main [0x427c67]\n??:?
    __libc_start_main [0xc41f0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmppo24p0ne.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppo24p0ne.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(x + y)) || (std.int(y)\
    \ == std.int(x + y)) || (std.int(z) == std.int(x + y)));\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvhd6vdpc.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpvhd6vdpc.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpvhd6vdpc.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpvhd6vdpc.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpvhd6vdpc.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpvhd6vdpc.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhd6vdpc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa7o6er4y.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmpa7o6er4y.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7o6er4y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._int(std.math._abs(x) + std.math._abs(y) + std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpjajvgvf_.d(28):
    Error: undefined identifier `_int` in module `std.math`, did you mean function
    `rint`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjajvgvf_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)) || (std.int(z) == std.int(x)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmpq0jtixqp.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0jtixqp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpjqfnxpmd.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqfnxpmd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpnss7h_63.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnss7h_63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp54ygxeap.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54ygxeap.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmp3fwgxf2n.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3fwgxf2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y ||\
    \ x == z )\n        result = true;\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqlz_myea.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ead]\n??:? void tmpqlz_myea.__unittest_L35_C1() [0x427a54]\n??:?
    void tmpqlz_myea.__modtest() [0x427c30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428283]\n??:? _d_run_main [0x4281ee]\n??:? main [0x427c43]\n??:?
    __libc_start_main [0x55519554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdgyvo7eu.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpdgyvo7eu.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpdgyvo7eu.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpdgyvo7eu.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdgyvo7eu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.rem(x, y) == 0.0) && (std.math.rem(y,\
    \ z) == 0.0) && (std.math.rem(z, x) == 0.0));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe7kodlye.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpe7kodlye.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpe7kodlye.d(28): Error: undefined identifier `rem` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7kodlye.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( x == y )\n\
    \    {\n        if ( x == z )\n        {\n            result = true;\n       \
    \ }\n    }\n    else\n    {\n        if ( x == z )\n        {\n            result\
    \ = true;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqrgt3iza.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpqrgt3iza.__unittest_L47_C1() [0x427a60]\n??:?
    void tmpqrgt3iza.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0x4efd8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isInt(x) && std.math.isInt(y)\
    \ && std.math.isInt(z)) || (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)\
    \ && std.math.isInt(z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\n/tmp/tmp8yeiwhnj.d(28): Error: undefined identifier `isInt` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yeiwhnj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._max(std.math._abs(x), std.math._abs(y), std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm9twlu0r.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmpm9twlu0r.d(28):
    Error: undefined identifier `_max` in module `std.math`, did you mean function
    `fmax`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9twlu0r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpl2phyafm.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl2phyafm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp25vvpe6f.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp25vvpe6f.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25vvpe6f.d", "-I/tmp"]\n'''
  stdout: b''
