language: d
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += (long)tolower(c)\
    \ - (long)tolower(toupper(c));\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmy3t5t8y.d(14): Error: found `in` when expecting `;`\n/tmp/tmpmy3t5t8y.d(16):
    Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpmy3t5t8y.d(16):
    Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\n/tmp/tmpmy3t5t8y.d(20):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmy3t5t8y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    \n    foreach(char c in string)\n    {\n        result\
    \ += tolower(c) - 'a';\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsz9z7rs.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsz9z7rs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n\
    \        \n        distinct += 1;\n    }\n    return distinct;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3jlxxgn.d(14): Error: no property `length` for type `string`\n/tmp/tmpy3jlxxgn.d(17):
    Error: undefined identifier `isAlpha` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpy3jlxxgn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong result = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t\
    {\n\t\t\tresult += 1;\n\t\t}\n\t\telse if (islower(c)) \n\t\t{\n\t\t\tresult +=\
    \ 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult += 2;\n\t\t}\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ttl7dle.d(14): Error: no identifier for declarator `c`\n/tmp/tmp5ttl7dle.d(14):
    Error: expression expected, not `:`\n/tmp/tmp5ttl7dle.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5ttl7dle.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        if(lower != upper)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpavnck8hc.d(14): Error: no identifier for declarator `c`\n/tmp/tmpavnck8hc.d(14):
    Error: expression expected, not `:`\n/tmp/tmpavnck8hc.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpavnck8hc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla6fcyyx.d(15): Error: no identifier for declarator `char`\n/tmp/tmpla6fcyyx.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpla6fcyyx.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpla6fcyyx.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla6fcyyx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        if(!c.isUpper()\
    \ && !c.isLower() && !c.isDigit())\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb172fh_9.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb172fh_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        if(!std.ctype.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44_1h883.d(14): Error: no property `length` for type `string`\n/tmp/tmp44_1h883.d(16):
    Error: no property `at` for type `string`\n/tmp/tmp44_1h883.d(17): Error: undefined
    identifier `ctype` in package `std`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp44_1h883.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += (c >= 'A' && c\
    \ <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzk8w7nq.d(14): Error: no identifier for declarator `c`\n/tmp/tmprzk8w7nq.d(14):
    Error: expression expected, not `:`\n/tmp/tmprzk8w7nq.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprzk8w7nq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            char c = temp[j];\n            if(c == ' ')\n        \
    \    {\n                count++;\n            }\n            else\n          \
    \  {\n                count = 0;\n                break;\n            }\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjo9pumod.d(14): Error: no property `length` for type `string`\n/tmp/tmpjo9pumod.d(16):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo9pumod.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string){\n        if(!isalpha(string[i]))\
    \ count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7m2cssi1.d(14): Error: no identifier for declarator `char`\n/tmp/tmp7m2cssi1.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp7m2cssi1.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp7m2cssi1.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m2cssi1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tforeach(char c in string)\n\t{\n\t\tif(c == c.toLower())\n\
    \t\t\tcount++;\n\t\telse if(c == c.toUpper())\n\t\t\tcount++;\n\t\telse\n\t\t\t\
    count += 2;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxsks6njo.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsks6njo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <=\
    \ '9') ? 10 : 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcssbnhu_.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcssbnhu_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3md6ww3e.d(14): Error: found `in` when expecting `;`\n/tmp/tmp3md6ww3e.d(20):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3md6ww3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char c in string)\n    {\n        foreach(char\
    \ c2 in string)\n        {\n            if(c == c2)\n            {\n         \
    \       count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b3wln63.d(15): Error: found `in` when expecting `;`\n/tmp/tmp9b3wln63.d(17):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9b3wln63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n        {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uw5aym9.d(14): Error: no property `length` for type `string`\n/tmp/tmp8uw5aym9.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8uw5aym9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        char c = char;\n\
    \        \n        if (c >= 'A' && c <= 'Z') {\n            count += 1;\n    \
    \    }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1b7m7n6b.d(15): Error: no identifier for declarator `char`\n/tmp/tmp1b7m7n6b.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp1b7m7n6b.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp1b7m7n6b.d(16): Error: found `;` when expecting
    `.` following char\n/tmp/tmp1b7m7n6b.d(18): Error: found `if` when expecting identifier
    following `char`.\n/tmp/tmp1b7m7n6b.d(18): Error: semicolon expected, not `{`\n/tmp/tmp1b7m7n6b.d(23):
    Error: found `return` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1b7m7n6b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string)\n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw57w0bhz.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw57w0bhz.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpw57w0bhz.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpw57w0bhz.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw57w0bhz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar\
    \ c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\t\
    if (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\
    \t\t\t\tbreak;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmcjglc15.d(14): Error: no property `length` for type `string`\n/tmp/tmpmcjglc15.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmcjglc15.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int\
    \ j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\tcontinue;\n\
    \t\t\tif (string[i] == string[j])\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphgebjz3q.d(14): Error: no property `length` for type `string`\n/tmp/tmphgebjz3q.d(16):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphgebjz3q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla6fcyyx.d(15): Error: no identifier for declarator `char`\n/tmp/tmpla6fcyyx.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpla6fcyyx.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpla6fcyyx.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla6fcyyx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n        {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uw5aym9.d(14): Error: no property `length` for type `string`\n/tmp/tmp8uw5aym9.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8uw5aym9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8m4ak8k_.d(14): Error: no property `length` for type `string`\n/tmp/tmp8m4ak8k_.d(16):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8m4ak8k_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmxqfrv16.d(14): Error: no identifier for declarator `c`\n/tmp/tmpmxqfrv16.d(14):
    Error: expression expected, not `:`\n/tmp/tmpmxqfrv16.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmxqfrv16.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n\
    \        \n        for(int j = i+1; j < string.length(); j++)\n        {\n   \
    \         char d = string[j];\n            if(std.isAlpha(d))\n            {\n\
    \                if(std.isUpper(c))\n                    count += std.toUpper(d)\
    \ - std.toUpper(c);\n                else\n                    count += std.toLower(d)\
    \ - std.toLower(c);\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe question was about a general solution, not just\
    \ for ASCII.\n<|/ c |>\n<| c |>\nYes, I know. My solution was just an example\
    \ to show how it could be done with std.algorithm.\n<|/ c |>\n<| a |>\n<code>\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.stdio;\n\
    import std.string;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tmne2_2.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tmne2_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tforeach(char, string)\n\t{\n\t\tif(!std.isAlpha(char))\n\t\
    \t\tcontinue;\n\t\tcount += 1;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppk_lrr55.d(14): Error: no identifier for declarator `char`\n/tmp/tmppk_lrr55.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmppk_lrr55.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmppk_lrr55.d(16): Error: found `)` when expecting
    `.` following char\n/tmp/tmppk_lrr55.d(16): Error: found `)` when expecting identifier
    following `char`.\n/tmp/tmppk_lrr55.d(17): Error: found `continue` when expecting
    `,`\n/tmp/tmppk_lrr55.d(17): Error: expression expected, not `;`\n/tmp/tmppk_lrr55.d(18):
    Error: found `count` when expecting `,`\n/tmp/tmppk_lrr55.d(18): Error: expression
    expected, not `+=`\n/tmp/tmppk_lrr55.d(18): Error: found `1` when expecting `,`\n/tmp/tmppk_lrr55.d(18):
    Error: expression expected, not `;`\n/tmp/tmppk_lrr55.d(19): Error: found `}`
    when expecting `,`\n/tmp/tmppk_lrr55.d(20): Error: expression expected, not `return`\n/tmp/tmppk_lrr55.d(20):
    Error: found `count` when expecting `,`\n/tmp/tmppk_lrr55.d(20): Error: expression
    expected, not `;`\n/tmp/tmppk_lrr55.d(21): Error: found `}` when expecting `,`\n/tmp/tmppk_lrr55.d(22):
    Error: expression expected, not `unittest`\n/tmp/tmppk_lrr55.d(23): Error: found
    `{` when expecting `,`\n/tmp/tmppk_lrr55.d(24): Error: expression expected, not
    `alias`\n/tmp/tmppk_lrr55.d(24): Error: found `candidate` when expecting `,`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppk_lrr55.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string) {\n        count += 1;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4m6hs00r.d(14): Error: no identifier for declarator `char`\n/tmp/tmp4m6hs00r.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp4m6hs00r.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp4m6hs00r.d(17): Error: found `return` when expecting
    `)`\n/tmp/tmp4m6hs00r.d(19): Error: declaration expected, not `<`\n/tmp/tmp4m6hs00r.d(30):
    Error: declaration expected, not `assert`\n/tmp/tmp4m6hs00r.d(31): Error: declaration
    expected, not `assert`\n/tmp/tmp4m6hs00r.d(32): Error: declaration expected, not
    `assert`\n/tmp/tmp4m6hs00r.d(33): Error: declaration expected, not `assert`\n/tmp/tmp4m6hs00r.d(34):
    Error: declaration expected, not `assert`\n/tmp/tmp4m6hs00r.d(35): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m6hs00r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    \n    foreach(char, string) {\n        result += char.casefold().length;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl9ecvz0g.d(15): Error: no identifier for declarator `char`\n/tmp/tmpl9ecvz0g.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpl9ecvz0g.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpl9ecvz0g.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ecvz0g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(auto c : string) \n    {\n        distinct +=\
    \ std.algorithm.distinct(c); \n    }\n    return distinct;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn4bto3sc.d(14): Error: no identifier for declarator `c`\n/tmp/tmpn4bto3sc.d(14):
    Error: expression expected, not `:`\n/tmp/tmpn4bto3sc.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpn4bto3sc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ (char)tolower(char);\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5tsxmun2.d(15): Error: no identifier for declarator `char`\n/tmp/tmp5tsxmun2.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp5tsxmun2.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp5tsxmun2.d(17): Error: found `)` when expecting
    `.` following char\n/tmp/tmp5tsxmun2.d(17): Error: found `;` when expecting identifier
    following `char`.\n/tmp/tmp5tsxmun2.d(18): Error: found `}` when expecting `,`\n/tmp/tmp5tsxmun2.d(20):
    Error: expression expected, not `return`\n/tmp/tmp5tsxmun2.d(20): Error: found
    `count` when expecting `,`\n/tmp/tmp5tsxmun2.d(20): Error: expression expected,
    not `;`\n/tmp/tmp5tsxmun2.d(21): Error: found `}` when expecting `,`\n/tmp/tmp5tsxmun2.d(22):
    Error: expression expected, not `unittest`\n/tmp/tmp5tsxmun2.d(23): Error: found
    `{` when expecting `,`\n/tmp/tmp5tsxmun2.d(24): Error: expression expected, not
    `alias`\n/tmp/tmp5tsxmun2.d(24): Error: found `candidate` when expecting `,`\n/tmp/tmp5tsxmun2.d(24):
    Error: expression expected, not `=`\n/tmp/tmp5tsxmun2.d(24): Error: found `count_distinct_characters`
    when expecting `,`\n/tmp/tmp5tsxmun2.d(24): Error: expression expected, not `;`\n/tmp/tmp5tsxmun2.d(26):
    Error: found `assert` when expecting `,`\n/tmp/tmp5tsxmun2.d(26): Error: found
    `;` when expecting `,`\n/tmp/tmp5tsxmun2.d(27): Error: found `;` when expecting
    `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5tsxmun2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla6fcyyx.d(15): Error: no identifier for declarator `char`\n/tmp/tmpla6fcyyx.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpla6fcyyx.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpla6fcyyx.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla6fcyyx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            result += 1;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy3s39py9.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3s39py9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'a' &&\
    \ c <= 'z') || (c >= 'A' && c <= 'Z'));\n    }\n    return distinct;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd2j819c_.d(21): Error: declaration expected, not `<`\n/tmp/tmpd2j819c_.d(26):
    Error: identifier expected following `package`\n/tmp/tmpd2j819c_.d(26): Error:
    `;` expected\n/tmp/tmpd2j819c_.d(27): Error: identifier expected following `package`\n/tmp/tmpd2j819c_.d(27):
    Error: `;` expected\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2j819c_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct += std.algorithm.distinct(c); \n\
    \    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13pxp1fj.d(14): Error: no property `length` for type `string`\n/tmp/tmp13pxp1fj.d(17):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp13pxp1fj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctCharacters = 0;\n    \n    foreach(char,string){\n        distinctCharacters++;\n\
    \    }\n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2iahiys.d(15): Error: no identifier for declarator `char`\n/tmp/tmpa2iahiys.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpa2iahiys.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpa2iahiys.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2iahiys.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            char c = temp.charAt(j);\n            if(c == '\
    \ ')\n                continue;\n            else\n            {\n           \
    \     if(c == 'z')\n                    c = 'a';\n                if(c == 'Z')\n\
    \                    c = 'A';\n                if(c == 'y')\n                \
    \    c = 'a';\n                if(c == 'Y')\n                    c = 'A';\n  \
    \              if(c == 'x')\n                    c = 'a';\n                if(c\
    \ == 'X')\n                    c = 'A';\n                if(c == 'a')\n      \
    \              c = 'a';\n                if(c == 'A')\n                    c =\
    \ 'A';\n                if(c == '0')\n                    c = '0';\n         \
    \       if(c == '1')\n                    c = '1';\n                if(c == '2')\n\
    \                    c = '2';\n                if(c == '3')\n                \
    \    c = '3';\n                if(c == '4')\n                    c = '4';\n  \
    \              if(c == '5')\n                    c = '5';\n                if(c\
    \ == '6')\n                    c = '6';\n                if(c == '7')\n      \
    \              c = '7';\n                if(c == '8')\n                    c =\
    \ '8';\n                if(c == '9')\n                    c = '9';\n         \
    \       if(c == '.')\n                    c = '.';\n                if(c == '-')\n\
    \                    c = '-';\n                if(c == '_')\n                \
    \    c = '_';\n                if(c == '$')\n                    c = '$';\n  \
    \              if(c == '%')\n                    c = '%';\n                if(c\
    \ == '&')\n                    c = '&';\n                if(c == '(')\n      \
    \              c = '(';\n                if(c == ')')\n                    c =\
    \ ')';\n                if(c == '*')\n                    c = '*';\n         \
    \       if(c == '+')\n                    c = '+';\n                if(c == '/')\n\
    \                    c = '/';\n                if(c == '\\\\')\n             \
    \       c = '\\\\';\n                if(c == '|')\n                    c = '|';\n\
    \                if(c == '<')\n                    c = '<';\n                if(c\
    \ == '>')\n                    c = '>';\n                if(c == '?')\n      \
    \              c = '?';\n                if(c == '[')\n                    c =\
    \ '[';\n                if(c == ']')\n                    c = ']';\n         \
    \       if(c == '{')\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptayme1pk.d(98): Error: found `unittest` instead of statement\n/tmp/tmptayme1pk.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptayme1pk.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptayme1pk.d(108):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptayme1pk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string) {\n        count += 1;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    The `count_distinct_characters` function doesn't work. Try it with `\"aba\"`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThe `count_distinct_characters` function doesn't work. Try it with `\"\
    aba\"`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nThe `count_distinct_characters` function doesn't work. Try it\
    \ with `\"aba\"`.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnh8tf464.d(14): Error: no identifier for declarator `char`\n/tmp/tmpnh8tf464.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpnh8tf464.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpnh8tf464.d(17): Error: found `return` when expecting
    `)`\n/tmp/tmpnh8tf464.d(19): Error: declaration expected, not `<`\n/tmp/tmpnh8tf464.d(22):
    Error: unterminated character constant\n/tmp/tmpnh8tf464.d(28): Error: unterminated
    character constant\n/tmp/tmpnh8tf464.d(34): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnh8tf464.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == temp[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == temp[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == temp[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == temp[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmphapss8.d(116): Error: expression expected, not `unittest`\n/tmp/tmpmphapss8.d(117):
    Error: found `{` when expecting `)`\n/tmp/tmpmphapss8.d(126): Error: found `End
    of File` when expecting `}` following compound statement\n/tmp/tmpmphapss8.d(126):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmphapss8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7vi8wee1.d(14): Error: no property `length` for type `string`\n/tmp/tmp7vi8wee1.d(17):
    Error: undefined identifier `isUpper` in module `std.typecons`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7vi8wee1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(auto c : string) \n    {\n        distinct +=\
    \ std.tolower(c) == c ? 1 : 0;\n    }\n    return distinct;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpby1c9smf.d(14): Error: no identifier for declarator `c`\n/tmp/tmpby1c9smf.d(14):
    Error: expression expected, not `:`\n/tmp/tmpby1c9smf.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpby1c9smf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        char c = toupper(char);\n\
    \        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96zk6jpt.d(14): Error: no identifier for declarator `char`\n/tmp/tmp96zk6jpt.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp96zk6jpt.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp96zk6jpt.d(15): Error: found `)` when expecting
    `.` following char\n/tmp/tmp96zk6jpt.d(15): Error: found `;` when expecting identifier
    following `char`.\n/tmp/tmp96zk6jpt.d(16): Error: found `count` when expecting
    `,`\n/tmp/tmp96zk6jpt.d(16): Error: expression expected, not `+=`\n/tmp/tmp96zk6jpt.d(16):
    Error: found `1` when expecting `,`\n/tmp/tmp96zk6jpt.d(16): Error: expression
    expected, not `;`\n/tmp/tmp96zk6jpt.d(17): Error: found `}` when expecting `,`\n/tmp/tmp96zk6jpt.d(18):
    Error: expression expected, not `return`\n/tmp/tmp96zk6jpt.d(18): Error: found
    `count` when expecting `,`\n/tmp/tmp96zk6jpt.d(18): Error: expression expected,
    not `;`\n/tmp/tmp96zk6jpt.d(19): Error: found `}` when expecting `,`\n/tmp/tmp96zk6jpt.d(20):
    Error: expression expected, not `unittest`\n/tmp/tmp96zk6jpt.d(21): Error: found
    `{` when expecting `,`\n/tmp/tmp96zk6jpt.d(22): Error: expression expected, not
    `alias`\n/tmp/tmp96zk6jpt.d(22): Error: found `candidate` when expecting `,`\n/tmp/tmp96zk6jpt.d(22):
    Error: expression expected, not `=`\n/tmp/tmp96zk6jpt.d(22): Error: found `count_distinct_characters`
    when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96zk6jpt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += count_distinct_characters(string);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07lsk2n6.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07lsk2n6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar\
    \ c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\t\
    if (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c == d)\n\
    \t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vdp8blp.d(14): Error: no property `length` for type `string`\n/tmp/tmp8vdp8blp.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8vdp8blp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char,string) {\n        result += char.hashCode();\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not\
    \ correct. `hashCode()` does not guarantee uniqueness. `hashCode()` does not guarantee\
    \ uniqueness across different JVMs. `hashCode()` does not guarantee uniqueness\
    \ across different JVMs even on the same JVM.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however, I believe that `hashCode()` does guarantee uniqueness across different\
    \ JVMs even on the same JVM.\n<|/ c |>\n<| c |>\nIt does guarantee uniqueness\
    \ across different JVMs even on the same JVM. That's why I said \"across different\
    \ JVMs\". `hashCode()` does not guarantee uniqueness across different JVMs even\
    \ on the same JVM.\n<|/ c |>\n<| c |>\nI agree with you, however, I believe that\
    \ `hashCode()` does guarantee uniqueness across different JVMs even on the same\
    \ JVM.\n<|/ c |>\n<| c |>\nI believe that `hashCode()` does guarantee uniqueness\
    \ across different JVMs even on the same JVM.\n<|/ c |>\n<| a dscore=1 |>\nThe\
    \ hashCode method of String is implemented as (from Java 7):\n<code>\npublic int\
    \ hashCode() {\n    int h = hash;\n    if (h == 0 && count > 0) {\n        char\
    \ val[] = value;\n        int len = count;\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_79972vx.d(14): Error: no identifier for declarator `char`\n/tmp/tmp_79972vx.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp_79972vx.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp_79972vx.d(17): Error: found `return` when expecting
    `)`\n/tmp/tmp_79972vx.d(19): Error: declaration expected, not `<`\n/tmp/tmp_79972vx.d(28):
    Error: unterminated character constant\n/tmp/tmp_79972vx.d(41): Error: declaration
    expected, not `if`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_79972vx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmxqfrv16.d(14): Error: no identifier for declarator `c`\n/tmp/tmpmxqfrv16.d(14):
    Error: expression expected, not `:`\n/tmp/tmpmxqfrv16.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmxqfrv16.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        if(!std.ctype.isLower(c))\
    \ \n        {\n            count += 2;\n        }\n        else if(!std.ctype.isUpper(c))\
    \ \n        {\n            count += 1;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9r9mx410.d(14): Error: no identifier for declarator `c`\n/tmp/tmp9r9mx410.d(14):
    Error: expression expected, not `:`\n/tmp/tmp9r9mx410.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9r9mx410.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        count += (c >= 'A' && c <= 'Z') ? 26 :\
    \ (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npublic long countDistinctCharacters(String\
    \ str) {\n    long count = 0;\n    for(int i = 0; i < str.length(); i++) {\n \
    \       char c = str.charAt(i);\n        count += (c >= 'A' && c <= 'Z') ? 26\
    \ : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a tags=string,java dscore=1 |>\n<| a tags=string,java\
    \ |>\n<code>\npublic long countDistinctCharacters(String str) {\n    long count\
    \ = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n\
    \        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 :\
    \ (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long countDistinctCharacters(String\
    \ str) {\n    long count = 0;\n    for(int i = 0; i < str.length(); i++) {\n \
    \       char c = str.charAt(i);\n        count += (c >= 'A' && c <= 'Z') ? 26\
    \ : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a tags=string,java |>\n<| a |>\n<code>\npublic\
    \ long countDistinctCharacters(String str) {\n    long count = 0;\n    for(int\
    \ i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        count\
    \ += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' &&\
    \ c <= '9') ? 10 : 0;\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr6psq4lx.d(21): Error: declaration expected, not `<`\n/tmp/tmpr6psq4lx.d(27):
    Error: declaration expected, not `for`\n/tmp/tmpr6psq4lx.d(27): Error: no identifier
    for declarator `i`\n/tmp/tmpr6psq4lx.d(27): Error: declaration expected, not `<`\n/tmp/tmpr6psq4lx.d(27):
    Error: no identifier for declarator `i`\n/tmp/tmpr6psq4lx.d(27): Error: declaration
    expected, not `++`\n/tmp/tmpr6psq4lx.d(29): Error: no identifier for declarator
    `count`\n/tmp/tmpr6psq4lx.d(29): Error: declaration expected, not `+=`\n/tmp/tmpr6psq4lx.d(30):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6psq4lx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    \n    foreach(char c in string)\n    {\n        result\
    \ += (int)c;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjetc4290.d(15): Error: found `in` when expecting `;`\n/tmp/tmpjetc4290.d(17):
    Error: C style cast illegal, use `cast(int)c`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjetc4290.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5vb85_gi.d(14): Error: no identifier for declarator `char`\n/tmp/tmp5vb85_gi.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp5vb85_gi.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp5vb85_gi.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vb85_gi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.algorithm.contains(string.chars, c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhntgddp.d(14): Error: no property `length` for type `string`\n/tmp/tmpyhntgddp.d(17):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyhntgddp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4_w8qzb.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4_w8qzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7muo3pd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpy7muo3pd.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpy7muo3pd.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpy7muo3pd.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7muo3pd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvp13bra.d(106): Error: found `unittest` when expecting `;`
    following `for` condition\n/tmp/tmpjvp13bra.d(116): Error: found `void` when expecting
    `)`\n/tmp/tmpjvp13bra.d(116): Error: found `{` when expecting `;` following statement\n/tmp/tmpjvp13bra.d(116):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvp13bra.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctCharacters = 0;\n    \n    foreach(char c in string) \n    {\n\
    \        distinctCharacters ^= (long)c;\n    }\n    \n    return distinctCharacters;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7pihqocy.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7pihqocy.d(17):
    Error: C style cast illegal, use `cast(long)c`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7pihqocy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        char c = tolower(char);\n\
    \        \n        if(!std.isChar(c)) {\n            throw new Exception(\"Invalid\
    \ character: \" + c);\n        }\n        \n        if(!std.isCharUpper(c)) {\n\
    \            count += 2;\n        }\n        \n        if(!std.isCharLower(c))\
    \ {\n            count += 1;\n        }\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdo4b0lu.d(15): Error: no identifier for declarator `char`\n/tmp/tmprdo4b0lu.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmprdo4b0lu.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmprdo4b0lu.d(16): Error: found `)` when expecting
    `.` following char\n/tmp/tmprdo4b0lu.d(16): Error: found `;` when expecting identifier
    following `char`.\n/tmp/tmprdo4b0lu.d(18): Error: found `if` when expecting `,`\n/tmp/tmprdo4b0lu.d(18):
    Error: basic type expected, not `!`\n/tmp/tmprdo4b0lu.d(18): Error: found `!`
    when expecting `)`\n/tmp/tmprdo4b0lu.d(18): Error: missing `{ ... }` for function
    literal\n/tmp/tmprdo4b0lu.d(18): Error: found `std` when expecting `,`\n/tmp/tmprdo4b0lu.d(18):
    Error: semicolon expected, not `{`\n/tmp/tmprdo4b0lu.d(31): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdo4b0lu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3_3qj2f.d(14): Error: no identifier for declarator `char`\n/tmp/tmpc3_3qj2f.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpc3_3qj2f.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpc3_3qj2f.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3_3qj2f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        if(!isalpha(c))\n            continue;\n\
    \        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf78os7ek.d(14): Error: no property `length` for type `string`\n/tmp/tmpf78os7ek.d(16):
    Error: no property `at` for type `string`\n/tmp/tmpf78os7ek.d(17): Error: undefined
    identifier `isalpha`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf78os7ek.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += (c\
    \ >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9')\
    \ ? 10 : 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_sc77ta0.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sc77ta0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n            count +=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpigqxc1vq.d(14): Error: no property `length` for type `string`\n/tmp/tmpigqxc1vq.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpigqxc1vq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp72z5x2q1.d(14): Error: no property `length` for type `string`\n/tmp/tmp72z5x2q1.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp72z5x2q1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov81j4yn.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov81j4yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        \n        if(!std.algorithm.contains(string,\
    \ c))\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a3g20kh.d(15): Error: no property `length` for type `string`\n/tmp/tmp0a3g20kh.d(19):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0a3g20kh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(auto c : string)\n    {\n        distinct = (distinct\
    \ + 1) + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n\
    \    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpblnxhh77.d(14): Error: no identifier for declarator `c`\n/tmp/tmpblnxhh77.d(14):
    Error: expression expected, not `:`\n/tmp/tmpblnxhh77.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpblnxhh77.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk1co44le.d(14): Error: found `in` when expecting `;`\n/tmp/tmpk1co44le.d(16):
    Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpk1co44le.d(16):
    Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk1co44le.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(auto c : string)\n    {\n        distinct +=\
    \ std.algorithm.distinct(c).count;\n    }\n    return distinct;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp11zvhjb.d(14): Error: no identifier for declarator `c`\n/tmp/tmpp11zvhjb.d(14):
    Error: expression expected, not `:`\n/tmp/tmpp11zvhjb.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp11zvhjb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        auto it = std::find(string.begin(),\
    \ string.end(), c);\n        if(it != string.end())\n        {\n            count++;\n\
    \            string.erase(it, string.end());\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7raj2zv4.d(14): Error: no identifier for declarator `c`\n/tmp/tmp7raj2zv4.d(14):
    Error: expression expected, not `:`\n/tmp/tmp7raj2zv4.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmp7raj2zv4.d(16): Error: semicolon
    expected following auto declaration, not `:`\n/tmp/tmp7raj2zv4.d(16): Error: found
    `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7raj2zv4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        foreach(char\
    \ c2 in string)\n        {\n            if (c == c2)\n            {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwyeound5.d(14): Error: found `in` when expecting `;`\n/tmp/tmpwyeound5.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwyeound5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n \
    \   }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqt2oam0b.d(15): Error: no identifier for declarator `char`\n/tmp/tmpqt2oam0b.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpqt2oam0b.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpqt2oam0b.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqt2oam0b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (islower(c)) \n\t\t\t\
    count++;\n\t\telse if (isupper(c)) \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkfqhuqmq.d(14): Error: no identifier for declarator `c`\n/tmp/tmpkfqhuqmq.d(14):
    Error: expression expected, not `:`\n/tmp/tmpkfqhuqmq.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkfqhuqmq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(c);\n    }\n    return result;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does \nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw2058art.d(14): Error: found `in` when expecting `;`\n/tmp/tmpw2058art.d(31):
    Error: found `in` when expecting `;`\n/tmp/tmpw2058art.d(48): Error: found `in`
    when expecting `;`\n/tmp/tmpw2058art.d(65): Error: found `in` when expecting `;`\n/tmp/tmpw2058art.d(82):
    Error: found `in` when expecting `;`\n/tmp/tmpw2058art.d(99): Error: found `in`
    when expecting `;`\n/tmp/tmpw2058art.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2058art.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzh54iyy.d(14): Error: no identifier for declarator `c`\n/tmp/tmppzh54iyy.d(14):
    Error: expression expected, not `:`\n/tmp/tmppzh54iyy.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppzh54iyy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpner_4to9.d(14): Error: no property `length` for type `string`\n/tmp/tmpner_4to9.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpner_4to9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int\
    \ j = i; j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\
    \t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbke8m8nq.d(14): Error: no property `length` for type `string`\n/tmp/tmpbke8m8nq.d(16):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbke8m8nq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            else\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppf9wr5nq.d(14): Error: no property `length` for type `string`\n/tmp/tmppf9wr5nq.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppf9wr5nq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        if(lower != upper)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0vzazxdh.d(14): Error: no identifier for declarator `c`\n/tmp/tmp0vzazxdh.d(14):
    Error: expression expected, not `:`\n/tmp/tmp0vzazxdh.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0vzazxdh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ count_distinct_characters(string);\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpak0gxfzm.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak0gxfzm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isUpper(c))\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi63fq4n3.d(14): Error: no property `length` for type `string`\n/tmp/tmpi63fq4n3.d(17):
    Error: undefined identifier `isUpper` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpi63fq4n3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ for(int k = 0; k < temp2.length(); k++)\n            {\n                string\
    \ temp3 = temp2.substr(k, 1);\n                for(int l = 0; l < temp3.length();\
    \ l++)\n                {\n                    string temp4 = temp3.substr(l,\
    \ 1);\n                    for(int m = 0; m < temp4.length(); m++)\n         \
    \           {\n                        string temp5 = temp4.substr(m, 1);\n  \
    \                      for(int n = 0; n < temp5.length(); n++)\n             \
    \           {\n                            string temp6 = temp5.substr(n, 1);\n\
    \                            for(int o = 0; o < temp6.length(); o++)\n       \
    \                     {\n                                string temp7 = temp6.substr(o,\
    \ 1);\n                                for(int p = 0; p < temp7.length(); p++)\n\
    \                                {\n                                    string\
    \ temp8 = temp7.substr(p, 1);\n                                    for(int q =\
    \ 0; q < temp8.length(); q++)\n                                    {\n       \
    \                                 string temp9 = temp8.substr(q, 1);\n       \
    \                                 for(int r = 0; r < temp9.length(); r++)\n  \
    \                                      {\n                                   \
    \         string temp10 = temp9.substr(r, 1);\n                              \
    \              for(int s = 0; s < temp10.length(); s++)\n                    \
    \                        {\n                                                string\
    \ temp11 = temp10.substr(s, 1);\n                                            \
    \    for(int t = 0; t < temp11.length(); t++)\n                              \
    \                  {\n                                                    string\
    \ temp12 = temp11.substr(t, 1);\n                                            \
    \        for(int u = 0; u < temp12.length(); u++)\n                          \
    \                          {\n                                               \
    \         string temp13 = temp12.substr(u, 1);\n                             \
    \                           for(int v = 0; v < temp13.length(); v++)\n       \
    \                                                 {\n                        \
    \                                    string temp14 = temp13.substr(v, 1);\n  \
    \                                                          for(int w = 0; w <\
    \ temp14.length(); w++)\n                                                    \
    \        {\n                                                                string\
    \ temp15 = temp14.substr(w, 1);\n                                            \
    \                    for(int x = 0; x < temp15.length(); x++)\n              \
    \                                                  {\n                       \
    \                                             string temp16 = temp15.substr(x,\
    \ 1);\n                                                                    for(int\
    \ y = 0; y < temp16.length(); y++)\n                                         \
    \                           {\n                                              \
    \                          string temp17 = temp16.substr(y, 1);\n            \
    \                                                            for(int z = 0; z\
    \ < temp17.length(); z++)\n                                                  \
    \                      {\n                                                   \
    \                         string temp18 = temp17.substr(z, 1);\n             \
    \                                                               for(int aa = 0;\
    \ aa < temp18.length(); aa++)\n                                              \
    \                              {\n                                           \
    \                                     string temp19 = temp18.substr(aa, 1);\n\
    \                                                                            \
    \    for(int bb = 0; bb < temp19.length(); bb++)\n                           \
    \                                                     {\n\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61anbm3e.d(74): Error: found `unittest` instead of statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61anbm3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isAlpha(c))\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnbdm82aa.d(14): Error: no property `length` for type `string`\n/tmp/tmpnbdm82aa.d(17):
    Error: undefined identifier `isAlpha` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnbdm82aa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_e3w9nn.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_e3w9nn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiep85ry2.d(15): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiep85ry2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long countDistinctCharacters(String s) {\n    long count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(Character.isLetter(c))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=string,java,algorithm |>\n<| a tags=string,java,algorithm |>\n<code>\n\
    public int countDistinctCharacters(String s) {\n    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(Character.isLetter(c))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\npublic int countDistinctCharacters(String s)\
    \ {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isLetter(c)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 tags=string,java,algorithm\
    \ |>\n<| a |>\n<code>\npublic int countDistinctCharacters(String s) {\n    int\
    \ count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(Character.isLetter(c)) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 tags=string,java,algorithm |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis answer was flagged\
    \ as low-quality because of its length and content. Could you please edit it to\
    \ add some explanation, so that others can learn from it? Thanks!\n<|/ c |>\n\
    <| a tags=string,java,algorithm |>\n<code>\npublic int countDistinctCharacters(String\
    \ s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n      \
    \  char c = s.charAt(i);\n        if(Character.isLetter(c)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic int countDist\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8tc954sm.d(14): Error: found `in` when expecting `;`\n/tmp/tmp8tc954sm.d(20):
    Error: declaration expected, not `<`\n/tmp/tmp8tc954sm.d(26): Error: declaration
    expected, not `for`\n/tmp/tmp8tc954sm.d(26): Error: no identifier for declarator
    `i`\n/tmp/tmp8tc954sm.d(26): Error: declaration expected, not `<`\n/tmp/tmp8tc954sm.d(26):
    Error: no identifier for declarator `i`\n/tmp/tmp8tc954sm.d(26): Error: declaration
    expected, not `++`\n/tmp/tmp8tc954sm.d(28): Error: declaration expected, not `if`\n/tmp/tmp8tc954sm.d(30):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tc954sm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <=\
    \ '9') ? 10 : 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcssbnhu_.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcssbnhu_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        count += std.algorithm.count_if(string.begin(),\
    \ string.end(), [&](char ch){ return std.algorithm.toupper(ch) == std.algorithm.toupper(c);\
    \ });\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp307xwcen.d(14): Error: no identifier for declarator `c`\n/tmp/tmp307xwcen.d(14):
    Error: expression expected, not `:`\n/tmp/tmp307xwcen.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmp307xwcen.d(16): Error: expression
    expected, not `]`\n/tmp/tmp307xwcen.d(16): Error: found `ch` when expecting `.`
    following char\n/tmp/tmp307xwcen.d(16): Error: found `)` when expecting identifier
    following `char`.\n/tmp/tmp307xwcen.d(16): Error: found `{` when expecting `,`\n/tmp/tmp307xwcen.d(16):
    Error: expression expected, not `return`\n/tmp/tmp307xwcen.d(16): Error: found
    `std` when expecting `,`\n/tmp/tmp307xwcen.d(16): Error: found `;` when expecting
    `,`\n/tmp/tmp307xwcen.d(16): Error: expression expected, not `}`\n/tmp/tmp307xwcen.d(16):
    Error: found `;` when expecting `,`\n/tmp/tmp307xwcen.d(17): Error: expression
    expected, not `}`\n/tmp/tmp307xwcen.d(18): Error: found `return` when expecting
    `,`\n/tmp/tmp307xwcen.d(18): Error: found `;` when expecting `,`\n/tmp/tmp307xwcen.d(19):
    Error: expression expected, not `}`\n/tmp/tmp307xwcen.d(20): Error: found `unittest`
    when expecting `,`\n/tmp/tmp307xwcen.d(30): Error: found `void` when expecting
    `,`\n/tmp/tmp307xwcen.d(30): Error: found `{` when expecting `,`\n/tmp/tmp307xwcen.d(30):
    Error: expression expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp307xwcen.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctCharacters = 0;\n    foreach(char c in string) \n    {\n   \
    \     distinctCharacters++;\n    }\n    return distinctCharacters;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string with multiple\
    \ repeated characters, such as \"abcabc\".\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it yourself with your example string. `count_distinct_characters(\"abcabc\"\
    )` returns `3L`\n<|/ c |>\n<| c |>\nAh, I see what you mean. Yes, it does work.\
    \ Sorry for the misunderstanding.\n<|/ c |>\n<| c |>\nNo problem. Glad I could\
    \ help.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic long count_distinct_characters(String\
    \ str) {\n    long distinctCharacters = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        char c = str.charAt(i);\n        distinctCharacters += (c !=\
    \ str.charAt(i) ? 1 : 0);\n    }\n    return distinctCharacters;\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| a dscore=1 |>\n<code>\npublic long count_distinct_characters(String\
    \ str) {\n    long distinctCharacters = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        char c = str.charAt(i);\n        distinctCharacters += (c !=\
    \ str.charAt(i) ? 1 : 0);\n    }\n    return distinctCharacters;\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| a dscore=1 |>\n<code>\npublic long count_distinct_characters(String\
    \ str) {\n    long distinctCharacters = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        char c = str.charAt(i);\n        distinctCharacters += (c !=\
    \ str.charAt(i) ? 1 : 0);\n    }\n    return distinctCharacters;\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| a dscore=1 |>\n<code>\npublic long count_distinct_characters(String\
    \ str) {\n    long distinctCharacters = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        char c = str.charAt(i);\n        distinctCharacters += (c !=\
    \ str.charAt(i) ? 1 : 0);\n    }\n    return distinctCharacters;\n}\n</code>\n\
    <|/ a tags=string,java |>\n<| a dscore=0 |>\n<code>\npublic long count_distinct_characters(String\
    \ str) {\n    long distinctCharacters = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        char c = str.charAt(i);\n        distinctCharacters += (c !=\
    \ str.charAt(i\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz597f38g.d(14): Error: found `in` when expecting `;`\n/tmp/tmpz597f38g.d(20):
    Error: declaration expected, not `<`\n/tmp/tmpz597f38g.d(23): Error: unterminated
    character constant\n/tmp/tmpz597f38g.d(38): Error: declaration expected, not `for`\n/tmp/tmpz597f38g.d(38):
    Error: no identifier for declarator `i`\n/tmp/tmpz597f38g.d(38): Error: declaration
    expected, not `<`\n/tmp/tmpz597f38g.d(38): Error: no identifier for declarator
    `i`\n/tmp/tmpz597f38g.d(38): Error: declaration expected, not `++`\n/tmp/tmpz597f38g.d(40):
    Error: no identifier for declarator `distinctCharacters`\n/tmp/tmpz597f38g.d(40):
    Error: declaration expected, not `+=`\n/tmp/tmpz597f38g.d(41): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz597f38g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += (char)toupper(char)-(char)\
    \ tolower(char);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj7i0_9rl.d(14): Error: no identifier for declarator `char`\n/tmp/tmpj7i0_9rl.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpj7i0_9rl.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpj7i0_9rl.d(15): Error: found `)` when expecting
    `.` following char\n/tmp/tmpj7i0_9rl.d(15): Error: found `-` when expecting identifier
    following `char`.\n/tmp/tmpj7i0_9rl.d(15): Error: found `)` when expecting `.`
    following char\n/tmp/tmpj7i0_9rl.d(15): Error: found `)` when expecting `.` following
    char\n/tmp/tmpj7i0_9rl.d(15): Error: found `;` when expecting identifier following
    `char`.\n/tmp/tmpj7i0_9rl.d(16): Error: found `}` when expecting `,`\n/tmp/tmpj7i0_9rl.d(17):
    Error: expression expected, not `return`\n/tmp/tmpj7i0_9rl.d(17): Error: found
    `count` when expecting `,`\n/tmp/tmpj7i0_9rl.d(17): Error: expression expected,
    not `;`\n/tmp/tmpj7i0_9rl.d(18): Error: found `}` when expecting `,`\n/tmp/tmpj7i0_9rl.d(19):
    Error: expression expected, not `unittest`\n/tmp/tmpj7i0_9rl.d(20): Error: found
    `{` when expecting `,`\n/tmp/tmpj7i0_9rl.d(21): Error: expression expected, not
    `alias`\n/tmp/tmpj7i0_9rl.d(21): Error: found `candidate` when expecting `,`\n/tmp/tmpj7i0_9rl.d(21):
    Error: expression expected, not `=`\n/tmp/tmpj7i0_9rl.d(21): Error: found `count_distinct_characters`
    when expecting `,`\n/tmp/tmpj7i0_9rl.d(21): Error: expression expected, not `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7i0_9rl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length();\
    \ j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count\
    \ += sub2.length();\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7xb9jgf.d(14): Error: no property `length` for type `string`\n/tmp/tmpi7xb9jgf.d(16):
    Error: `string` is used as a type\n/tmp/tmpi7xb9jgf.d(16): Error: no property
    `substr` for type `string`\n/tmp/tmpi7xb9jgf.d(19): Error: `string` is used as
    a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7xb9jgf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ count_distinct_characters(c);\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThis is not the right solution. Consider `count_distinct_characters(\"\
    abBcC\")`. Your algorithm will return `4`, while it must be `3`.\n<|/ c |>\n<|\
    \ c |>\n: I agree, but I believe that OP wants to count the distinct characters,\
    \ not the number of distinct characters in a string.\n<|/ c |>\n<| c |>\n: I believe\
    \ that OP wants to count the distinct characters, not the number of distinct characters\
    \ in a string.\n<|/ c |>\n<| c |>\n: I believe that OP wants to count the distinct\
    \ characters, not the number of distinct characters in a string.\n<|/ c |>\n<|\
    \ c |>\n: I believe that OP wants to count the distinct characters, not the number\
    \ of distinct characters in a string.\n<|/ c |>\n<| a tags=string,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6e1841b5.d(14): Error: found `in` when expecting `;`\n/tmp/tmp6e1841b5.d(20):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp6e1841b5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4_w8qzb.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4_w8qzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       result += std.string.char_count(string.subarray(i, i + 1));\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw4y6vq6x.d(14): Error: no property `length` for type `string`\n/tmp/tmpw4y6vq6x.d(16):
    Error: undefined identifier `string` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw4y6vq6x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (islower(c)) \n\t\t\t\
    count++;\n\t\telse if (isupper(c)) \n\t\t\tcount++;\n\t\telse if (isdigit(c))\
    \ \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp21jsn9dc.d(14): Error: no identifier for declarator `c`\n/tmp/tmp21jsn9dc.d(14):
    Error: expression expected, not `:`\n/tmp/tmp21jsn9dc.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp21jsn9dc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4_w8qzb.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4_w8qzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string[i];\n        for(int j = 0; j < temp.length(); j++)\n\
    \        {\n            if(string[i] == temp[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy4g5085p.d(14): Error: no property `length` for type `string`\n/tmp/tmpy4g5085p.d(16):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4g5085p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\
    \t\tauto upper = toupper(c);\n\t\tif (lower == upper) \n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcfg4ymrd.d(14): Error: no identifier for declarator `c`\n/tmp/tmpcfg4ymrd.d(14):
    Error: expression expected, not `:`\n/tmp/tmpcfg4ymrd.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcfg4ymrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    \n<|/ c |>\n<| c |>\n: It works. I tested it before posting it. The only thing\
    \ I changed was the return type from long to int and I added a return statement\
    \ at the end. Are you sure you tested it before posting it?\n<|/ c |>\n<| c |>\n\
    : I tested it before posting it. I also tested it after posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before posting it. I tested it before posting it. I tested it before posting\
    \ it. I tested it before posting it. I tested it before posting it. I tested it\
    \ before post\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjo_f5vrx.d(14): Error: found `in` when expecting `;`\n/tmp/tmpjo_f5vrx.d(16):
    Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpjo_f5vrx.d(16):
    Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\n/tmp/tmpjo_f5vrx.d(20):
    Error: declaration expected, not `<`\n/tmp/tmpjo_f5vrx.d(23): Error: unterminated
    character constant\n/tmp/tmpjo_f5vrx.d(34): Error: declaration expected, not `assert`\n/tmp/tmpjo_f5vrx.d(35):
    Error: declaration expected, not `assert`\n/tmp/tmpjo_f5vrx.d(36): Error: declaration
    expected, not `assert`\n/tmp/tmpjo_f5vrx.d(37): Error: declaration expected, not
    `assert`\n/tmp/tmpjo_f5vrx.d(38): Error: declaration expected, not `assert`\n/tmp/tmpjo_f5vrx.d(39):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo_f5vrx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        string sub2 = string.substr(0,\
    \ i);\n        \n        if(sub != sub2)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx4ta5su3.d(14): Error: no property `length` for type `string`\n/tmp/tmpx4ta5su3.d(16):
    Error: `string` is used as a type\n/tmp/tmpx4ta5su3.d(16): Error: no property
    `substr` for type `string`\n/tmp/tmpx4ta5su3.d(17): Error: `string` is used as
    a type\n/tmp/tmpx4ta5su3.d(17): Error: no property `substr` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4ta5su3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.algorithm.distinct(c).length;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphptn0ph8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphptn0ph8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' &&\
    \ c <= 'Z') || (c >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n    return distinct;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyqf250d9.d(14): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyqf250d9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' &&\
    \ c <= 'Z') || (c >= 'a' && c <= 'z'));\n    }\n    return distinct;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj3yylps_.d(14): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3yylps_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ tolower(c) - 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr4lxbel7.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4lxbel7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        foreach(char\
    \ c2 in string)\n        {\n            if (c == c2)\n            {\n        \
    \        count++;\n                break;\n            }\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2axkrach.d(14): Error: found `in` when expecting `;`\n/tmp/tmp2axkrach.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2axkrach.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzh54iyy.d(14): Error: no identifier for declarator `c`\n/tmp/tmppzh54iyy.d(14):
    Error: expression expected, not `:`\n/tmp/tmppzh54iyy.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppzh54iyy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        \n        if(!std.typecons.isUpper(c))\n\
    \        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp090zc978.d(15): Error: no property `length` for type `string`\n/tmp/tmp090zc978.d(19):
    Error: undefined identifier `isUpper` in module `std.typecons`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp090zc978.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length();\
    \ j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count\
    \ += sub2.length();\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abbccc\"\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. It returns 3 for \"abbccc\"\
    .\n<|/ c |>\n<| c |>\nIt doesn't work for \"abbccc\" because you only count the\
    \ distinct characters in the first two characters. You need to count the distinct\
    \ characters in the entire string.\n<|/ c |>\n<| c |>\nYes, you're right. I missed\
    \ that detail. I've updated my answer to account for that.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpej26i25m.d(25): Error: declaration expected, not `<`\n/tmp/tmpej26i25m.d(28):
    Error: unterminated character constant\n/tmp/tmpej26i25m.d(34): Error: unterminated
    character constant\n/tmp/tmpej26i25m.d(37): Error: unterminated character constant\n/tmp/tmpej26i25m.d(37):
    Error: unterminated character constant\n/tmp/tmpej26i25m.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpej26i25m.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpej26i25m.d(50): Error: declaration expected, not `assert`\n/tmp/tmpej26i25m.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpej26i25m.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpej26i25m.d(53): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpej26i25m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong result = 0;\n\tfor (auto c : string) \n\t{\n\t\tresult += std.algorithm.count_distinct_characters(c);\n\
    \t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lgotx6u.d(14): Error: no identifier for declarator `c`\n/tmp/tmp2lgotx6u.d(14):
    Error: expression expected, not `:`\n/tmp/tmp2lgotx6u.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2lgotx6u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    foreach(char, string) {\n        distinct += char.casefold().length;\n\
    \    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0wmsj8_6.d(14): Error: no identifier for declarator `char`\n/tmp/tmp0wmsj8_6.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp0wmsj8_6.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp0wmsj8_6.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wmsj8_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (islower(c)) \n\t\t\t\
    count++;\n\t\telse if (isupper(c)) \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkfqhuqmq.d(14): Error: no identifier for declarator `c`\n/tmp/tmpkfqhuqmq.d(14):
    Error: expression expected, not `:`\n/tmp/tmpkfqhuqmq.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkfqhuqmq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string)\n    {\n        if(!isalpha(char))\n\
    \        {\n            count += 1;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppn7txfgo.d(15): Error: no identifier for declarator `char`\n/tmp/tmppn7txfgo.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmppn7txfgo.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmppn7txfgo.d(17): Error: found `)` when expecting
    `.` following char\n/tmp/tmppn7txfgo.d(17): Error: found `)` when expecting identifier
    following `char`.\n/tmp/tmppn7txfgo.d(18): Error: found `{` when expecting `,`\n/tmp/tmppn7txfgo.d(19):
    Error: found `;` when expecting `,`\n/tmp/tmppn7txfgo.d(20): Error: expression
    expected, not `}`\n/tmp/tmppn7txfgo.d(21): Error: found `}` when expecting `,`\n/tmp/tmppn7txfgo.d(23):
    Error: expression expected, not `return`\n/tmp/tmppn7txfgo.d(23): Error: found
    `count` when expecting `,`\n/tmp/tmppn7txfgo.d(23): Error: expression expected,
    not `;`\n/tmp/tmppn7txfgo.d(24): Error: found `}` when expecting `,`\n/tmp/tmppn7txfgo.d(25):
    Error: expression expected, not `unittest`\n/tmp/tmppn7txfgo.d(26): Error: found
    `{` when expecting `,`\n/tmp/tmppn7txfgo.d(27): Error: expression expected, not
    `alias`\n/tmp/tmppn7txfgo.d(27): Error: found `candidate` when expecting `,`\n/tmp/tmppn7txfgo.d(27):
    Error: expression expected, not `=`\n/tmp/tmppn7txfgo.d(27): Error: found `count_distinct_characters`
    when expecting `,`\n/tmp/tmppn7txfgo.d(27): Error: expression expected, not `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppn7txfgo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        if(lower != upper) \n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp27lgpi53.d(14): Error: no identifier for declarator `c`\n/tmp/tmp27lgpi53.d(14):
    Error: expression expected, not `:`\n/tmp/tmp27lgpi53.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp27lgpi53.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt92jdc8.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt92jdc8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += (char)tolower(c)\
    \ == (char)tolower(c) ? 1 : 0;\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpielsahzh.d(14): Error: found `in` when expecting `;`\n/tmp/tmpielsahzh.d(16):
    Error: C style cast illegal, use `cast(char)tolower(c)`\n/tmp/tmpielsahzh.d(16):
    Error: C style cast illegal, use `cast(char)tolower(c)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpielsahzh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n        {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uw5aym9.d(14): Error: no property `length` for type `string`\n/tmp/tmp8uw5aym9.d(17):
    Error: undefined identifier `isLower` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8uw5aym9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7muo3pd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpy7muo3pd.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpy7muo3pd.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpy7muo3pd.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7muo3pd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) {\n        count += count_distinct_characters(c\
    \ + string);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphelztgex.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphelztgex.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov81j4yn.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov81j4yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ for(int k = 0; k < temp2.length(); k++)\n            {\n                string\
    \ temp3 = temp2.substr(k, 1);\n                for(int l = 0; l < temp3.length();\
    \ l++)\n                {\n                    string temp4 = temp3.substr(l,\
    \ 1);\n                    for(int m = 0; m < temp4.length(); m++)\n         \
    \           {\n                        string temp5 = temp4.substr(m, 1);\n  \
    \                      for(int n = 0; n < temp5.length(); n++)\n             \
    \           {\n                            string temp6 = temp5.substr(n, 1);\n\
    \                            for(int o = 0; o < temp6.length(); o++)\n       \
    \                     {\n                                string temp7 = temp6.substr(o,\
    \ 1);\n                                for(int p = 0; p < temp7.length(); p++)\n\
    \                                {\n                                    string\
    \ temp8 = temp7.substr(p, 1);\n                                    for(int q =\
    \ 0; q < temp8.length(); q++)\n                                    {\n       \
    \                                 string temp9 = temp8.substr(q, 1);\n       \
    \                                 for(int r = 0; r < temp9.length(); r++)\n  \
    \                                      {\n                                   \
    \         string temp10 = temp9.substr(r, 1);\n                              \
    \              for(int s = 0; s < temp10.length(); s++)\n                    \
    \                        {\n                                                string\
    \ temp11 = temp10.substr(s, 1);\n                                            \
    \    for(int t = 0; t < temp11.length(); t++)\n                              \
    \                  {\n                                                    string\
    \ temp12 = temp11.substr(t, 1);\n                                            \
    \        for(int u = 0; u < temp12.length(); u++)\n                          \
    \                          {\n                                               \
    \         string temp13 = temp12.substr(u, 1);\n                             \
    \                           for(int v = 0; v < temp13.length(); v++)\n       \
    \                                                 {\n                        \
    \                                    string temp14 = temp13.substr(v, 1);\n  \
    \                                                          for(int w = 0; w <\
    \ temp14.length(); w++)\n                                                    \
    \        {\n                                                                string\
    \ temp15 = temp14.substr(w, 1);\n                                            \
    \                    for(int x = 0; x < temp15.length(); x++)\n              \
    \                                                  {\n                       \
    \                                             string temp16 = temp15.substr(x,\
    \ 1);\n                                                                    for(int\
    \ y = 0; y < temp16.length(); y++)\n                                         \
    \                           {\n                                              \
    \                          string temp17 = temp16.substr(y, 1);\n            \
    \                                                            for(int z = 0; z\
    \ < temp17.length(); z++)\n                                                  \
    \                      {\n                                                   \
    \                         string temp18 = temp17.substr(z, 1);\n             \
    \                                                               for(int aa = 0;\
    \ aa < temp18.length(); aa++)\n                                              \
    \                              {\n                                           \
    \                                     string temp19 = temp18.substr(aa, 1);\n\
    \                                                                            \
    \    for(int bb = 0; bb < temp19.length(); bb++)\n                           \
    \                                                     {\n\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61anbm3e.d(74): Error: found `unittest` instead of statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp61anbm3e.d(84):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61anbm3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpax9h7002.d(14): Error: no identifier for declarator `c`\n/tmp/tmpax9h7002.d(14):
    Error: expression expected, not `:`\n/tmp/tmpax9h7002.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpax9h7002.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzh54iyy.d(14): Error: no identifier for declarator `c`\n/tmp/tmppzh54iyy.d(14):
    Error: expression expected, not `:`\n/tmp/tmppzh54iyy.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppzh54iyy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinct = 0;\n    foreach(char c in string)\n    {\n        distinct++;\n\
    \    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__moxay7.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__moxay7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk1co44le.d(14): Error: found `in` when expecting `;`\n/tmp/tmpk1co44le.d(16):
    Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpk1co44le.d(16):
    Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk1co44le.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += (char)toupper(char)-(char)\
    \ 'A';\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm7f80z69.d(14): Error: no identifier for declarator `char`\n/tmp/tmpm7f80z69.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpm7f80z69.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpm7f80z69.d(15): Error: found `)` when expecting
    `.` following char\n/tmp/tmpm7f80z69.d(15): Error: found `-` when expecting identifier
    following `char`.\n/tmp/tmpm7f80z69.d(15): Error: found `)` when expecting `.`
    following char\n/tmp/tmpm7f80z69.d(15): Error: found `65U` when expecting identifier
    following `char`.\n/tmp/tmpm7f80z69.d(15): Error: found `;` when expecting `,`\n/tmp/tmpm7f80z69.d(16):
    Error: expression expected, not `}`\n/tmp/tmpm7f80z69.d(17): Error: found `return`
    when expecting `,`\n/tmp/tmpm7f80z69.d(17): Error: found `;` when expecting `,`\n/tmp/tmpm7f80z69.d(18):
    Error: expression expected, not `}`\n/tmp/tmpm7f80z69.d(19): Error: found `unittest`
    when expecting `,`\n/tmp/tmpm7f80z69.d(29): Error: found `void` when expecting
    `,`\n/tmp/tmpm7f80z69.d(29): Error: found `{` when expecting `,`\n/tmp/tmpm7f80z69.d(29):
    Error: expression expected, not `}`\n/tmp/tmpm7f80z69.d(29): Error: found `End
    of File` when expecting `,`\n/tmp/tmpm7f80z69.d(29): Error: found `End of File`
    when expecting `)`\n/tmp/tmpm7f80z69.d(29): Error: found `End of File` when expecting
    `,`\n/tmp/tmpm7f80z69.d(29): Error: found `End of File` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7f80z69.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhe1ih2v.d(14): Error: found `in` when expecting `;`\n/tmp/tmpmhe1ih2v.d(31):
    Error: found `in` when expecting `;`\n/tmp/tmpmhe1ih2v.d(48): Error: found `in`
    when expecting `;`\n/tmp/tmpmhe1ih2v.d(65): Error: found `in` when expecting `;`\n/tmp/tmpmhe1ih2v.d(82):
    Error: found `in` when expecting `;`\n/tmp/tmpmhe1ih2v.d(99): Error: found `in`
    when expecting `;`\n/tmp/tmpmhe1ih2v.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhe1ih2v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    for (auto c : string) \n    {\n        auto lower\
    \ = tolower(c);\n        auto upper = toupper(c);\n        \n        if (lower\
    \ == upper) \n        {\n            count++;\n        }\n    }\n    \n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqbi4604u.d(15): Error: no identifier for declarator `c`\n/tmp/tmpqbi4604u.d(15):
    Error: expression expected, not `:`\n/tmp/tmpqbi4604u.d(15): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqbi4604u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t\t\
    count++;\n\t\telse if (islower(c)) \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpozjv7k_l.d(14): Error: no identifier for declarator `c`\n/tmp/tmpozjv7k_l.d(14):
    Error: expression expected, not `:`\n/tmp/tmpozjv7k_l.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpozjv7k_l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        auto it = string.find(c);\n\
    \        if(it != string::npos)\n        {\n            count++;\n           \
    \ string = string.erase(it);\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppfp7jsjz.d(14): Error: no identifier for declarator `c`\n/tmp/tmppfp7jsjz.d(14):
    Error: expression expected, not `:`\n/tmp/tmppfp7jsjz.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmppfp7jsjz.d(17): Error: found
    `:` when expecting `)`\n/tmp/tmppfp7jsjz.d(17): Error: found `:` instead of statement\n/tmp/tmppfp7jsjz.d(23):
    Error: declaration expected, not `return`\n/tmp/tmppfp7jsjz.d(24): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppfp7jsjz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        if(lower != c) \n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\n\
    This doesn't work if the string contains any non-ASCII characters.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. I tested it on Windows with Cyrillic characters and it\
    \ worked fine.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it on Windows with\
    \ Cyrillic characters and it worked fine.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ I tested it on Windows with Cyrillic characters and it worked fine.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. I tested it on Windows with Cyrillic characters and it\
    \ worked fine.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpruay2ii2.d(14): Error: no identifier for declarator `c`\n/tmp/tmpruay2ii2.d(14):
    Error: expression expected, not `:`\n/tmp/tmpruay2ii2.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmpruay2ii2.d(24): Error: declaration
    expected, not `<`\n/tmp/tmpruay2ii2.d(27): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruay2ii2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9qcy34r.d(14): Error: no identifier for declarator `char`\n/tmp/tmph9qcy34r.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmph9qcy34r.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmph9qcy34r.d(17): Error: found `return` when expecting
    `)`\n/tmp/tmph9qcy34r.d(19): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph9qcy34r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm,c++11 |>\n\
    <| c |>\nThe `count_distinct_characters` function can be simplified a little bit\
    \ by using the `std::count_if` algorithm (which also works on `std::vector`s).\
    \ `std::count_if(string.begin(), string.end(), [](char c) { return count_distinct_characters(c)\
    \ > 1; });`\n<|/ c |>\n<| c |>\nI didn't know about `std::count_if`, thanks for\
    \ pointing that out. I've edited my answer to include your suggestion.\n<|/ c\
    \ |>\n<| c |>\nI didn't know about `std::count_if`, thanks for pointing that out.\
    \ I've edited my answer to include your suggestion.\n<|/ c |>\n<| c |>\nI didn't\
    \ know about `std::count_if`, thanks for pointing that out. I've edited my answer\
    \ to include your suggestion.\n<|/ c |>\n<| c |>\nI didn't know about `std::count_if`,\
    \ thanks for pointing that out. I've edited my answer to include your suggestion.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwknoft31.d(14): Error: found `in` when expecting `;`\n/tmp/tmpwknoft31.d(20):
    Error: declaration expected, not `<`\n/tmp/tmpwknoft31.d(26): Error: unterminated
    character constant\n/tmp/tmpwknoft31.d(26): Error: unterminated character constant\n/tmp/tmpwknoft31.d(29):
    Error: unterminated character constant\n/tmp/tmpwknoft31.d(29): Error: unterminated
    character constant\n/tmp/tmpwknoft31.d(32): Error: unterminated character constant\n/tmp/tmpwknoft31.d(32):
    Error: unterminated character constant\n/tmp/tmpwknoft31.d(35): Error: unterminated
    character constant\n/tmp/tmpwknoft31.d(35): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwknoft31.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov81j4yn.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpov81j4yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\
    \t\tauto upper = toupper(c);\n\t\tif (lower != upper) \n\t\t{\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9x_lseie.d(14): Error: no identifier for declarator `c`\n/tmp/tmp9x_lseie.d(14):
    Error: expression expected, not `:`\n/tmp/tmp9x_lseie.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9x_lseie.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar\
    \ c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\t\
    if (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (std.string.toUpper(c)\
    \ == std.string.toUpper(d))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkc2eg7l.d(14): Error: no property `length` for type `string`\n/tmp/tmpbkc2eg7l.d(17):
    Error: no property `length` for type `string`\n/tmp/tmpbkc2eg7l.d(22): Error:
    undefined identifier `string` in package `std`\n/tmp/tmpbkc2eg7l.d(22): Error:
    undefined identifier `string` in package `std`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbkc2eg7l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzh54iyy.d(14): Error: no identifier for declarator `c`\n/tmp/tmppzh54iyy.d(14):
    Error: expression expected, not `:`\n/tmp/tmppzh54iyy.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppzh54iyy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            else\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   for(int j = 0; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            else\n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            else\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distin\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4iy9qpq9.d(119): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4iy9qpq9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n\
    \        if(lower != c)\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0u99pif.d(14): Error: no identifier for declarator `c`\n/tmp/tmpp0u99pif.d(14):
    Error: expression expected, not `:`\n/tmp/tmpp0u99pif.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp0u99pif.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        count += std.algorithm.distinct(c).length;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to count the number of distinct\
    \ characters, not the number of distinct letters.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to reflect this.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is the best so far. However I believe it can be improved by using\
    \ a `std::unordered_map<int, int>` instead of an `std::map<int, int>` since it\
    \ seems that you only care about the number of distinct characters, not their\
    \ frequency.\n<|/ c |>\n<| c |>\nI agree with you. I've updated my answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try it with `\"abaB\"`.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <vector>\n#include <iterator>\n#include\
    \ <unordered_map>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xkpcqip.d(14): Error: no identifier for declarator `c`\n/tmp/tmp6xkpcqip.d(14):
    Error: expression expected, not `:`\n/tmp/tmp6xkpcqip.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmp6xkpcqip.d(20): Error: declaration
    expected, not `<`\n/tmp/tmp6xkpcqip.d(23): Error: unterminated character constant\n/tmp/tmp6xkpcqip.d(26):
    Error: unterminated character constant\n/tmp/tmp6xkpcqip.d(32): Error: unterminated
    character constant\n/tmp/tmp6xkpcqip.d(35): Error: unterminated character constant\n/tmp/tmp6xkpcqip.d(49):
    Error: declaration expected, not `assert`\n/tmp/tmp6xkpcqip.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmp6xkpcqip.d(51): Error: declaration expected, not
    `assert`\n/tmp/tmp6xkpcqip.d(52): Error: declaration expected, not `assert`\n/tmp/tmp6xkpcqip.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmp6xkpcqip.d(54): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xkpcqip.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\t\
    char c = string[i];\n\t\t\n\t\tif (islower(c))\n\t\t\tcount++;\n\t\telse if (isupper(c))\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxjzqqc2z.d(15): Error: no property `length` for type `string`\n/tmp/tmpxjzqqc2z.d(19):
    Error: undefined identifier `islower`\n/tmp/tmpxjzqqc2z.d(21): Error: undefined
    identifier `isupper`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjzqqc2z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        if(isupper(c))\n\
    \            count += 2L;\n        else if(islower(c))\n            count += 2L;\n\
    \        else\n            count++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt90cqdzk.d(14): Error: no identifier for declarator `c`\n/tmp/tmpt90cqdzk.d(14):
    Error: expression expected, not `:`\n/tmp/tmpt90cqdzk.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt90cqdzk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7muo3pd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpy7muo3pd.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpy7muo3pd.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpy7muo3pd.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7muo3pd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5sgcouzy.d(14): Error: no identifier for declarator `char`\n/tmp/tmp5sgcouzy.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmp5sgcouzy.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmp5sgcouzy.d(17): Error: found `return` when expecting
    `)`\n/tmp/tmp5sgcouzy.d(19): Error: declaration expected, not `<`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5sgcouzy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla6fcyyx.d(15): Error: no identifier for declarator `char`\n/tmp/tmpla6fcyyx.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpla6fcyyx.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpla6fcyyx.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla6fcyyx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctCharacters = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        distinctCharacters += std.algorithm.distinct(c).count;\n\
    \    }\n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8qamige.d(14): Error: no property `length` for type `string`\n/tmp/tmph8qamige.d(17):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmph8qamige.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctChars = 0;\n    for(auto c : string) \n    {\n        distinctChars\
    \ += (tolower(c) - 'a');\n    }\n    return distinctChars;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThe `tolower` function will convert all characters to\
    \ lower case, so `count_distinct_characters(\"ABC\")` will return `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nYes, that's why I said \"regardless of case\"\n\
    <|/ c |>\n<| c |>\nI see, I missed that part of the question. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpputl9en_.d(14): Error: no identifier for declarator `c`\n/tmp/tmpputl9en_.d(14):
    Error: expression expected, not `:`\n/tmp/tmpputl9en_.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmpputl9en_.d(20): Error: declaration
    expected, not `<`\n/tmp/tmpputl9en_.d(26): Error: unterminated character constant\n/tmp/tmpputl9en_.d(41):
    Error: declaration expected, not `assert`\n/tmp/tmpputl9en_.d(42): Error: declaration
    expected, not `assert`\n/tmp/tmpputl9en_.d(43): Error: declaration expected, not
    `assert`\n/tmp/tmpputl9en_.d(44): Error: declaration expected, not `assert`\n/tmp/tmpputl9en_.d(45):
    Error: declaration expected, not `assert`\n/tmp/tmpputl9en_.d(46): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpputl9en_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                count++;\n                break;\n            }\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpig0a2gti.d(14): Error: no property `length` for type `string`\n/tmp/tmpig0a2gti.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpig0a2gti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += 1;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvp13bra.d(106): Error: found `unittest` when expecting `;`
    following `for` condition\n/tmp/tmpjvp13bra.d(116): Error: found `void` when expecting
    `)`\n/tmp/tmpjvp13bra.d(116): Error: found `{` when expecting `;` following statement\n/tmp/tmpjvp13bra.d(116):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvp13bra.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += count_distinct_characters(string);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp07lsk2n6.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07lsk2n6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        if(lower != upper) \n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work. `tolower` and `toupper` don't work on `char`s.\n<|/\
    \ c |>\n<| c |>\nI didn't say it wouldn't. `tolower` and `toupper` work on `char`s,\
    \ not `string`s. `string`s are `char`s.\n<|/ c |>\n<| c |>\n`tolower` and `toupper`\
    \ work on `char`s, not `string`s. `string`s are `char`s.\n<|/ c |>\n<| c |>\n\
    I know. `tolower` and `toupper` work on `char`s, not `string`s. `string`s are\
    \ `char`s.\n<|/ c |>\n<| c |>\nI know. `tolower` and `toupper` work on `char`s,\
    \ not `string`s. `string`s are `char`s.\n<|/ c |>\n<| a dscore=0 |>\nI wrote a\
    \ solution using std::unordered_map and std::unordered_set. \n<code>\n#include\
    \ <iostream>\n#include <unordered_map>\n#include <unordered_set>\n#include <string>\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpti0cxxox.d(14): Error: no identifier for declarator `c`\n/tmp/tmpti0cxxox.d(14):
    Error: expression expected, not `:`\n/tmp/tmpti0cxxox.d(14): Error: found `string`
    when expecting `;` following `for` condition\n/tmp/tmpti0cxxox.d(25): Error: declaration
    expected, not `<`\n/tmp/tmpti0cxxox.d(28): Error: unterminated character constant\n/tmp/tmpti0cxxox.d(28):
    Error: unterminated character constant\n/tmp/tmpti0cxxox.d(31): Error: unterminated
    character constant\n/tmp/tmpti0cxxox.d(31): Error: unterminated character constant\n/tmp/tmpti0cxxox.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmpti0cxxox.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmpti0cxxox.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmpti0cxxox.d(56): Error: declaration expected, not `assert`\n/tmp/tmpti0cxxox.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpti0cxxox.d(58): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpti0cxxox.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = i+1; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                count++;\n                break;\n            }\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl22cd1tf.d(14): Error: no property `length` for type `string`\n/tmp/tmpl22cd1tf.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpl22cd1tf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7muo3pd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpy7muo3pd.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpy7muo3pd.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpy7muo3pd.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7muo3pd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3_3qj2f.d(14): Error: no identifier for declarator `char`\n/tmp/tmpc3_3qj2f.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpc3_3qj2f.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpc3_3qj2f.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3_3qj2f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long distinctChars = 0;\n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        char c = string[i];\n        distinctChars += std.algorithm.distinct(c).length;\n\
    \    }\n    return distinctChars;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpccetazqx.d(14): Error: no property `length` for type `string`\n/tmp/tmpccetazqx.d(17):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpccetazqx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpey_iulj_.d(14): Error: no property `length` for type `string`\n/tmp/tmpey_iulj_.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpey_iulj_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isAlpha(c))\n        {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4toadlgv.d(14): Error: no property `length` for type `string`\n/tmp/tmp4toadlgv.d(17):
    Error: undefined identifier `isAlpha` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4toadlgv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpvtnvgw.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpvtnvgw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char,string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc7flecdv.d(14): Error: no identifier for declarator `char`\n/tmp/tmpc7flecdv.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpc7flecdv.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpc7flecdv.d(18): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7flecdv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<|\
    \ a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppqhv0owa.d(14): Error: no identifier for declarator `char`\n/tmp/tmppqhv0owa.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmppqhv0owa.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmppqhv0owa.d(18): Error: found `return` when expecting
    `)`\n/tmp/tmppqhv0owa.d(20): Error: declaration expected, not `<`\n/tmp/tmppqhv0owa.d(32):
    Error: declaration expected, not `assert`\n/tmp/tmppqhv0owa.d(33): Error: declaration
    expected, not `assert`\n/tmp/tmppqhv0owa.d(34): Error: declaration expected, not
    `assert`\n/tmp/tmppqhv0owa.d(35): Error: declaration expected, not `assert`\n/tmp/tmppqhv0owa.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmppqhv0owa.d(37): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqhv0owa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.algorithm.contains(string.chars, c))\n\
    \        {\n            count++;\n            string.chars[c] = true;\n      \
    \  }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxyqtm3q.d(14): Error: no property `length` for type `string`\n/tmp/tmpoxyqtm3q.d(17):
    Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpoxyqtm3q.d(20):
    Error: no property `chars` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpoxyqtm3q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kbgcp0_.d(15): Error: no identifier for declarator `char`\n/tmp/tmp0kbgcp0_.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmp0kbgcp0_.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmp0kbgcp0_.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kbgcp0_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) \n    {\n        count +=\
    \ 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla6fcyyx.d(15): Error: no identifier for declarator `char`\n/tmp/tmpla6fcyyx.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpla6fcyyx.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpla6fcyyx.d(20): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla6fcyyx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        count += sub.length();\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptzlqx524.d(14): Error: no property `length` for type `string`\n/tmp/tmptzlqx524.d(16):
    Error: `string` is used as a type\n/tmp/tmptzlqx524.d(16): Error: no property
    `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzlqx524.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += std.algorithm.distinct(c).length;\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfg41g0e1.d(14): Error: no identifier for declarator `c`\n/tmp/tmpfg41g0e1.d(14):
    Error: expression expected, not `:`\n/tmp/tmpfg41g0e1.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfg41g0e1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8m4ak8k_.d(14): Error: no property `length` for type `string`\n/tmp/tmp8m4ak8k_.d(16):
    Error: undefined identifier `algorithm` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8m4ak8k_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t\t\
    count++;\n\t\telse if (islower(c)) \n\t\t\tcount++;\n\t\telse if (isdigit(c))\
    \ \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplfmcsemo.d(14): Error: no identifier for declarator `c`\n/tmp/tmplfmcsemo.d(14):
    Error: expression expected, not `:`\n/tmp/tmplfmcsemo.d(14): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplfmcsemo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = i + 1; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c == d)\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=string,c++,algorithm,data-structures |>\n<| c\
    \ |>\nThis is not the most efficient solution. `std::unordered_map` will do better\
    \ than O(n^2) complexity in average case. Also the complexity is O(n^2) in worst\
    \ case. `std::unordered_map` will do better than O(n) complexity in average case\
    \ and worst case O(n) in worst case.\n<|/ c |>\n<| c |>\nI agree with you, unordered_map\
    \ will do better than O(n^2) complexity in average case. But in worst case O(n^2)\
    \ is still better than O(n) complexity. Because in worst case we still need to\
    \ do O(n^2) comparisons. And unordered_map will do better than O(n) complexity\
    \ in average case and worst case O(n) in worst case.\n<|/ c |>\n<| c |>\nThe complexity\
    \ is O(n^2) in worst case. `std::unordered_map` will do better than O(n) complexity\
    \ in average case and worst case O(n) in worst case.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, unordered_map will do better than O(n^2) complexity in average case.\
    \ But in worst case O(n^2) is still better than O(n) complexity. Because in worst\
    \ case we still need to do O(n^2) comparisons. And unordered_map will do better\
    \ than O(n) complexity in average case and worst case O(n) in worst case.\n<|/\
    \ c |>\n<| c |>\nThe complexity is O(n^2) in worst case. `std::unordered_map`\
    \ will do better than O(n) complexity in average case and worst case O(n) in worst\
    \ case.\n<|/ c |>\n<| a dscore=2 |>\nThe most efficient solution is to use std::unordered_map\
    \ with custom hash and equality functions. \n<code>\n#include <unordered_map>\n\
    #include <string>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdjazp9va.d(28): Error: declaration expected, not `<`\n/tmp/tmpdjazp9va.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpdjazp9va.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpdjazp9va.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpdjazp9va.d(57): Error: declaration expected, not `assert`\n/tmp/tmpdjazp9va.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpdjazp9va.d(59): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjazp9va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph4_u9i5.d(14): Error: no identifier for declarator `char`\n/tmp/tmpph4_u9i5.d(14):
    Error: no identifier for declarator `string`\n/tmp/tmpph4_u9i5.d(14): Error: found
    `)` when expecting `;`\n/tmp/tmpph4_u9i5.d(17): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph4_u9i5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    for (auto c : string) \n    {\n        count +=\
    \ count_distinct_characters(c);\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxotzxd48.d(15): Error: no identifier for declarator `c`\n/tmp/tmpxotzxd48.d(15):
    Error: expression expected, not `:`\n/tmp/tmpxotzxd48.d(15): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxotzxd48.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = i; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            else\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   for(int j = i; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            else\n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        for(int j = i; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            if(c != d)\n        \
    \    {\n                break;\n            }\n            else\n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_character\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcruzejkq.d(119): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcruzejkq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char, string) {\n        char c = toupper(c);\n\
    \        \n        if (_charToLower(c) == _charToLower(c)) {\n            count++;\n\
    \        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjdegvix7.d(15): Error: no identifier for declarator `char`\n/tmp/tmpjdegvix7.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpjdegvix7.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpjdegvix7.d(23): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdegvix7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4_w8qzb.d(14): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4_w8qzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length();\
    \ j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count\
    \ += sub2.length();\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7xb9jgf.d(14): Error: no property `length` for type `string`\n/tmp/tmpi7xb9jgf.d(16):
    Error: `string` is used as a type\n/tmp/tmpi7xb9jgf.d(16): Error: no property
    `substr` for type `string`\n/tmp/tmpi7xb9jgf.d(19): Error: `string` is used as
    a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7xb9jgf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length();\
    \ j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count\
    \ += sub2.length();\n        }\n    }\n    return count;\n}\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7xb9jgf.d(14): Error: no property `length` for type `string`\n/tmp/tmpi7xb9jgf.d(16):
    Error: `string` is used as a type\n/tmp/tmpi7xb9jgf.d(16): Error: no property
    `substr` for type `string`\n/tmp/tmpi7xb9jgf.d(19): Error: `string` is used as
    a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7xb9jgf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isAlpha(c))\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnbdm82aa.d(14): Error: no property `length` for type `string`\n/tmp/tmpnbdm82aa.d(17):
    Error: undefined identifier `isAlpha` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnbdm82aa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n \
    \   }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqt2oam0b.d(15): Error: no identifier for declarator `char`\n/tmp/tmpqt2oam0b.d(15):
    Error: no identifier for declarator `string`\n/tmp/tmpqt2oam0b.d(15): Error: found
    `)` when expecting `;`\n/tmp/tmpqt2oam0b.d(19): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqt2oam0b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        foreach(char\
    \ c2 in string)\n        {\n            if(c == c2)\n            {\n         \
    \       count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw9wrows5.d(14): Error: found `in` when expecting `;`\n/tmp/tmpw9wrows5.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpw9wrows5.d", "-I/tmp"]\n'''
  stdout: b''
