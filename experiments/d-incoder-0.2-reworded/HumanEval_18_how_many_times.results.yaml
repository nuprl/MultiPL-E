language: d
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppysrpyf3.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppysrpyf3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string.at(i) == substring.at(0))\n\
    \        {\n            count++;\n        }\n        else if(string.at(i) == substring.at(1))\n\
    \        {\n            count += 2;\n        }\n        else if(string.at(i) ==\
    \ substring.at(2))\n        {\n            count += 3;\n        }\n    }\n   \
    \ return count;\n}\n/*\n Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"\
    a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool ignore_case) \n{\n    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(ignore_case)\n        {\n            if(string.at(i) == substring.at(0))\n\
    \            {\n                count++;\n            }\n            else if(string.at(i)\
    \ == substring.at(1))\n            {\n                count += 2;\n          \
    \  }\n            else if(string.at(i) == substring.at(2))\n            {\n  \
    \              count += 3;\n            }\n        }\n        else\n        {\n\
    \            if(string.at(i) == substring.at(0))\n            {\n            \
    \    count++;\n            }\n            else if(string.at(i) == substring.at(1))\n\
    \            {\n                count += 2;\n            }\n            else if(string.at(i)\
    \ == substring.at(2))\n            {\n                count += 3;\n          \
    \  }\n        }\n    }\n    return count;\n}\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring, bool ignore_case, bool ignore_whitespace)\
    \ \n{\n    long count = 0;\n    long len = string.length();\n    long sublen =\
    \ substring.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n       \
    \ if(ignore_whitespace)\n        {\n            if(string.at(i) == substring.at(0))\n\
    \            {\n                count++;\n            }\n            else if(string.at(i)\
    \ == substring.at(1))\n            {\n                count += \nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpixtjuy1r.d(114): Error: expression expected, not `unittest`\n/tmp/tmpixtjuy1r.d(115):
    Error: found `{` when expecting `;` following statement\n/tmp/tmpixtjuy1r.d(123):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpixtjuy1r.d(123):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpixtjuy1r.d(123):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixtjuy1r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2gl0ldy.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpo2gl0ldy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzd76pp2s.d(102): Error: basic type expected, not `unittest`\n/tmp/tmpzd76pp2s.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzd76pp2s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqkgnfok.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsqkgnfok.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string.substr(i, sublen)\
    \ == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `how_many_times(\"aaaa\", \"aa\")`.\n<|/ c |>\n<| c |>\nIt\
    \ works. I tested it before posting. I will edit my post to include a test case.\n\
    <|/ c |>\n<| c |>\nOh, I see what you mean. Yes, it does work. Sorry about that.\
    \ I was thinking about it backwards. I edited my post to fix it.\n<|/ c |>\n<|\
    \ c |>\nI edited my post to fix the bug that I pointed out in the comments. I\
    \ tested it and it works now.\n<|/ c |>\n<| c |>\nI edited my post to fix the\
    \ bug that I pointed out in the comments. I tested it and it works now.\n<|/ c\
    \ |>\n<| a tags=string,c++,algorithm |>\nThis can be done in O(n) time complexity\
    \ by using a hash table. \n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <unordered_map>\nusing namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzgs96x_g.d(28): Error: declaration expected, not `<`\n/tmp/tmpzgs96x_g.d(31):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzgs96x_g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        size_t subpos = 0;\n        \n       \
    \ while (subpos < sublen) {\n            if (string[pos] == substring[subpos])\
    \ {\n                subpos++;\n            } else {\n                break;\n\
    \            }\n        }\n        \n        if (subpos == sublen) {\n       \
    \     count++;\n            pos += sublen;\n        } else {\n            pos\
    \ += sublen;\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, long start) \n{\n   \
    \ long count = 0;\n    size_t pos = start;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    \n    while (pos < len) {\n    \
    \    size_t subpos = 0;\n        \n        while (subpos < sublen) {\n       \
    \     if (string[pos] == substring[subpos]) {\n                subpos++;\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ \n        if (subpos == sublen) {\n            count++;\n            pos +=\
    \ sublen;\n        } else {\n            pos += sublen;\n        }\n    }\n  \
    \  \n    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    size_t pos = start;\n  \
    \  size_t len = string.length();\n    size_t sublen = substring.length();\n  \
    \  \n    while (pos < len) {\n        size_t subpos = 0;\n        \n        while\
    \ (subpos < sublen) {\n            if (string[pos] == substring[subpos]) {\n \
    \               subpos++;\n            } else {\n                break;\n    \
    \        }\n        }\n        \n        if (subpos == sublen) {\n           \
    \ count++;\n            pos += sublen;\n        } else {\n            pos += sublen;\n\
    \        }\n    }\n    \n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvtrgd1zh.d(117): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtrgd1zh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI believe this solution will fail for `how_many_times(\"aaaa\"\
    , \"aa\")` because it will return `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I missed that case. Thanks for pointing out. Fixed now.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16_l64pu.d(25): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16_l64pu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        if (string.compare(pos, sublen, substring)\
    \ == 0) {\n            count++;\n            pos += sublen;\n        }\n     \
    \   else {\n            pos = string.find(substring, pos);\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbymd0wba.d(17): Error: no property `length` for type `string`\n/tmp/tmpbymd0wba.d(18):
    Error: no property `length` for type `string`\n/tmp/tmpbymd0wba.d(21): Error:
    no property `compare` for type `string`\n/tmp/tmpbymd0wba.d(26): Error: no property
    `find` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbymd0wba.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n            count++;\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n            count++;\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n            count++;\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n            count++;\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmt3pb0uc.d(94): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmt3pb0uc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi6suuwf.d(102): Error: basic type expected, not `unittest`\n/tmp/tmpwi6suuwf.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwi6suuwf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long length = string.length();\n \
    \   \n    while(start < length) \n    {\n        end = string.find(substring,\
    \ start);\n        if(end == string.length()) \n        {\n            count++;\n\
    \            start = end + 1;\n        }\n        else \n        {\n         \
    \   count++;\n            start = end + 1;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_qb0p2sg.d(18): Error: no property `length` for type `string`\n/tmp/tmp_qb0p2sg.d(22):
    Error: no property `find` for type `string`\n/tmp/tmp_qb0p2sg.d(23): Error: no
    property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_qb0p2sg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppysvlt90.d(23): Error: declaration expected, not `<`\n/tmp/tmppysvlt90.d(31):
    Error: declaration expected, not `assert`\n/tmp/tmppysvlt90.d(32): Error: declaration
    expected, not `assert`\n/tmp/tmppysvlt90.d(33): Error: declaration expected, not
    `assert`\n/tmp/tmppysvlt90.d(34): Error: declaration expected, not `assert`\n/tmp/tmppysvlt90.d(35):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppysvlt90.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a substring that is a prefix of the\
    \ original string. For example, if `string = \"abba\"` and `substring = \"a\"\
    `, then `how_many_times(string, substring)` will return `2`, when it should be\
    \ `1`.\n<|/ c |>\n<| c |>\n: I didn't notice that case. Thanks for pointing it\
    \ out. I've updated my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf00h11_d.d(25): Error: declaration expected, not `<`\n/tmp/tmpf00h11_d.d(28):
    Error: unterminated character constant\n/tmp/tmpf00h11_d.d(31): Error: unterminated
    character constant\n/tmp/tmpf00h11_d.d(31): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf00h11_d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j < substring.length();\
    \ j++) {\n            if(string[i] == substring[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++) {\n        for(int\
    \ j = 0; j < substring.length(); j++) {\n            if(string[i] == substring[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(string[i]\
    \ == substring[j]) {\n                count++;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i += step) {\n        for(int j = 0; j < substring.length(); j++) {\n\
    \            if(string[i] == substring[j]) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr1954dxk.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr1954dxk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n\tlong\
    \ count = 0;\n\tfor (int i = start; i < string.length(); i++) {\n\t\tif (string.compare(i,\
    \ substring.length(), substring) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i++)\
    \ {\n\t\tif (string.compare(i, substring.length(), substring) == 0) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.compare(i, substring.length(), substring)\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end, int\
    \ step, string case_sensitive) \n{\n\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpchifs21t.d(96): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchifs21t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++,string-matching\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if you try it on \"aaa\" and \"\
    aa\"\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns 3 for \"aaa\"\
    \ and \"aa\".\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try\
    \ it yourself.\n<|/ c |>\n<| a dscore=5 |>\nThe best way is to use Knuth-Morris-Pratt\
    \ algorithm. \n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xsd71oc.d(23): Error: declaration expected, not `<`\n/tmp/tmp2xsd71oc.d(26):
    Error: unterminated character constant\n/tmp/tmp2xsd71oc.d(32): Error: unterminated
    character constant\n/tmp/tmp2xsd71oc.d(50): Error: declaration expected, not `assert`\n/tmp/tmp2xsd71oc.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmp2xsd71oc.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp2xsd71oc.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmp2xsd71oc.d(54): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2xsd71oc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<|\
    \ c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was\
    \ about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n\
    <|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe\
    \ question was about C++, not C#.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphtr_rvko.d(23): Error: declaration expected, not `<`\n/tmp/tmphtr_rvko.d(46):
    Error: declaration expected, not `assert`\n/tmp/tmphtr_rvko.d(47): Error: declaration
    expected, not `assert`\n/tmp/tmphtr_rvko.d(48): Error: declaration expected, not
    `assert`\n/tmp/tmphtr_rvko.d(49): Error: declaration expected, not `assert`\n/tmp/tmphtr_rvko.d(50):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtr_rvko.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string.charAt(i) == substring.charAt(0))\n\
    \        {\n            count++;\n            \n            for(int j = 1; j <\
    \ sublen; j++)\n            {\n                if(string.charAt(i) == substring.charAt(j))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    \n    for(int i = start; i < len; i++)\n    {\n        if(string.charAt(i)\
    \ == substring.charAt(0))\n        {\n            count++;\n            \n   \
    \         for(int j = 1; j < sublen; j++)\n            {\n                if(string.charAt(i)\
    \ == substring.charAt(j))\n                {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.charAt(i) == substring.charAt(0))\n        {\n\
    \            count++;\n            \n            for(int j = 1; j < sublen; j++)\n\
    \            {\n                if(string.charAt(i) == substring.charAt(j))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3k6xkqg3.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k6xkqg3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string.charAt(i) == substring.charAt(j)) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tfor (int j = 0; j < substring.length(); j++) {\n\t\t\tif (string.charAt(i)\
    \ == substring.charAt(j)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3) \n{\n\tlong count = 0;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string.charAt(i) == substring.charAt(j)) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3, string substring4) \n{\n\tlong count =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string.charAt(i) == substring.charAt(j)) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8kxdgdb2.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8kxdgdb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string. For example, how_many_times(\"aaaa\", \"aa\") returns 3 instead of 2.\n\
    <|/ c |>\n<| c |>\nYes, I forgot to add that case. Thanks for pointing it out.\
    \ I've edited my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyrpjvl8r.d(25): Error: declaration expected, not `<`\n/tmp/tmpyrpjvl8r.d(28):
    Error: unterminated character constant\n/tmp/tmpyrpjvl8r.d(31): Error: unterminated
    character constant\n/tmp/tmpyrpjvl8r.d(39): Error: declaration expected, not `assert`\n/tmp/tmpyrpjvl8r.d(40):
    Error: declaration expected, not `assert`\n/tmp/tmpyrpjvl8r.d(41): Error: declaration
    expected, not `assert`\n/tmp/tmpyrpjvl8r.d(42): Error: declaration expected, not
    `assert`\n/tmp/tmpyrpjvl8r.d(43): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpyrpjvl8r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    \n    for(long\
    \ i = 0; i < string.length(); i++)\n    {\n        end = string.find(substring,\
    \ i);\n        if(end == string.length())\n        {\n            count++;\n \
    \           i = string.length();\n        }\n        else\n        {\n       \
    \     len = end - i;\n            if(len > 0)\n            {\n               \
    \ count += len;\n                start = i;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe2kju7au.d(20): Error: no property `length` for type `string`\n/tmp/tmpe2kju7au.d(22):
    Error: no property `find` for type `string`\n/tmp/tmpe2kju7au.d(23): Error: no
    property `length` for type `string`\n/tmp/tmpe2kju7au.d(26): Error: no property
    `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2kju7au.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string.charAt(i) == substring.charAt(0))\n\
    \        {\n            count++;\n            \n            for(int j = 1; j <\
    \ sublen; j++)\n            {\n                if(string.charAt(i) == substring.charAt(j))\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, bool case_sensitive) \n{\n\
    \    long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        if(case_sensitive)\n \
    \       {\n            if(string.charAt(i) == substring.charAt(0))\n         \
    \   {\n                count++;\n                \n                for(int j =\
    \ 1; j < sublen; j++)\n                {\n                    if(string.charAt(i)\
    \ == substring.charAt(j))\n                    {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        else\n\
    \        {\n            if(string.charAt(i) == substring.charAt(0))\n        \
    \    {\n                count++;\n                \n                for(int j\
    \ = 1; j < sublen; j++)\n                {\n                    if(string.charAt(i)\
    \ == substring.charAt(j))\n                    {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   \n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool case_sensitive_ignorecase) \n{\n    long count = 0;\n\
    \    long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(case_sensitive_ignorecase)\n\
    \        {\n            if(string.charAt(i) == substring.charAt(0))\n        \
    \    {\n                count++;\n                \n                for(int j\
    \ = 1; j < sublen; j++)\n                {\n                    if(string.charAt(i)\
    \ == \nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp840lcr6w.d(116): Error: expression expected, not `unittest`\n/tmp/tmp840lcr6w.d(117):
    Error: found `{` when expecting `)`\n/tmp/tmp840lcr6w.d(125): Error: found `End
    of File` when expecting `}` following compound statement\n/tmp/tmp840lcr6w.d(125):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp840lcr6w.d(125):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp840lcr6w.d(125):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp840lcr6w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\n#include <cstring>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp1ntapf.d(23): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsp1ntapf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyq8jijok.d(25): Error: declaration expected, not `<`\n/tmp/tmpyq8jijok.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmpyq8jijok.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmpyq8jijok.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmpyq8jijok.d(39): Error: declaration expected, not `assert`\n/tmp/tmpyq8jijok.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyq8jijok.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis is not the best solution. `string.compare(i, substring.length(),\
    \ substring, 0, substring.length())` will do an extra comparison for each character\
    \ in the substring and will also do an extra comparison for each character in\
    \ the original string. `string.find(substring, i) != string::npos` will do an\
    \ extra comparison for each character in the substring and will also do an extra\
    \ comparison for each character in the original string. `string.find(substring,\
    \ i) != string::npos` will do an extra comparison for each character in the substring\
    \ and will also do an extra comparison for each character in the original string.\
    \ `string.find(substring, i) != string::npos` will do an extra comparison for\
    \ each character in the substring and will also do an extra comparison for each\
    \ character in the original string. `string.find(substring, i) != string::npos`\
    \ will do an extra comparison for each character in the substring and will also\
    \ do an extra comparison for each character in the original string. `string.find(substring,\
    \ i) != string::npos` will do an extra comparison for each character in the substring\
    \ and will also do an extra comparison for each character in the original string.\
    \ `string.find(substring, i) != string::npos` will do an extra comparison for\
    \ each character in the substring and will also do an extra comparison for each\
    \ character in the original string. `string.find(substring, i) != string::npos`\
    \ will do an extra comparison for each character in the substring and will also\
    \ do an extra comparison for each character in the original string. `string.find(substring,\
    \ i) != string::npos` will do an extra comparison for each character in the substring\
    \ and will also do an extra comparison for each character in the original string.\
    \ `string.find(substring, i) != string::npos` will do an extra comparison for\
    \ each character in the substring and will also do an extra comparison for each\
    \ character in the original string. `string.find(substring, i) != string::npos`\
    \ will do an extra comparison for each character in the substring and will also\
    \ do an extra comparison for each character in the original string. `string.find(substring,\
    \ i) != string::npos` will do an extra comparison for each character in the substring\
    \ and will also do an extra comparison for each character in the original string.\
    \ `string.find(substring, i) != string::npos` will do an extra comparison for\
    \ each character \nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpycp1h3cx.d(25): Error: declaration expected, not `<`\n/tmp/tmpycp1h3cx.d(33):
    Error: declaration expected, not `assert`\n/tmp/tmpycp1h3cx.d(34): Error: declaration
    expected, not `assert`\n/tmp/tmpycp1h3cx.d(35): Error: declaration expected, not
    `assert`\n/tmp/tmpycp1h3cx.d(36): Error: declaration expected, not `assert`\n/tmp/tmpycp1h3cx.d(37):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycp1h3cx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    \n    while(end\
    \ < string.length)\n    {\n        len = string.length() - end;\n        if(string.compare(end,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n            end = string.length();\n        }\n        else\n\
    \        {\n            end = end + 1;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9todzu8q.d(22): Error: no property `length` for type `string`\n/tmp/tmp9todzu8q.d(23):
    Error: no property `compare` for type `string`\n/tmp/tmp9todzu8q.d(26): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9todzu8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 1; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j])\n                {\n           \
    \         break;\n                }\n            }\n            count += j - 1;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nI like your solution. Thanks for sharing it.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the substring has repeated characters.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it.\n<|/ c |>\n<| c |>\nIt doesn't work for `how_many_times(\"\
    aaa\", \"aa\")` which returns `3` instead of `2`.\n<|/ c |>\n<| a tags=string,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3k3tzr0o.d(35): Error: declaration expected, not `<`\n/tmp/tmp3k3tzr0o.d(41):
    Error: unterminated character constant\n/tmp/tmp3k3tzr0o.d(50): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k3tzr0o.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    \n    for(long i = 0; i < string.length();\
    \ i++) {\n        end = string.find(substring, start);\n        if(end == string.length())\
    \ {\n            count++;\n            start = i + 1;\n        }\n        else\
    \ {\n            count++;\n            start = end;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start) \n{\n    long count = 0;\n    long end = 0;\n    \n    for(long\
    \ i = 0; i < string.length(); i++) {\n        end = string.find(substring, start);\n\
    \        if(end == string.length()) {\n            count++;\n            start\
    \ = i + 1;\n        }\n        else {\n            count++;\n            start\
    \ = end;\n        }\n    }\n    return count;\n}\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring, long start, long end) \n{\n\
    \    long count = 0;\n    \n    for(long i = start; i < end; i++) {\n        end\
    \ = string.find(substring, i);\n        if(end == string.length()) {\n       \
    \     count++;\n            start = i + 1;\n        }\n        else {\n      \
    \      count++;\n            start = end;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long offset) \n{\n    long count = 0;\n    \n    for(long\
    \ i = start; i < end; i++) {\n        end = string.find(substring, i);\n     \
    \   if(end == string.length()) {\n            count++;\n            start = i\
    \ + 1;\n        }\n        else {\n            count++;\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn1w6l3y.d(109): Error: found `unittest` instead of statement\n/tmp/tmpmn1w6l3y.d(118):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmn1w6l3y.d(118):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn1w6l3y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have a string like \"aba\" and a substring like\
    \ \"ab\"\n<|/ c |>\n<| c |>\nI added a version that works with overlapping cases.\
    \ Thanks for the heads up.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ string like \"aba\" and a substring like \"ab\"\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with overlapping cases. Thanks for the heads up.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"aba\" and a substring\
    \ like \"ab\"\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxg1a6ztb.d(25): Error: declaration expected, not `<`\n/tmp/tmpxg1a6ztb.d(28):
    Error: unterminated character constant\n/tmp/tmpxg1a6ztb.d(34): Error: unterminated
    character constant\n/tmp/tmpxg1a6ztb.d(40): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg1a6ztb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        size_t subpos = 0;\n        while (subpos\
    \ < sublen) {\n            if (string[pos] == substring[subpos]) {\n         \
    \       subpos++;\n            }\n            else {\n                break;\n\
    \            }\n        }\n        \n        if (subpos == sublen) {\n       \
    \     count++;\n            pos += sublen;\n        }\n        else {\n      \
    \      pos += subpos;\n        }\n    }\n    \n    return count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, bool case_insensitive)\
    \ \n{\n    long count = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n\
    \    size_t sublen = substring.length();\n    \n    while (pos < len) {\n    \
    \    size_t subpos = 0;\n        while (subpos < sublen) {\n            if (case_insensitive\
    \ ? string[pos] == substring[subpos] : tolower(string[pos]) == tolower(substring[subpos]))\
    \ {\n                subpos++;\n            }\n            else {\n          \
    \      break;\n            }\n        }\n        \n        if (subpos == sublen)\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ {\n            pos += subpos;\n        }\n    }\n    \n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_insensitive, bool ignore_case) \n{\n    long count = 0;\n    size_t\
    \ pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        size_t subpos = 0;\n        while (subpos\
    \ < sublen) {\n            if (ignore_case ? string[pos] == substring[subpos]\
    \ : tolower(string[pos]) == tolower(substring[subpos])) {\n                subpos++;\n\
    \            }\n            else {\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbrltmq6.d(105): Error: found `unittest` instead of statement\n/tmp/tmplbrltmq6.d(114):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplbrltmq6.d(114):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplbrltmq6.d(114):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbrltmq6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jg29md6.d(16): Error: no property `length` for type `string`\n/tmp/tmp2jg29md6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2jg29md6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    a\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0)\n    0L\n \
    \   >>> how_many_times(\"aaa\", \"a\", 0)\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\", 0)\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0, 2)\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\", 0, 2)\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\", 0, 2)\n    3L\n    \n*/\nlong how_many_times(string string, string\
    \ substring, int start, int end, int step) \n{\n    long count = 0;\n    for(int\
    \ i = start; i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0, 2,\
    \ 1)\n    0L\n    >>> how_many_times(\"aaa\", \"a\", 0, 2, 1)\n    3L\n    >>>\
    \ how_many_times(\"aaaa\", \"aa\", 0, 2, 1)\n    3L\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph5hn302q.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph5hn302q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `how_many_times(\"aaaa\", \"aa\")` returns `3L` instead of `2L`.\n\
    <|/ c |>\n<| c |>\nYeah, I missed that case. Thanks for pointing it out. I've\
    \ updated the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int howManyTimes(String\
    \ s, String sub) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(s.substring(i, i + sub.length()).equals(sub)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java |>\n\
    <| a dscore=0 |>\n<code>\npublic int howManyTimes(String s, String sub) {\n  \
    \  int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.substring(i,\
    \ i + sub.length()).equals(sub)) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n</code>\n<|/ a tags=string,java |>\n<| a dscore=0 |>\n<code>\n\
    public int howManyTimes(String s, String sub) {\n    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s.substring(i, i + sub.length()).equals(sub))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=string,java |>\n<| a dscore=0 |>\n<code>\npublic int howManyTimes(String\
    \ s, String sub) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(s.substring(i, i + sub.length()).equals(sub)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java |>\n\
    <| a tags=string,java |>\n<code>\npublic int howManyTimes(String s, String sub)\
    \ {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.substring(i,\
    \ i + sub.length()).equals(sub)) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int howManyTimes(String s, String sub) {\n    int count = 0;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(s.substring(i, i + sub.length()).equals(sub))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0is1jsew.d(25): Error: declaration expected, not `<`\n/tmp/tmp0is1jsew.d(28):
    Error: unterminated character constant\n/tmp/tmp0is1jsew.d(31): Error: unterminated
    character constant\n/tmp/tmp0is1jsew.d(37): Error: declaration expected, not `for`\n/tmp/tmp0is1jsew.d(37):
    Error: no identifier for declarator `i`\n/tmp/tmp0is1jsew.d(37): Error: declaration
    expected, not `<`\n/tmp/tmp0is1jsew.d(37): Error: no identifier for declarator
    `i`\n/tmp/tmp0is1jsew.d(37): Error: declaration expected, not `++`\n/tmp/tmp0is1jsew.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0is1jsew.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `how_many_times(\"aaaa\", \"aa\")`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it with `how_many_times(\"aaaa\", \"aa\")`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `how_many_times(\"aaaa\", \"aa\")`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `how_many_times(\"aaaa\", \"aa\")`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `how_many_times(\"aaaa\", \"aa\"\
    )`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\n \
    \   assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwfd4d46k.d(25): Error: declaration expected, not `<`\n/tmp/tmpwfd4d46k.d(28):
    Error: unterminated character constant\n/tmp/tmpwfd4d46k.d(34): Error: unterminated
    character constant\n/tmp/tmpwfd4d46k.d(40): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfd4d46k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == substring[0])\
    \ \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length(); j++)\n\t\t\t{\n\t\t\t\
    \tif (string[i + j] != substring[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_2wsvmo8.d(16): Error: no property `length` for type `string`\n/tmp/tmp_2wsvmo8.d(20):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_2wsvmo8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(long i = 0; i < len; i++)\n    {\n        for(long j = 0; j < sublen;\
    \ j++)\n        {\n            if(string[i] == substring[j])\n            {\n\
    \                count++;\n                break;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzx_8efcq.d(16): Error: no property `length` for type `string`\n/tmp/tmpzx_8efcq.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzx_8efcq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0; j < substring.length();\
    \ j++)\n\t\t{\n\t\t\tif (string.charAt(i) == substring.charAt(j))\n\t\t\t{\n\t\
    \t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9iu0u1vr.d(16): Error: no property `length` for type `string`\n/tmp/tmp9iu0u1vr.d(18):
    Error: no property `length` for type `string`\n/tmp/tmp9iu0u1vr.d(20): Error:
    no property `charAt` for type `string`\n/tmp/tmp9iu0u1vr.d(20): Error: no property
    `charAt` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9iu0u1vr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code doesn't work if you have a string with multiple occurrences\
    \ of the substring.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it out and let\
    \ me know if it doesn't work for you.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me because I tested it on \"aaaaaaa\" and \"aaa\". Your code returns \"3\" instead\
    \ of \"2\".\n<|/ c |>\n<| c |>\nI tested it on \"aaaaaaa\" and \"aaa\" as well.\
    \ It returns \"3\" as expected.\n<|/ c |>\n<| c |>\nI tested it on \"aaaaaaa\"\
    \ and \"aaa\" as well. It returns \"3\" as expected. Are you sure you tested it\
    \ correctly?\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiit5_xol.d(25): Error: declaration expected, not `<`\n/tmp/tmpiit5_xol.d(28):
    Error: unterminated character constant\n/tmp/tmpiit5_xol.d(31): Error: unterminated
    character constant\n/tmp/tmpiit5_xol.d(34): Error: unterminated character constant\n/tmp/tmpiit5_xol.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpiit5_xol.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpiit5_xol.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpiit5_xol.d(54): Error: declaration expected, not `assert`\n/tmp/tmpiit5_xol.d(55):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiit5_xol.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi6suuwf.d(102): Error: basic type expected, not `unittest`\n/tmp/tmpwi6suuwf.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwi6suuwf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()).equals(substring))\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work for overlapping substrings. For example,\
    \ `how_many_times(\"ab\", \"ab\")` returns `1`, but should be `2`.\n<|/ c |>\n\
    <| c |>\n: Yes, I noticed that and fixed it. Thanks!\n<|/ c |>\n<| c |>\nI fixed\
    \ it by adding an additional loop to check whether the substring was found multiple\
    \ times in the original string. Thanks for your help!\n<|/ c |>\n<| c |>\n: Glad\
    \ I could help. I added a second solution that should work for overlapping substrings.\n\
    <|/ c |>\n<| a tags=string,algorithm,c++ |>\nHere's a solution that uses std::count_if:\n\
    <code>\n#include <algorithm>\n#include <iostream>\n#include <string>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_o4jp20o.d(25): Error: declaration expected, not `<`\n/tmp/tmp_o4jp20o.d(28):
    Error: unterminated character constant\n/tmp/tmp_o4jp20o.d(40): Error: unterminated
    character constant\n/tmp/tmp_o4jp20o.d(49): Error: declaration expected, not `assert`\n/tmp/tmp_o4jp20o.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmp_o4jp20o.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmp_o4jp20o.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmp_o4jp20o.d(53): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_o4jp20o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a substring that appears more than\
    \ once.\n<|/ c |>\n<| c |>\nI added a version that works with repeated substrings.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a substring that appears more\
    \ than once.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a substring that\
    \ appears more than once.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp90u8vsbi.d(25): Error: declaration expected, not `<`\n/tmp/tmp90u8vsbi.d(28):
    Error: unterminated character constant\n/tmp/tmp90u8vsbi.d(34): Error: unterminated
    character constant\n/tmp/tmp90u8vsbi.d(37): Error: unterminated character constant\n/tmp/tmp90u8vsbi.d(45):
    Error: declaration expected, not `assert`\n/tmp/tmp90u8vsbi.d(46): Error: declaration
    expected, not `assert`\n/tmp/tmp90u8vsbi.d(47): Error: declaration expected, not
    `assert`\n/tmp/tmp90u8vsbi.d(48): Error: declaration expected, not `assert`\n/tmp/tmp90u8vsbi.d(49):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90u8vsbi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < sublen; j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3czblnrw.d(16): Error: no property `length` for type `string`\n/tmp/tmp3czblnrw.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3czblnrw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j < substring.length();\
    \ j++) {\n            if(string[i] == substring[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0ay5308p.d(16): Error: no property `length` for type `string`\n/tmp/tmp0ay5308p.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0ay5308p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.substr(i, substring.length())\
    \ == substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the substring occurs\
    \ more than once.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't think about\
    \ that case. I'll edit my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppyro7zzm.d(23): Error: declaration expected, not `<`\n/tmp/tmppyro7zzm.d(26):
    Error: unterminated character constant\n/tmp/tmppyro7zzm.d(29): Error: unterminated
    character constant\n/tmp/tmppyro7zzm.d(29): Error: unterminated character constant\n/tmp/tmppyro7zzm.d(37):
    Error: declaration expected, not `assert`\n/tmp/tmppyro7zzm.d(38): Error: declaration
    expected, not `assert`\n/tmp/tmppyro7zzm.d(39): Error: declaration expected, not
    `assert`\n/tmp/tmppyro7zzm.d(40): Error: declaration expected, not `assert`\n/tmp/tmppyro7zzm.d(41):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppyro7zzm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string[i] == substring[j]) {\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphj8tvnmx.d(16): Error: no property `length` for type `string`\n/tmp/tmphj8tvnmx.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphj8tvnmx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work if `substring` is longer than `string`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if `substring` is longer than `string`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work if `substring` is longer than `string`\n<|/ c |>\n\
    <| c |>\nIt doesn't work if `substring` is longer than `string`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work if `substring` is longer than `string`\n<|/ c |>\n<| a\
    \ tags=string,algorithm,c++ |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmte0fh8f.d(25): Error: declaration expected, not `<`\n/tmp/tmpmte0fh8f.d(28):
    Error: unterminated character constant\n/tmp/tmpmte0fh8f.d(31): Error: unterminated
    character constant\n/tmp/tmpmte0fh8f.d(34): Error: unterminated character constant\n/tmp/tmpmte0fh8f.d(37):
    Error: unterminated character constant\n/tmp/tmpmte0fh8f.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmte0fh8f.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.substr(i, substring.length()) ==\
    \ substring)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3zfk1yr.d(102): Error: basic type expected, not `unittest`\n/tmp/tmp_3zfk1yr.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_3zfk1yr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhddxf_6.d(28): Error: declaration expected, not `<`\n/tmp/tmpyhddxf_6.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmpyhddxf_6.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmpyhddxf_6.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmpyhddxf_6.d(39): Error: declaration expected, not `assert`\n/tmp/tmpyhddxf_6.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhddxf_6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    \n    while(end\
    \ < string.length)\n    {\n        len = string.find(substring, end);\n      \
    \  if(len == -1)\n        {\n            break;\n        }\n        \n       \
    \ end = len + substring.length();\n        count++;\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps__sfpkp.d(22): Error: no property `find` for type `string`\n/tmp/tmps__sfpkp.d(28):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps__sfpkp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if substring is a\
    \ substring of string. For example, how_many_times(\"ab\", \"ab\") returns 2,\
    \ but how_many_times(\"ab\", \"ba\") returns 1.\n<|/ c |>\n<| c |>\n: Yes, you're\
    \ right. I missed that case. I've updated my answer.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing that out. I've updated my answer accordingly.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnmkr00og.d(27): Error: declaration expected, not `<`\n/tmp/tmpnmkr00og.d(30):
    Error: unterminated character constant\n/tmp/tmpnmkr00og.d(33): Error: unterminated
    character constant\n/tmp/tmpnmkr00og.d(33): Error: unterminated character constant\n/tmp/tmpnmkr00og.d(36):
    Error: unterminated character constant\n/tmp/tmpnmkr00og.d(44): Error: declaration
    expected, not `assert`\n/tmp/tmpnmkr00og.d(45): Error: declaration expected, not
    `assert`\n/tmp/tmpnmkr00og.d(46): Error: declaration expected, not `assert`\n/tmp/tmpnmkr00og.d(47):
    Error: declaration expected, not `assert`\n/tmp/tmpnmkr00og.d(48): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmkr00og.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a substring that is a prefix of another\
    \ substring.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it on `how_many_times(\"\
    aaaa\", \"aa\")` and it returned `3`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested\
    \ it on `how_many_times(\"aaaa\", \"aa\")` and it returned `3`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, it does. I tested it on `how_many_times(\"aaaa\", \"aa\")` and\
    \ it returned `3`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it on `how_many_times(\"\
    aaaa\", \"aa\")` and it returned `3`.\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgq4_z21g.d(25): Error: declaration expected, not `<`\n/tmp/tmpgq4_z21g.d(28):
    Error: unterminated character constant\n/tmp/tmpgq4_z21g.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpgq4_z21g.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpgq4_z21g.d(50): Error: declaration expected, not `assert`\n/tmp/tmpgq4_z21g.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpgq4_z21g.d(52): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq4_z21g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++,search\
    \ |>\n<| c |>\nThis code doesn't work for \"aaaaa\" substring. Correct answer\
    \ is 3, not 4.\n<|/ c |>\n<| c |>\nThis code doesn't work for \"aaaaa\" substring.\
    \ Correct answer is 3, not 4.\n<|/ c |>\n<| c |>\nThis code doesn't work for \"\
    aaaaa\" substring. Correct answer is 3, not 4.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work for \"aaaaa\" substring. Correct answer is 3, not 4.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe algorithm is simple:\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoln4_nbd.d(23): Error: declaration expected, not `<`\n/tmp/tmpoln4_nbd.d(26):
    Error: unterminated character constant\n/tmp/tmpoln4_nbd.d(29): Error: unterminated
    character constant\n/tmp/tmpoln4_nbd.d(32): Error: unterminated character constant\n/tmp/tmpoln4_nbd.d(35):
    Error: unterminated character constant\n/tmp/tmpoln4_nbd.d(43): Error: declaration
    expected, not `assert`\n/tmp/tmpoln4_nbd.d(44): Error: declaration expected, not
    `assert`\n/tmp/tmpoln4_nbd.d(45): Error: declaration expected, not `assert`\n/tmp/tmpoln4_nbd.d(46):
    Error: declaration expected, not `assert`\n/tmp/tmpoln4_nbd.d(47): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoln4_nbd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, long start) \n{\n   \
    \ long count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n \
    \       if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqc_zsvjn.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqc_zsvjn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    \n    while(start < len) {\n        end =\
    \ string.find(substring, start);\n        if(end == string.length()) break;\n\
    \        \n        if(end > start) {\n            count += end - start;\n    \
    \    }\n        start = end + sublen;\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx2f2i75p.d(18): Error: no property `length` for type `string`\n/tmp/tmpx2f2i75p.d(19):
    Error: no property `length` for type `string`\n/tmp/tmpx2f2i75p.d(22): Error:
    no property `find` for type `string`\n/tmp/tmpx2f2i75p.d(23): Error: no property
    `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2f2i75p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    long i = 0;\n \
    \   \n    while(i < string.length())\n    {\n        len = string.length() - i;\n\
    \        end = start + len;\n        \n        if(string.find(substring, start)\
    \ == start)\n        {\n            count++;\n            start = end;\n     \
    \   }\n        \n        i++;\n    }\n    \n    return count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long\
    \ i = 0;\n    \n    while(i < string.length())\n    {\n        len = string.length()\
    \ - i;\n        end = start + len;\n        \n        if(string.find(substring,\
    \ start) == start)\n        {\n            count++;\n            start = end;\n\
    \        }\n        \n        i++;\n    }\n    \n    return count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    long len =\
    \ 0;\n    long i = 0;\n    \n    while(i < string.length())\n    {\n        len\
    \ = string.length() - i;\n        end = start + len;\n        \n        if(string.find(substring,\
    \ start) == start)\n        {\n            count++;\n            start = end;\n\
    \        }\n        \n        i++;\n    }\n    \n    return count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int \nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpumy4eylq.d(116): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumy4eylq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n                break;\n           \
    \ }\n        }\n    }\n    return count;\n}\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring, int start) \n{\n    long count\
    \ = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < substring.length(); j++)\n        {\n            if(string[i] ==\
    \ substring[j])\n            {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end) \n{\n\
    \    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        for(int\
    \ j = 0; j < substring.length(); j++)\n        {\n            if(string[i] ==\
    \ substring[j])\n            {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end, int step)\
    \ \n{\n    long count = 0;\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        for(int j = 0; j < substring.length(); j++)\n        {\n            if(string[i]\
    \ == substring[j])\n            {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_man\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp18oee9qt.d(107): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18oee9qt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1za9314r.d(16): Error: no property `length` for type `string`\n/tmp/tmp1za9314r.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1za9314r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while(pos < string.length())\n    {\n        pos = string.find(substring,\
    \ pos);\n        if(pos != string.length())\n        {\n            count++;\n\
    \            pos = string.find(substring, pos + substring.length());\n       \
    \ }\n        else\n        {\n            pos = string.length();\n        }\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    long pos = start;\n    while(pos <\
    \ string.length())\n    {\n        pos = string.find(substring, pos);\n      \
    \  if(pos != string.length())\n        {\n            count++;\n            pos\
    \ = string.find(substring, pos + substring.length());\n        }\n        else\n\
    \        {\n            pos = string.length();\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    long pos = start;\n    while(pos\
    \ < string.length())\n    {\n        pos = string.find(substring, pos);\n    \
    \    if(pos != string.length())\n        {\n            count++;\n           \
    \ pos = string.find(substring, pos + substring.length());\n        }\n       \
    \ else\n        {\n            pos = string.length();\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    long pos = start;\n\
    \    while(pos < string.length())\n    {\n        pos = string.find(sub\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpw7c389.d(107): Error: found `unittest` when expecting `,`\n/tmp/tmplpw7c389.d(116):
    Error: found `void` when expecting `,`\n/tmp/tmplpw7c389.d(116): Error: found
    `{` when expecting `,`\n/tmp/tmplpw7c389.d(116): Error: expression expected, not
    `}`\n/tmp/tmplpw7c389.d(116): Error: found `End of File` when expecting `,`\n/tmp/tmplpw7c389.d(116):
    Error: found `End of File` when expecting `)`\n/tmp/tmplpw7c389.d(116): Error:
    found `End of File` when expecting `;` following statement\n/tmp/tmplpw7c389.d(116):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplpw7c389.d(116):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpw7c389.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times(\"aaa\"\
    , \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, long start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  for(int j = 0; j < substring.length(); j++)\n        {\n            if(string[i]\
    \ == substring[j])\n            {\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    aaa\", \"a\", 0)\n    0L\n    >>> how_many_times(\"aaaa\", \"aa\", 0)\n    0L\n\
    \    \n*/\nlong how_many_times(string string, string substring, long start, long\
    \ end) \n{\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n\
    \        for(int j = 0; j < substring.length(); j++)\n        {\n            if(string[i]\
    \ == substring[j])\n            {\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    aaa\", \"a\", 0, 2)\n    1L\n    >>> how_many_times(\"aaaa\", \"aa\", 0, 2)\n\
    \    1L\n    \n*/\nlong how_many_times(string string, string substring, long start,\
    \ long end, long step) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i+=step)\n    {\n        for(int j = 0; j < substring.length(); j++)\n     \
    \   {\n            if(string[i] == substring[j])\n            {\n            \
    \    count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\", 0, 2, 1)\n    1L\n\
    \    >>> how_many_times(\"aaaa\", \"aa\", 0, 2, 1)\n    1L\n    \n*/\nlong how_many_times(string\
    \ string, string substring, long start, long end, long step, long step2) \n{\n\
    \    long count = 0;\nunittest\n{\n    alias candidate = how_many_times;\n\n \
    \   assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1p0nes_8.d(108): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p0nes_8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length()).equals(substring))\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3yv1q6oh.d(16): Error: no property `length` for type `string`\n/tmp/tmp3yv1q6oh.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3yv1q6oh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojrhocci.d(16): Error: no property `length` for type `string`\n/tmp/tmpojrhocci.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpojrhocci.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    foreach(char c in substring) \n    {\n        foreach(char c2 in string)\
    \ \n        {\n            if (c == c2) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgb6854sz.d(17): Error: found `in` when expecting `;`\n/tmp/tmpgb6854sz.d(19):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgb6854sz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n            count++;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the most efficient\
    \ solution. `string.compare` will have to compare the entire string for each character\
    \ in the substring. `string.find` will stop at the first character that matches.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I wanted to show OP how to do it in his\
    \ own way. He can easily modify it to his needs.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I wanted to show OP how to do it in his own way. He can easily modify\
    \ it to his needs.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show\
    \ OP how to do it in his own way. He can easily modify it to his needs.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, but I wanted to show OP how to do it in his own\
    \ way. He can easily modify it to his needs.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpek39w0xt.d(23): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek39w0xt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j\
    \ < substring.length(); j++) {\n            if(string[i] == substring[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe6dg9lwe.d(17): Error: no property `length` for type `string`\n/tmp/tmpe6dg9lwe.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpe6dg9lwe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"a\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string substring2) \n\
    {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n        if(string.compare(i,\
    \ substring2.length(), substring2, 0, substring2.length()) == 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"a\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string substring2, string\
    \ substring3) \n{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    \
    \    if(string.compare(i, substring2.length(), substring2, 0, substring2.length())\
    \ == 0)\n        {\n            count++;\n        }\n        if(string.compare(i,\
    \ substring3.length(), substring3, 0, substring3.length()) == 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"a\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string substring2, string\
    \ substring3, string substring4) \n{\n    long count = 0;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n        {\n            \nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_t9etf57.d(99): Error: found `unittest` instead of statement\n/tmp/tmp_t9etf57.d(108):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_t9etf57.d(108):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_t9etf57.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0) {\n            count++;\n\
    \        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltmg6v4_.d(17): Error: no property `length` for type `string`\n/tmp/tmpltmg6v4_.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpltmg6v4_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n            count++;\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end) \n{\n\
    \    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n            count++;\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end, int\
    \ step, string pattern) \n{\n    \nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpder73hm5.d(96): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpder73hm5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long length = string.length();\n \
    \   long substringLength = substring.length();\n    \n    for(long i = 0; i <\
    \ length; i++)\n    {\n        end = string.find(substring, start);\n        if(end\
    \ != string.length())\n        {\n            count += end - start;\n        \
    \    start = end + substringLength;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tmfage1.d(18): Error: no property `length` for type `string`\n/tmp/tmp2tmfage1.d(19):
    Error: no property `length` for type `string`\n/tmp/tmp2tmfage1.d(23): Error:
    no property `find` for type `string`\n/tmp/tmp2tmfage1.d(24): Error: no property
    `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tmfage1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    \n    while(start < len) {\n        end =\
    \ start + sublen;\n        while(end < len && string.charAt(end) == substring.charAt(0))\
    \ {\n            end++;\n        }\n        if(end == len) {\n            count++;\n\
    \            start = end;\n        }\n        else {\n            while(end <\
    \ len && string.charAt(end) != substring.charAt(0)) {\n                end++;\n\
    \            }\n            count++;\n            start = end;\n        }\n  \
    \  }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start) \n{\n    long count = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    while(start < len) {\n     \
    \   end = start + sublen;\n        while(end < len && string.charAt(end) == substring.charAt(0))\
    \ {\n            end++;\n        }\n        if(end == len) {\n            count++;\n\
    \            start = end;\n        }\n        else {\n            while(end <\
    \ len && string.charAt(end) != substring.charAt(0)) {\n                end++;\n\
    \            }\n            count++;\n            start = end;\n        }\n  \
    \  }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    while(start < len) {\n     \
    \   end = start + sublen;\n        while(end < len && string.charAt(end) == substring.charAt(0))\
    \ {\n            end++;\n        }\n        if(end == len) {\n            count++;\n\
    \            start = end;\n        }\n        else {\n            while(end <\
    \ len && string.charAt(end) != substring.charAt(0)) {\n                end++;\n\
    \            }\n            count++;\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzur6hdtn.d(106): Error: found `unittest` instead of statement\n/tmp/tmpzur6hdtn.d(115):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzur6hdtn.d(115):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzur6hdtn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I wonder if it would be faster than the\
    \ one I posted (which I believe is O(n))\n<|/ c |>\n<| c |>\nI believe your solution\
    \ is O(n), but your solution is O(n^2). Your solution is O(n) because you only\
    \ need to compare the beginning of the string with the substring. Your solution\
    \ is O(n^2) because you compare each character in the string with each character\
    \ in the substring. Your solution is O(n) because you only need to compare the\
    \ beginning of the string with the substring. Your solution is O(n^2) because\
    \ you compare each character in the string with each character in the substring.\
    \ Your solution is O(n) because you only need to compare the beginning of the\
    \ string with the substring. Your solution is O(n^2) because you compare each\
    \ character in the string with each character in the substring.\n<|/ c |>\n<|\
    \ c |>\nI believe your solution is O(n) because you only need to compare the beginning\
    \ of the string with the substring. Your solution is O(n) because you compare\
    \ each character in the string with each character in the substring. Your solution\
    \ is O(n) because you only need to compare the beginning of the string with the\
    \ substring. Your solution is O(n) because you compare each character in the string\
    \ with each character in the substring. Your solution is O(n) because you only\
    \ need to compare the beginning of the string with the substring. Your solution\
    \ is O(n) because you compare each character in the string with each character\
    \ in the substring.\n<|/ c |>\n<| c |>\nI believe your solution is O(n) because\
    \ you only need to compare the beginning of the string with the substring. Your\
    \ solution is O(n) because you compare each character in the string with each\
    \ character in the substring. Your solution is O(n) because you only need to compare\
    \ the beginning of the string with the substring. Your solution is O(n) because\
    \ you compare each character in the string with each character in the substring.\
    \ Your solution is O(n) because you only need to compare the beginning of the\
    \ string with the substring. Your solution is O(n) because you compare each character\
    \ in the string with each character in the substring. Your solution is O(n) because\
    \ you only need to compare the beginning of the string with the substring. Your\
    \ solution is O(n) because you compare each character in the string with each\
    \ character in the \nunittest\n{\n    alias candidate = how_many_times;\n\n  \
    \  assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vg3azb2.d(25): Error: declaration expected, not `<`\n/tmp/tmp3vg3azb2.d(42):
    Error: declaration expected, not `assert`\n/tmp/tmp3vg3azb2.d(43): Error: declaration
    expected, not `assert`\n/tmp/tmp3vg3azb2.d(44): Error: declaration expected, not
    `assert`\n/tmp/tmp3vg3azb2.d(45): Error: declaration expected, not `assert`\n/tmp/tmp3vg3azb2.d(46):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vg3azb2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp32_rfw5u.d(16): Error: no property `length` for type `string`\n/tmp/tmp32_rfw5u.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp32_rfw5u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    foreach(char c in substring) \n    {\n        foreach(char c2 in string)\
    \ \n        {\n            if(c == c2) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptflb3rbu.d(17): Error: found `in` when expecting `;`\n/tmp/tmptflb3rbu.d(19):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptflb3rbu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    \n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    \n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    \n    for(int i = start; i\
    \ < end; i++)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    \n    for(int i\
    \ = start; i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0)\n        {\n            count++;\n        }\n    }\n    \n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    \nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0xwejsv.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu0xwejsv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    \n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start) \n{\n    long count = 0;\n    \n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    \n    for(int i = start;\
    \ i < end; i++)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long step) \n{\n    long count = 0;\n    \n    for(int\
    \ i = start; i < end; i += step)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0)\n        {\n            count++;\n        }\n    }\n    \n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3ixv07p.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg3ixv07p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"\
    a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        for(int j = 0; j < substring.length(); j++)\n        {\n\
    \            if(string[i] == substring[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end) \n{\n\
    \    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        for(int\
    \ j = 0; j < substring.length(); j++)\n        {\n            if(string[i] ==\
    \ substring[j])\n            {\n                count++;\n            }\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        for(int j = 0; j < substring.length(); j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    \nunittest\n{\n    alias candidate = how_many_times;\n\n  \
    \  assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdd6k3q2x.d(103): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdd6k3q2x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t length = string.length();\n    size_t substringLength\
    \ = substring.length();\n    \n    while (pos < length) {\n        if (string.compare(pos,\
    \ substringLength, substring) == 0) {\n            count++;\n        }\n     \
    \   pos += substringLength;\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, long start) \n{\n    long\
    \ count = 0;\n    size_t pos = start;\n    size_t length = string.length();\n\
    \    size_t substringLength = substring.length();\n    \n    while (pos < length)\
    \ {\n        if (string.compare(pos, substringLength, substring) == 0) {\n   \
    \         count++;\n        }\n        pos += substringLength;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    size_t pos = start;\n  \
    \  size_t length = string.length();\n    size_t substringLength = substring.length();\n\
    \    \n    while (pos < length) {\n        if (string.compare(pos, substringLength,\
    \ substring) == 0) {\n            count++;\n        }\n        pos += substringLength;\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long step) \n{\n    long count = 0;\n    size_t pos =\
    \ start;\n    size_t length = string.length();\n    size_t substringLength = substring.length();\n\
    \    \n    while (pos < length) {\n        if (string.compare(pos, substringLength,\
    \ substring) == 0) {\n            count++;\n        }\n        pos += substringLength;\n\
    \    }\n\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6x3ejq9.d(102): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6x3ejq9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    \n    while(start < len) {\n        end =\
    \ start + sublen;\n        while(end < len && string.charAt(end) != substring.charAt(start))\
    \ {\n            end++;\n        }\n        if(end == len) {\n            count++;\n\
    \        }\n        start = end + 1;\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=string,algorithm,c++ |>\n<| c |>\nI like this solution, but I wonder\
    \ how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like\
    \ it too. Just one question, why do you use \"string\" instead of \"String\"?\n\
    <|/ c |>\n<| c |>\n: I used `string` because I didn't want to have to `#include\
    \ <string>` at the top of my file. I didn't want to have to `using namespace std;`\
    \ at the top of my file. I didn't want to have to `#include <string.h>` at the\
    \ top of my file. I didn't want to have to `#include <algorithm>` at the top of\
    \ my file. I didn't want to have to `#include <cstring>` at the top of my file.\
    \ I didn't want to have to `#include <cmath>` at the top of my file. I didn't\
    \ want to have to `#include <cstdlib>` at the top of my file. I didn't want to\
    \ have to `#include <cstddef>` at the top of my file. I didn't want to have to\
    \ `#include <cstdint>` at the top of my file. I didn't want to have to `#include\
    \ <cstdio>` at the top of my file. I didn't want to have to `#include <cstdlib>`\
    \ at the top of my file. I didn't want to have to `#include <cstddef>` at the\
    \ top of my file. I didn't want to have to `#include <cstdint>` at the top of\
    \ my file. I didn't want to have to `#include <cstdio>` at the top of my file.\
    \ I didn't want to have to `#include <cstdlib>` at the top of my file. I didn't\
    \ want to have to `#include <cstddef>` at the top of my file. I didn't want to\
    \ have to `#include <cstdint>` at the top of my file. I didn't want to have to\
    \ `#include <cstdio>` at the top of my file.\n<|/ c |>\n<| c |>\n: I didn't want\
    \ to have to `#include <cstring>` at the top of my file. I didn't want to have\
    \ to `#include <cmath>` at the top of my file. I didn't want to have to `#include\
    \ <cstdlib>` at the top of my file. I didn't want to have to `#include <cstddef>`\
    \ at the top of my file. I didn't want to have to `#include <cstdint>` \nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqphedi2a.d(33): Error: declaration expected, not `<`\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42):
    Error: unterminated character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated
    character constant\n/tmp/tmpqphedi2a.d(42): Error: unterminated character constant\n/tmp/tmpqphedi2a.d(45):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqphedi2a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a substring that starts or ends with\
    \ the substring you're looking for. For example, how_many_times(\"ab\", \"ab\"\
    ) returns 2, when it should return 1.\n<|/ c |>\n<| c |>\nI believe that is a\
    \ valid case. For example, how_many_times(\"ab\", \"ab\") returns 2, when it should\
    \ return 1.\n<|/ c |>\n<| c |>\nYes, but \"ab\" is a substring of \"ab\" so how_many_times(\"\
    ab\", \"ab\") should return 1. But it returns 2.\n<|/ c |>\n<| c |>\nYes, I see\
    \ what you mean. I'll fix my answer.\n<|/ c |>\n<| c |>\nI fixed my answer, thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprhfmx3ti.d(25): Error: declaration expected, not `<`\n/tmp/tmprhfmx3ti.d(28):
    Error: unterminated character constant\n/tmp/tmprhfmx3ti.d(28): Error: unterminated
    character constant\n/tmp/tmprhfmx3ti.d(37): Error: unterminated character constant\n/tmp/tmprhfmx3ti.d(48):
    Error: declaration expected, not `assert`\n/tmp/tmprhfmx3ti.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmprhfmx3ti.d(50): Error: declaration expected, not
    `assert`\n/tmp/tmprhfmx3ti.d(51): Error: declaration expected, not `assert`\n/tmp/tmprhfmx3ti.d(52):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhfmx3ti.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n  \
    \  assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp73hn25it.d(16): Error: no property `length` for type `string`\n/tmp/tmp73hn25it.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp73hn25it.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbqnvrh0x.d(17): Error: no property `length` for type `string`\n/tmp/tmpbqnvrh0x.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbqnvrh0x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1za9314r.d(16): Error: no property `length` for type `string`\n/tmp/tmp1za9314r.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1za9314r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string.charAt(i) == substring.charAt(0))\n\
    \        {\n            count += 1;\n            \n            for(int j = 1;\
    \ j < sublen; j++)\n            {\n                if(string.charAt(i) == substring.charAt(j))\n\
    \                {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    \n    for(int i = start; i < len; i++)\n    {\n        if(string.charAt(i)\
    \ == substring.charAt(0))\n        {\n            count += 1;\n            \n\
    \            for(int j = 1; j < sublen; j++)\n            {\n                if(string.charAt(i)\
    \ == substring.charAt(j))\n                {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.charAt(i) == substring.charAt(0))\n        {\n\
    \            count += 1;\n            \n            for(int j = 1; j < sublen;\
    \ j++)\n            {\n                if(string.charAt(i) == substring.charAt(j))\n\
    \                {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    \n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> ho\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ekhqgza.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ekhqgza.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 0; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j])\n                    break;\n  \
    \          }\n            \n            if(j == sublen)\n                count++;\n\
    \        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxm__ku7m.d(16): Error: no property `length` for type `string`\n/tmp/tmpxm__ku7m.d(17):
    Error: no property `length` for type `string`\n/tmp/tmpxm__ku7m.d(29): Error:
    undefined identifier `j`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm__ku7m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work if the substring occurs more than once in the original\
    \ string.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c\
    \ |>\n<| c |>\nI tested it before posting? I tested it before posting? I tested\
    \ it before posting? I tested it before posting? I tested it before posting? I\
    \ tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting? I tested it before posting?\
    \ I tested it before posting? I tested it before posting\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4iici1h.d(23): Error: declaration expected, not `<`\n/tmp/tmpt4iici1h.d(26):
    Error: unterminated character constant\n/tmp/tmpt4iici1h.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmpt4iici1h.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmpt4iici1h.d(39): Error: declaration expected, not `assert`\n/tmp/tmpt4iici1h.d(40):
    Error: declaration expected, not `assert`\n/tmp/tmpt4iici1h.d(41): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4iici1h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    \n    len = string.length();\n\
    \    end = len-1;\n    \n    while(start < end)\n    {\n        while(string.find(substring,\
    \ start) != string::npos)\n        {\n            start = string.find(substring,\
    \ start);\n            count++;\n        }\n        \n        start++;\n    }\n\
    \    \n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jslzu3v.d(25): Error: found `:` when expecting `)`\n/tmp/tmp2jslzu3v.d(25):
    Error: found `:` instead of statement\n/tmp/tmp2jslzu3v.d(34): Error: declaration
    expected, not `return`\n/tmp/tmp2jslzu3v.d(35): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jslzu3v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (auto it = string.begin(); it != string.end(); ++it) {\n\t\tif (*it == substring[0])\
    \ {\n\t\t\tcount += how_many_times(string.substr(1, string.size() - 1), substring);\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, long start = 0) \n{\n\
    \tlong count = 0;\n\tfor (auto it = string.begin(); it != string.end(); ++it)\
    \ {\n\t\tif (*it == substring[0]) {\n\t\t\tcount += how_many_times(string.substr(1,\
    \ string.size() - 1), substring, start + 1);\n\t\t}\n\t}\n\treturn count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n  \
    \  >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string\
    \ string, string substring, string start) \n{\n\tlong count = 0;\n\tfor (auto\
    \ it = string.begin(); it != string.end(); ++it) {\n\t\tif (*it == substring[0])\
    \ {\n\t\t\tcount += how_many_times(string.substr(1, string.size() - 1), substring,\
    \ start);\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string start, long end)\
    \ \n{\n\tlong count = 0;\n\tfor (auto it = string.begin(); it != string.end();\
    \ ++it) {\n\t\tif (*it == substring[0]) {\n\t\t\tcount += how_many_times(string.substr(1,\
    \ string.size() - 1), substring, start, end);\n\t\t}\n\t}\n\treturn count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n  \
    \  >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpms2hvdmj.d(86): Error: basic type expected, not `unittest`\n/tmp/tmpms2hvdmj.d(86):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpms2hvdmj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n\tlong\
    \ count = 0;\n\tfor (int i = start; i < string.length(); i++) {\n\t\tif (string.substr(i,\
    \ substring.length()) == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i++)\
    \ {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.substr(i, substring.length()) == substring)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end, int step,\
    \ string case_sensitive) \n{\n\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0j7kjb6e.d(96): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j7kjb6e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkk2gsjl4.d(16): Error: no property `length` for type `string`\n/tmp/tmpkk2gsjl4.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkk2gsjl4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j < substring.length();\
    \ j++) {\n            if(string[i] == substring[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(string[i]\
    \ == substring[j]) {\n                count++;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"aaa\"\
    , \"a\", 0)\n    0L\n    >>> how_many_times(\"aaaa\", \"aa\", 0)\n    0L\n   \
    \ \n*/\nlong how_many_times(string string, string substring, int start, int end)\
    \ \n{\n    long count = 0;\n    for(int i = start; i < end; i++) {\n        for(int\
    \ j = 0; j < substring.length(); j++) {\n            if(string[i] == substring[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\", 0, 2)\n    3L\n\
    \    >>> how_many_times(\"aaaa\", \"aa\", 0, 2)\n    3L\n    \n*/\nlong how_many_times(string\
    \ string, string substring, int start, int end, int step) \n{\n    long count\
    \ = 0;\n    for(int i = start; i < end; i += step) {\n        for(int j = 0; j\
    \ < substring.length(); j++) {\n            if(string[i] == substring[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\", 0, 2, 2)\n \
    \   3L\n    >>> how_many_times(\"aaaa\", \"aa\", 0, 2, 2)\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end, int step,\
    \ int step2) \n{\n    long count = 0;\n    for(int i = start; i < end; i += step)\
    \ {\n        for(int j = 0; j < substring\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp37p49shg.d(98): Error: found `unittest` when expecting `;` following
    `for` condition\n/tmp/tmp37p49shg.d(107): Error: found `void` when expecting `)`\n/tmp/tmp37p49shg.d(107):
    Error: found `{` when expecting `;` following statement\n/tmp/tmp37p49shg.d(107):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37p49shg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi6suuwf.d(102): Error: basic type expected, not `unittest`\n/tmp/tmpwi6suuwf.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwi6suuwf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    \n    len = string.length();\n\
    \    end = len-1;\n    \n    while(start < end) {\n        while(start < end &&\
    \ string.compare(start, substring, 0, substring.length()) == 0) {\n          \
    \  start++;\n        }\n        \n        while(start < end && string.compare(end,\
    \ substring, 0, substring.length()) == 0) {\n            end--;\n        }\n \
    \       \n        if(start < end) {\n            count++;\n        }\n       \
    \ \n        start++;\n        end--;\n    }\n    \n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string substring2) \n\
    {\n    long count = 0;\n    long start = 0;\n    long end = 0;\n    long len =\
    \ 0;\n    \n    len = string.length();\n    end = len-1;\n    \n    while(start\
    \ < end) {\n        while(start < end && string.compare(start, substring, 0, substring.length())\
    \ == 0) {\n            start++;\n        }\n        \n        while(start < end\
    \ && string.compare(end, substring, 0, substring.length()) == 0) {\n         \
    \   end--;\n        }\n        \n        if(start < end) {\n            count++;\n\
    \        }\n        \n        start++;\n        end--;\n    }\n    \n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3) \n{\n    long count = 0;\n    long start\
    \ = 0;\n    long end = 0;\n    long len = 0;\n    \n    len = string.length();\n\
    \    end = len-1;\n    \n    while(start < end) {\n        while(start < end &&\
    \ string.compare(start, substring, 0, substring.length()) == 0) {\n          \
    \  start++;\n        }\n        \n        while(start < end && string.compare(end,\
    \ substring, 0, substring.length()) == 0) {\n            \nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99ojdh_l.d(108): Error: found `unittest` instead of statement\n/tmp/tmp99ojdh_l.d(117):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp99ojdh_l.d(117):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99ojdh_l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length()).equals(substring))\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3yv1q6oh.d(16): Error: no property `length` for type `string`\n/tmp/tmp3yv1q6oh.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3yv1q6oh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        size_t subpos = 0;\n        while (subpos\
    \ < sublen) {\n            if (string[pos] == substring[subpos]) {\n         \
    \       subpos++;\n            } else {\n                break;\n            }\n\
    \        }\n        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb_x4fggb.d(17): Error: no property `length` for type `string`\n/tmp/tmpb_x4fggb.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpb_x4fggb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < sublen; j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=string,algorithm,c++ |>\n<| c |>\nThis doesn't work if the substring\
    \ appears more than once in the original string. For example, how_many_times(\"\
    aaaa\", \"aa\") returns 3 instead of 2.\n<|/ c |>\n<| c |>\n: Yes, it does. I\
    \ tested it before posting it. I even tested it before posting it. I even tested\
    \ it before posting it. I even tested it before posting it. I even tested it before\
    \ posting it. I even tested it before posting it. I even tested it before posting\
    \ it. I even tested it before posting it. I even tested it before posting it.\
    \ I even tested it before posting it. I even tested it before posting it. I even\
    \ tested it before posting it. I even tested it before posting it. I even tested\
    \ it before posting it. I even tested it before posting it. I even tested it before\
    \ posting it. I even tested it before posting it. I even tested it before posting\
    \ it. I even tested it before posting it. I even tested it before posting it.\
    \ I even tested it before posting it. I even tested it before posting it. I even\
    \ tested it before posting it. I even tested it before posting it. I even tested\
    \ it before posting it. I even tested it before posting it. I even tested it before\
    \ posting it. I even tested it before posting it. I even tested it before posting\
    \ it. I even tested it before posting it. I even tested it before posting it.\
    \ I even tested it before posting it. I even tested it before posting it. I even\
    \ tested it before posting it. I even tested it before posting it. I even tested\
    \ it before posting it. I even tested it before posting it. I even tested it before\
    \ posting it. I even tested it before posting it. I even tested it before posting\
    \ it. I even tested it before posting it. I even tested it before posting it.\
    \ I even tested it before posting it. I even tested it before posting it. I even\
    \ tested it before posting it. I even tested it before posting it. I even tested\
    \ it before posting it. I even tested it before posting it\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmlhz265t.d(31): Error: declaration expected, not `<`\n/tmp/tmpmlhz265t.d(34):
    Error: unterminated character constant\n/tmp/tmpmlhz265t.d(42): Error: declaration
    expected, not `assert`\n/tmp/tmpmlhz265t.d(43): Error: declaration expected, not
    `assert`\n/tmp/tmpmlhz265t.d(44): Error: declaration expected, not `assert`\n/tmp/tmpmlhz265t.d(45):
    Error: declaration expected, not `assert`\n/tmp/tmpmlhz265t.d(46): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlhz265t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    \n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive) \n{\n    long count = 0;\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(case_sensitive)\n        {\n      \
    \      if(string.compare(i, substring.length(), substring) == 0)\n           \
    \ {\n                count++;\n            }\n        }\n        else\n      \
    \  {\n            if(string.compare(i, substring.length(), substring, true) ==\
    \ 0)\n            {\n                count++;\n            }\n        }\n    }\n\
    \    \n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool ignore_case) \n{\n    long count = 0;\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(case_sensitive)\n      \
    \  {\n            if(ignore_case)\n            {\n                if(string.compare(i,\
    \ substring.length(), substring) == 0)\n                {\n                  \
    \  count++;\n                }\n            }\n            else\n            {\n\
    \                if(string.compare(i, substring.length(), substring, true) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        else\n        {\n            if(ignore_case)\n\
    \            {\n                if(string.compare(i, substring.length(), substring,\
    \ true) == 0)\n                {\n                    count++;\n             \
    \   }\n            }\n            else\n            {\n                if(string.compare(i,\
    \ substring.length(), substring, true) == 0)\n                {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    \n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0gc2ah3.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0gc2ah3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2) \n{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0 && string.compare(i + substring.length(), substring2.length(), substring2)\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3) \n{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0 && string.compare(i + substring.length(), substring2.length(),\
    \ substring2) == 0 && string.compare(i + substring2.length(), substring3.length(),\
    \ substring3) == 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3, string substring4) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0 && string.compare(i + substring.length(),\
    \ substring2.length(), substring2) == 0 && string.compare(i + substring2.length(),\
    \ substring3.length(), substring3) == 0 && string.compare(i + substring3.length(),\
    \ substring4.length(), substring4) == 0)\n        {\n\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4s4tu_j.d(87): Error: found `unittest` instead of statement\n/tmp/tmpp4s4tu_j.d(96):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp4s4tu_j.d(96):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4s4tu_j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < sublen; j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3czblnrw.d(16): Error: no property `length` for type `string`\n/tmp/tmp3czblnrw.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3czblnrw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < sublen; j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, long start) \n{\n   \
    \ long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    \n    for(int i = start; i < len; i++)\n    {\n        for(int j = 0; j <\
    \ sublen; j++)\n        {\n            if(string[i] == substring[j])\n       \
    \     {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    \n    for(int i = start; i < end;\
    \ i++)\n    {\n        for(int j = 0; j < sublen; j++)\n        {\n          \
    \  if(string[i] == substring[j])\n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, long start, long end, long\
    \ step) \n{\n    long count = 0;\n    long len = string.length();\n    long sublen\
    \ = substring.length();\n    \n    for(int i = start; i < end; i += step)\n  \
    \  {\n        for(int j = 0; j < sublen; j++)\n        {\n            if(string[i]\
    \ == substring[j])\n            {\n                count\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfr71sz21.d(110): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmpfr71sz21.d(119): Error: found `End of File` when
    expecting `}` following compound statement\n/tmp/tmpfr71sz21.d(119): Error: found
    `End of File` when expecting `}` following compound statement\n/tmp/tmpfr71sz21.d(119):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfr71sz21.d(119):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr71sz21.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (auto c : string) \n\t{\n\t\tif (c == substring[0]) \n\t\t{\n\t\t\tcount +=\
    \ how_many_times(string.substr(1), substring);\n\t\t}\n\t\telse \n\t\t{\n\t\t\t\
    count += 1;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfwt_zbbe.d(16): Error: no identifier for declarator `c`\n/tmp/tmpfwt_zbbe.d(16):
    Error: expression expected, not `:`\n/tmp/tmpfwt_zbbe.d(16): Error: found `string`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfwt_zbbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code doesn't work. Try it with `how_many_times(\"aaa\", \"a\")`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nThis code doesn't work. Try it with `how_many_times(\"aaa\", \"a\")`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\npublic int how_many_times(String string, String substring)\
    \ {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n   \
    \     if (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,string |>\n<| a dscore=1 |>\n<code>\npublic int how_many_times(String\
    \ string, String substring) {\n    int count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,string |>\n<| a dscore=1 |>\n<code>\npublic int how_many_times(String\
    \ string, String substring) {\n    int count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,string |>\n<| a tags=java,string |>\n<code>\npublic int how_many_times(String\
    \ string, String substring) {\n    int count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=java,string |>\n<code>\npublic int how_many_times(String\
    \ string, String substring) {\n    int count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        if (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp812rg1sz.d(25): Error: declaration expected, not `<`\n/tmp/tmp812rg1sz.d(28):
    Error: unterminated character constant\n/tmp/tmp812rg1sz.d(34): Error: unterminated
    character constant\n/tmp/tmp812rg1sz.d(43): Error: declaration expected, not `for`\n/tmp/tmp812rg1sz.d(43):
    Error: no identifier for declarator `i`\n/tmp/tmp812rg1sz.d(43): Error: declaration
    expected, not `<`\n/tmp/tmp812rg1sz.d(43): Error: no identifier for declarator
    `i`\n/tmp/tmp812rg1sz.d(43): Error: declaration expected, not `++`\n/tmp/tmp812rg1sz.d(46):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp812rg1sz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n                break;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpunf3vtvx.d(16): Error: no property `length` for type `string`\n/tmp/tmpunf3vtvx.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpunf3vtvx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmvwft9l7.d(25): Error: declaration expected, not `<`\n/tmp/tmpmvwft9l7.d(33):
    Error: declaration expected, not `assert`\n/tmp/tmpmvwft9l7.d(34): Error: declaration
    expected, not `assert`\n/tmp/tmpmvwft9l7.d(35): Error: declaration expected, not
    `assert`\n/tmp/tmpmvwft9l7.d(36): Error: declaration expected, not `assert`\n/tmp/tmpmvwft9l7.d(37):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvwft9l7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring) == 0)\n\t\t\tcount++;\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuwq8iimp.d(16): Error: no property `length` for type `string`\n/tmp/tmpuwq8iimp.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuwq8iimp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n\tlong\
    \ count = 0;\n\tfor (int i = start; i < string.length(); i++) {\n\t\tif (string.substr(i,\
    \ substring.length()) == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i++)\
    \ {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.substr(i, substring.length()) == substring)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end, int step,\
    \ string case_sensitive) \n{\n\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0j7kjb6e.d(96): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j7kjb6e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 1; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j])\n                {\n           \
    \         break;\n                }\n            }\n            \n           \
    \ if(j == sublen)\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq92ev3um.d(16): Error: no property `length` for type `string`\n/tmp/tmpq92ev3um.d(17):
    Error: no property `length` for type `string`\n/tmp/tmpq92ev3um.d(31): Error:
    undefined identifier `j`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq92ev3um.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++) {\n        for(int j = 0; j\
    \ < substring.length(); j++) {\n            if(string[i] == substring[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe6dg9lwe.d(17): Error: no property `length` for type `string`\n/tmp/tmpe6dg9lwe.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpe6dg9lwe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    \n    for(long i = 0; i < len; i++)\n    {\n\
    \        start = i;\n        end = i + sublen;\n        if(string.find(substring,\
    \ start, end) != string::npos)\n        {\n            count++;\n            start\
    \ = end;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjky3y5cm.d(25): Error: found `:` when expecting `)`\n/tmp/tmpjky3y5cm.d(25):
    Error: found `:` instead of statement\n/tmp/tmpjky3y5cm.d(32): Error: declaration
    expected, not `return`\n/tmp/tmpjky3y5cm.d(33): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjky3y5cm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1ozagra.d(17): Error: no property `length` for type `string`\n/tmp/tmpo1ozagra.d(19):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpo1ozagra.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t length = string.length();\n    size_t substringLength\
    \ = substring.length();\n    \n    while (pos < length) {\n        if (string.compare(pos,\
    \ substringLength, substring) == 0) {\n            count++;\n        }\n     \
    \   pos += substringLength;\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, long start) \n{\n    long\
    \ count = 0;\n    size_t pos = start;\n    size_t length = string.length();\n\
    \    size_t substringLength = substring.length();\n    \n    while (pos < length)\
    \ {\n        if (string.compare(pos, substringLength, substring) == 0) {\n   \
    \         count++;\n        }\n        pos += substringLength;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    size_t pos = start;\n  \
    \  size_t length = string.length();\n    size_t substringLength = substring.length();\n\
    \    \n    while (pos < length) {\n        if (string.compare(pos, substringLength,\
    \ substring) == 0) {\n            count++;\n        }\n        pos += substringLength;\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long step) \n{\n    long count = 0;\n    size_t pos =\
    \ start;\n    size_t length = string.length();\n    size_t substringLength = substring.length();\n\
    \    \n    while (pos < length) {\n        if (string.compare(pos, substringLength,\
    \ substring) == 0) {\n            count++;\n        }\n        pos += substringLength;\n\
    \    }\n\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6x3ejq9.d(102): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6x3ejq9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == substring[0])\
    \ \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length(); j++)\n\t\t\t{\n\t\t\t\
    \tif (string[i + j] != substring[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n\tlong\
    \ count = 0;\n\tfor (int i = start; i < string.length(); i++)\n\t{\n\t\tif (string[i]\
    \ == substring[0]) \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length(); j++)\n\
    \t\t\t{\n\t\t\t\tif (string[i + j] != substring[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n\tlong count = 0;\n\tfor (int i = start; i < end; i++)\n\t{\n\t\tif (string[i]\
    \ == substring[0]) \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length(); j++)\n\
    \t\t\t{\n\t\t\t\tif (string[i + j] != substring[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end, int\
    \ step) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i+=step)\n\t{\n\
    \t\tif (string[i] == substring[0]) \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length();\
    \ j++)\n\t\t\t{\n\t\t\t\tif (string[i + j\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ykkrukc.d(110): Error: found `unittest` when expecting `,`\n/tmp/tmp8ykkrukc.d(119):
    Error: found `void` when expecting `,`\n/tmp/tmp8ykkrukc.d(119): Error: found
    `{` when expecting `,`\n/tmp/tmp8ykkrukc.d(119): Error: expression expected, not
    `}`\n/tmp/tmp8ykkrukc.d(119): Error: found `End of File` when expecting `,`\n/tmp/tmp8ykkrukc.d(119):
    Error: found `End of File` when expecting `]`\n/tmp/tmp8ykkrukc.d(119): Error:
    found `End of File` when expecting `)`\n/tmp/tmp8ykkrukc.d(119): Error: found
    `End of File` instead of statement\n/tmp/tmp8ykkrukc.d(119): Error: found `End
    of File` when expecting `}` following compound statement\n/tmp/tmp8ykkrukc.d(119):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8ykkrukc.d(119):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8ykkrukc.d(119):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ykkrukc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n\tlong\
    \ count = 0;\n\tfor (int i = start; i < string.length(); i++) {\n\t\tif (string.substr(i,\
    \ substring.length()) == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n\tlong count = 0;\n\tfor (int i = start; i < end; i++)\
    \ {\n\t\tif (string.substr(i, substring.length()) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.substr(i, substring.length()) == substring)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, int start, int end, int step,\
    \ string pattern) \n{\n\t\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16pfyg6e.d(96): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16pfyg6e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tif (string.compare(i, substring2.length(),\
    \ substring2, 0, substring2.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}\n/*\n Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\"\
    )\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3) \n{\n\tlong count = 0;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tif (string.compare(i,\
    \ substring2.length(), substring2, 0, substring2.length()) == 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (string.compare(i, substring3.length(), substring3, 0, substring3.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, string substring2, string\
    \ substring3, string substring4) \n{\n\tlong count = 0;\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tif (string.compare(i,\
    \ substring2.length(), substring2, 0, substring2.length()\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqr8pxsk.d(90): Error: found `unittest` when expecting `,`\n/tmp/tmpiqr8pxsk.d(99):
    Error: found `void` when expecting `,`\n/tmp/tmpiqr8pxsk.d(99): Error: found `{`
    when expecting `,`\n/tmp/tmpiqr8pxsk.d(99): Error: expression expected, not `}`\n/tmp/tmpiqr8pxsk.d(99):
    Error: found `End of File` when expecting `,`\n/tmp/tmpiqr8pxsk.d(99): Error:
    found `End of File` when expecting `)`\n/tmp/tmpiqr8pxsk.d(99): Error: found `End
    of File` when expecting `)`\n/tmp/tmpiqr8pxsk.d(99): Error: found `End of File`
    instead of statement\n/tmp/tmpiqr8pxsk.d(99): Error: found `End of File` when
    expecting `}` following compound statement\n/tmp/tmpiqr8pxsk.d(99): Error: found
    `End of File` when expecting `}` following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiqr8pxsk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while(pos < string.length())\n    {\n        pos = string.find(substring,\
    \ pos);\n        if(pos != string.length())\n        {\n            count++;\n\
    \            pos = string.find(substring, pos + substring.length());\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpchlz3p3c.d(17): Error: no property `length` for type `string`\n/tmp/tmpchlz3p3c.d(19):
    Error: no property `find` for type `string`\n/tmp/tmpchlz3p3c.d(20): Error: no
    property `length` for type `string`\n/tmp/tmpchlz3p3c.d(23): Error: no property
    `find` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchlz3p3c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n\tlong count = 0;\n\tfor (int i = start; i < string.length();\
    \ i++) {\n\t\tif (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n\tlong count = 0;\n\tfor (int i = start; i < end; i++) {\n\t\tif (string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeihn1fk8.d(94): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeihn1fk8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\t\n\
    \tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.substr(i, substring.length()).equals(substring))\n\
    \t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4_jsmd.d(17): Error: no property `length` for type `string`\n/tmp/tmphi4_jsmd.d(19):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphi4_jsmd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeyqkbf43.d(25): Error: declaration expected, not `<`\n/tmp/tmpeyqkbf43.d(30):
    Error: identifier expected following `package`\n/tmp/tmpeyqkbf43.d(30): Error:
    `;` expected\n/tmp/tmpeyqkbf43.d(31): Error: identifier expected following `package`\n/tmp/tmpeyqkbf43.d(31):
    Error: `;` expected\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyqkbf43.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<|\
    \ c |>\nThis is not the most efficient solution. `string::compare` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string::find`\
    \ does a linear search through the entire string. `string::find` does a linear\
    \ search through the entire string. `string::find` does a linear search through\
    \ the entire string. `string::find` does a linear search through the entire string.\
    \ `string::find` does a linear search through the entire string. `string\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj37f7z_m.d(23): Error: declaration expected, not `<`\n/tmp/tmpj37f7z_m.d(26):
    Error: unterminated string constant starting at /tmp/tmpj37f7z_m.d(26)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj37f7z_m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your answer but I think it can be optimized a little bit. `how_many_times` can\
    \ be simplified to `return string.count(substring);`\n<|/ c |>\n<| c |>\nYes,\
    \ that would be better. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int\
    \ howManyTimes(String str, String subStr) {\n    int count = 0;\n    for(int i\
    \ = 0; i < str.length(); i++) {\n        if(str.substring(i, subStr.length()).equals(subStr))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=string,java,substring |>\n<| a tags=string,java,substring |>\n<code>\n\
    public int howManyTimes(String str, String subStr) {\n    int count = 0;\n   \
    \ for(int i = 0; i < str.length(); i++) {\n        if(str.substring(i, subStr.length()).equals(subStr))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=string,java,substring |>\n<code>\npublic int howManyTimes(String\
    \ str, String subStr) {\n    int count = 0;\n    for(int i = 0; i < str.length();\
    \ i++) {\n        if(str.substring(i, subStr.length()).equals(subStr)) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic int howManyTimes(String str, String subStr) {\n\
    \    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        if(str.substring(i,\
    \ subStr.length()).equals(subStr)) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 tags=string,java,substring |>\n\
    <| a tags=string,java,substring |>\n<code>\npublic int howManyTimes(String str,\
    \ String subStr) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++)\
    \ {\n        if(str.substring(i, subStr.length()).equals(subStr)) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,java,substring |>\n<code>\npublic int howManyTimes(String\
    \ str, String subStr) {\n    int count = 0;\n    for(int i = 0; i < str\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqy4_6qce.d(25): Error: declaration expected, not `<`\n/tmp/tmpqy4_6qce.d(37):
    Error: declaration expected, not `for`\n/tmp/tmpqy4_6qce.d(37): Error: no identifier
    for declarator `i`\n/tmp/tmpqy4_6qce.d(37): Error: declaration expected, not `<`\n/tmp/tmpqy4_6qce.d(37):
    Error: no identifier for declarator `i`\n/tmp/tmpqy4_6qce.d(37): Error: declaration
    expected, not `++`\n/tmp/tmpqy4_6qce.d(40): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqy4_6qce.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ogowa85.d(25): Error: declaration expected, not `<`\n/tmp/tmp6ogowa85.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmp6ogowa85.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmp6ogowa85.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmp6ogowa85.d(39): Error: declaration expected, not `assert`\n/tmp/tmp6ogowa85.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ogowa85.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        if (string.compare(pos, sublen, substring)\
    \ == 0) {\n            count++;\n        }\n        pos += sublen;\n    }\n  \
    \  return count;\n}\n/*\n Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool ignore_case) \n{\n    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    \n    while\
    \ (pos < len) {\n        if (ignore_case ? string.compare(pos, sublen, substring,\
    \ true) == 0 : \n            string.compare(pos, sublen, substring) == 0) {\n\
    \            count++;\n        }\n        pos += sublen;\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaaa\", \"aa\", true)\n  \
    \  3L\n    \n*/\nlong how_many_times(string string, string substring, bool ignore_case,\
    \ bool ignore_whitespace) \n{\n    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    \n    while\
    \ (pos < len) {\n        if (ignore_case ? string.compare(pos, sublen, substring,\
    \ true) == 0 : \n            string.compare(pos, sublen, substring) == 0) {\n\
    \            count++;\n        }\n        if (ignore_whitespace) {\n         \
    \   while (pos < len && isspace(string[pos])) {\n                pos++;\n    \
    \        }\n        }\n        pos += sublen;\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"aaaa\", \"aa\", true, true)\n  \
    \  3L\n    \n*/\nlong how_many_times(string string, string substring, bool ignore_case,\
    \ bool ignore_whitespace, bool ignore_newlines) \n{\n    long count = 0;\n   \
    \ size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        if (ignore_case ? string.compare(pos,\
    \ sublen, substring, true) == 0 : \n            string.compare(pos, sublen, substring)\
    \ == 0) {\n            count++;\n        }\n        if (ignore_whitespace) {\n\
    \            while (pos < len && isspace(string\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbsfv2nbk.d(97): Error: found `unittest` when expecting `,`\n/tmp/tmpbsfv2nbk.d(106):
    Error: found `void` when expecting `,`\n/tmp/tmpbsfv2nbk.d(106): Error: found
    `{` when expecting `,`\n/tmp/tmpbsfv2nbk.d(106): Error: expression expected, not
    `}`\n/tmp/tmpbsfv2nbk.d(106): Error: found `End of File` when expecting `,`\n/tmp/tmpbsfv2nbk.d(106):
    Error: found `End of File` when expecting `)`\n/tmp/tmpbsfv2nbk.d(106): Error:
    found `End of File` when expecting `)`\n/tmp/tmpbsfv2nbk.d(106): Error: found
    `End of File` instead of statement\n/tmp/tmpbsfv2nbk.d(106): Error: found `End
    of File` when expecting `}` following compound statement\n/tmp/tmpbsfv2nbk.d(106):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbsfv2nbk.d(106):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsfv2nbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start) \n{\n    long\
    \ count = 0;\n    for(int i = start; i < string.length(); i++)\n    {\n      \
    \  if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx_5ummm.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkx_5ummm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexypn3sx.d(16): Error: no property `length` for type `string`\n/tmp/tmpexypn3sx.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpexypn3sx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code does not work. `how_many_times(\"aaaa\", \"aa\")` returns\
    \ `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out. :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmycwpoqu.d(25): Error: declaration expected, not `<`\n/tmp/tmpmycwpoqu.d(39):
    Error: declaration expected, not `assert`\n/tmp/tmpmycwpoqu.d(40): Error: declaration
    expected, not `assert`\n/tmp/tmpmycwpoqu.d(41): Error: declaration expected, not
    `assert`\n/tmp/tmpmycwpoqu.d(42): Error: declaration expected, not `assert`\n/tmp/tmpmycwpoqu.d(43):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmycwpoqu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = string.length();\n    long\
    \ sublen = substring.length();\n    \n    for(long i = 0; i < len; i++) \n   \
    \ {\n        end = string.find(substring, i);\n        if(end == string::npos)\
    \ \n        {\n            end = len;\n        }\n        \n        if(end > start)\
    \ \n        {\n            count += end - start;\n            start = end;\n \
    \       }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpanb483dm.d(24): Error: found `:` when expecting `)`\n/tmp/tmpanb483dm.d(24):
    Error: found `:` instead of statement\n/tmp/tmpanb483dm.d(36): Error: declaration
    expected, not `return`\n/tmp/tmpanb483dm.d(37): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanb483dm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbqnvrh0x.d(17): Error: no property `length` for type `string`\n/tmp/tmpbqnvrh0x.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbqnvrh0x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9918t_2.d(16): Error: no property `length` for type `string`\n/tmp/tmpp9918t_2.d(17):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp9918t_2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    foreach(char c in substring) \n    {\n        foreach(char c2 in string)\
    \ \n        {\n            if (c == c2) \n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<| c |>\nThis doesn't work if\
    \ you have a substring that appears more than once in the original string. For\
    \ example, how_many_times(\"abcabc\", \"abc\") returns 3 instead of 2.\n<|/ c\
    \ |>\n<| c |>\n: Yes, you are right. I missed that case. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fmv3ggm.d(17): Error: found `in` when expecting `;`\n/tmp/tmp3fmv3ggm.d(19):
    Error: found `in` when expecting `;`\n/tmp/tmp3fmv3ggm.d(30): Error: declaration
    expected, not `<`\n/tmp/tmp3fmv3ggm.d(33): Error: unterminated character constant\n/tmp/tmp3fmv3ggm.d(44):
    Error: declaration expected, not `assert`\n/tmp/tmp3fmv3ggm.d(45): Error: declaration
    expected, not `assert`\n/tmp/tmp3fmv3ggm.d(46): Error: declaration expected, not
    `assert`\n/tmp/tmp3fmv3ggm.d(47): Error: declaration expected, not `assert`\n/tmp/tmp3fmv3ggm.d(48):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fmv3ggm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis code doesn't work if you have a string like \"aba\" and you\
    \ search for \"ab\". It will count the occurrences of \"ab\" in the string \"\
    aba\".\n<|/ c |>\n<| c |>\nYes, you are right. I've edited my answer to fix this\
    \ issue.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp67f0c8xy.d(25): Error: declaration expected, not `<`\n/tmp/tmp67f0c8xy.d(28):
    Error: unterminated character constant\n/tmp/tmp67f0c8xy.d(31): Error: unterminated
    character constant\n/tmp/tmp67f0c8xy.d(39): Error: declaration expected, not `assert`\n/tmp/tmp67f0c8xy.d(40):
    Error: declaration expected, not `assert`\n/tmp/tmp67f0c8xy.d(41): Error: declaration
    expected, not `assert`\n/tmp/tmp67f0c8xy.d(42): Error: declaration expected, not
    `assert`\n/tmp/tmp67f0c8xy.d(43): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp67f0c8xy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    \n    for(long i = 0; i < string.length();\
    \ i++) {\n        if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n            count++;\n            start = i;\n            end = i +\
    \ substring.length();\n        }\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe4s0pgzu.d(19): Error: no property `length` for type `string`\n/tmp/tmpe4s0pgzu.d(20):
    Error: no property `compare` for type `string`\n/tmp/tmpe4s0pgzu.d(23): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpe4s0pgzu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n\
    <| c |>\nThis doesn't work if you have a string like \"aaaaaaa\" and a substring\
    \ like \"aaa\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and I got 3 for \"aaaaaaa\"\
    \ and \"aaa\" but I think you meant 2\n<|/ c |>\n<| c |>\nYes, I meant 2. My bad.\
    \ Sorry about that.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"aaaaaaa\" and a substring like \"aaa\"\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppqrb6r7u.d(25): Error: declaration expected, not `<`\n/tmp/tmppqrb6r7u.d(28):
    Error: unterminated character constant\n/tmp/tmppqrb6r7u.d(40): Error: unterminated
    character constant\n/tmp/tmppqrb6r7u.d(48): Error: declaration expected, not `assert`\n/tmp/tmppqrb6r7u.d(49):
    Error: declaration expected, not `assert`\n/tmp/tmppqrb6r7u.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmppqrb6r7u.d(51): Error: declaration expected, not
    `assert`\n/tmp/tmppqrb6r7u.d(52): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppqrb6r7u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.substr(i, substring.length()) ==\
    \ substring)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3zfk1yr.d(102): Error: basic type expected, not `unittest`\n/tmp/tmp_3zfk1yr.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_3zfk1yr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkk2gsjl4.d(16): Error: no property `length` for type `string`\n/tmp/tmpkk2gsjl4.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkk2gsjl4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string.charAt(i) == substring.charAt(j)) {\n\t\t\t\tcount++;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkcizq553.d(16): Error: no property `length` for type `string`\n/tmp/tmpkcizq553.d(17):
    Error: no property `length` for type `string`\n/tmp/tmpkcizq553.d(18): Error:
    no property `charAt` for type `string`\n/tmp/tmpkcizq553.d(18): Error: no property
    `charAt` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkcizq553.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    \n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    \n    for(int i = start; i < end; i++)\n    {\n  \
    \      if(string.substr(i, substring.length()) == substring)\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end, int\
    \ step) \n{\n    long count = 0;\n    \n    for(int i = start; i < end; i+=step)\n\
    \    {\n        if(string.substr(i, substring.length()) == substring)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong \nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx_4p3kfc.d(106): Error: no identifier for declarator `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_4p3kfc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    long i = 0;\n \
    \   \n    while(i < string.length())\n    {\n        end = string.find(substring,\
    \ start);\n        if(end == string.length())\n        {\n            count++;\n\
    \            start = end + 1;\n        }\n        else\n        {\n          \
    \  count++;\n            start = end + 1;\n            len = end - start + 1;\n\
    \        }\n        i++;\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, string substring2) \n{\n\
    \    long count = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n\
    \    long i = 0;\n    \n    while(i < string.length())\n    {\n        end = string.find(substring,\
    \ start);\n        if(end == string.length())\n        {\n            count++;\n\
    \            start = end + 1;\n        }\n        else\n        {\n          \
    \  count++;\n            start = end + 1;\n            len = end - start + 1;\n\
    \        }\n        i++;\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, string substring2, string\
    \ substring3) \n{\n    long count = 0;\n    long start = 0;\n    long end = 0;\n\
    \    long len = 0;\n    long i = 0;\n    \n    while(i < string.length())\n  \
    \  {\n        end = string.find(substring, start);\n        if(end == string.length())\n\
    \        {\n            count++;\n            start = end + 1;\n        }\n  \
    \      else\n        {\n            count++;\n            start = end + 1;\n \
    \           len = end - start + 1;\n        }\n        i++;\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aa\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8gw4c5f6.d(111): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gw4c5f6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\t\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string.substr(i, substring.length())\
    \ == substring) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_s78o4ec.d(17): Error: no property `length` for type `string`\n/tmp/tmp_s78o4ec.d(18):
    Error: no property `substr` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_s78o4ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\n\
    This doesn't work if the substring appears more than once in the original string.\
    \ For example, if `string = \"aaa\"` and `substring = \"aa\"`, then `how_many_times(string,\
    \ \"aa\")` returns 2, not 3.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't\
    \ think about that case. I'll edit the answer to fix it.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjdiizhho.d(25): Error: declaration expected, not `<`\n/tmp/tmpjdiizhho.d(28):
    Error: unterminated character constant\n/tmp/tmpjdiizhho.d(31): Error: unterminated
    character constant\n/tmp/tmpjdiizhho.d(31): Error: unterminated character constant\n/tmp/tmpjdiizhho.d(39):
    Error: declaration expected, not `assert`\n/tmp/tmpjdiizhho.d(40): Error: declaration
    expected, not `assert`\n/tmp/tmpjdiizhho.d(41): Error: declaration expected, not
    `assert`\n/tmp/tmpjdiizhho.d(42): Error: declaration expected, not `assert`\n/tmp/tmpjdiizhho.d(43):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdiizhho.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. `how_many_times(\"aaaa\", \"aa\"\
    )` returns `3` when it should be `2`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it. I had forgotten that `compare` returns `0` if the strings are\
    \ equal, and `1` if the first string is greater than the second.\n<|/ c |>\n<|\
    \ a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\n \
    \   assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jqc9fjd.d(27): Error: declaration expected, not `<`\n/tmp/tmp2jqc9fjd.d(30):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2jqc9fjd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        if (string.compare(pos, sublen, substring)\
    \ == 0) {\n            count++;\n        }\n        pos += sublen;\n    }\n  \
    \  return count;\n}\n/*\n Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"\
    a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive) \n{\n    long count = 0;\n    size_t pos = 0;\n    size_t\
    \ len = string.length();\n    size_t sublen = substring.length();\n    \n    while\
    \ (pos < len) {\n        if (case_sensitive) {\n            if (string.compare(pos,\
    \ sublen, substring) == 0) {\n                count++;\n            }\n      \
    \  } else {\n            if (string.compare(pos, sublen, substring, 0, sublen)\
    \ == 0) {\n                count++;\n            }\n        }\n        pos +=\
    \ sublen;\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool ignore_case) \n{\n    long count = 0;\n    size_t\
    \ pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        if (ignore_case) {\n            if (string.compare(pos,\
    \ sublen, substring) == 0) {\n                count++;\n            }\n      \
    \  } else {\n            if (string.compare(pos, sublen, substring, 0, sublen)\
    \ == 0) {\n                count++;\n            }\n        }\n        pos +=\
    \ sublen;\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool ignore_\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy11ijr33.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy11ijr33.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string.compare(i, substring2.length(),\
    \ substring2, 0, substring2.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}\n/*\n Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\"\
    )\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3) \n{\n\tlong count = 0;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t\telse if\
    \ (string.compare(i, substring2.length(), substring2, 0, substring2.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string.compare(i, substring3.length(),\
    \ substring3, 0, substring3.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}\n/*\n Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\"\
    )\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ string substring2, string substring3, string substring4) \n{\n\tlong count =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (string.compare(i, substring2.length(), substring2, 0, \nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfcb6i4o3.d(90): Error: expression expected, not `unittest`\n/tmp/tmpfcb6i4o3.d(91):
    Error: found `{` when expecting `,`\n/tmp/tmpfcb6i4o3.d(92): Error: expression
    expected, not `alias`\n/tmp/tmpfcb6i4o3.d(92): Error: found `candidate` when expecting
    `,`\n/tmp/tmpfcb6i4o3.d(92): Error: expression expected, not `=`\n/tmp/tmpfcb6i4o3.d(92):
    Error: found `how_many_times` when expecting `,`\n/tmp/tmpfcb6i4o3.d(92): Error:
    expression expected, not `;`\n/tmp/tmpfcb6i4o3.d(94): Error: found `assert` when
    expecting `,`\n/tmp/tmpfcb6i4o3.d(94): Error: found `;` when expecting `,`\n/tmp/tmpfcb6i4o3.d(95):
    Error: found `;` when expecting `,`\n/tmp/tmpfcb6i4o3.d(96): Error: found `;`
    when expecting `,`\n/tmp/tmpfcb6i4o3.d(97): Error: found `;` when expecting `,`\n/tmp/tmpfcb6i4o3.d(98):
    Error: expression expected, not `}`\n/tmp/tmpfcb6i4o3.d(99): Error: found `void`
    when expecting `,`\n/tmp/tmpfcb6i4o3.d(99): Error: found `{` when expecting `,`\n/tmp/tmpfcb6i4o3.d(99):
    Error: expression expected, not `}`\n/tmp/tmpfcb6i4o3.d(99): Error: found `End
    of File` when expecting `,`\n/tmp/tmpfcb6i4o3.d(99): Error: found `End of File`
    when expecting `)`\n/tmp/tmpfcb6i4o3.d(99): Error: found `End of File` when expecting
    `)`\n/tmp/tmpfcb6i4o3.d(99): Error: found `End of File` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcb6i4o3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    \n    for(long i = 0; i < string.length();\
    \ i++) {\n        end = string.find(substring, start);\n        if(end == string.length())\
    \ {\n            break;\n        }\n        \n        count += end - start;\n\
    \        start = end + 1;\n    }\n    \n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptjloinji.d(19): Error: no property `length` for type `string`\n/tmp/tmptjloinji.d(20):
    Error: no property `find` for type `string`\n/tmp/tmptjloinji.d(21): Error: no
    property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptjloinji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t length = string.length();\n    size_t substringLength\
    \ = substring.length();\n    \n    while (pos < length) {\n        if (string.compare(pos,\
    \ substringLength, substring) == 0) {\n            count++;\n        }\n     \
    \   pos += substringLength;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0cy_awg.d(17): Error: no property `length` for type `string`\n/tmp/tmpz0cy_awg.d(18):
    Error: no property `length` for type `string`\n/tmp/tmpz0cy_awg.d(21): Error:
    no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpz0cy_awg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < sublen; j++)\n\
    \        {\n            if(string[i] == substring[j])\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3czblnrw.d(16): Error: no property `length` for type `string`\n/tmp/tmp3czblnrw.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3czblnrw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    a\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0)\n    0L\n \
    \   >>> how_many_times(\"aaa\", \"a\", 0)\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\", 0)\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end) \n{\n    long count = 0;\n    for(int i = start; i < end;\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring) ==\
    \ 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0, 0)\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\", 0, 0)\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\", 0, 0)\n    3L\n    \n*/\nlong how_many_times(string string, string\
    \ substring, int start, int end, int step) \n{\n    long count = 0;\n    for(int\
    \ i = start; i < end; i+=step)\n    {\n        if(string.compare(i, substring.length(),\
    \ substring) == 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0, 2)\n\
    \    0L\n    >>> how_many_times(\"aaa\", \"a\", 0, 2)\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\", 0, 2)\n    3L\n    \n*/\nlong \nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77fj_o_k.d(102): Error: no identifier for declarator `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77fj_o_k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a substring that appears more than\
    \ once in the original string. For example, how_many_times(\"aaaa\", \"aa\") returns\
    \ 3, but how_many_times(\"aaaa\", \"aaa\") returns 4.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I see that now. Thanks for pointing that out. I've updated my answer to fix\
    \ it.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated my answer\
    \ to fix it.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppg44fzem.d(25): Error: declaration expected, not `<`\n/tmp/tmppg44fzem.d(28):
    Error: unterminated character constant\n/tmp/tmppg44fzem.d(31): Error: unterminated
    character constant\n/tmp/tmppg44fzem.d(34): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppg44fzem.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tfor (int j = 0; j < substring.length();\
    \ j++) {\n\t\t\tif (string[i] == substring[j]) {\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphj8tvnmx.d(16): Error: no property `length` for type `string`\n/tmp/tmphj8tvnmx.d(17):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphj8tvnmx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\t\n\
    \tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \t\n\treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgigm8o91.d(17): Error: no property `length` for type `string`\n/tmp/tmpgigm8o91.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgigm8o91.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\t\n\
    \tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] == substring[0])\
    \ \n\t\t{\n\t\t\tfor (int j = 1; j < substring.length(); j++)\n\t\t\t{\n\t\t\t\
    \tif (string[i + j] != substring[j])\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\t\n\t\t\tif (j == substring.length())\n\t\t\t{\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_emhpb86.d(17): Error: no property `length` for type `string`\n/tmp/tmp_emhpb86.d(21):
    Error: no property `length` for type `string`\n/tmp/tmp_emhpb86.d(29): Error:
    undefined identifier `j`\n/tmp/tmp_emhpb86.d(29): Error: no property `length`
    for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_emhpb86.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive) \n{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(case_sensitive)\n        {\n            if(string.compare(i,\
    \ substring.length(), substring) == 0)\n            {\n                count++;\n\
    \            }\n        }\n        else\n        {\n            if(string.compare(i,\
    \ substring.length(), substring, true) == 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Find how many times\
    \ a given substring can be found in the original string. Count overlaping cases.\n\
    \    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\",\
    \ \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\n\
    long how_many_times(string string, string substring, bool case_sensitive, bool\
    \ ignore_case) \n{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(case_sensitive)\n        {\n            if(string.compare(i,\
    \ substring.length(), substring) == 0)\n            {\n                count++;\n\
    \            }\n        }\n        else\n        {\n            if(ignore_case)\n\
    \            {\n                if(string.compare(i, substring.length(), substring,\
    \ true) == 0)\n                {\n                    count++;\n             \
    \   }\n            }\n            else\n            {\n                if(string.compare(i,\
    \ substring.length(), substring, true) == 0)\n                {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool ignore_case, bool ignore_whitespace) \n{\n    long\
    \ count = 0;\n    for(int \nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2qjpzy5_.d(113): Error: no identifier for declarator `int`\n/tmp/tmp2qjpzy5_.d(113):
    Error: expression expected, not `unittest`\n/tmp/tmp2qjpzy5_.d(114): Error: found
    `{` when expecting `;` following `for` condition\n/tmp/tmp2qjpzy5_.d(115): Error:
    expression expected, not `alias`\n/tmp/tmp2qjpzy5_.d(115): Error: found `candidate`
    when expecting `)`\n/tmp/tmp2qjpzy5_.d(115): Error: found `=` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qjpzy5_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long len = 0;\n    long i = 0;\n \
    \   \n    len = string.length();\n    end = len-1;\n    \n    while(start < end)\
    \ {\n        while(string.at(start) == substring.at(0) && start < end) {\n   \
    \         start++;\n        }\n        while(string.at(end) == substring.at(len-1)\
    \ && end > start) {\n            end--;\n        }\n        if(start < end) {\n\
    \            count++;\n            start = end;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start) \n{\n    long count = 0;\n    long end = 0;\n    long len = 0;\n\
    \    long i = 0;\n    \n    len = string.length();\n    end = len-1;\n    \n \
    \   while(start < end) {\n        while(string.at(start) == substring.at(0) &&\
    \ start < end) {\n            start++;\n        }\n        while(string.at(end)\
    \ == substring.at(len-1) && end > start) {\n            end--;\n        }\n  \
    \      if(start < end) {\n            count++;\n            start = end;\n   \
    \     }\n    }\n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    long len = 0;\n    long\
    \ i = 0;\n    \n    len = string.length();\n    end = len-1;\n    \n    while(start\
    \ < end) {\n        while(string.at(start) == substring.at(0) && start < end)\
    \ {\n            start++;\n        }\n        while(string.at(end) == substring.at(len-1)\
    \ && end > start) {\n            end--;\n        }\n        if(start < end) {\n\
    \            count++;\n            start = end;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ \nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp38wop884.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38wop884.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"a\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, long start) \n{\n   \
    \ long count = 0;\n    \n    for(int i = start; i < string.length(); i++)\n  \
    \  {\n        if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"a\", \"a\", 0)\n    0L\n \
    \   >>> how_many_times(\"aaa\", \"a\", 0)\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\", 0)\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    \n    for(int i = start;\
    \ i < end; i++)\n    {\n        if(string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0)\n        {\n            count++;\n        }\n \
    \   }\n    \n    return count;\n}\n/*\n Find how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    a\", \"a\", 0, 2)\n    0L\n    >>> how_many_times(\"aaa\", \"a\", 0, 2)\n    3L\n\
    \    >>> how_many_times(\"aaaa\", \"aa\", 0, 2)\n    3L\n    \n*/\nlong how_many_times(string\
    \ string, string substring, long start, long end, long step) \n{\n    long count\
    \ = 0;\n    \n    for(int i = start; i < end; i+=step)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"a\", \"a\", 0, 2, 1)\n    0L\n\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn4br40tz.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn4br40tz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.compare(i, substring.length(), substring, 0,\
    \ substring.length()) == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"aaa\"\
    , \"a\", 2)\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\", 2)\n    3L\n   \
    \ \n*/\nlong how_many_times(string string, string substring, int start, int end)\
    \ \n{\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n    \
    \    if(string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\", 2, 3)\n    3L\n\
    \    >>> how_many_times(\"aaaa\", \"aa\", 2, 3)\n    3L\n    \n*/\nlong how_many_times(string\
    \ string, string substring, int start, int end, int step) \n{\n    long count\
    \ = 0;\n    for(int i = start; i < end; i += step)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"aaa\", \"a\", 2, 3)\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\", 2, 3)\n    3L\n    \n*/\nlong how_many_times(string string, string\
    \ substring, int start, int end, int step, string pattern) \n{\n    long count\
    \ = 0;\n    for(int i = start; i < end; i += \nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2t9sx_06.d(97): Error: expression expected, not `unittest`\n/tmp/tmp2t9sx_06.d(98):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2t9sx_06.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis is not the most efficient solution, since it does a lot of\
    \ unnecessary comparisons. A better solution would be to count the occurrences\
    \ of substrings starting at position `i` and ending at position `i+1`, where `i`\
    \ is the index of the first character of the substring.\n<|/ c |>\n<| c |>\n:\
    \ Yes, I agree with you. But the OP asked for the most efficient solution. So,\
    \ I have written the most efficient solution. :)\n<|/ c |>\n<| c |>\n: Yes, I\
    \ agree with you. But the OP asked for the most efficient solution. So, I have\
    \ written the most efficient solution. :)\n<|/ c |>\n<| c |>\n: Yes, I agree with\
    \ you. But the OP asked for the most efficient solution. So, I have written the\
    \ most efficient solution. :)\n<|/ c |>\n<| c |>\n: Yes, I agree with you. But\
    \ the OP asked for the most efficient solution. So, I have written the most efficient\
    \ solution. :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpghd1gnqt.d(25): Error: declaration expected, not `<`\n/tmp/tmpghd1gnqt.d(48):
    Error: declaration expected, not `assert`\n/tmp/tmpghd1gnqt.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmpghd1gnqt.d(50): Error: declaration expected, not
    `assert`\n/tmp/tmpghd1gnqt.d(51): Error: declaration expected, not `assert`\n/tmp/tmpghd1gnqt.d(52):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghd1gnqt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.substr(i, substring.length()) ==\
    \ substring)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3zfk1yr.d(102): Error: basic type expected, not `unittest`\n/tmp/tmp_3zfk1yr.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_3zfk1yr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpny4h7w81.d(17): Error: no property `length` for type `string`\n/tmp/tmpny4h7w81.d(19):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpny4h7w81.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 0; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j])\n                {\n           \
    \         break;\n                }\n            }\n            \n           \
    \ count += 1;\n            \n            if((i + j) == sublen)\n            {\n\
    \                break;\n            }\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpym556nhj.d(16): Error: no property `length` for type `string`\n/tmp/tmpym556nhj.d(17):
    Error: no property `length` for type `string`\n/tmp/tmpym556nhj.d(33): Error:
    undefined identifier `j`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpym556nhj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;\nunittest\n{\n    alias candidate = how_many_times;\n\n \
    \   assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt07h6nsn.d(23): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt07h6nsn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a tags=string,c++,algorithm |>\n<| c |>\nThis does not answer the question.\
    \ He wants to count the number of times a substring appears in a string. Your\
    \ code only counts the number of times a substring appears anywhere in the string.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI believe this answer is wrong. `how_many_times(\"aaa\", \"\
    a\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI believe this answer is\
    \ wrong. `how_many_times(\"aaa\", \"a\")` returns `3` instead of `2`.\n<|/ c |>\n\
    <| c |>\nI believe this answer is wrong. `how_many_times(\"aaa\", \"a\")` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7bcqdbd.d(27): Error: declaration expected, not `<`\n/tmp/tmpu7bcqdbd.d(33):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu7bcqdbd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   \n    foreach(char c in string) {\n        foreach(char c2 in substring) {\n\
    \            if (c == c2) {\n                count++;\n            }\n       \
    \ }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxefc7s9d.d(17): Error: found `in` when expecting `;`\n/tmp/tmpxefc7s9d.d(18):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxefc7s9d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen = substring.length();\n\
    \    \n    while (pos < len) {\n        size_t subpos = 0;\n        while (subpos\
    \ < sublen) {\n            if (string[pos] == substring[subpos]) {\n         \
    \       subpos++;\n            }\n            pos++;\n        }\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5ps84z4.d(17): Error: no property `length` for type `string`\n/tmp/tmpl5ps84z4.d(18):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpl5ps84z4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkk2gsjl4.d(16): Error: no property `length` for type `string`\n/tmp/tmpkk2gsjl4.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkk2gsjl4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring) == 0)\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojrhocci.d(16): Error: no property `length` for type `string`\n/tmp/tmpojrhocci.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpojrhocci.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        for(int j = 0; j\
    \ < substring.length(); j++)\n        {\n            if(string[i] == substring[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzucy69m3.d(28): Error: declaration expected, not `<`\n/tmp/tmpzucy69m3.d(33):
    Error: identifier expected following `package`\n/tmp/tmpzucy69m3.d(33): Error:
    `;` expected\n/tmp/tmpzucy69m3.d(34): Error: identifier expected following `package`\n/tmp/tmpzucy69m3.d(34):
    Error: `;` expected\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzucy69m3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n    long count = 0;\n    for(int i = start; i < string.length();\
    \ i++)\n    {\n        if(string.substr(i, substring.length()) == substring)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Find how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n    long count = 0;\n    for(int i = start; i < end; i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n    long count = 0;\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        if(string.substr(i, substring.length()) ==\
    \ substring)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, \nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3zfk1yr.d(102): Error: basic type expected, not `unittest`\n/tmp/tmp_3zfk1yr.d(102):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_3zfk1yr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.substr(i,\
    \ substring.length()) == substring)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `how_many_times(\"aaaa\", \"aa\")` returns `3L` instead of `2L`.\n<|/\
    \ c |>\n<| c |>\nYes, it does. I tested it before posting. What is your input?\
    \ What is your expected output?\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have had a typo when I tried it the first time.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I must have had a typo when I tried it the first\
    \ time.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have had a\
    \ typo when I tried it the first time.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1zkb4dyv.d(25): Error: declaration expected, not `<`\n/tmp/tmp1zkb4dyv.d(28):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1zkb4dyv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        if(string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<|\
    \ c |>\nThis is not the most efficient solution, since it requires O(n) extra\
    \ space to store the substrings array.\n<|/ c |>\n<| c |>\n: I agree. However,\
    \ the OP asked for a solution that does not require extra space. He also asked\
    \ for efficiency, which I believe is the most important factor.\n<|/ c |>\n<|\
    \ c |>\n: I agree. However, the OP asked for a solution that does not require\
    \ extra space. He also asked for efficiency, which I believe is the most important\
    \ factor.\n<|/ c |>\n<| c |>\n: I agree. However, the OP asked for a solution\
    \ that does not require extra space. He also asked for efficiency, which I believe\
    \ is the most important factor.\n<|/ c |>\n<| c |>\n: I agree. However, the OP\
    \ asked for a solution that does not require extra space. He also asked for efficiency,\
    \ which I believe is the most important factor.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <vector>\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkc9dkpw.d(23): Error: declaration expected, not `<`\n/tmp/tmpkkc9dkpw.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmpkkc9dkpw.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpkkc9dkpw.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmpkkc9dkpw.d(53): Error: declaration expected, not `assert`\n/tmp/tmpkkc9dkpw.d(54):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkc9dkpw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5ceny8z.d(16): Error: no property `length` for type `string`\n/tmp/tmpi5ceny8z.d(18):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5ceny8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbc2ppj6.d(16): Error: no property `length` for type `string`\n/tmp/tmphbc2ppj6.d(17):
    Error: no property `compare` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphbc2ppj6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long len = string.length();\n    long sublen = substring.length();\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 1; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j])\n                    break;\n  \
    \          }\n            \n            if(j == sublen)\n                count++;\n\
    \        }\n    }\n    \n    return count;\n}\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring, bool case_sensitive) \n{\n \
    \   long count = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n\
    \        {\n            for(int j = 1; j < sublen; j++)\n            {\n     \
    \           if(string[i + j] != substring[j] || (!case_sensitive && string[i]\
    \ == substring[j]))\n                    break;\n            }\n            \n\
    \            if(j == sublen)\n                count++;\n        }\n    }\n   \
    \ \n    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ bool case_sensitive, bool ignore_case) \n{\n    long count = 0;\n    long len\
    \ = string.length();\n    long sublen = substring.length();\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(string[i] == substring[0])\n       \
    \ {\n            for(int j = 1; j < sublen; j++)\n            {\n            \
    \    if(string[i + j] != substring[j] || (!case_sensitive && string[i] == substring[j]\
    \ && !ignore_case))\n                    break;\n            }\n            \n\
    \            if(j == sublen)\n                count++;\n        }\n    }\n   \
    \ \n    return count;\n}\n/*\n Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ywf1gwe.d(102): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ywf1gwe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long end = 0;\n    long length = 0;\n    \n    while(end\
    \ < string.length)\n    {\n        length = string.length-end;\n        if(string.substring_at(end,\
    \ length) == substring)\n        {\n            count++;\n            end = end+length;\n\
    \        }\n        else\n        {\n            end = end+length;\n        }\n\
    \    }\n    return count;\n}\n/*\n Find how many times a given substring can be\
    \ found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start) \n{\n    long count = 0;\n    long end = 0;\n    long length = 0;\n\
    \    \n    while(end < string.length)\n    {\n        length = string.length-end;\n\
    \        if(string.substring_at(end, length) == substring)\n        {\n      \
    \      count++;\n            end = end+length;\n        }\n        else\n    \
    \    {\n            end = end+length;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end) \n{\n    long count = 0;\n    long length = 0;\n    \n\
    \    while(end < string.length)\n    {\n        length = string.length-end;\n\
    \        if(string.substring_at(end, length) == substring)\n        {\n      \
    \      count++;\n            end = end+length;\n        }\n        else\n    \
    \    {\n            end = end+length;\n        }\n    }\n    return count;\n}\n\
    /*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ long start, long end, long length) \n{\n    long count = 0;\n    \n    while(end\
    \ < string.length\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd41es3lp.d(111): Error: found `unittest` when expecting `)`\n/tmp/tmpd41es3lp.d(120):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd41es3lp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string.compare(i, substring.length(),\
    \ substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n/*\n Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start) \n{\n\tlong count = 0;\n\tfor (int i = start; i < string.length();\
    \ i++) {\n\t\tif (string.compare(i, substring.length(), substring, 0, substring.length())\
    \ == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times(string string, string substring, int start, int end) \n\
    {\n\tlong count = 0;\n\tfor (int i = start; i < end; i++) {\n\t\tif (string.compare(i,\
    \ substring.length(), substring, 0, substring.length()) == 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Find how many times a given substring can\
    \ be found in the original string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n    \n*/\nlong how_many_times(string string, string substring,\
    \ int start, int end, int step) \n{\n\tlong count = 0;\n\tfor (int i = start;\
    \ i < end; i += step) {\n\t\tif (string.compare(i, substring.length(), substring,\
    \ 0, substring.length()) == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n/*\n Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"\
    aa\")\n    3L\n    \n*/\nlong how_many_\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeihn1fk8.d(94): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeihn1fk8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    size_t length = string.length();\n    size_t substringLength\
    \ = substring.length();\n    \n    while (pos < length) \n    {\n        if (string.compare(pos,\
    \ substringLength, substring, 0, substringLength) == 0) \n        {\n        \
    \    count++;\n            pos += substringLength;\n        }\n        else\n\
    \        {\n            pos += 1;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic int countSubstring(String\
    \ str, String subStr) {\n    int count = 0;\n    int len = str.length();\n   \
    \ int subLen = subStr.length();\n    int i = 0;\n    int j = 0;\n    while (i\
    \ < len) {\n        while (j < subLen && str.charAt(i) == subStr.charAt(j)) {\n\
    \            j++;\n        }\n        if (j == subLen) {\n            count++;\n\
    \        }\n        j = 0;\n        i++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=string,algorithm,java |>\n<| a tags=string,algorithm,java |>\n<code>\n\
    public int countSubstring(String str, String subStr) {\n    int count = 0;\n \
    \   int len = str.length();\n    int subLen = subStr.length();\n    int i = 0;\n\
    \    int j = 0;\n    while (i < len) {\n        while (j < subLen && str.charAt(i)\
    \ == subStr.charAt(j)) {\n            j++;\n        }\n        if (j == subLen)\
    \ {\n            count++;\n        }\n        j = 0;\n        i++;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int countSubstring(String str, String subStr) {\n    int count = 0;\n    int\
    \ len = str.length();\n    int subLen = subStr.length();\n    int i = 0;\n   \
    \ int j = 0;\n    while (i < len) {\n        while (j < subLen && str.charAt(i)\
    \ == subStr.charAt(j)) {\n            j++;\n        }\n        if (j == subLen)\
    \ {\n            count++;\n        }\n        j = 0;\n        i++;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a tags=string,algorithm,java |>\n<| a tags=string,algorithm,java\
    \ |>\n<code>\npublic int countSubstring(String str, String subStr) {\n    int\
    \ count = 0;\n    int len = str.length();\n    int subLen = subStr.length();\n\
    \    int i = 0;\n    int j = 0;\n    while (i < len) {\n        while (j < subLen\
    \ && str.charAt(i) == subStr.charAt(j)) {\n            j++;\n        }\n     \
    \   if (j == subLen) {\n\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp65jrx3ip.d(34): Error: declaration expected, not `<`\n/tmp/tmp65jrx3ip.d(44):
    Error: declaration expected, not `while`\n/tmp/tmp65jrx3ip.d(47): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65jrx3ip.d", "-I/tmp"]\n'''
  stdout: b''
