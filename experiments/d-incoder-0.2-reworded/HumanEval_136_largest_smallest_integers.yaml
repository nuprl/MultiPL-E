name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in an array.\n    If there is no\
  \ negative or positive integers, return them as null.\n\n    Examples:\n    >>>\
  \ largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n   \
  \ >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
  \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n  \
    \      } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    long a = 0, b = 1;\n    for (long i : lst)\n    {\n   \
    \     if (i < 0)\n        {\n            a = i;\n        }\n        else\n   \
    \     {\n            b = i;\n        }\n    }\n    return Tuple!(Nullable!(long),\
    \ Nullable!(long));\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool foundNegative = false;\n    bool foundPositive = false;\n    long largest\
    \ = Long.min;\n    long smallest = Long.max;\n    for (long i : lst)\n    {\n\
    \        if (i < 0)\n        {\n            foundNegative = true;\n        }\n\
    \        if (i > 0)\n        {\n            foundPositive = true;\n        }\n\
    \        if (foundNegative && foundPositive)\n        {\n            break;\n\
    \        }\n        if (foundNegative)\n        {\n            largest = i;\n\
    \        }\n        if (foundPositive)\n        {\n            smallest = i;\n\
    \        }\n    }\n    if (foundNegative && foundPositive)\n    {\n        result.a\
    \ = Nullable!(largest);\n        result.b = Nullable!(smallest);\n    }\n    else\n\
    \    {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}\n/*", "{\n    long a = null;\n    long b = null;\n\
    \    foreach(long x, lst)\n    {\n        if (x < 0)\n        {\n            if\
    \ (a < 0)\n                a = x;\n        }\n        else\n        {\n      \
    \      if (b < 0)\n                b = x;\n        }\n    }\n    return Tuple!(a,\
    \ b);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ negative = false;\n    bool positive = false;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0)\
    \ {\n            negative = true;\n        } else if (x > 0) {\n            positive\
    \ = true;\n        }\n        if (negative && positive && x > largest) {\n   \
    \         largest = x;\n        } else if (negative && positive && x < smallest)\
    \ {\n            smallest = x;\n        }\n    }\n    if (negative && positive)\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = largest;\n        result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = null;\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    \n    foreach(long x, lst)\n    {\n        if (x < 0)\n        {\n      \
    \      foundNegative = true;\n        }\n        else if (x > 0)\n        {\n\
    \            foundPositive = true;\n        }\n        else\n        {\n     \
    \       result.a = x;\n            result.b = x;\n        }\n    }\n    \n   \
    \ if (foundNegative && foundPositive)\n    {\n        return result;\n    }\n\
    \    \n    return Tuple!(Nullable!(long), Nullable!(long));\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst)\n    {\n        if\
    \ (x < 0)\n        {\n            result.a = x;\n            result.b = null;\n\
    \        }\n        else\n        {\n            result.a = null;\n          \
    \  result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool negative = false;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            negative = true;\n        } else if (i > largest) {\n           \
    \ largest = i;\n        } else if (i < smallest) {\n            smallest = i;\n\
    \        }\n    }\n    if (negative == false) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (largest, smallest);\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (null, null);\n    }\n    \n    return result;\n}", "{\n  \
    \  Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool found = false;\n\
    \    long max = 0;\n    long min = 0;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            found = true;\n            max = i;\n        } else {\n\
    \            min = i;\n        }\n    }\n    if (found) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.a = max;\n        result.b = min;\n    } else\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = Nullable!(long);\n        result.b = Nullable!(long);\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        foreach(j : lst, \n            \n            if(i\
    \ == j)\n            {\n                if(i == 0)\n                {\n      \
    \              result = Tuple!(Nullable!(long), Nullable!(long));\n          \
    \      }\n                else\n                {\n                    result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n                }\n           \
    \ }\n            else\n            {\n                if(i.signum() < j.signum())\n\
    \                {\n                    result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                }\n                else\n                {\n                \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n                }\n \
    \           }\n        )\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    bool negative = true;\n\
    \    long max = 0;\n    long min = 0;\n    foreach(long i, lst)\n    {\n     \
    \   if (i < 0)\n        {\n            negative = false;\n        }\n        if\
    \ (i > 0)\n        {\n            positive = false;\n        }\n        if (i\
    \ == 0)\n        {\n            max = i;\n            min = i;\n        }\n  \
    \      else\n        {\n            if (max < i)\n            {\n            \
    \    max = i;\n            }\n            if (min > i)\n            {\n      \
    \          min = i;\n            }\n        }\n    }\n    if (positive && negative)\n\
    \    {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else if (positive)\n    {\n        result.a = Nullable!(long);\n \
    \       result.b = max;\n    }\n    else if (negative)\n    {\n        result.a\
    \ = min;\n        result.b = Nullable!(long);\n    }\n    else\n    {\n      \
    \  result.a = Nullable!(long);\n        result.b = Nullable!(long);\n    }\n \
    \   return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool foundNegative = false;\n    bool foundPositive = false;\n    long largestPositive\
    \ = 0;\n    long largestNegative = 0;\n    long smallestPositive = 0;\n    long\
    \ smallestNegative = 0;\n    for (long i : lst)\n    {\n        if (i < 0)\n \
    \       {\n            foundNegative = true;\n            largestNegative = i;\n\
    \        }\n        else if (i > 0)\n        {\n            foundPositive = true;\n\
    \            largestPositive = i;\n        }\n        else\n        {\n      \
    \      smallestPositive = i;\n            smallestNegative = i;\n        }\n \
    \   }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \        result.b = Nullable!(smallestPositive);\n    }\n    else if (foundPositive)\n\
    \    {\n        result.a = Nullable!(largestPositive);\n        result.b = Nullable!(smallestNegative);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(null);\n        result.b\
    \ = Nullable!(null);\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool has_negative = false;\n    bool has_positive\
    \ = false;\n    \n    for (long i : lst) {\n        if (i < 0) {\n           \
    \ has_negative = true;\n        }\n        if (i > 0) {\n            has_positive\
    \ = true;\n        }\n    }\n    \n    if (has_negative && has_positive) {\n \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a =\
    \ null;\n        result.b = null;\n    } else if (has_negative) {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = null;\n    \
    \    result.b = Long.min;\n    } else if (has_positive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.a = Long.max;\n        result.b = null;\n\
    \    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \      result.a = null;\n        result.b = null;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t = largest_smallest_integers(i))\n\
    \    {\n        if(t.a != null)\n        {\n            if(t.b != null)\n    \
    \        {\n                result = t;\n                break;\n            }\n\
    \            else\n            {\n                result = null;\n           \
    \     break;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst)\n\
    \    {\n        if (i < 0L)\n        {\n            result.a = Nullable!(long);\n\
    \            result.b = i;\n        }\n        else if (i > 0L)\n        {\n \
    \           result.a = i;\n            result.b = Nullable!(long);\n        }\n\
    \        else\n        {\n            result.a = Nullable!(long);\n          \
    \  result.b = Nullable!(long);\n        }\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        return result;\n    }\n    \n    long max;\n    long min;\n  \
    \  \n    foreach (long i in lst)\n    {\n        if (i < 0)\n        {\n     \
    \       max = i;\n        }\n        else\n        {\n            min = i;\n \
    \       }\n    }\n    \n    if (max == min)\n    {\n        return result;\n \
    \   }\n    \n    result.0 = max;\n    result.1 = min;\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largest = Long.min;\n  \
    \  long smallest = Long.max;\n    foreach(long i in lst)\n    {\n        if (i\
    \ < 0)\n        {\n            foundNegative = true;\n        }\n        if (i\
    \ > 0)\n        {\n            foundPositive = true;\n        }\n        if (foundNegative\
    \ && foundPositive)\n        {\n            break;\n        }\n        if (foundNegative)\n\
    \        {\n            largest = i;\n        }\n        if (foundPositive)\n\
    \        {\n            smallest = i;\n        }\n    }\n    if (foundNegative\
    \ && foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.a = largest;\n        result.b = smallest;\n    }\n    else\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = Nullable!(long);\n        result.b = Nullable!(long);\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool has_negative\
    \ = false;\n    bool has_positive = false;\n    for (long i : lst)\n    {\n  \
    \      if (i < 0)\n        {\n            has_negative = true;\n        }\n  \
    \      else if (i > 0)\n        {\n            has_positive = true;\n        }\n\
    \    }\n    if (has_negative && has_positive)\n    {\n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = Tuple!(Nullable!(long), Nullable!(long));\n       \
    \ tuple.a = null;\n        tuple.b = null;\n        return tuple;\n    }\n   \
    \ else if (has_negative)\n    {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(Nullable!(long), Nullable!(long));\n        tuple.a = null;\n\
    \        tuple.b = lst[0];\n        return tuple;\n    }\n    else if (has_positive)\n\
    \    {\n        Tuple!(Nullable!(long), Nullable!(long)) tuple = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        tuple.a = lst[0];\n        tuple.b = null;\n    \
    \    return tuple;\n    }\n    else\n    {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(Nullable!(long), Nullable!(long));\n        tuple.a = null;\n\
    \        tuple.b = null;\n        return tuple;\n    }\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long a = null;\n    long\
    \ b = null;\n    foreach(long x, lst) {\n        if (x < 0) {\n            a =\
    \ x;\n        } else {\n            b = x;\n        }\n    }\n    return Tuple!(a,\
    \ b);\n}", "{\n    var largest = Nullable!(long);\n    var smallest = Nullable!(long);\n\
    \    var i = 0;\n    while (i < lst.len) {\n        var x = lst[i];\n        if\
    \ (x < 0) {\n            if (largest == Nullable!(long)) {\n                largest\
    \ = Nullable!(long);\n            }\n            largest.val = x;\n        } else\
    \ {\n            if (smallest == Nullable!(long)) {\n                smallest\
    \ = Nullable!(long);\n            }\n            smallest.val = x;\n        }\n\
    \        i += 1;\n    }\n    return (largest, smallest);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, el) in zip(lst, lst.tail) {\n\
    \        if (el < 0L) {\n            result.a = el;\n            result.b = null;\
    \ // no negative integers\n            break;\n        }\n    }\n    \n    if\
    \ (result.a == null) {\n        result.a = null; // no negative integers\n   \
    \     result.b = null; // no positive integers\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else if\
    \ (x > 0) {\n            result.b = x;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long max = 0;\n    long min =\
    \ 0;\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n     \
    \       foundNegative = true;\n        }\n        if (i > 0)\n        {\n    \
    \        foundPositive = true;\n        }\n        if (foundNegative && foundPositive)\n\
    \        {\n            break;\n        }\n        if (foundNegative)\n      \
    \  {\n            max = i;\n        }\n        if (foundPositive)\n        {\n\
    \            min = i;\n        }\n    }\n    if (foundNegative && foundPositive)\n\
    \    {\n        result.a = max;\n        result.b = min;\n    }\n    else\n  \
    \  {\n        result.a = null;\n        result.b = null;\n    }\n    return result;\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool\
    \ isNegative = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n\
    \    \n    for (long i : lst) {\n        if (i < 0) {\n            isNegative\
    \ = true;\n        }\n        if (i > largest) {\n            largest = i;\n \
    \       }\n        if (i < smallest) {\n            smallest = i;\n        }\n\
    \    }\n    \n    if (isNegative) {\n        result.first = null;\n        result.second\
    \ = smallest;\n    } else {\n        result.first = largest;\n        result.second\
    \ = smallest;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool is_negative = false;\n    long max_negative\
    \ = Long.min;\n    long min_positive = Long.max;\n    foreach (long i in lst)\
    \ {\n        if (is_negative) {\n            if (i < 0) {\n                is_negative\
    \ = false;\n                min_positive = i;\n            } else {\n        \
    \        if (i > max_negative) {\n                    max_negative = i;\n    \
    \            }\n            }\n        } else {\n            if (i > 0) {\n  \
    \              is_negative = true;\n                max_negative = i;\n      \
    \      } else {\n                if (i < min_positive) {\n                   \
    \ min_positive = i;\n                }\n            }\n        }\n    }\n    if\
    \ (is_negative) {\n        result.a = max_negative;\n        result.b = min_positive;\n\
    \    } else {\n        result.a = min_positive;\n        result.b = max_negative;\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, el) in zip(lst, lst[1..])\n    {\n        if\
    \ (el < 0)\n        {\n            result.a = el;\n            result.b = i;\n\
    \            break;\n        }\n    }\n    \n    if (result.a == null)\n    {\n\
    \        result.a = null;\n        result.b = null;\n    }\n    \n    return result;\n\
    }", "{\n    long a = null;\n    long b = null;\n    foreach(long x, lst) {\n \
    \       if (x < 0) {\n            a = x;\n        } else {\n            b = x;\n\
    \        }\n    }\n    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst)\n    {\n        if (i <\
    \ 0)\n        {\n            result.a = i;\n        }\n        else if (i > 0)\n\
    \        {\n            result.b = i;\n        }\n        else\n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    foreach(long\
    \ x in lst)\n    {\n        if (x < 0)\n        {\n            neg = true;\n \
    \       }\n        if (x > max)\n        {\n            max = x;\n        }\n\
    \        if (x < min)\n        {\n            min = x;\n        }\n    }\n   \
    \ if (neg)\n    {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else\n    {\n        result.a = max;\n        result.b = min;\n  \
    \  }\n    return result;\n}", "{\n    long max;\n    long min;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            max = x;\n        } else {\n  \
    \          min = x;\n        }\n    }\n    return Tuple!(Nullable!(long), Nullable!(long))\
    \ (max, min);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    bool negative = false;\n    long max = 0;\n    long min = 0;\n    \n\
    \    for (long i : lst)\n    {\n        if (i < 0)\n        {\n            negative\
    \ = true;\n        }\n        \n        if (i > max)\n        {\n            max\
    \ = i;\n        }\n        \n        if (i < min)\n        {\n            min\
    \ = i;\n        }\n    }\n    \n    if (negative && max > min)\n    {\n      \
    \  result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = max;\n\
    \        result.b = min;\n    }\n    else if (!negative && max < min)\n    {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!negative && max == min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max == 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = max;\n    }\n    else if (!negative && max != 0)\n\
    \    {\n        result = Tuple!(Nullable!(long", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative\
    \ = true;\n        }\n        else if (i > 0)\n        {\n            foundPositive\
    \ = true;\n        }\n        else\n        {\n            if (foundNegative &&\
    \ foundPositive)\n            {\n                result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n            }\n            else if (foundNegative)\n    \
    \        {\n                result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \            }\n            else if (foundPositive)\n            {\n         \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n            }\n  \
    \          else\n            {\n                result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n            }\n            break;\n        }\n        if\
    \ (largest < i)\n        {\n            largest = i;\n        }\n        if (smallest\
    \ > i)\n        {\n            smallest = i;\n        }\n    }\n    if (foundNegative\
    \ && foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else if (foundNegative)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else if (foundPositive)\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    else\n    {\n      \
    \  result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    return result;\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else if\
    \ (x > 0) {\n            result.b = x;\n        } else {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            negative = true;\n     \
    \   }\n        if (i > largest) {\n            largest = i;\n        }\n     \
    \   if (i < smallest) {\n            smallest = i;\n        }\n    }\n    if (negative\
    \ == false) {\n        result = Tuple!(Nullable!(long), Nullable!(long)) (largest,\
    \ smallest);\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, null);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) result = Tuple!(Nullable!(long), Nullable!(long));\n   \
    \            else if (i > 0L) result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               else result = Tuple!(Nullable!(long), Nullable!(long));\n    \
    \       });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n        return result;\n    \n    long\
    \ smallest = lst.min();\n    long largest = lst.max();\n    \n    if (smallest\
    \ < 0)\n    {\n        result.a = null;\n        result.b = smallest;\n    }\n\
    \    else if (largest > 0)\n    {\n        result.a = largest;\n        result.b\
    \ = null;\n    }\n    else\n    {\n        result.a = null;\n        result.b\
    \ = null;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if (i < 0)\
    \ \n               result = Tuple!(Nullable!(long), Nullable!(long)) (null, i);\
    \ \n           else\n               result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (i, null));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.min;\n    long\
    \ smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       negative = true;\n        } else if (i > largest) {\n            largest\
    \ = i;\n        } else if (i < smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    if (negative && smallest == Long.min) {\n        result.first\
    \ = null;\n    } else {\n        result.first = largest;\n    }\n    if (negative\
    \ && largest == Long.max) {\n        result.second = null;\n    } else {\n   \
    \     result.second = smallest;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            positive = false;\n        }\n        if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (positive && smallest == Long.max) {\n      \
    \  result.a = Nullable!(null);\n        result.b = Nullable!(null);\n    } else\
    \ {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n    {\n        return result;\n    }\n\
    \    \n    long largest = lst.max();\n    long smallest = lst.min();\n    \n \
    \   if (largest < 0)\n    {\n        result.a = null;\n        result.b = smallest;\n\
    \    }\n    else\n    {\n        result.a = largest;\n        result.b = smallest;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ \n                   result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \             else if (i > 0L)\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n               else\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool has_negative = false;\n    bool has_positive\
    \ = false;\n    long max_negative = Long.min;\n    long min_positive = Long.max;\n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            has_negative =\
    \ true;\n            max_negative = x;\n        } else if (x > 0) {\n        \
    \    has_positive = true;\n            min_positive = x;\n        }\n    }\n \
    \   if (has_negative && has_positive) {\n        result.first = null;\n      \
    \  result.second = min_positive;\n    } else if (has_negative) {\n        result.first\
    \ = null;\n        result.second = max_negative;\n    } else if (has_positive)\
    \ {\n        result.first = max_positive;\n        result.second = null;\n   \
    \ } else {\n        result.first = null;\n        result.second = null;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    var largest = Nullable!(long);\n    var smallest\
    \ = Nullable!(long);\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ n = lst.Length;\n    while (i < n) {\n        if (lst[i] < smallest) {\n   \
    \         smallest = Nullable!(long);\n        }\n        if (lst[i] > largest)\
    \ {\n            largest = Nullable!(long);\n        }\n        if (lst[i] < 0)\
    \ {\n            smallest = Nullable!(long);\n        }\n        if (lst[i] >\
    \ 0) {\n            largest = Nullable!(long);\n        }\n        i += 1;\n \
    \   }\n    return Tuple!(largest, smallest);\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, e) in lst {\n        if (e <\
    \ 0L) {\n            result.a = e;\n        } else {\n            result.b = e;\n\
    \        }\n    }\n    \n    if (result.a == null) {\n        result.a = result.b;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    if (result.a == null) {\n        result.a = result.b;\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    \n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n        \
    \    foundNegative = true;\n        }\n        else if (i > 0)\n        {\n  \
    \          foundPositive = true;\n        }\n    }\n    \n    if (foundNegative\
    \ && foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else if (foundNegative)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else if (foundPositive)\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    else\n    {\n      \
    \  result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ foundNegative = false;\n    bool foundPositive = false;\n    long largest =\
    \ Long.min;\n    long smallest = Long.max;\n    for (long i : lst)\n    {\n  \
    \      if (i < 0)\n        {\n            foundNegative = true;\n        }\n \
    \       else if (i > 0)\n        {\n            foundPositive = true;\n      \
    \  }\n        else\n        {\n            if (foundNegative && foundPositive)\n\
    \            {\n                result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                break;\n            }\n            else if (foundNegative)\n\
    \            {\n                result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                break;\n            }\n            else if (foundPositive)\n\
    \            {\n                result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                break;\n            }\n        }\n        if (largest < i)\n\
    \        {\n            largest = i;\n        }\n        if (smallest > i)\n \
    \       {\n            smallest = i;\n        }\n    }\n    if (foundNegative\
    \ && foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else if (foundNegative)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else if (foundPositive)\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    return result;\n}\n\
    /*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largestNegative = Long.MinValue;\n\
    \    long largestPositive = Long.MaxValue;\n    long smallestNegative = Long.MaxValue;\n\
    \    long smallestPositive = Long.MinValue;\n    foreach(long i, lst)\n    {\n\
    \        if (i < 0)\n        {\n            foundNegative = true;\n          \
    \  largestNegative = i;\n        }\n        else if (i > 0)\n        {\n     \
    \       foundPositive = true;\n            largestPositive = i;\n        }\n \
    \       else\n        {\n            smallestNegative = i;\n            smallestPositive\
    \ = i;\n        }\n    }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \        result.b = Nullable!(smallestPositive);\n    }\n    else if (foundPositive)\n\
    \    {\n        result.a = Nullable!(largestPositive);\n        result.b = Nullable!(smallestNegative);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(null);\n        result.b\
    \ = Nullable!(null);\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) \n               {\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n               }\n               else\n               {\n\
    \                   result = Tuple!(i, i);\n               }\n           });\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \   if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (null, i) else Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                    if(i>0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                \
    \        if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (null, i) else Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                            if(i>0L) Tuple!(Nullable!(long),\
    \ Nullable!(long)) (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n\
    \                                if(i<0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                \
    \                    if(i>0L) Tuple!(Nullable!(long), Nullable!(long)) (null,\
    \ i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                       \
    \                 if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (null, i)\
    \ else Tuple!(Nullable!(long), Nullable!(long)) (\n                          \
    \                  if(i>0L) Tuple!(Nullable!(long), Nullable!(long)) (null, i)\
    \ else Tuple!(Nullable!(long), Nullable!(long)) (\n                          \
    \                      if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (null,\
    \ i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                       \
    \                             if(i>0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                \
    \                                        if(i<0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n                \
    \                                            if(i>0L) Tuple!(Nullable!(long),\
    \ Nullable!(long)) (null, i) else Tuple!(Nullable!(long), Nullable!(long)) (\n\
    \                                                                if(i<0L) Tuple!(Nullable",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n            if(i<0L || i>=long.max) \n                => result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(Nullable!(0L), Nullable!(i))\n            else\n          \
    \      => result = Tuple!(Nullable!(long), Nullable!(long))(Nullable!(i), Nullable!(long.max))\n\
    \    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : lst)\n    {\n        if (i < 0)\n        {\n            neg = true;\n\
    \        }\n        if (i > 0)\n        {\n            if (neg)\n            {\n\
    \                if (max < 0)\n                {\n                    max = i;\n\
    \                }\n                else\n                {\n                \
    \    min = i;\n                }\n            }\n            else\n          \
    \  {\n                if (max < 0)\n                {\n                    max\
    \ = i;\n                }\n                else\n                {\n         \
    \           min = i;\n                }\n            }\n        }\n    }\n   \
    \ if (neg)\n    {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n        if (max < min)\n        {\n            result.a\
    \ = Nullable!(long);\n            result.b = Nullable!(long);\n        }\n   \
    \     else\n        {\n            result.a = max;\n            result.b = min;\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n           else result = Tuple!(Nullable!(long), Nullable!(long)))\
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool positive = true;\n    long largest = Long.MinValue;\n    long smallest\
    \ = Long.MaxValue;\n    for (long i : lst) {\n        if (i < 0) {\n         \
    \   positive = false;\n        }\n        if (i > largest) {\n            largest\
    \ = i;\n        }\n        if (i < smallest) {\n            smallest = i;\n  \
    \      }\n    }\n    if (positive && smallest > largest) {\n        smallest =\
    \ largest;\n    }\n    if (positive && smallest < largest) {\n        largest\
    \ = smallest;\n    }\n    result.a = largest;\n    result.b = smallest;\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n        \n        foreach(j : lst, \n            \n  \
    \          if(i == j)\n            {\n                result := (Nullable!(long),\
    \ Nullable!(long));\n                break;\n            }\n            \n   \
    \         if(i.value < j)\n            {\n                result := (Nullable!(long),\
    \ Nullable!(long));\n                break;\n            }\n            \n   \
    \         if(i.value > j)\n            {\n                result := (Nullable!(long),\
    \ Nullable!(long));\n                break;\n            }\n            \n   \
    \         if(i.value == j)\n            {\n                result := (Nullable!(long),\
    \ Nullable!(long));\n                break;\n            }\n            \n   \
    \     )\n    );\n    \n    return result;\n}", "{\n    long a = null;\n    long\
    \ b = null;\n    foreach(long x, lst) {\n        if (x < 0) {\n            a =\
    \ x;\n        } else {\n            b = x;\n        }\n    }\n    return Tuple!(a,\
    \ b);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n  \
    \  foreach(i : lst, \n           {\n               if (i < 0L) \n            \
    \   {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               }\n               else\n               {\n                   result\
    \ = Tuple!(i, Nullable!(long));\n               }\n           });\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach (i : lst) {\n        if (i < 0) {\n            result.a = i;\n  \
    \      } else {\n            result.b = i;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b;\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (long\
    \ x in lst)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n\
    \        }\n        else\n        {\n            result.b = x;\n        }\n  \
    \  }\n    \n    if (result.a == null)\n    {\n        result.a = result.b == null\
    \ ? null : result.b;\n    }\n    \n    return result;\n}", "{\n    long a = null;\n\
    \    long b = null;\n    foreach(long x, lst) {\n        if (x < 0) {\n      \
    \      if (a is null) a = x;\n            else b = x;\n        }\n        else\
    \ if (x > 0) {\n            if (b is null) b = x;\n            else a = x;\n \
    \       }\n    }\n    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        foreach(j\
    \ : lst, \n            \n            if(i<j) \n            {\n               \
    \ if(i>result.a) \n                {\n                    result.a = i;\n    \
    \                result.b = j;\n                }\n            }\n           \
    \ \n            if(i==j) \n            {\n                if(i>result.a) \n  \
    \              {\n                    result.a = i;\n                }\n     \
    \           \n                if(i<result.b) \n                {\n           \
    \         result.b = i;\n                }\n            }\n            \n    \
    \        if(i>j) \n            {\n                if(i>result.a) \n          \
    \      {\n                    result.a = i;\n                }\n             \
    \   \n                if(i<result.b) \n                {\n                   \
    \ result.b = j;\n                }\n            }\n            \n        )\n \
    \   );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    foreach(long\
    \ i in lst)\n    {\n        if (i < 0)\n        {\n            neg = true;\n \
    \           max = i;\n        }\n        else\n        {\n            if (i >\
    \ max)\n            {\n                max = i;\n            }\n        }\n  \
    \  }\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n     \
    \       if (neg)\n            {\n                result.a = Nullable!(long);\n\
    \                result.b = Nullable!(long);\n                return result;\n\
    \            }\n            else\n            {\n                result.a = Nullable!(long);\n\
    \                result.b = i;\n                return result;\n            }\n\
    \        }\n        else\n        {\n            if (i > max)\n            {\n\
    \                result.a = i;\n                result.b = Nullable!(long);\n\
    \                return result;\n            }\n        }\n    }\n    result.a\
    \ = Nullable!(long);\n    result.b = Nullable!(long);\n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largestPositive = 0;\n \
    \   long largestNegative = 0;\n    \n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            foundNegative = true;\n            largestNegative = i;\n\
    \        } else {\n            foundPositive = true;\n            largestPositive\
    \ = i;\n        }\n    }\n    \n    if (foundNegative) {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    } else {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    }\n    \n    if (foundPositive) {\n\
    \        if (largestPositive > largestNegative) {\n            result.a = largestPositive;\n\
    \            result.b = largestNegative;\n        } else {\n            result.a\
    \ = largestNegative;\n            result.b = largestPositive;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ \n                   result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \             else if (i > 0L)\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n               else\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    bool isNegative = false;\n    long largest\
    \ = Long.min;\n    long smallest = Long.max;\n    \n    for (long i : lst) {\n\
    \        if (i < 0) {\n            isNegative = true;\n        } else if (i >\
    \ largest) {\n            largest = i;\n        } else if (i < smallest) {\n \
    \           smallest = i;\n        }\n    }\n    \n    if (isNegative) {\n   \
    \     result.a = Nullable!(null);\n        result.b = Nullable!(smallest);\n \
    \   } else {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(null);\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool has_negative = false;\n    bool has_positive = false;\n  \
    \  long max_negative = Long.min;\n    long min_positive = Long.max;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            has_negative = true;\n        \
    \    max_negative = x;\n        } else if (x > 0) {\n            has_positive\
    \ = true;\n            min_positive = x;\n        }\n    }\n    if (has_negative)\
    \ {\n        result.a = max_negative;\n    } else {\n        result.a = null;\n\
    \    }\n    if (has_positive) {\n        result.b = min_positive;\n    } else\
    \ {\n        result.b = null;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0)\
    \ {\n            smallest = Long.max;\n            positive = false;\n       \
    \ } else if (x > largest) {\n            largest = x;\n        }\n    }\n    if\
    \ (positive && smallest == Long.max) {\n        result.a = null;\n        result.b\
    \ = null;\n    } else {\n        result.a = largest;\n        result.b = smallest;\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n           else result = Tuple!(Nullable!(long), Nullable!(long)));\
    \ \n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n    {\n        return result;\n    }\n\
    \    \n    long max;\n    long min;\n    \n    foreach (long i in lst)\n    {\n\
    \        if (i < 0)\n        {\n            max = i;\n        }\n        else\n\
    \        {\n            min = i;\n        }\n    }\n    \n    if (max == min)\n\
    \    {\n        return result;\n    }\n    \n    result.0 = max;\n    result.1\
    \ = min;\n    \n    return result;\n}", "{\n    long a = null;\n    long b = null;\n\
    \    foreach (long i in lst) {\n        if (i < 0) {\n            a = i;\n   \
    \     } else if (i > 0){\n            b = i;\n        }\n    }\n    return Tuple!(a,\
    \ b);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ has_negative = false;\n    bool has_positive = false;\n    long largest_negative\
    \ = Long.min;\n    long largest_positive = Long.max;\n    foreach(long x, lst)\
    \ {\n        if (x < 0) {\n            has_negative = true;\n            largest_negative\
    \ = x;\n        } else if (x > 0) {\n            has_positive = true;\n      \
    \      largest_positive = x;\n        } else {\n            has_negative = false;\n\
    \            has_positive = false;\n        }\n    }\n    if (has_negative) {\n\
    \        result.a = Nullable!(largest_negative);\n    } else {\n        result.a\
    \ = Nullable!(largest_positive);\n    }\n    if (has_positive) {\n        result.b\
    \ = Nullable!(largest_positive);\n    } else {\n        result.b = Nullable!(largest_negative);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool positive = true;\n    long largest = Long.MinValue;\n    long\
    \ smallest = Long.MaxValue;\n    foreach(long x, lst)\n    {\n        if (x <\
    \ 0)\n        {\n            positive = false;\n        }\n        if (x > largest)\n\
    \        {\n            largest = x;\n        }\n        if (x < smallest)\n \
    \       {\n            smallest = x;\n        }\n    }\n    if (positive == true)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(null,\
    \ null);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestNegative = Long.MinValue;\n    long largestPositive\
    \ = Long.MaxValue;\n    long smallestNegative = Long.MaxValue;\n    long smallestPositive\
    \ = Long.MinValue;\n    for (long i : lst)\n    {\n        if (i < 0)\n      \
    \  {\n            foundNegative = true;\n            largestNegative = i;\n  \
    \      }\n        else if (i > 0)\n        {\n            foundPositive = true;\n\
    \            largestPositive = i;\n        }\n        else\n        {\n      \
    \      foundNegative = false;\n            foundPositive = false;\n        }\n\
    \    }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \    }\n    else if (foundPositive)\n    {\n        result.a = Nullable!(largestPositive);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(smallestNegative);\n   \
    \     result.b = Nullable!(smallestPositive);\n    }\n    return result;\n}",
  "{\n    var largest = Nullable!(long);\n    var smallest = Nullable!(long);\n  \
    \  foreach(i : lst) {\n        if (i < 0) {\n            largest = i;\n      \
    \  } else {\n            smallest = i;\n        }\n    }\n    return Tuple!(largest,\
    \ smallest);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n \
    \   \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(\n                    Array!long(\n         \
    \               Array!long(\n                            Array!long(\n       \
    \                         Array!long(\n                                    Array!long(\n\
    \                                        Array!long(\n                       \
    \                     Array!long(\n                                          \
    \      Array!long(\n                                                    Array!long(\n\
    \                                                        Array!long(\n       \
    \                                                     Array!long(\n          \
    \                                                      Array!long(\n         \
    \                                                           Array!long(\n    \
    \                                                                    Array!long(\n\
    \                                                                            Array!long(\n\
    \                                                                            \
    \    Array!long(\n                                                           \
    \                         Array!long(\n                                      \
    \                                                  Array!long(\n             \
    \                                                                            \
    \   Array!long(\n                                                            \
    \                                    Array!long(\n                           \
    \                                                                         Array!long(\n\
    \                                                                            \
    \                            Array!long(\n                                   \
    \                                                                         Array!long(\n\
    \                                                                            \
    \                                    Array!long(\n                           \
    \                                                                            \
    \             Array!long(\n                                                  \
    \                                                                      Array!long(\n\
    \                                                                            \
    \                                                Array!long(\n               \
    \                                                                            \
    \                                     Array!long(\n                          \
    \                                                                            \
    \                              Array!long(\n                                 \
    \                                                                            \
    \                           Array!long(\n                                    \
    \                                                                            \
    \                            Array!long(\n                                   \
    \                                                                            \
    \                                 Array!long(\n                              \
    \                                                                            \
    \                                          Array!long(\n                     \
    \                                                                            \
    \                                                       Array!long(\n        \
    \                                                                            \
    \                                                                        Array!long(\n\
    \                                                                            \
    \                                                                            \
    \        Array!long(\n                                                       \
    \                                                                            \
    \                                 Array!long(\n                              \
    \                                                                            \
    \                                                              Array!long(\n \
    \                                                                            \
    \                                                                            \
    \                   Array!long(\n                                            \
    \                                                                            \
    \                                                        Array!long(\n       \
    \                                                                            \
    \                                                                            \
    \                     Array!long(\n                                          \
    \                                                                            \
    \                                                                  Array!long(\n\
    \                                                                            \
    \                                                                            \
    \                                    Array!long(\n                           \
    \                                                                            \
    \                                                                            \
    \             Array!long(\n                                                  \
    \                                                                            \
    \                                                                      Array!long(\n\
    \                                                                            \
    \                                                                            \
    \                                                Array!long(\n               \
    \                                                                            \
    \                                                                            \
    \                                     Array!long(\n                          \
    \                                                                            \
    \                                                                            \
    \                              Array!long(\n                                 \
    \                                                                            \
    \                                                                            \
    \                           Array!long(\n                                    \
    \                                                                            \
    \                                                                            \
    \                            Array!long(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                 Array!long(\n                              \
    \                                                                            \
    \                                                                            \
    \                                          Array!long(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                       Array!long(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                        Array!long(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        Array!long(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                 Array!long(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                              Array!long(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   Array!long(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                        Array!long(\n", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ i, lst)\n    {\n        if (i < 0)\n        {\n            negative = true;\n\
    \        }\n        if (i > 0)\n        {\n            if (largest < i)\n    \
    \        {\n                largest = i;\n            }\n            if (smallest\
    \ > i)\n            {\n                smallest = i;\n            }\n        }\n\
    \    }\n    if (negative == false)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (largest, smallest);\n    }\n    else\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long)) (null, null);\n    }\n    return\
    \ result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tmp = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n           \
    \     std.math.max(std.math.min(i, 0L), 0L),\n                std.math.min(std.math.max(i,\
    \ 0L), 0L)\n            )\n    )\n    \n    result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n        std.math.max(std.math.min(result, 0L), 0L),\n        std.math.min(std.math.max(result,\
    \ 0L), 0L)\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (long x in lst)\n    {\n       \
    \ if (x < 0)\n        {\n            result.a = x;\n        }\n        else\n\
    \        {\n            result.b = x;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool negative\
    \ = false;\n    long max = 0;\n    long min = 0;\n    \n    for (long i : lst)\n\
    \    {\n        if (i < 0)\n        {\n            negative = true;\n        }\n\
    \        \n        if (i > max)\n        {\n            max = i;\n        }\n\
    \        \n        if (i < min)\n        {\n            min = i;\n        }\n\
    \    }\n    \n    if (negative == false)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(max, min);\n    }\n    else\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(null, null);\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           {\n               if (i < 0L) \n               {\n            \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n                 \
    \  break;\n               }\n               else\n               {\n         \
    \          result = Tuple!(Nullable!(long), Nullable!(long));\n              \
    \     break;\n               }\n           });\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    for (long i\
    \ : lst)\n    {\n        if (i < 0)\n        {\n            negative = true;\n\
    \        }\n        if (i > 0)\n        {\n            if (largest < i)\n    \
    \        {\n                largest = i;\n            }\n            if (smallest\
    \ > i)\n            {\n                smallest = i;\n            }\n        }\n\
    \    }\n    if (negative == false)\n    {\n        result.first = null;\n    \
    \    result.second = largest;\n    }\n    else\n    {\n        result.first =\
    \ null;\n        result.second = smallest;\n    }\n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n \
    \           result.b = Nullable!(long);\n        }\n        else\n        {\n\
    \            result.a = Nullable!(long);\n            result.b = x;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool found = false;\n    long largest = -100000000000L;\n    long\
    \ smallest = 100000000000L;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            smallest = i;\n            found = true;\n        } else if (i >\
    \ largest) {\n            largest = i;\n        }\n    }\n    if (found) {\n \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a =\
    \ largest;\n        result.b = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n    {\n        return result;\n    }\n\
    \    \n    long largest = std.math.max(lst);\n    long smallest = std.math.min(lst);\n\
    \    \n    if (largest < 0)\n    {\n        result.a = null;\n        result.b\
    \ = smallest;\n    }\n    else\n    {\n        result.a = largest;\n        result.b\
    \ = smallest;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            foundNegative = true;\n\
    \        } else if (i >= 0) {\n            foundPositive = true;\n        }\n\
    \        if (foundNegative && foundPositive) {\n            break;\n        }\n\
    \        if (foundNegative) {\n            largest = i;\n        } else if (foundPositive)\
    \ {\n            smallest = i;\n        }\n    }\n    if (foundNegative && foundPositive)\
    \ {\n        result.first = null;\n        result.second = smallest;\n    } else\
    \ {\n        result.first = null;\n        result.second = largest;\n    }\n \
    \   return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    bool foundNegative = false;\n    bool foundPositive = false;\n    \n\
    \    for (long i : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative\
    \ = true;\n        }\n        else if (i > 0)\n        {\n            foundPositive\
    \ = true;\n        }\n    }\n    \n    if (foundNegative && foundPositive)\n \
    \   {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n   \
    \ else if (foundNegative)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else if (foundPositive)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (long i in lst) {\n        if (i\
    \ < 0) {\n            result.a = i;\n        } else {\n            result.b =\
    \ i;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n            if(i>0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        function(int\
    \ i) {\n            if (i < 0) {\n                result.a = i;\n            }\
    \ else {\n                result.b = i;\n            }\n        });\n    \n  \
    \  return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           if(i<0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           else if(i>0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           else result = Tuple!(Nullable!(long), Nullable!(long)));\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            neg = true;\n          \
    \  i = -i;\n        }\n        if (i > max) {\n            max = i;\n        }\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    if (neg)\
    \ {\n        result.first = null;\n        result.second = min;\n    } else {\n\
    \        result.first = max;\n        result.second = min;\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ negative = false;\n    long largest = Long.MinValue;\n    long smallest = Long.MaxValue;\n\
    \    foreach (long i in lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative && smallest == Long.MinValue) {\n        smallest = null;\n  \
    \  }\n    if (negative && largest == Long.MaxValue) {\n        largest = null;\n\
    \    }\n    result = Tuple!(Nullable!(long), Nullable!(long));\n    result.0 =\
    \ largest;\n    result.1 = smallest;\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                if(i<0L) Nullable!(0L) else Nullable!(i),\n             \
    \   if(i>0L) Nullable!(i) else Nullable!(Long.maxValue))\n        {\n        \
    \    result = t;\n        }\n    \n    return result;\n}", "{\n    var largest\
    \ = Nullable!(long);\n    var smallest = Nullable!(long);\n    var i = 0;\n  \
    \  var j = 0;\n    var k = 0;\n    var n = lst.Length;\n    while(i < n && j <\
    \ n) {\n        if(lst[i] < lst[j]) {\n            largest = Nullable!(long);\n\
    \            smallest = Nullable!(long);\n            k = i;\n            while(i\
    \ < n && lst[i] < lst[k]) {\n                i++;\n            }\n           \
    \ while(j < n && lst[j] < lst[k]) {\n                j++;\n            }\n   \
    \         if(i < n) {\n                largest = Nullable!(long);\n          \
    \      smallest = Nullable!(long);\n                while(i < n && lst[i] < lst[k])\
    \ {\n                    i++;\n                }\n                while(j < n\
    \ && lst[j] < lst[k]) {\n                    j++;\n                }\n       \
    \     }\n        }\n        else if(lst[i] > lst[j]) {\n            largest =\
    \ Nullable!(long);\n            smallest = Nullable!(long);\n            k = i;\n\
    \            while(i < n && lst[i] > lst[k]) {\n                i++;\n       \
    \     }\n            while(j < n && lst[j] > lst[k]) {\n                j++;\n\
    \            }\n            if(i < n) {\n                largest = Nullable!(long);\n\
    \                smallest = Nullable!(long);\n                while(i < n && lst[i]\
    \ > lst[k]) {\n                    i++;\n                }\n                while(j\
    \ < n && lst[j] > lst[k]) {\n                    j++;\n                }\n   \
    \         }\n        }\n        else {\n            i++;\n            j++;\n \
    \       }\n    }\n    if(i < n) {\n        largest = Nullable!(long);\n      \
    \  smallest = Nullable!(long);\n        while(i < n && lst[i] < lst[k]) {\n  \
    \          i++;\n        }\n        while(j < n && lst[j] < lst[k]) {\n      \
    \      j++;\n        }\n    }\n    if(j < n) {\n        largest = Nullable!(long);\n\
    \        smallest = Nullable!(long);\n        while(i < n && lst[i] > lst[k])\
    \ {\n            i++;\n        }\n        while(j < n && lst[j] > lst[k]) {\n\
    \            j++;\n        }\n    }\n    return Tuple!(largest, smallest);\n}\n\
    /*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative\
    \ = false;\n    long max = 0;\n    long min = 0;\n    for (long i : lst) {\n \
    \       if (i < 0) {\n            negative = true;\n        }\n        if (max\
    \ < i) {\n            max = i;\n        }\n        if (min > i) {\n          \
    \  min = i;\n        }\n    }\n    if (negative && min > 0) {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = max;\n     \
    \   result.b = min;\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.a = max;\n        result.b = min;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool found =\
    \ false;\n    long max = 0;\n    long min = 0;\n    for (long i : lst) {\n   \
    \     if (i < 0) {\n            found = true;\n            max = i;\n        }\
    \ else if (i > max) {\n            max = i;\n        }\n    }\n    for (long i\
    \ : lst) {\n        if (i >= 0) {\n            found = true;\n            min\
    \ = i;\n        } else if (i < min) {\n            min = i;\n        }\n    }\n\
    \    if (found) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.a = max;\n        result.b = min;\n    } else {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            foundNegative = true;\n       \
    \     largest = x;\n        } else if (x > 0) {\n            foundPositive = true;\n\
    \            smallest = x;\n        }\n    }\n    if (foundNegative && foundPositive)\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = Nullable!(largest);\n        result.1 = Nullable!(smallest);\n    } else {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = Nullable!(null);\n        result.1 = Nullable!(null);\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach (long i in lst)\n    {\n        if (i < 0)\n        {\n         \
    \   result.a = i;\n        }\n        else\n        {\n            result.b =\
    \ i;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool found = false;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            smallest = i;\n            found = true;\n        } else if (i >\
    \ largest) {\n            largest = i;\n        }\n    }\n    if (found) {\n \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 =\
    \ largest;\n        result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, el) in lst {\n        if (el < 0L) {\n      \
    \      result.a = el;\n            result.b = null; // no positive integers\n\
    \        } else {\n            result.a = null; // no negative integers\n    \
    \        result.b = el;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x ::\
    \ lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    if (result.a == null)\
    \ {\n        result.a = result.b;\n    }\n    \n    return result;\n}", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    long largest = -100L;\n    long smallest = 100L;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            negative = true;\n            i = -i;\n\
    \        }\n        if (i > largest) {\n            largest = i;\n        }\n\
    \        if (i < smallest) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative == false) {\n        result.a = largest;\n        result.b = smallest;\n\
    \    } else {\n        result.a = null;\n        result.b = null;\n    }\n   \
    \ return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool negative = false;\n    long largest = -100L;\n    long smallest = 100L;\n\
    \    foreach(long i, lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > largest) {\n            largest = i;\n        }\n\
    \        if (i < smallest) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative == false) {\n        result.first = null;\n        result.second\
    \ = smallest;\n    } else {\n        result.first = null;\n        result.second\
    \ = largest;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ \n                   result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \             else if (i > 0L)\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n               else\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           });\n    \n    return result;\n}", "{\n    long\
    \ a = null;\n    long b = null;\n    foreach (long i in lst) {\n        if (i\
    \ < 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n\
    \        }\n    }\n    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t = largest_smallest_integers(i))\n    {\n        result =\
    \ t if t.a > result.a else result;\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) result = Tuple!(Nullable!(long), Nullable!(long)); \n\
    \            if(i>0) result = Tuple!(Nullable!(long), Nullable!(long)); \n   \
    \         );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestNegative = 0;\n    long largestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    long smallestPositive = 0;\n    foreach(long x in lst)\n    {\n  \
    \      if (x < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = x;\n        }\n        else\n        {\n            foundPositive = true;\n\
    \            largestPositive = x;\n        }\n    }\n    if (foundNegative &&\
    \ foundPositive)\n    {\n        result.a = largestNegative;\n        result.b\
    \ = largestPositive;\n    }\n    else if (foundNegative)\n    {\n        result.a\
    \ = largestNegative;\n        result.b = Nullable!(long);\n    }\n    else if\
    \ (foundPositive)\n    {\n        result.a = largestPositive;\n        result.b\
    \ = Nullable!(long);\n    }\n    else\n    {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    }\n    return result;\n}\n/*", "{\n\
    \    long a = null;\n    long b = null;\n    foreach(long x, lst)\n    {\n   \
    \     if (x < 0)\n        {\n            a = x;\n        }\n        else if (x\
    \ > 0)\n        {\n            b = x;\n        }\n    }\n    return Tuple!(a,\
    \ b);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n  \
    \  foreach (i, x) in lst {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else if (x > 0) {\n            result.b = x;\n        } else {\n  \
    \          result.a = x;\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool positive = true;\n    long largest = Long.min;\n    long smallest =\
    \ Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n            positive\
    \ = false;\n        }\n        if (i > largest) {\n            largest = i;\n\
    \        }\n        if (i < smallest) {\n            smallest = i;\n        }\n\
    \    }\n    if (positive && largest == Long.min) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else if (positive && smallest == Long.max) {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    else if\
    \ (positive) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n \
    \   }\n    else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool is_negative = false;\n    bool is_positive = false;\n    long\
    \ largest = Long.min;\n    long smallest = Long.max;\n    for (long i : lst)\n\
    \    {\n        if (i < 0)\n        {\n            is_negative = true;\n     \
    \   }\n        if (i > 0)\n        {\n            is_positive = true;\n      \
    \  }\n        if (is_negative && is_positive)\n        {\n            largest\
    \ = i;\n            smallest = i;\n        }\n        else if (is_negative)\n\
    \        {\n            largest = i;\n        }\n        else if (is_positive)\n\
    \        {\n            smallest = i;\n        }\n    }\n    if (largest == Long.min)\n\
    \    {\n        result.a = null;\n        result.b = null;\n    }\n    else if\
    \ (smallest == Long.max)\n    {\n        result.a = null;\n        result.b =\
    \ null;\n    }\n    else\n    {\n        result.a = largest;\n        result.b\
    \ = smallest;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool neg = false;\n    long max = 0;\n    long\
    \ min = 0;\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n\
    \            neg = true;\n        }\n        if (i > 0)\n        {\n         \
    \   if (neg)\n            {\n                if (max < 0)\n                {\n\
    \                    max = i;\n                }\n                else\n     \
    \           {\n                    if (min > 0)\n                    {\n     \
    \                   min = i;\n                    }\n                    else\n\
    \                    {\n                        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                        break;\n                    }\n \
    \               }\n            }\n            else\n            {\n          \
    \      if (max > 0)\n                {\n                    max = i;\n       \
    \         }\n                else\n                {\n                    if (min\
    \ < 0)\n                    {\n                        min = i;\n            \
    \        }\n                    else\n                    {\n                \
    \        result = Tuple!(Nullable!(long), Nullable!(long));\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n    }\n    if (neg)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    return result;\n}", "{\n    long max = 0;\n  \
    \  long min = 0;\n    foreach(long x, lst) {\n        if (x < 0) {\n         \
    \   max = x;\n        } else {\n            min = x;\n        }\n    }\n    return\
    \ Tuple!(Nullable!(long), Nullable!(long));\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestNegative = 0;\n    long largestPositive = 0;\n   \
    \ long smallestNegative = 0;\n    long smallestPositive = 0;\n    foreach(long\
    \ x in lst)\n    {\n        if (x < 0)\n        {\n            foundNegative =\
    \ true;\n            largestNegative = x;\n        }\n        else\n        {\n\
    \            foundPositive = true;\n            largestPositive = x;\n       \
    \ }\n    }\n    if (foundNegative && foundPositive)\n    {\n        result.a =\
    \ largestNegative;\n        result.b = largestPositive;\n    }\n    else if (foundNegative)\n\
    \    {\n        result.a = largestNegative;\n        result.b = Nullable!(long);\n\
    \    }\n    else if (foundPositive)\n    {\n        result.a = largestPositive;\n\
    \        result.b = Nullable!(long);\n    }\n    else\n    {\n        result.a\
    \ = Nullable!(long);\n        result.b = Nullable!(long);\n    }\n    return result;\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst) {\n        if (i < 0) {\n            result.a = i;\n        } else {\n\
    \            result.b = i;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            negative = true;\n        } else\
    \ if (x == 0) {\n            smallest = 0;\n        } else if (x > largest) {\n\
    \            largest = x;\n        }\n    }\n    if (negative == false) {\n  \
    \      result.first = null;\n        result.second = largest;\n    } else {\n\
    \        result.first = null;\n        result.second = smallest;\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ foundNegative = false;\n    bool foundPositive = false;\n    long largestNegative\
    \ = 0;\n    long largestPositive = 0;\n    long smallestNegative = 0;\n    long\
    \ smallestPositive = 0;\n    foreach(long x in lst)\n    {\n        if (x < 0)\n\
    \        {\n            foundNegative = true;\n            largestNegative = x;\n\
    \        }\n        else if (x > 0)\n        {\n            foundPositive = true;\n\
    \            largestPositive = x;\n        }\n        else\n        {\n      \
    \      smallestNegative = x;\n            smallestPositive = x;\n        }\n \
    \   }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \    }\n    if (foundPositive)\n    {\n        result.b = Nullable!(largestPositive);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(smallestNegative);\n   \
    \     result.b = Nullable!(smallestPositive);\n    }\n    return result;\n}\n\
    /*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x\
    \ :: lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    bool positive = false;\n    long largest = Long.MinValue;\n    long smallest\
    \ = Long.MaxValue;\n    foreach(long i, lst) {\n        if (i < 0) {\n       \
    \     negative = true;\n        } else if (i > 0){\n            positive = true;\n\
    \        }\n        if (negative && positive && largest < i) {\n            largest\
    \ = i;\n        } else if (negative && positive && smallest > i) {\n         \
    \   smallest = i;\n        }\n    }\n    if (negative && positive && largest <\
    \ smallest) {\n        result.a = null;\n        result.b = smallest;\n    } else\
    \ if (negative && positive && smallest > largest) {\n        result.a = null;\n\
    \        result.b = largest;\n    } else {\n        result.a = largest;\n    \
    \    result.b = smallest;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n    \n    function(long\
    \ x)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n      \
    \      result.b = null;\n        }\n        else\n        {\n            result.a\
    \ = null;\n            result.b = x;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            negative = true;\n        }\n \
    \       if (x > largest) {\n            largest = x;\n        }\n        if (x\
    \ < smallest) {\n            smallest = x;\n        }\n    }\n    if (negative\
    \ == false) {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest,\
    \ smallest);\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long));\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if (i < 0L)\
    \ \n               result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long));\n           else if (i > 0L)\n               result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long));\n           else\n    \
    \           result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long));\n           );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestPositive = 0;\n    long largestNegative = 0;\n    long smallestPositive\
    \ = 0;\n    long smallestNegative = 0;\n    foreach(long i in lst)\n    {\n  \
    \      if (i < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = i;\n        }\n        else\n        {\n            foundPositive = true;\n\
    \            largestPositive = i;\n        }\n    }\n    if (foundNegative &&\
    \ foundPositive)\n    {\n        if (largestPositive > largestNegative)\n    \
    \    {\n            result.a = largestPositive;\n            result.b = smallestPositive;\n\
    \        }\n        else\n        {\n            result.a = largestNegative;\n\
    \            result.b = smallestNegative;\n        }\n    }\n    else if (foundNegative)\n\
    \    {\n        result.a = largestNegative;\n        result.b = smallestNegative;\n\
    \    }\n    else if (foundPositive)\n    {\n        result.a = largestPositive;\n\
    \        result.b = smallestPositive;\n    }\n    else\n    {\n        result.a\
    \ = null;\n        result.b = null;\n    }\n    return result;\n}\n/*", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            negative = true;\n            smallest\
    \ = Long.max;\n        } else {\n            smallest = Long.min;\n        }\n\
    \        if (largest < x) {\n            largest = x;\n        }\n        if (smallest\
    \ > x) {\n            smallest = x;\n        }\n    }\n    if (negative == false)\
    \ {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    } else {\n        result.a = Nullable!(null);\n        result.b = Nullable!(null);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.min;\n    long\
    \ smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       negative = true;\n        }\n        if (i > largest) {\n            largest\
    \ = i;\n        }\n        if (i < smallest) {\n            smallest = i;\n  \
    \      }\n    }\n    if (negative == false) {\n        result.a = largest;\n \
    \       result.b = smallest;\n    } else {\n        result.a = null;\n       \
    \ result.b = null;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool negative = false;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            negative = true;\n        } else if (i > largest) {\n           \
    \ largest = i;\n        } else if (i < smallest) {\n            smallest = i;\n\
    \        }\n    }\n    if (negative == false) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (largest, smallest);\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (null, null);\n    }\n    \n    return result;\n}", "{\n  \
    \  long a = null;\n    long b = null;\n    for (long i : lst)\n    {\n       \
    \ if (i < 0)\n        {\n            a = i;\n        }\n        else if (i > 0)\n\
    \        {\n            b = i;\n        }\n    }\n    return Tuple!(a, b);\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool is_negative =\
    \ false;\n    bool is_positive = false;\n    long max_negative = Long.min;\n \
    \   long min_positive = Long.max;\n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            is_negative = true;\n            if (x > max_negative) {\n\
    \                max_negative = x;\n            }\n        } else if (x > 0) {\n\
    \            is_positive = true;\n            if (x < min_positive) {\n      \
    \          min_positive = x;\n            }\n        } else {\n            is_negative\
    \ = false;\n            is_positive = false;\n        }\n    }\n    if (is_negative)\
    \ {\n        result.a = max_negative;\n    } else {\n        result.a = min_positive;\n\
    \    }\n    if (is_positive) {\n        result.b = min_positive;\n    } else {\n\
    \        result.b = max_negative;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n            if(i>0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n            );\n    \n    return result;\n}", "{\n    long\
    \ max;\n    long min;\n    foreach(long x, lst) {\n        if (x < 0) {\n    \
    \        max = x;\n        } else {\n            min = x;\n        }\n    }\n\
    \    return Tuple!(Nullable!(long), Nullable!(long));\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n        return result;\n\
    \    \n    long largest = lst.iter().max().unwrap();\n    long smallest = lst.iter().min().unwrap();\n\
    \    \n    if (largest < 0)\n        return result;\n    \n    if (smallest >\
    \ 0)\n        return result;\n    \n    result.0 = Nullable!(largest);\n    result.1\
    \ = Nullable!(smallest);\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) {\n                   result.a = Nullable!(null);\n    \
    \               result.b = i;\n               } else {\n                   result.a\
    \ = i;\n                   result.b = Nullable!(null);\n               }\n   \
    \        });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        function(int i) {\n          \
    \  if (i < 0) {\n                result.a = i;\n            } else {\n       \
    \         result.b = i;\n            }\n        }\n    );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           {\n               if (i < 0L) {\n                   result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n               } else {\n     \
    \              result = Tuple!(Nullable!(long), Nullable!(long));\n          \
    \     }\n           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0)\
    \ {\n            positive = false;\n            largest = x;\n        } else if\
    \ (x > 0 && x > largest) {\n            largest = x;\n        }\n        if (x\
    \ > 0) {\n            smallest = x;\n        }\n    }\n    if (positive && smallest\
    \ == Long.max) {\n        result.a = Nullable!(null);\n        result.b = Nullable!(null);\n\
    \    } else {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n        \
    \    result.a = e;\n            result.b = e;\n        } else {\n            result.a\
    \ = e;\n            result.b = e;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \        return result;\n    \n    long largest = lst.iter().max().unwrap();\n\
    \    long smallest = lst.iter().min().unwrap();\n    \n    if (largest < 0)\n\
    \    {\n        result.a = null;\n        result.b = smallest;\n        return\
    \ result;\n    }\n    \n    if (smallest > 0)\n    {\n        result.a = largest;\n\
    \        result.b = null;\n        return result;\n    }\n    \n    result.a =\
    \ null;\n    result.b = null;\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool is_positive = true;\n    long max_value =\
    \ Long.min;\n    long min_value = Long.max;\n    for (long i : lst) {\n      \
    \  if (is_positive) {\n            if (i < 0) {\n                is_positive =\
    \ false;\n                min_value = i;\n            }\n        } else {\n  \
    \          if (i >= 0) {\n                is_positive = true;\n              \
    \  max_value = i;\n            }\n        }\n    }\n    if (is_positive) {\n \
    \       result.a = max_value;\n        result.b = min_value;\n    } else {\n \
    \       result.a = null;\n        result.b = null;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largestNegative = 0;\n \
    \   long largestPositive = 0;\n    long smallestNegative = 0;\n    long smallestPositive\
    \ = 0;\n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n       \
    \     foundNegative = true;\n            largestNegative = i;\n        }\n   \
    \     else\n        {\n            foundPositive = true;\n            largestPositive\
    \ = i;\n        }\n    }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \        result.b = Nullable!(smallestPositive);\n    }\n    else if (foundPositive)\n\
    \    {\n        result.a = Nullable!(largestPositive);\n        result.b = Nullable!(smallestNegative);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(null);\n        result.b\
    \ = Nullable!(null);\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (long i in lst) {\n        if (i\
    \ < 0) {\n            result.a = i;\n        } else {\n            result.b =\
    \ i;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    if (result.a == null) {\n        result.a = result.b;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.min;\n    long\
    \ smallest = Long.max;\n    for (long i : lst)\n    {\n        if (i < 0)\n  \
    \      {\n            negative = true;\n        }\n        if (i > largest)\n\
    \        {\n            largest = i;\n        }\n        if (i < smallest)\n \
    \       {\n            smallest = i;\n        }\n    }\n    if (negative == false)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(null,\
    \ null);\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \   if(i<0L) \n                    Tuple!(Nullable!(long), Nullable!(long)) (\n\
    \                        Nullable!(0L), Nullable!(1L)\n                    )\n\
    \                else \n                    Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                        Nullable!(1L), Nullable!(0L)\n                  \
    \  )\n            )\n    )\n    \n    result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n        Nullable!(result.a), Nullable!(result.b)\n    );\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ foundNegative = false;\n    bool foundPositive = false;\n    long largest =\
    \ Long.min;\n    long smallest = Long.max;\n    for (long i : lst)\n    {\n  \
    \      if (i < 0)\n        {\n            foundNegative = true;\n        }\n \
    \       if (i > 0)\n        {\n            foundPositive = true;\n        }\n\
    \        if (foundNegative && foundPositive)\n        {\n            break;\n\
    \        }\n        if (foundNegative)\n        {\n            largest = i;\n\
    \        }\n        if (foundPositive)\n        {\n            smallest = i;\n\
    \        }\n    }\n    if (foundNegative && foundPositive)\n    {\n        result.a\
    \ = Nullable!(largest);\n        result.b = Nullable!(smallest);\n    }\n    else\n\
    \    {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = largest_smallest_integers(i));\n    \n    if (t.a == Nullable!(long))\n\
    \    {\n        result.a = t.b;\n        result.b = Nullable!(long);\n    }\n\
    \    else\n    {\n        result.a = t.a;\n        result.b = t.b;\n    }\n  \
    \  \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    bool foundNegative = false;\n    bool foundPositive = false;\n    \n\
    \    for (long i : lst) {\n        if (i < 0) {\n            foundNegative = true;\n\
    \        } else if (i > 0) {\n            foundPositive = true;\n        }\n \
    \   }\n    \n    if (foundNegative && foundPositive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    } else if (foundNegative) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    } else if (foundPositive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) pair = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                if(i<0L) Nullable!(0L) else Nullable!(i),\n             \
    \   if(i>0L) Nullable!(i) else Nullable!(Long.maxValue())\n            );\n  \
    \      \n        result = pair;\n    );\n    \n    return result;\n}", "{\n  \
    \  Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative =\
    \ false;\n    bool foundPositive = false;\n    long largestPositive = 0;\n   \
    \ long largestNegative = 0;\n    long smallestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n   \
    \         foundNegative = true;\n            largestNegative = i;\n        }\n\
    \        else\n        {\n            foundPositive = true;\n            largestPositive\
    \ = i;\n        }\n    }\n    if (foundNegative)\n    {\n        result.a = Nullable!(largestNegative);\n\
    \        result.b = Nullable!(smallestNegative);\n    }\n    else if (foundPositive)\n\
    \    {\n        result.a = Nullable!(largestPositive);\n        result.b = Nullable!(smallestPositive);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(null);\n        result.b\
    \ = Nullable!(null);\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool negative = false;\n    long max = 0;\n  \
    \  long min = 0;\n    for (long i : lst) {\n        if (i < 0) {\n           \
    \ negative = true;\n        }\n        if (max < i) {\n            max = i;\n\
    \        }\n        if (min > i) {\n            min = i;\n        }\n    }\n \
    \   if (max == 0) {\n        result.a = null;\n        result.b = null;\n    }\
    \ else if (min == max) {\n        result.a = null;\n        result.b = max;\n\
    \    } else {\n        result.a = max;\n        result.b = min;\n    }\n    if\
    \ (negative) {\n        result.a = -result.a;\n        result.b = -result.b;\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    for (long i\
    \ : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative = true;\n\
    \            largest = i;\n        }\n        else if (i > 0)\n        {\n   \
    \         foundPositive = true;\n            smallest = i;\n        }\n      \
    \  else\n        {\n            largest = Long.min;\n            smallest = Long.max;\n\
    \        }\n    }\n    if (foundNegative && foundPositive)\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = Nullable!(largest);\n\
    \        result.1 = Nullable!(smallest);\n    }\n    else if (foundNegative)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = Nullable!(largest);\n        result.1 = Nullable!(Long.max);\n    }\n    else\
    \ if (foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(Long.max);\n        result.1 = Nullable!(smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(Long.max);\n        result.1 = Nullable!(Long.max);\n\
    \    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.MinValue;\n   \
    \ long smallest = Long.MaxValue;\n    for (long i : lst)\n    {\n        if (i\
    \ < 0)\n        {\n            negative = true;\n        }\n        if (i > 0)\n\
    \        {\n            if (largest < i)\n            {\n                largest\
    \ = i;\n            }\n            if (smallest > i)\n            {\n        \
    \        smallest = i;\n            }\n        }\n    }\n    if (negative == false)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(null,\
    \ null);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else if (x > 0) {\n            result.b\
    \ = x;\n        } else {\n            result.a = null;\n            result.b =\
    \ null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                largest_smallest_integers(\n                    Array!long[\n\
    \                        i : i\n                    ]\n                )\n   \
    \     )\n    {\n        if (t.a == null)\n        {\n            result.a = null;\n\
    \            result.b = null;\n        }\n        else if (t.b == null)\n    \
    \    {\n            result.a = t.a;\n            result.b = null;\n        }\n\
    \        else\n        {\n            if (t.a > t.b)\n            {\n        \
    \        result.a = t.a;\n                result.b = t.b;\n            }\n   \
    \         else\n            {\n                result.a = t.b;\n             \
    \   result.b = t.a;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        foreach(j : lst, \n            \n            if(i\
    \ < j) \n            {\n                result.a = i;\n                result.b\
    \ = j;\n                break;\n            }\n            \n        ));\n   \
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool negative = false;\n    long largest = Long.min;\n    long smallest =\
    \ Long.max;\n    foreach(long i, lst)\n    {\n        if (i < 0)\n        {\n\
    \            negative = true;\n        }\n        if (i > largest)\n        {\n\
    \            largest = i;\n        }\n        if (i < smallest)\n        {\n \
    \           smallest = i;\n        }\n    }\n    if (negative == false)\n    {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long)) (largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, null);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n    {\n        result.first\
    \ = null;\n        result.second = null;\n        return result;\n    }\n    \n\
    \    long largest = lst.max();\n    long smallest = lst.min();\n    \n    if (largest\
    \ < 0)\n    {\n        result.first = null;\n        result.second = null;\n \
    \       return result;\n    }\n    \n    if (smallest > 0)\n    {\n        result.first\
    \ = largest;\n        result.second = smallest;\n        return result;\n    }\n\
    \    \n    result.first = null;\n    result.second = null;\n    return result;\n\
    }", "{\n    var largest = Nullable!(long);\n    var smallest = Nullable!(long);\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = lst.Length;\n   \
    \ while(i < n)\n    {\n        if(lst[i] < 0)\n        {\n            largest\
    \ = Nullable!(long);\n            smallest = Nullable!(long);\n            i =\
    \ j;\n        }\n        else\n        {\n            smallest = Nullable!(long);\n\
    \            largest = Nullable!(long);\n            j = k;\n        }\n     \
    \   while(j < n)\n        {\n            if(lst[j] > 0)\n            {\n     \
    \           smallest = Nullable!(long);\n                largest = Nullable!(long);\n\
    \                k = j;\n                break;\n            }\n            else\n\
    \            {\n                j++;\n            }\n        }\n        if(k ==\
    \ j)\n        {\n            break;\n        }\n        i++;\n    }\n    return\
    \ Tuple!(largest, smallest);\n}\n</code>\n<|/ a tags=c#,algorithm,c++,python |>\n\
    <| c |>\nThis doesn't work if there are two negative numbers in the array. Try\
    \ `largest_smallest_integers([-2L, 4L, -1L, 3L, 5L, 7L])`\n<|/ c |>\n<| c |>\n\
    I didn't test the code with negative numbers. But I believe it works. I tested\
    \ it with the example you provided. `largest_smallest_integers([-2L, 4L, -1L,\
    \ 3L, 5L, 7L])` returns `Tuple(None,1)`\n<|/ c |>\n<| c |>\nYes, it works. I tested\
    \ it with the example you provided. `largest_smallest_integers([-2L, 4L, -1L,\
    \ 3L, 5L, 7L])` returns `Tuple(None,1)`\n<|/ c |>\n<| c |>\nI tested it with the\
    \ example you provided. `largest_smallest_integers([-2L, 4L, -1L, 3L, 5L, 7L])`\
    \ returns `Tuple(None,1)`\n<|/ c |>\n<| c |>\nI tested it with the example you\
    \ provided. `largest_smallest_integers([-2L, 4L, -1L, 3L, 5L, 7L])` returns `Tuple(None,1)`\n\
    <|/ c |>\n<| a |>\n<code>\ndef largest_smallest_integers(lst):\n    largest =\
    \ None\n    smallest = None\n    for x in lst:\n        if x < 0:\n          \
    \  if largest is None:\n                largest = x\n            else:\n     \
    \           smallest = ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    bool foundNegative = false;\n    bool foundPositive = false;\n    \n\
    \    for (long i : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative\
    \ = true;\n        }\n        if (i > 0)\n        {\n            foundPositive\
    \ = true;\n        }\n    }\n    \n    if (foundNegative && foundPositive)\n \
    \   {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n   \
    \ else if (foundNegative)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else if (foundPositive)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    else\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0)\
    \ {\n            positive = false;\n            largest = Long.min;\n        \
    \    smallest = Long.max;\n        } else if (x > largest) {\n            largest\
    \ = x;\n        } else if (x < smallest) {\n            smallest = x;\n      \
    \  }\n    }\n    if (positive && largest == Long.min) {\n        result.a = Nullable!(null);\n\
    \        result.b = Nullable!(null);\n    } else if (positive && smallest == Long.max)\
    \ {\n        result.a = Nullable!(null);\n        result.b = Nullable!(null);\n\
    \    } else {\n        result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = -100L;\n    long smallest\
    \ = 100L;\n    for (long i : lst) {\n        if (i < 0) {\n            negative\
    \ = true;\n        }\n        if (i > largest) {\n            largest = i;\n \
    \       }\n        if (i < smallest) {\n            smallest = i;\n        }\n\
    \    }\n    if (negative == false) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (largest, smallest);\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n        return result;\n    \n    long a = lst.iter().max().unwrap();\n\
    \    long b = lst.iter().min().unwrap();\n    \n    if (a < 0)\n        return\
    \ result;\n    \n    if (b > 0)\n        return result;\n    \n    result.0 =\
    \ Nullable!(b);\n    result.1 = Nullable!(a);\n    \n    return result;\n}", "{\n\
    \    var largest = Nullable!(long);\n    var smallest = Nullable!(long);\n   \
    \ foreach(i : lst)\n    {\n        if (i < 0)\n        {\n            largest\
    \ = i;\n        }\n        else if (i > 0)\n        {\n            smallest =\
    \ i;\n        }\n    }\n    return Tuple!(largest, smallest);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst)\n    {\n        if (x\
    \ < 0)\n        {\n            positive = false;\n            largest = x;\n \
    \       }\n        else if (x > 0)\n        {\n            smallest = x;\n   \
    \     }\n        else\n        {\n            largest = x;\n        }\n    }\n\
    \    if (positive == true)\n    {\n        result.a = largest;\n        result.b\
    \ = smallest;\n    }\n    else\n    {\n        result.a = null;\n        result.b\
    \ = null;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, e) in lst {\n        if (e <\
    \ 0L) {\n            result.a = e;\n            result.b = e;\n        } else\
    \ {\n            result.a = e;\n            result.b = e;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ \n               {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               }\n               else \n               {\n                  \
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n               }\n     \
    \      });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestPositive = 0;\n    long largestNegative = 0;\n    long smallestPositive\
    \ = 0;\n    long smallestNegative = 0;\n    foreach(long i in lst)\n    {\n  \
    \      if (i < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = i;\n        }\n        else if (i > 0)\n        {\n            foundPositive\
    \ = true;\n            largestPositive = i;\n        }\n        else\n       \
    \ {\n            if (foundNegative && foundPositive)\n            {\n        \
    \        if (largestNegative > largestPositive)\n                {\n         \
    \           largestNegative = largestPositive;\n                }\n          \
    \      else\n                {\n                    largestPositive = largestPositive;\n\
    \                }\n            }\n            else if (foundNegative)\n     \
    \       {\n                largestNegative = i;\n            }\n            else\
    \ if (foundPositive)\n            {\n                largestPositive = i;\n  \
    \          }\n        }\n    }\n    if (largestNegative > largestPositive)\n \
    \   {\n        largestNegative = largestPositive;\n    }\n    else\n    {\n  \
    \      largestPositive = largestPositive;\n    }\n    if (smallestNegative < smallestPositive)\n\
    \    {\n        smallestNegative = smallestPositive;\n    }\n    else\n    {\n\
    \        smallestPositive = smallestPositive;\n    }\n    if (largestNegative\
    \ == largestPositive)\n    {\n        result.first = null;\n        result.second\
    \ = largestNegative;\n    }\n    else if (smallestNegative == smallestPositive)\n\
    \    {\n        result.first = null;\n        result.second = smallestNegative;\n\
    \    }\n    else\n    {\n        result.first = largestNegative;\n        result.second\
    \ = smallestPositive;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like this solution, though it does require a lot of extra code (which\
    \ I didn't want to do).\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
    \ any extra code. :)\n<|/ c |>\n<| c |>\nI like your new solution, though it does\
    \ require a lot of extra code (which I didn't want to do).\n<|/ c |>\n<| c |>\n\
    I added a version that doesn't require any extra code. :)\n<|/ c |>\n<| c |>\n\
    I like your new solution, though it does require a lot of extra code (which I\
    \ didn't want to do).\n<|/ c |>\n<| a |>\nI like ", "{\n    long a = null;\n \
    \   long b = null;\n    for (long i : lst) {\n        if (i < 0) {\n         \
    \   a = i;\n        } else if (i > 0){\n            b = i;\n        }\n    }\n\
    \    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n        return result;\n    \n    long\
    \ largest = lst.max_element();\n    long smallest = lst.min_element();\n    \n\
    \    if (largest < 0)\n        return result;\n    \n    if (smallest > 0)\n \
    \       return result;\n    \n    result.0 = Nullable!(long);\n    result.1 =\
    \ Nullable!(long);\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestPositive = 0;\n    long largestNegative = 0;\n   \
    \ long smallestPositive = 0;\n    long smallestNegative = 0;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            foundNegative = true;\n        \
    \    largestNegative = i;\n        }\n        else {\n            foundPositive\
    \ = true;\n            largestPositive = i;\n        }\n        if (foundNegative\
    \ && foundPositive) {\n            break;\n        }\n    }\n    if (foundNegative)\
    \ {\n        smallestNegative = largestNegative;\n    }\n    if (foundPositive)\
    \ {\n        smallestPositive = largestPositive;\n    }\n    if (largestNegative\
    \ > largestPositive) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = smallestNegative;\n        result.1 = largestPositive;\n \
    \   }\n    else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = largestNegative;\n        result.1 = smallestPositive;\n \
    \   }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool positive = true;\n    bool negative = true;\n    long largest\
    \ = Long.min;\n    long smallest = Long.max;\n    for (long i : lst) {\n     \
    \   if (i < 0) {\n            negative = false;\n        } else if (i > 0) {\n\
    \            positive = false;\n        }\n        if (positive && negative &&\
    \ largest < i) {\n            largest = i;\n        } else if (positive && negative\
    \ && smallest > i) {\n            smallest = i;\n        }\n    }\n    if (positive\
    \ && negative && largest < smallest) {\n        result.a = Nullable!(null);\n\
    \        result.b = Nullable!(null);\n    } else if (positive && negative && smallest\
    \ > largest) {\n        result.a = Nullable!(null);\n        result.b = Nullable!(null);\n\
    \    } else if (positive && negative && largest == smallest) {\n        result.a\
    \ = Nullable!(null);\n        result.b = Nullable!(null);\n    } else {\n    \
    \    result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n\
    \    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ result.a = Nullable!(long);\n               else if (i > 0L) result.b = Nullable!(long);\n\
    \               else result.a = Nullable!(long);\n               result.b = Nullable!(long);\n\
    \           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n    {\n        result.first\
    \ = null;\n        result.second = null;\n    }\n    else\n    {\n        long\
    \ max = 0;\n        long min = 0;\n        \n        for (int i = 0; i < lst.size();\
    \ ++i)\n        {\n            if (lst[i] < min)\n            {\n            \
    \    min = lst[i];\n            }\n            else if (lst[i] > max)\n      \
    \      {\n                max = lst[i];\n            }\n        }\n        \n\
    \        result.first = max;\n        result.second = min;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    bool positive = true;\n    long max = 0;\n    long min = 0;\n    \n    foreach(long\
    \ x, lst)\n    {\n        if (x < 0)\n        {\n            positive = false;\n\
    \        }\n        \n        if (x > max)\n        {\n            max = x;\n\
    \        }\n        \n        if (x < min)\n        {\n            min = x;\n\
    \        }\n    }\n    \n    if (positive && max > min)\n    {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = max;\n     \
    \   result.b = min;\n    }\n    else if (!positive && max < min)\n    {\n    \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = max;\n\
    \        result.b = min;\n    }\n    else if (!positive && max > min)\n    {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max < min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max > min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max < min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max > min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max < min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max > min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max < min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max > min)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (!positive && max < min)\n\
    \    {\n        result = Tuple!(Nullable!(", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst)\n    {\n        if (i < 0L)\n        {\n\
    \            result.a = Nullable!(long);\n            result.b = i;\n        }\n\
    \        else if (i > 0L)\n        {\n            result.a = i;\n            result.b\
    \ = Nullable!(long);\n        }\n        else\n        {\n            result.a\
    \ = Nullable!(long);\n            result.b = Nullable!(long);\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i < 0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n           else result = Tuple!(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long)));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst)\n    {\n        if (i <\
    \ 0)\n        {\n            positive = false;\n        }\n        if (i > largest)\n\
    \        {\n            largest = i;\n        }\n        if (i < smallest)\n \
    \       {\n            smallest = i;\n        }\n    }\n    if (positive && largest\
    \ < Long.max)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(largest);\n        result.1 = Nullable!(smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(null);\n        result.1 = Nullable!(null);\n  \
    \  }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestPositive = 0;\n    long largestNegative = 0;\n    long smallestPositive\
    \ = 0;\n    long smallestNegative = 0;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            foundNegative = true;\n            largestNegative = i;\n\
    \        } else if (i > 0){\n            foundPositive = true;\n            largestPositive\
    \ = i;\n        }\n    }\n    if (foundNegative) {\n        result.first = null;\n\
    \        result.second = largestNegative;\n    } else if (foundPositive) {\n \
    \       result.first = largestPositive;\n        result.second = null;\n    }\
    \ else {\n        result.first = null;\n        result.second = null;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    if (result.a == null) {\n        result.a = result.b;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ has_negative = false;\n    bool has_positive = false;\n    long max_negative\
    \ = 0;\n    long min_positive = Long.MAX_VALUE;\n    foreach(long x, lst) {\n\
    \        if (x < 0) {\n            has_negative = true;\n            if (x > max_negative)\
    \ {\n                max_negative = x;\n            }\n        } else {\n    \
    \        has_positive = true;\n            if (x < min_positive) {\n         \
    \       min_positive = x;\n            }\n        }\n    }\n    if (has_negative)\
    \ {\n        result.a = Nullable!(long);\n        result.b = max_negative;\n \
    \   } else {\n        result.a = Nullable!(long);\n        result.b = min_positive;\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            foundNegative = true;\n        }\
    \ else if (i >= 0) {\n            foundPositive = true;\n        }\n        if\
    \ (foundNegative && foundPositive) {\n            break;\n        } else if (foundNegative)\
    \ {\n            largest = i;\n        } else if (foundPositive) {\n         \
    \   smallest = i;\n        }\n    }\n    if (foundNegative && foundPositive) {\n\
    \        result.first = null;\n        result.second = smallest;\n    } else if\
    \ (foundNegative) {\n        result.first = null;\n        result.second = largest;\n\
    \    } else if (foundPositive) {\n        result.first = largest;\n        result.second\
    \ = null;\n    }\n    return result;\n}", "{\n    var largest = Nullable!(long);\n\
    \    var smallest = Nullable!(long);\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var n = lst.Length;\n    while(i < n && j < n) {\n        if(lst[i]\
    \ < lst[j]) {\n            smallest = Nullable!(long);\n            k = j;\n \
    \           smallest = lst[i];\n            i = i + 1;\n        } else {\n   \
    \         largest = Nullable!(long);\n            k = i;\n            largest\
    \ = lst[j];\n            j = j + 1;\n        }\n    }\n    if(i < n) {\n     \
    \   smallest = Nullable!(long);\n        largest = Nullable!(long);\n        smallest\
    \ = lst[i];\n        i = i + 1;\n    } else if(j < n) {\n        largest = Nullable!(long);\n\
    \        smallest = Nullable!(long);\n        largest = lst[j];\n        j = j\
    \ + 1;\n    }\n    return Tuple!(largest, smallest);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        foreach(j\
    \ : lst, \n            \n            if(i<j) \n            {\n               \
    \ result.a = i;\n                result.b = j;\n                break;\n     \
    \       }\n            \n        )\n    );\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n    \
    \        Tuple!(Nullable!(long), Nullable!(long)) (\n                if(i<0L)\
    \ Nullable!(long) null,\n                if(i>0L) Nullable!(long) i\n        \
    \    );\n        \n        result = tuple;\n    );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    if (result.a == null)\
    \ {\n        result.a = result.b == null ? null : result.b;\n    }\n    \n   \
    \ return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
