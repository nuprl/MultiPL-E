name: HumanEval_131_digits
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
  \    15L\n    \n*/\nlong digits(long n) \n"
tests: "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) ==\
  \ 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n\
  \    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n \
  \   assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n\
  }\nvoid main(){}"
completions: ["{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit\
    \ = n % 10;\n        product *= (digit % 2 == 1 ? digit : 0);\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `digits(235L)`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `digits(235L)`. `digits(235L)` returns `15L`.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it with `digits(235L)`. `digits(235L)` returns\
    \ `15L`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `digits(235L)`. `digits(235L)`\
    \ returns `15L`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\twhile (n >\
    \ 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1)\n\
    \t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit\
    \ = n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0) {\n        long digit = n % 10;\n        product = product * digit;\n \
    \       n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\tproduct\
    \ *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit\
    \ % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}\n\
    /*\nGiven a positive integer n, return the sum of the even digits.\n    Return\
    \ 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n  \
    \  >>> digits(4L)\n    4L\n    >>> digits(235L)\n    10L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\t\
    n = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tsum += digit;\n\t\t}\n\t}\n\
    \treturn sum;\n}\n/*\nGiven a positive integer n, return the sum of the even digits\
    \ multiplied by 2.\n    Return 0 if all digits are even.\n    For example:\n \
    \   >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    10L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum * 2;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the even digits multiplied by 3.\n    Return 0\
    \ if all digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n    >>>\
    \ digits(4L)\n    4L\n    >>> digits(235L)\n    30L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\t\
    n = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tsum += digit;\n\t\t}\n\t}\n\
    \treturn sum * 3;\n}\n/*\nGiven a positive integer n, return the sum of the even\
    \ digits multiplied by 4.\n    Return 0 if all digits are even.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    60L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum * 4;", "{\n    long result =\
    \ 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        result *= 2;\n        result += digit;\n        n /= 10;\n    }\n   \
    \ \n    return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n\
    \    while (n) {\n        digit = n % 10;\n        product *= (digit % 2 == 1);\n\
    \        n /= 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 0;\n    while (n != 0) {\n      \
    \  result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long ret = 0;\n    long tmp;\n    \n    while (n) {\n \
    \       tmp = n % 10;\n        if (tmp % 2) {\n            ret = ret * 10 + tmp;\n\
    \        }\n        n = n / 10;\n    }\n    return ret;\n}", "{\n    long ret\
    \ = 1;\n    while (n != 0) {\n        if (n % 2 == 1)\n            ret *= (n /\
    \ 10);\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=algorithm,math,c++\
    \ |>\n<| c |>\nI like this solution, although it does require a little more memory\
    \ than my solution.  I wonder if there is a way to do this without using an array?\n\
    <|/ c |>\n<| c |>\n: Yes, you can do it without an array, but then you have to\
    \ do all the multiplication yourself. I added an example to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that doesn't use an array, but does require\
    \ a little more memory than my solution.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't use an array, but does require a little more memory than my solution.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't use an array, but does require\
    \ a little more memory than my solution.\n<|/ c |>\n<| a |>\n<code>\nlong long\
    \ digits(long long n) {\n    long long ret = 1;\n    while(n != 0) {\n       \
    \ ret *= n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,math,c++ |>\n<| c |>\nThis doesn't work if n is negative.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long n)\n{\n    long\
    \ long ret = 1;\n    while(n != 0)\n    {\n        ret *= n % 10;\n        n /=\
    \ 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=algorithm,math,c++ |>\n\
    <| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| a |>\n<code>\nlong ",
  "{\n    long result = 0;\n    long temp;\n    \n    while(n > 0)\n    {\n      \
    \  temp = n % 10;\n        result *= 2L;\n        result += temp;\n        n /=\
    \ 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n    while\
    \ (n != 0) {\n        if (n % 2 == 1) {\n            result *= 10;\n         \
    \   result += n % 10;\n        }\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\
    \tn = n / 10;\n\t\tif (digit % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\
    \t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    long digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\t\
    return product;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while\
    \ (n != 0) {\n        digit = n % 10;\n        result *= 2;\n        result +=\
    \ digit;\n        n /= 10;\n    }\n    \n    return result;\n}", "{\n\tlong product\
    \ = 1;\n\tlong digit;\n\twhile (n) {\n\t\tdigit = n % 10;\n\t\tproduct = product\
    \ * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long result =\
    \ 0;\n    while (n > 0)\n    {\n        result *= 10;\n        result += (n %\
    \ 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThe question was about C++, not C.\n<|/ c |>\n<| c |>\n: I added\
    \ a C++ solution as well.\n<|/ c |>\n<| c |>\n: I added a C++ solution as well.\n\
    <|/ c |>\n<| c |>\n: I added a C++ solution as well.\n<|/ c |>\n<| c |>\n: I added\
    \ a C++ solution as well.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        if (digit % 2 == 0)\n\
    \        {\n            product *= digit;\n        }\n        n /= 10;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe question\
    \ was about C++, not C#.\n<|/ c |>\n<| c |>\nI didn't realize that C# was a requirement.\
    \ I'll leave my answer here in case it helps someone else who comes across this\
    \ question and doesn't know C#.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I fixed it.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    while (n != 0) {\n        result *= 10;\n        result\
    \ += (n % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any extra memory\
    \ and doesn't require any extra calculations.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    long long int digits(long long int n)\n{\n    long long int result = 0;\n    while(n\
    \ > 0)\n    {\n        result *= 10;\n        result += n % 10;\n        n /=\
    \ 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n\
    <| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if n is negative.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if n is negative.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nlong long int digits(long\
    \ long int n)\n{\n    long long int result = 0;\n    while(n > 0)\n    {\n   \
    \     result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThis doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if n is negative.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if n is negative.\n\
    <|/ c |>\n<| a |>\n<code>\nlong long int digits(long long int n)\n{\n    long\
    \ long int result = 0;\n    while(n > 0)\n    {\n        result *= 10;\n     \
    \   result += n % 10;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,c dscore=3 |>\n<| c |>\nThis doesn't work if n is negative.\n\
    <|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>",
  "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult *= 10;\n\t\tresult += (n\
    \ % 10);\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long result = 0;\n\
    \    long digit;\n    \n    for(digit = n; digit > 0; digit /= 2)\n    {\n   \
    \     if(digit % 2 == 1)\n        {\n            result *= digit;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n\tlong result = 0;\n\twhile (n != 0)\
    \ {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n\
    }", "{\n\tlong product = 1;\n\tlong digit = n % 10;\n\twhile (digit != 0) {\n\t\
    \tproduct *= digit;\n\t\tn /= 10;\n\t\tdigit = n % 10;\n\t}\n\treturn product;\n\
    }", "{\n    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. `digits(235L)` returns `15L`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for me. Try it with `digits(235L)`.\n<|/ c |>\n\
    <| c |>\nIt works fine for me. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\n\
    It doesn't work for me. Try it with `digits(235L)`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic int digits(int n) {\n    int product = 1;\n    while (n > 0) {\n\
    \        int digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=java |>\n<| c |>\n\
    This doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt works fine\
    \ for me. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ me. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt doesn't work for me.\
    \ Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt doesn't work for me. Try\
    \ it with `digits(235L)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Digits\
    \ {", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n>0) {\n\t\tdigit = n %\
    \ 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n\
    }\n/*\nGiven a positive integer n, return the product of the even digits.\n  \
    \  Return 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n   \
    \ 1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\nlong\
    \ digits(long n) \n{\n\tlong product = 1;\n\tlong digit;\n\twhile (n>0) {\n\t\t\
    digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn\
    \ product;\n}\n/*\nGiven a positive integer n, return the sum of the even digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n\tlong sum = 0;\n\tlong digit;\n\twhile (n>0) {\n\t\t\
    digit = n % 10;\n\t\tsum = sum + digit;\n\t\tn = n / 10;\n\t}\n\treturn sum;\n\
    }\n/*\nGiven a positive integer n, return the sum of the odd digits.\n    Return\
    \ 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n    1L\n   \
    \ >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong sum = 0;\n\tlong digit;\n\twhile (n>0) {\n\t\tdigit = n % 10;\n\
    \t\tsum = sum + digit;\n\t\tn = n / 10;\n\t}\n\treturn sum;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the digits of the number in reverse order.\n  \
    \  Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n  \
    \  1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n\tlong sum = 0;\n\tlong digit;\n\twhile (n>0) {\n\t\t\
    digit = n % 10;\n\t\tsum = sum + digit;\n\t\tn = n / 10;\n\t}\n\treturn sum;\n\
    }\n/*\nGiven a positive integer n, return the sum of the digits of the number\
    \ in reverse order.\n    Return 0 if all digits are odd.\n    For example:\n \
    \   >>> ", "{\n    long result = 0;\n    while (n > 0)\n    {\n        if (n %\
    \ 2 == 1)\n        {\n            result *= 10;\n            result += n % 10;\n\
    \        }\n        n = n / 10;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\nThis is not an answer to the question. He wants\
    \ to know why his code doesn't work, not how to fix it.\n<|/ c |>\n<| c |>\nI\
    \ agree, this is an answer to the question.  It explains why his code doesn't\
    \ work, and how to fix it.\n<|/ c |>\n<| c |>\nThis code does not work. Try it\
    \ with `digits(235L)` which should return `15L` but returns `0L`.\n<|/ c |>\n\
    <| c |>\nThe code does work.  It returns 15L for 235L.\n<|/ c |>\n<| c |>\nThe\
    \ code does work. Try it with `digits(235L)` which should return `15L` but returns\
    \ `0L`.\n<|/ c |>\n<| a tags=c++,algorithm |>\nThe problem is that the variable\
    \ n never changes. You have to change it inside the while loop:\n<code>\nlong\
    \ digits(long n) \n{\n    long result = 0;\n    while (n > 0)\n    {\n       \
    \ if (n % 2 == 1)\n        {\n            result *= 10;\n            result +=\
    \ n % 10;\n        }\n        n = n / 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. He wants to\
    \ know why his code doesn't work, not how to fix it.\n<|/ c |>\n<| c |>\nI agree,\
    \ this is an answer to the question.  It explains why his code doesn't work, and\
    \ how to fix it.\n<|/ c |>\n<| c |>\nThis code does not work. Try it with `digits(235L)`\
    \ which should return `15L` but returns `0L`.\n<|/ c |>\n<| a dscore=1 |>\nThe\
    \ problem is that the variable n never changes. You have to change it inside the\
    \ while loop:\n<code>\nlong digits(long n) \n{\n    long result = 0;\n    while\
    \ (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n            result *= 10;\n\
    \            result += n % 10;\n        }\n        n = n / 10;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| a dscore=1 |>\nThe problem\
    \ is that the variable n never changes. You ", "{\n    long product = 1;\n   \
    \ while (n != 0) {\n        if (n % 2 == 1) {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for negative numbers. Try it yourself.\n<|/ c |>\n<| c |>\nIt works for negative\
    \ numbers. Try it yourself.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try it yourself.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long int digits(long long int n) {\n\
    \    long long int product = 1;\n    while (n != 0) {\n        if (n % 2 == 1)\
    \ {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ if n is negative.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it yourself.\n<|/ c |>\n\
    <| c |>\nIt works for negative numbers. Try it yourself.\n<|/ c |>\n<| a |>\n\
    <code>\nlong long int digits(long long int n) {\n    long long int product = 1;\n\
    \    while (n != 0) {\n        if (n % 2 == 1) {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ dscore=2 |>\n<| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\n\
    It works for negative numbers. Try it yourself.\n<|/ c |>\n<| c |>\nIt works for\
    \ negative numbers. Try it yourself.\n<|/ c |>\n<| a |>\n<code>\nlong long int\
    \ digits(long long int n) {\n    long long int product = 1;\n    while (n != 0)\
    \ {\n        if (n % 2 == 1) {\n            product *= n % 10;\n        }\n  \
    \      n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=2 tags=c++,algorithm\
    \ |>\n", "{\n    long result = 0;\n    while (n > 0) {\n        result *= 10;\n\
    \        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do this without looping through the digits. I suspect there is,\
    \ but I don't know how.\n<|/ c |>\n<| c |>\nI added a solution without looping\
    \ through the digits.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do this without looping through the digits. I suspect there\
    \ is, but I don't know how.\n<|/ c |>\n<| c |>\nI added a solution without looping\
    \ through the digits.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do this without looping through the digits. I suspect there\
    \ is, but I don't know how.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlong long digits(long\
    \ long n) {\n    long long result = 0;\n    while (n > 0) {\n        result *=\
    \ 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution, but I\
    \ wonder if there is a way to do this without looping through the digits. I suspect\
    \ there is, but I don't know how.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ looping through the digits.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlong long digits(long\
    \ long n) {\n    long long result = 0;\n    while (n > 0) {\n        result *=\
    \ 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution, but I\
    \ wonder if there is a way to do this without looping through the digits. I suspect\
    \ there is, but I don't know how.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ looping through the digits.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    long long digits(long long n) {\n    long long result = 0;\n    while (n > 0)\
    \ {\n        result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long result = 0;\n    long digit;\n    \n    while (n) {\n  \
    \      digit = n % 10;\n        result *= (digit==1)?2:1;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tproduct *=\
    \ digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n    long result\
    \ = 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        n /= 10;\n        result += remainder * std.math.pow(2, std.math.mod(n,\
    \ 2));\n    }\n    \n    return result;\n}", "{\n    long ret = 1;\n    while\
    \ (n > 0) {\n        ret *= n % 10;\n        n /= 10;\n    }\n    return ret;\n\
    }", "{\n    long result = 0;\n    long remainder = 0;\n    long digit;\n    \n\
    \    for(; n > 0; n /= 10) {\n        digit = n % 10;\n        remainder = remainder\
    \ * 10 + digit;\n    }\n    \n    if(remainder == 0) {\n        result = 1;\n\
    \    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        n /= 10;\n        if (digit % 2 == 1)\n        {\n\
    \            product *= digit;\n        }\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nI like this solution, but I wonder\
    \ if it would be faster to use `n % 10` instead of `n / 10` when `n % 10 == 0`.\
    \  I suspect it would be faster since `n % 10` would require a division operation\
    \ and `n / 10` would require a multiplication operation.\n<|/ c |>\n<| c |>\n\
    : I suspect that would be a micro-optimization, but I haven't tested it to be\
    \ sure.\n<|/ c |>\n<| c |>\n: I suspect that would be a micro-optimization, but\
    \ I haven't tested it to be sure.\n<|/ c |>\n<| c |>\n: I suspect that would be\
    \ a micro-optimization, but I haven't tested it to be sure.\n<|/ c |>\n<| c |>\n\
    : I suspect that would be a micro-optimization, but I haven't tested it to be\
    \ sure.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long n) {\n\
    \    long long product = 1;\n    while (n > 0) {\n        long long digit = n\
    \ % 10;\n        n /= 10;\n        if (digit % 2 == 1) {\n            product\
    \ *= digit;\n        }\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(1L)`.\n<|/ c |>\n<| c |>\n\
    : It works for me. Try it with `digits(1L)`.\n<|/ c |>\n<| c |>\n: It works for\
    \ me too. Try it with `digits(1L)`.\n<|/ c |>\n<| c |>\n: It works for me too.\
    \ Try it with `digits(1L)`.\n<|/ c |>\n<| c |>\n: It works for me too. Try it\
    \ with `digits(1L)`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long\
    \ long n) {\n    long long product = 1;\n    while (n > 0) {\n        long long\
    \ digit = n % 10;\n        n /= 10;\n        if (digit % 2 == 1) {\n         \
    \   product *= digit;\n        }\n    }\n    return product;\n", "{\n\tlong product\
    \ = 1;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long ret = 0;\n\
    \    long digit;\n    \n    while(n>0)\n    {\n        digit = n % 10;\n     \
    \   if(digit % 2 == 1)\n        {\n            ret *= digit;\n        }\n    \
    \    n /= 10;\n    }\n    return ret;\n}", "{\n\tlong result = 0;\n\twhile (n\
    \ > 0)\n\t{\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\t\tn = n / 10;\n\t}\n\t\
    return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n        result\
    \ *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long digit;\n    \n    while (n) {\n       \
    \ digit = n % 10;\n        result *= (digit % 2 == 1) ? 2 : 1;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n        product\
    \ *= digit;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work. `digits(235L)`\
    \ returns `15L`.\n<|/ c |>\n<| c |>\nIt does work. `digits(235L)` returns `15L`.\n\
    <|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>",
  "{\n    long product = 1;\n    while (n != 0) {\n        long digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe question was about C++,\
    \ not C. Also, this code doesn't work for negative numbers. `digits(-10)` returns\
    \ `0`, not `-10`.\n<|/ c |>\n<| c |>\nThe question was about C++, not C. Also,\
    \ this code doesn't work for negative numbers. `digits(-10)` returns `0`, not\
    \ `-10`.\n<|/ c |>\n<| c |>\nThe question was about C++, not C. Also, this code\
    \ doesn't work for negative numbers. `digits(-10)` returns `0`, not `-10`.\n<|/\
    \ c |>\n<| c |>\nThe question was about C++, not C. Also, this code doesn't work\
    \ for negative numbers. `digits(-10)` returns `0`, not `-10`.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "{\n    long ret = 1;\n    long i;\n    for(i=n; i>0;\
    \ i--)\n    {\n        if(n % 2 == 0)\n        {\n            ret *= i;\n    \
    \    }\n        n /= 2;\n    }\n    return ret;\n}", "{\n    long result = 0;\n\
    \    long digit;\n    \n    for (digit = n; digit > 0; digit /= 2)\n    {\n  \
    \      if (digit % 2 == 1)\n        {\n            result *= digit;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    long result = 0;\n    while (n >\
    \ 0)\n    {\n        result *= 10;\n        result += n % 10;\n        n /= 10;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt works. I tested it\
    \ on Python. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ C#. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\nI tested it on Java. `digits(235L)`\
    \ returns `15L`.\n<|/ c |>\n<| c |>\nI tested it on C. `digits(235L)` returns\
    \ `15L`.\n<|/ c |>\n<| a |>\n<code>", "{\n\tlong product = 1;\n\tlong digit;\n\
    \twhile (n) {\n\t\tdigit = n % 10;\n\t\tproduct *= (digit % 2 == 1 ? digit : 0);\n\
    \t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}",
  "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n    \
    \    result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}", "{\n\
    \    long product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n\
    \        if (digit % 2 == 1)\n        {\n            product *= digit;\n     \
    \   }\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <stdio.h>\n#include <string.h>\n#include\
    \ <stdlib.h>", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit =\
    \ n % 10;\n\t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\
    \    long result = 0;\n    while (n != 0) {\n        long d = n % 10;\n      \
    \  result *= 2;\n        if (d % 2 == 1) {\n            result *= d;\n       \
    \ }\n        n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n\
    \    long digit;\n    while (n > 0)\n    {\n        digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,math |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that case.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that case.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t\
    {\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1)\n\t\t{\n\
    \t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}\n/*\nGiven a positive\
    \ integer n, return the product of the even digits.\n    Return 0 if all digits\
    \ are odd.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n\
    \    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n\t\
    long product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n /\
    \ 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\t\
    return product;\n}\n/*\nGiven a positive integer n, return the sum of the even\
    \ digits.\n    Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\n\
    long digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit\
    \ = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tsum += digit;\n\
    \t\t}\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer n, return the sum of\
    \ the odd digits.\n    Return 0 if all digits are odd.\n    For example:\n   \
    \ >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n \
    \   15L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer\
    \ n, return the sum of the digits of n / 10\n    multiplied by each digit of n.\n\
    \    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n  \
    \  >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n\tlong sum =\
    \ 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tsum\
    \ += digit * digit;\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer n, return\
    \ the sum of the digits of n ", "{\n    long result = 0;\n    while (n > 0)\n\
    \    {\n        long digit = n % 10;\n        result *= digit;\n        n /= 10;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n\
    \        long digit = n % 10;\n        result *= digit;\n        n /= 10;\n  \
    \  }\n    return result;\n}", "{\n    long product = 1;\n    while (n > 0) {\n\
    \        long digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to make it more\
    \ efficient.\n<|/ c |>\n<| c |>\n: I doubt that there is an efficient solution.\
    \ Even the most efficient solution is O(n), but that doesn't mean that it's faster\
    \ than the naive solution. Also, the naive solution has O(n) complexity, while\
    \ this solution has O(log n) complexity. So, it's better to use the naive solution\
    \ if you can.\n<|/ c |>\n<| c |>\n: I added a solution that uses O(log n) complexity\
    \ and O(1) space.\n<|/ c |>\n<| c |>\n: I added a solution that uses O(1) space\
    \ and O(log n) complexity.\n<|/ c |>\n<| c |>\n: I added a solution that uses\
    \ O(1) space and O(log n) complexity.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while(n) {\n        digit =\
    \ n % 10;\n        result *= 2L;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n\
    \    long digit = n % 10;\n    while (digit > 0) \n    {\n        result *= 10;\n\
    \        result += digit;\n        n /= 10;\n        digit = n % 10;\n    }\n\
    \    if (n == 0) \n    {\n        return result;\n    }\n    else \n    {\n  \
    \      return 0;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long result = 0;\n    while (n != 0) {\n        result *= 10;\n        result\
    \ += (n % 10);\n        n /= 10;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit = n %\
    \ 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long result = 0;\n    long remainder;\n    long digit;\n    \n   \
    \ while(n > 0)\n    {\n        remainder = n % 10;\n        digit = remainder\
    \ % 2;\n        result = result * 10 + digit;\n        n = n / 10;\n    }\n  \
    \  return result;\n}", "{\n    long result = 0;\n    while (n > 0)\n    {\n  \
    \      result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit\
    \ % 2 == 1)\n\t\t\tproduct *= digit;\n\t}\n\treturn product;\n}", "{\n\tlong result\
    \ = 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 10;\n\t\tn /= 10;\n\t\t\
    result += remainder * std.math.pow(2, std.math.mod(std.math.abs(remainder), 2));\n\
    \t}\n\treturn result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n\
    \        long digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, however I believe it can be made more efficient by using a `while`\
    \ loop and `n % 10` instead of `n % 10L`.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ however I believe that `n % 10L` will still be faster than `n % 10` because\
    \ `%` operator is implemented as a `while` loop. [Here](http://stackoverflow.com/questions/109023/how-do-i-print-a-number-with-commas-as-thousands-separators-in-java)\
    \ is a good explanation why `%` operator is implemented as a `while` loop.\n<|/\
    \ c |>\n<| c |>\nI agree that `%` will be faster, but `%` will still be implemented\
    \ as a `while` loop. `%` is implemented as a `while` loop in C and C++ and in\
    \ Java, but not in C#.\n<|/ c |>\n<| c |>\nI agree with you, however I believe\
    \ that `n % 10L` will still be faster than `n % 10` because `%` operator is implemented\
    \ as a `while` loop. [Here](http://stackoverflow.com/questions/109023/how-do-i-print-a-number-with-commas-as-thousands-separators-in-java)\
    \ is a good explanation why `%` operator is implemented as a `while` loop.\n<|/\
    \ c |>\n<| c |>\nI agree with you, however I believe that `n % 10L` will still\
    \ be faster than `n % 10` because `%` operator is implemented as a `while` loop.\
    \ [Here](http://stackoverflow.com/questions/109023/how-do-i-print-a-number-with-commas-as-thousands-separators-in-java)\
    \ is a good explanation why `%` operator is implemented as a `while` loop.\n<|/\
    \ c |>\n<| a tags=java,algorithm,c# |>\n<code>\npublic static void main(String[]\
    \ args) {\n    System.out.println(getOddDigits(123));\n}", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        product *= (digit % 2 == 1);\n        n /= 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long result = 0;\n    while (n > 0) {\n        result\
    \ *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long digit;\n    \n    for(digit = n; digit\
    \ > 0; digit /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n           \
    \ result *= 2;\n            result += digit % 10;\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while\
    \ (n != 0) {\n        digit = n % 10;\n        result *= digit;\n        n /=\
    \ 10;\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    \n    while (n != 0) {\n        digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}",
  "{\n    long result = 0;\n    while (n > 0) {\n        result *= 10;\n        result\
    \ += (n % 10);\n        n /= 10;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit = n %\
    \ 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n    }\n\
    \    \n    return result;\n}", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\t\
    result = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 1;\n    \
    \    n /= 10;\n    }\n    \n    return product;\n}", "{\n\tlong result = 0;\n\t\
    long digit;\n\t\n\twhile (n != 0) {\n\t\tdigit = n % 10;\n\t\tresult = result\
    \ * 10 + digit;\n\t\tn = n / 10;\n\t}\n\t\n\treturn result;\n}", "{\n    long\
    \ product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like your solution, but I\
    \ wonder how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n\
    : I suspect that my solution is more efficient than others because it is more\
    \ compact and easier to understand.\n<|/ c |>\n<| c |>\n: I suspect that my solution\
    \ is more efficient than others because it is more compact and easier to understand.\n\
    <|/ c |>\n<| c |>\n: I suspect that my solution is more efficient than others\
    \ because it is more compact and easier to understand.\n<|/ c |>\n<| c |>\n: I\
    \ suspect that my solution is more efficient than others because it is more compact\
    \ and easier to understand.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n \
    \       product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tresult = result * 10 + (n\
    \ % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n\
    \    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n  \
    \      product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long result = 0;\n    long temp = 0;\n    while(n > 0)\n\
    \    {\n        temp = n % 10;\n        result += temp * std.math.pow(2, std.math.floor(std.math.log2(n)));\n\
    \        n = n / 10;\n    }\n    return result;\n}", "{\n\tlong result = 0;\n\t\
    while (n != 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\
    \treturn result;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while\
    \ (n) {\n        digit = n % 10;\n        result *= digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n        product\
    \ *= digit;\n    }\n    return product;\n}", "{\n    long result = 0;\n    long\
    \ digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n        result\
    \ *= 2;\n        result += digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n\tlong result = 0;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\t\
    n /= 10;\n\t\tif (digit % 2 == 1) {\n\t\t\tresult *= digit;\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n    long result = 0;\n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long remainder;\n    \n    while\
    \ (n) {\n        remainder = n % 10;\n        n /= 10;\n        result += remainder\
    \ * remainder;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `digits(235L)` returns `15L` instead of `0L`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    long result = 0;\n    while (n != 0) {\n  \
    \      result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n \
    \   return result;\n}", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult\
    \ = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n\
    \    long product = 1;\n    long digit;\n    \n    while(n>0)\n    {\n       \
    \ digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n \
    \   }\n    \n    return product;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n     \
    \   n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n\
    \    long ret = 0;\n    long digit;\n    \n    while(n > 0)\n    {\n        digit\
    \ = n % 10;\n        ret *= 2;\n        ret += digit;\n        n /= 10;\n    }\n\
    \    \n    return ret;\n}", "{\n    long product = 1;\n    long digit;\n    \n\
    \    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n  \
    \  long result = 0;\n    while (n != 0) {\n        result *= 10;\n        result\
    \ += n % 10;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t\
    {\n\t\tlong digit = n % 10;\n\t\tn /= 10;\n\t\tif (digit % 2 == 1)\n\t\t\tproduct\
    \ *= digit;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long product = 1;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        if (digit % 2\
    \ == 1)\n        {\n            product *= digit;\n        }\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n\
    : It works for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n: It works\
    \ for negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n: It works for\
    \ negative numbers. Try `digits(-10)`.\n<|/ c |>\n<| c |>\n: It works for negative\
    \ numbers. Try `digits(-10)`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long result = 0;\n    while (n\
    \ != 0) {\n        long digit = n % 10;\n        result *= digit;\n        n /=\
    \ 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n    while (n >\
    \ 0)\n    {\n        result *= 10;\n        result += (n % 10);\n        n /=\
    \ 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n    long temp\
    \ = 0;\n    while(n > 0)\n    {\n        temp = n % 10;\n        result += temp\
    \ * std.math.pow(2, std.math.floor(std.math.log2(temp)));\n        n = std.math.trunc(n/10);\n\
    \    }\n    return result;\n}", "{\n\tlong product = 1;\n\twhile (n > 0) {\n\t\
    \tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\
    \treturn product;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n \
    \       long digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while (n != 0) {\n        digit\
    \ = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    long result = 0;\n    long digit;\n    for(digit = n; digit\
    \ > 0; digit /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n           \
    \ result *= digit;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt does work\
    \ if n is negative. Just add `if (n < 0) return 0;` before the `for` loop.\n<|/\
    \ c |>\n<| c |>\nYes, but that doesn't make it correct. `digits(-1L)` returns\
    \ `0L` instead of `-1L`.\n<|/ c |>\n<| c |>\nYes, it does. `digits(-1L)` returns\
    \ `-1L`. `-1L` is even, so `digits(-1L)` returns `0L`.\n<|/ c |>\n<| c |>\nYes,\
    \ but `digits(-1L)` returns `0L` instead of `-1L`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nlong digits(long n) {\n    long result = 0;\n    long digit;\n    for(digit\
    \ = n; digit > 0; digit /= 2) {\n        if(digit % 2 == 1) {\n            result\
    \ *= digit;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>\nlong digits(long n) {\n    long result = 0;\n\
    \    long digit;\n    for(digit = n; digit > 0; digit /= 2) {\n        if(digit\
    \ % 2 == 1) {\n            result *= digit;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| a tags=c++,algorithm |>\n<code>\n\
    long digits(long n) {\n    long result = 0;\n    long digit;\n    for(digit =\
    \ n; digit > 0; digit /= 2) {\n        if(digit % 2 == 1) {\n            result\
    \ *= digit;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\nlong digits(long n) {\n    long result\
    \ = 0;\n    long digit;\n    for(digit = n; digit > 0; digit /= 2) {\n       \
    \ if(digit % 2 == 1) {\n            result *= digit;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlong digits(long\
    \ n) {\n", "{\n    long result = 0;\n    while (n != 0) {\n        long digit\
    \ = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n\tlong result = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\tresult +=\
    \ n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n\
    \    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n  \
    \      product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while (n\
    \ > 0)\n    {\n        digit = n % 10;\n        result *= 2L;\n        result\
    \ += digit;\n        n /= 10;\n    }\n    \n    return result;\n}", "{\n\tlong\
    \ product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\
    \t\tif (digit % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn\
    \ product;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while(n >\
    \ 0)\n    {\n        digit = n % 10;\n        result *= digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0) {\n        product *= n % 10;\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThis code doesn't work for\
    \ negative numbers. `digits(-10)` returns `1` instead of `0`\n<|/ c |>\n<| c |>\n\
    The code does work for negative numbers. `digits(-10)` returns `1` instead of\
    \ `0`\n<|/ c |>\n<| c |>\nYes, it does. `digits(-10)` returns `1` instead of `0`.\
    \ `digits(-10)` returns `1` instead of `0`. `digits(-10)` returns `1` instead\
    \ of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)` returns `1`\
    \ instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)` returns\
    \ `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(-10)`\
    \ returns `1` instead of `0`. `digits(-10)` returns `1` instead of `0`. `digits(",
  "{\n    long ret = 0;\n    long digit;\n    \n    while(n>0)\n    {\n        digit\
    \ = n % 10;\n        if(digit % 2 == 1)\n        {\n            ret *= digit;\n\
    \        }\n        n /= 10;\n    }\n    \n    return ret;\n}", "{\n    long result\
    \ = 0;\n    while (n > 0)\n    {\n        result *= 10;\n        result += (n\
    \ % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without recursion.\n\
    <|/ c |>\n<| c |>\nI guess it can, but I wouldn't recommend it.  Recursion is\
    \ much more readable and maintainable than a while loop.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I wonder if it can be done without recursion.\n<|/ c |>\n\
    <| c |>\nI guess it can, but I wouldn't recommend it.  Recursion is much more\
    \ readable and maintainable than a while loop.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I wonder if it can be done without recursion.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long result = 0;\n    long digit;\n    \n    while(n>0)\n\
    \    {\n        digit = n % 10;\n        result *= (digit==1)?2:1;\n        n\
    \ /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with n = 235.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give me an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nIt fails for n = 235.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Can you give me an example where it fails?\n\
    <|/ c |>\n<| c |>\nIt fails for n = 235.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long result\
    \ = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        result *= digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long result = 0;\n    long remainder;\n    \n    while(n > 0)\n  \
    \  {\n        remainder = n % 10;\n        result *= (remainder % 2 == 1);\n \
    \       n /= 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        int digit = n % 10;\n        result *= digit;\n\
    \        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,c++,c\
    \ |>\n<| c |>\nThis doesn't work. Try `digits(235L)`.\n<|/ c |>\n<| c |>\n: It\
    \ works. I tested it on `235L`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c\
    \ |>\n: I tested it on `235L`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\n\
    : I tested it on `235L`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\n: I\
    \ tested it on `235L`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| a tags=algorithm,c++,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>", "{\n    long result = 0;\n    long digit;\n    \n    while (n !=\
    \ 0) {\n        digit = n % 10;\n        result *= 2L;\n        result += digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long result =\
    \ 0;\n    while (n != 0) {\n        result *= 10;\n        result += (n % 10);\n\
    \        n /= 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n \
    \   long digit;\n    \n    while(n > 0)\n    {\n        digit = n % 10;\n    \
    \    result *= 2L;\n        result += digit;\n        n /= 10;\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n  \
    \      remainder = n % 10;\n        result *= (remainder % 2 == 1);\n        n\
    \ /= 10;\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n   \
    \ while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n            product\
    \ *= n % 10;\n        }\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\twhile (n > 0) {\n\
    \t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t\
    }\n\treturn product;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    long digit = n % 10;\n\t\tn /= 10;\n\t\tif (digit % 2 == 1)\n\t\t\tproduct *=\
    \ digit;\n\t}\n\treturn product;\n}", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1);\n        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long\
    \ product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tresult *= 10;\n\t\tresult\
    \ += n % 10;\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n\tlong product =\
    \ 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 == 1)\n\
    \t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn product;\n}",
  "{\n    long ret = 1;\n    long digit;\n    for(; n > 0; n /= 10) {\n        digit\
    \ = n % 10;\n        if(digit % 2 == 1) {\n            ret *= digit;\n       \
    \ }\n    }\n    return ret;\n}", "{\n    long result = 0;\n    while (n > 0)\n\
    \    {\n        result *= 10;\n        result += n % 10;\n        n /= 10;\n \
    \   }\n    return result;\n}", "{\n    long product = 1;\n    long digit;\n  \
    \  \n    while (n) {\n        digit = n % 10;\n        product *= digit;\n   \
    \     n /= 10;\n    }\n    \n    return product;\n}", "{\n    long product = 1;\n\
    \    while (n != 0) {\n        long digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    return product;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n != 0) {\n        digit = n\
    \ % 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    for (digit = n; digit\
    \ > 0; digit /= 2)\n    {\n        if (digit % 2 == 1)\n            product *=\
    \ digit;\n    }\n    \n    return product;\n}", "{\n    long product = 1;\n  \
    \  while (n != 0) {\n        long digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\npublic long digits(long n) {\n    long product = 1;\n    while\
    \ (n != 0) {\n        long digit = n % 10;\n        product *= digit;\n      \
    \  n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1 tags=java,algorithm,math\
    \ |>\n<| a dscore=0 |>\n<code>\npublic long digits(long n) {\n    long product\
    \ = 1;\n    while (n != 0) {\n        long digit = n % 10;\n        product *=\
    \ digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| a dscore=0 |>\n<code>\npublic long digits(long n) {\n    long product\
    \ = 1;\n    while (n != 0) {\n        long digit = n % 10;\n        product *=\
    \ digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| a tags=java,algorithm,math |>\n<code>\npublic long digits(long n) {\n\
    \    long product = 1;\n    while (n != 0) {\n        long digit = n % 10;\n \
    \       product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=java,algorithm,math |>\n<code>\npublic long digits(long\
    \ n) {\n    long product = 1;\n    while (n != 0) {\n        long digit = n %\
    \ 10;\n        product *= digit;\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm,math |>\n<code>\npublic\
    \ long digits(long n) {\n    long product = 1;\n    while (n != 0) {\n       \
    \ long digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n \
    \   return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long digits(long n) {\n    long product = 1;\n    while (n != 0) {\n  \
    \      long digit = n % 10;\n        product *= digit;\n        n /= 10;\n   \
    \ }\n    return product;\n}\n</code>\n<|/ a tags=java,algorithm,math |>\n<| a ",
  "{\n    long product = 1;\n    long digit = n % 10;\n    long remainder = n % 10;\n\
    \    \n    while (remainder != 0)\n    {\n        product = product * digit;\n\
    \        remainder = remainder / 10;\n        digit = digit / 10;\n    }\n   \
    \ \n    return product;\n}", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\t\
    long remainder = n % 10;\n\t\tn /= 10;\n\t\tresult += remainder * remainder;\n\
    \t}\n\treturn result;\n}", "{\n    long result = 0;\n    long digit = n % 10;\n\
    \    long product = 1;\n    while (n > 0) {\n        product = product * digit;\n\
    \        n = n / 10;\n        digit = n % 10;\n    }\n    if (product % 2 == 0)\
    \ {\n        return 0;\n    } else {\n        return product;\n    }\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-1L)`\
    \ returns `0L` instead of `-1L`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and\
    \ you are correct. My mistake. Sorry.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    long result = 0;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n   \
    \     {\n            result *= 10;\n            result += n % 10;\n        }\n\
    \        n = n / 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like your solution, however it fails for negative numbers. I\
    \ modified the code so that it works for negative numbers as well.\n<|/ c |>\n\
    <| c |>\n: It works for negative numbers. I tested it on negative numbers and\
    \ it works.\n<|/ c |>\n<| c |>\nI tested it on negative numbers and it works.\
    \ I tested it on negative numbers and it works. I tested it on negative numbers\
    \ and it works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I tested it on negative\
    \ numbers and it works. I tested it on negative numbers and it works. I tested\
    \ it on negative numbers and it works. I tested it on negative numbers and it\
    \ works. I tested it on negative numbers and it works. I ", "{\n    long product\
    \ = 1;\n    long digit;\n    for(digit = n; digit > 0; digit /= 2)\n    {\n  \
    \      if(digit % 2 == 1)\n            product *= digit;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n != 0) {\n        digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    \n    return product;\n}", "{\n    long ret = 1;\n\
    \    long digit;\n    for(; n > 0; n /= 10)\n    {\n        digit = n % 10;\n\
    \        if(digit % 2 == 1)\n        {\n            ret *= digit;\n        }\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `digits(235L)`.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe most efficient way is to convert the number to binary and multiply each\
    \ bit by its parity:\n<code>\nlong long digits(long long n) {\n    long long ret\
    \ = 1;\n    long long bits = n;\n    while (bits) {\n        ret *= bits;\n  \
    \      bits--;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `digits(235L)`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nlong long digits(long long n) {\n    long long ret = 1;\n    long\
    \ long bits = n;\n    while (bits) {\n        ret *= bits;\n        bits--;\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| ", "{\n    long result = 0;\n    long digit;\n    \n    while (n\
    \ != 0) {\n        digit = n % 10;\n        result *= 2;\n        result += digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn /= 10;\n\t\tif (digit %\
    \ 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}",
  "{\n    long result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit\
    \ = n % 10;\n        n /= 10;\n        if (digit % 2 == 1) {\n            result\
    \ *= digit;\n        }\n    }\n    \n    return result;\n}", "{\n    long result\
    \ = 0;\n    while (n != 0) {\n        if (n % 2 == 1) {\n            result *=\
    \ 10;\n            result += n % 10;\n        }\n        n /= 10;\n    }\n   \
    \ return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while\
    \ (n > 0)\n    {\n        digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    \n    return product;\n}", "{\n\tlong product\
    \ = 1;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit\
    \ % 2 == 1) {\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}", "{\n\
    \    long ret = 1;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n      \
    \  {\n            ret *= (n / 2);\n        }\n        n = n / 2;\n    }\n    return\
    \ ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about C#, not\
    \ C++.\n<|/ c |>\n<| c |>\nI didn't realize that C# had a long type. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   long product = 1;\n    long digit;\n    \n    while(n>0)\n    {\n        digit\
    \ = n % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n\
    \    \n    return product;\n}", "{\n    long product = 1;\n    while (n != 0)\
    \ {\n        long digit = n % 10;\n        product = product * digit;\n      \
    \  n = n / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n   \
    \ while (n != 0) {\n        result *= 10;\n        result += (n % 10);\n     \
    \   n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, although it does require a little more memory than my solution.\
    \ +1\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    for(; n > 0; n /= 10) \n    {\n        digit = n % 10;\n       \
    \ product *= (digit % 2 == 1) ? digit : 0; \n    }\n    return product;\n}", "{\n\
    \    long result = 0;\n    while (n > 0) {\n        result *= 10;\n        result\
    \ += (n % 10);\n        n /= 10;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long remainder = 0;\n    long digit;\n    \n    while (n) {\n\
    \        digit = n % 10;\n        remainder = n % 10;\n        result = result\
    \ * 10 + digit;\n        n = remainder;\n    }\n    \n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,math,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ *= (digit % 2 == 1 ? digit : 0);\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I believe it\
    \ can be simplified a little bit more. `digits(n)` can be written as `n / 10 *\
    \ (n % 10 / 2)`.\n<|/ c |>\n<| c |>\n: Yes, that would be better. Thanks.\n<|/\
    \ c |>\n<| a tags=math,algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n\
    \    {\n        digit = n % 10;\n        product = product * digit;\n        n\
    \ = n / 10;\n    }\n    \n    return product;\n}", "{\n    long product = 1;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    return product;\n}", "{\n    long\
    \ result = 0;\n    long remainder;\n    \n    while (n) {\n        remainder =\
    \ n % 10;\n        n /= 10;\n        result += remainder * std.math.pow(2, std.math.mod(std.math.abs(remainder),\
    \ 2));\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n    long\
    \ remainder = 0;\n    long digit;\n    \n    while (n) {\n        digit = n %\
    \ 10;\n        remainder = n % 10;\n        result = result * 10 + digit;\n  \
    \      n = remainder;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. Also, your solution doesn't\
    \ work for negative numbers. Try it out with -12345.\n<|/ c |>\n<| c |>\nThe question\
    \ was about C++, not C. Also, your solution doesn't work for negative numbers.\
    \ Try it out with -12345.\n<|/ c |>\n<| c |>\nI agree with you. My solution doesn't\
    \ work for negative numbers. I didn't know that C++ has unsigned types. I updated\
    \ my answer with a solution that works with negative numbers.\n<|/ c |>\n<| c\
    \ |>\nThe question was about C++, not C. Also, your solution doesn't work for\
    \ negative numbers. Try it out with -12345.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ My solution doesn't work for negative numbers. I didn't know that C++ has unsigned\
    \ types. I updated my answer with a solution that works with negative numbers.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 0;\n    while (n > 0) {\n       \
    \ long digit = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n  \
    \  return result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n \
    \       long digit = n % 10;\n        product = product * digit;\n        n =\
    \ n / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n    long\
    \ digit;\n    \n    while (n > 0) {\n        digit = n % 10;\n        result *=\
    \ 2;\n        result += digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long result = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n\
    \        digit = n % 10;\n        result *= 2;\n        result += digit;\n   \
    \     n /= 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        if (n % 2 == 1) {\n            result *= 10;\n\
    \            result += n % 10;\n        }\n        n /= 10;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    long result = 0;\n    while (n != 0) {\n      \
    \  result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n\
    \ % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1) {\n\t\t\tproduct *= digit;\n\
    \t\t}\n\t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\tlong digit;\n\t\
    while (n > 0) {\n\t\tdigit = n % 10;\n\t\tproduct = product * digit;\n\t\tn =\
    \ n / 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n        if (digit\
    \ % 2 == 1)\n        {\n            product *= digit;\n        }\n    }\n    return\
    \ product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code doesn't\
    \ work. Try it for n = 235.\n<|/ c |>\n<| c |>\nIt works for me. Did you try it?\
    \ It returns 15 for 235.\n<|/ c |>\n<| c |>\nIt doesn't work for me on GCC 4.8.1.\
    \ I get a compiler error \"error: expected primary-expression before \u2018.\u2019\
    \ token\"\n<|/ c |>\n<| c |>\nI tested it on GCC 4.8.1. I added the code to the\
    \ answer.\n<|/ c |>\n<| c |>\nI tested it on GCC 4.8.1. I added the code to the\
    \ answer.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long result = 0;\n    long temp;\n\
    \    \n    while (n != 0) {\n        temp = n % 10;\n        result *= temp;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n\
    \        product *= digit;\n    }\n    return product;\n}", "{\n    long result\
    \ = 0;\n    long remainder = 0;\n    long digit;\n    \n    while (n != 0) {\n\
    \        digit = n % 10;\n        remainder = remainder * 10 + digit;\n      \
    \  n = n / 10;\n    }\n    \n    if (remainder == 0) {\n        return result;\n\
    \    }\n    \n    result = result * 2 + remainder;\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis code does not work for negative numbers. `digits(-1L)`\
    \ returns `0L`, not `-1L`.\n<|/ c |>\n<| c |>\nI see your point. I've updated\
    \ the answer to account for negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n    \
    \    result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,c |>\n<| c |>\nThe question says \"the product of the\
    \ odd digits\" not \"the product of the digits\"\n<|/ c |>\n<| c |>\n: I fixed\
    \ the typo.\n<|/ c |>\n<| c |>\n: I fixed the typo.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the typo.\n<|/ c |>\n<| c |>\n: I fixed the typo.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tresult = result *\
    \ 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    long result\
    \ = 0;\n    long digit;\n    for(digit = n; digit > 0; digit /= 2)\n    {\n  \
    \      if(digit % 2 == 1)\n        {\n            result *= digit;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis code does not work. Try it with\
    \ `digits(0L)`.\n<|/ c |>\n<| c |>\n: It works. Try it with `digits(0L)`.\n<|/\
    \ c |>\n<| c |>\n: It works. Try it with `digits(0L)`.\n<|/ c |>\n<| c |>\n: It\
    \ works. Try it with `digits(0L)`.\n<|/ c |>\n<| c |>\n: It works. Try it with\
    \ `digits(0L)`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "{\n    long result = 0;\n\
    \    while (n > 0)\n    {\n        result *= 10;\n        result += (n % 10);\n\
    \        n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n\
    \    long digit;\n    \n    while (n) {\n        digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work. `digits(1L)` returns\
    \ `1L`, not `0L`.\n<|/ c |>\n<| c |>\nIt does work. `digits(1L)` returns `1L`\
    \ because `1L` is even. `digits(4L)` returns `0L` because `4L` is even.\n<|/ c\
    \ |>\n<| c |>\nYes, it does work. `digits(1L)` returns `1L` because `1L` is even.\
    \ `digits(4L)` returns `0L` because `4L` is even. `digits(235L)` returns `15L`\
    \ because `235L` is even.\n<|/ c |>\n<| c |>\nYes, it does work. `digits(1L)`\
    \ returns `1L` because `1L` is even. `digits(4L)` returns `0L` because `4L` is\
    \ even. `digits(235L)` returns `15L` because `235L` is even.\n<|/ c |>\n<| c |>\n\
    Yes, it does work. `digits(1L)` returns `1L` because `1L` is even. `digits(4L)`\
    \ returns `0L` because `4L` is even. `digits(235L)` returns `15L` because `235L`\
    \ is even.\n<|/ c |>\n<| a |>\n<code>", "{\n    long result = 0;\n    long remainder;\n\
    \    long digit;\n    \n    while(n > 0)\n    {\n        remainder = n % 10;\n\
    \        digit = remainder % 2;\n        result = result + digit;\n        n =\
    \ n / 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0) {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit\
    \ = n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        if (digit % 2 == 1)\n   \
    \     {\n            product *= digit;\n        }\n        n = n / 10;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>",
  "{\n    long result = 0;\n    while (n != 0) {\n        long digit = n % 10;\n \
    \       if (digit % 2 == 1) {\n            result *= digit;\n        }\n     \
    \   n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        long result = digits(n);\n        System.out.println(result);\n\
    \    }\n    public static long digits(int n) {\n        long result = 0;\n   \
    \     while (n != 0) {\n            long digit = n % 10;\n            if (digit\
    \ % 2 == 1) {\n                result *= digit;\n            }\n            n\
    \ /= 10;\n        }\n        return result;\n    }\n}\n</code>\n<|/ a tags=java,algorithm,math\
    \ |>\n<| a tags=java,algorithm,math |>\n<code>\nimport java.util.*;\npublic class\
    \ Solution {\n    public static void main(String[] args) {\n        Scanner sc\
    \ = new Scanner(System.in);\n        int n = sc.nextInt();\n        long result\
    \ = digits(n);\n        System.out.println(result);\n    }\n    public static\
    \ long digits(int n) {\n        long result = 0;\n        while (n != 0) {\n \
    \           long digit = n % 10;\n            if (digit % 2 == 1) {\n        \
    \        result *= digit;\n            }\n            n /= 10;\n        }\n  \
    \      return result;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm,math\
    \ |>\n<code>\nimport java.util.*;\npublic class Solution {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       int n = sc.nextInt();\n        long result = digits(n);\n        System.out.println(result);\n\
    \    }\n    public static long digits(int n) {\n        long result = 0;\n   \
    \     while (n != 0) {\n            long digit = n % 10;\n            if (digit\
    \ % 2 == 1) {\n                result *= digit;\n            }\n            n\
    \ /= 10;\n        }\n        return result;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=java,algorithm,math |>\n<code>\nimport java.util.*;\n\
    public class Solution {\n    public static void main(String[] args) {\n      \
    \  Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n     \
    \   long result = digits(n);\n        System.out.println(result);\n    }\n   \
    \ public static long digits(int n) {\n        ", "{\n    long result = 0;\n  \
    \  while (n != 0) {\n        result *= 10;\n        result += n % 10;\n      \
    \  n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    while (n > 0)\n    {\n        digit = n % 10;\n        product =\
    \ product * digit;\n        n = n / 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `digits(-10)` returns `0`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `digits(-10)` returns `-10`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `digits(-10)` returns `-10`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `digits(-10)` returns `-10`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `digits(-10)` returns `-10`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long result = 0;\n    long digit;\n\
    \    \n    while (n > 0) {\n        digit = n % 10;\n        result *= digit;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution. One thing I would add is that this solution\
    \ will work for any positive integer greater than or equal to 10^9. However, the\
    \ OP asked for a solution that works for any positive integer greater than or\
    \ equal to 10^9. Also, I would suggest changing the variable name from n to num\
    \ to avoid confusion.\n<|/ c |>\n<| c |>\nI agree. Changing variable name from\
    \ n to num is better. Thanks.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for any positive integer greater than or equal to 10^9. Thanks.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for any positive integer greater than or\
    \ equal to 10^9. Thanks.\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ any positive integer greater than or equal to 10^9. Thanks.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n>0)\n\
    \t{\n\t\tdigit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t\
    }\n\treturn product;\n}", "{\n    long result = 0;\n    while (n != 0) {\n   \
    \     long d = n % 10;\n        result *= 2L;\n        result += d;\n        n\
    \ /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI believe this solution will fail for large numbers. For example,\
    \ `digits(10000000000L)` returns `0`.\n<|/ c |>\n<| c |>\n: Yes, it will. That's\
    \ why I wrote \"Given a positive integer n\". I think it's clear that `n` has\
    \ to be a positive integer. Otherwise the function would return `0`.\n<|/ c |>\n\
    <| c |>\n: I added a solution that uses `long long` instead of `long`.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that uses `long long` instead of `long`.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `long long` instead of `long`.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace\
    \ std;", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit\
    \ = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. I will add an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. I will add an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nlong digits(long n)\n{\n    long product =\
    \ 1;\n    long digit;\n    while (n > 0)\n    {\n        digit = n % 10;\n   \
    \     product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++ |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. I will add an example to\
    \ my answer.\n<|/ c |>\n<| a tags=c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long result = 0;\n    long remainder = 0;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        remainder = n % 10;\n\
    \        result = result * 10 + digit;\n        n = remainder;\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,c++\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long product = 1;\n    long digit;\n    \n    for(digit = n; digit > 0; digit\
    \ /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n            product *=\
    \ digit;\n        }\n    }\n    \n    return product;\n}", "{\n    long product\
    \ = 1;\n    long digit = n % 10;\n    long remainder = n / 10;\n    \n    while(digit>0)\n\
    \    {\n        if(remainder%2 == 1)\n        {\n            product *= digit;\n\
    \        }\n        remainder = remainder / 2;\n        digit = digit / 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with n = 235.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it on http://cpp.sh/\n<|/ c |>\n<| c |>\nIt works on cpp.sh, but not in my IDE.\
    \ I'm running on Linux.\n<|/ c |>\n<| c |>\nIt works on my IDE too. I'm using\
    \ Linux.\n<|/ c |>\n<| c |>\nIt works on my IDE too. I'm using Linux.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long ret = 1;\n    long digit;\n    for(; n > 0; n\
    \ /= 10L) {\n        digit = n % 10L;\n        if(digit % 2 == 1L) {\n       \
    \     ret *= digit;\n        }\n    }\n    return ret;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
