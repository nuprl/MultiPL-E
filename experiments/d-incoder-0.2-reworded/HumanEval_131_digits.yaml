name: HumanEval_131_digits
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
  \    15L\n    \n*/\nlong digits(long n) \n"
tests: "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) ==\
  \ 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n\
  \    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n \
  \   assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n\
  }\nvoid main(){}"
completions: ["{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit\
    \ = n % 10;\n        product *= (digit % 2 == 1 ? digit : 0);\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `digits(235L)`. `digits(235L)` returns `15L`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `digits(235L)`. `digits(235L)` returns `15L`.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it with `digits(235L)`. `digits(235L)` returns\
    \ `15L`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `digits(235L)`. `digits(235L)`\
    \ returns `15L`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n\tlong product = 1;\n\twhile (n >\
    \ 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1)\n\
    \t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit\
    \ = n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0) {\n        long digit = n % 10;\n        product = product * digit;\n \
    \       n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\tproduct\
    \ *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit\
    \ % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}\n\
    /*\nGiven a positive integer n, return the sum of the even digits.\n    Return\
    \ 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n  \
    \  >>> digits(4L)\n    4L\n    >>> digits(235L)\n    10L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\t\
    n = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tsum += digit;\n\t\t}\n\t}\n\
    \treturn sum;\n}\n/*\nGiven a positive integer n, return the sum of the even digits\
    \ multiplied by 2.\n    Return 0 if all digits are even.\n    For example:\n \
    \   >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    10L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum * 2;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the even digits multiplied by 3.\n    Return 0\
    \ if all digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n    >>>\
    \ digits(4L)\n    4L\n    >>> digits(235L)\n    30L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\t\
    n = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tsum += digit;\n\t\t}\n\t}\n\
    \treturn sum * 3;\n}\n/*\nGiven a positive integer n, return the sum of the even\
    \ digits multiplied by 4.\n    Return 0 if all digits are even.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    60L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum * 4;", "{\n    long result =\
    \ 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        result *= 2;\n        result += digit;\n        n /= 10;\n    }\n   \
    \ \n    return result;\n}", "{\n    long product = 1;\n    long digit;\n    \n\
    \    while (n) {\n        digit = n % 10;\n        product *= (digit % 2 == 1);\n\
    \        n /= 10;\n    }\n    \n    return product;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 0;\n    while (n != 0) {\n      \
    \  result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long ret = 0;\n    long tmp;\n    \n    while (n) {\n \
    \       tmp = n % 10;\n        if (tmp % 2) {\n            ret = ret * 10 + tmp;\n\
    \        }\n        n = n / 10;\n    }\n    return ret;\n}", "{\n    long ret\
    \ = 1;\n    while (n != 0) {\n        if (n % 2 == 1)\n            ret *= (n /\
    \ 10);\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=algorithm,math,c++\
    \ |>\n<| c |>\nI like this solution, although it does require a little more memory\
    \ than my solution.  I wonder if there is a way to do this without using an array?\n\
    <|/ c |>\n<| c |>\n: Yes, you can do it without an array, but then you have to\
    \ do all the multiplication yourself. I added an example to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that doesn't use an array, but does require\
    \ a little more memory than my solution.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't use an array, but does require a little more memory than my solution.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't use an array, but does require\
    \ a little more memory than my solution.\n<|/ c |>\n<| a |>\n<code>\nlong long\
    \ digits(long long n) {\n    long long ret = 1;\n    while(n != 0) {\n       \
    \ ret *= n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=algorithm,math,c++ |>\n<| c |>\nThis doesn't work if n is negative.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `0`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long n)\n{\n    long\
    \ long ret = 1;\n    while(n != 0)\n    {\n        ret *= n % 10;\n        n /=\
    \ 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=algorithm,math,c++ |>\n\
    <| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| a |>\n<code>\nlong ",
  "{\n    long result = 0;\n    long temp;\n    \n    while(n > 0)\n    {\n      \
    \  temp = n % 10;\n        result *= 2L;\n        result += temp;\n        n /=\
    \ 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n    while\
    \ (n != 0) {\n        if (n % 2 == 1) {\n            result *= 10;\n         \
    \   result += n % 10;\n        }\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\
    \tn = n / 10;\n\t\tif (digit % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\
    \t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    long digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\t\
    return product;\n}", "{\n    long result = 0;\n    long digit;\n    \n    while\
    \ (n != 0) {\n        digit = n % 10;\n        result *= 2;\n        result +=\
    \ digit;\n        n /= 10;\n    }\n    \n    return result;\n}", "{\n\tlong product\
    \ = 1;\n\tlong digit;\n\twhile (n) {\n\t\tdigit = n % 10;\n\t\tproduct = product\
    \ * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long result =\
    \ 0;\n    while (n > 0)\n    {\n        result *= 10;\n        result += (n %\
    \ 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThe question was about C++, not C.\n<|/ c |>\n<| c |>\n: I added\
    \ a C++ solution as well.\n<|/ c |>\n<| c |>\n: I added a C++ solution as well.\n\
    <|/ c |>\n<| c |>\n: I added a C++ solution as well.\n<|/ c |>\n<| c |>\n: I added\
    \ a C++ solution as well.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        if (digit % 2 == 0)\n\
    \        {\n            product *= digit;\n        }\n        n /= 10;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe question\
    \ was about C++, not C#.\n<|/ c |>\n<| c |>\nI didn't realize that C# was a requirement.\
    \ I'll leave my answer here in case it helps someone else who comes across this\
    \ question and doesn't know C#.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I fixed it.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
