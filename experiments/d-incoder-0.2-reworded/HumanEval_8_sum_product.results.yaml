language: d
name: HumanEval_8_sum_product
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmc1vub7g.d(16): Error: no identifier for declarator `number`\n/tmp/tmpmc1vub7g.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmc1vub7g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmparzlpm79.d(21):
    Error: template instance `tmparzlpm79.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparzlpm79.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\t\
    sum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkg3yrtid.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpkg3yrtid.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpkg3yrtid.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkg3yrtid.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojl0goyn.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpojl0goyn.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpojl0goyn.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojl0goyn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4t28dph.d(16): Error: no identifier for declarator `number`\n/tmp/tmpb4t28dph.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb4t28dph.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp6cpm7158.d(21):
    Error: template instance `tmp6cpm7158.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cpm7158.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz4fpug39.d(16): Error: semicolon expected, not `:`\n/tmp/tmpz4fpug39.d(16):
    Error: expression expected, not `:`\n/tmp/tmpz4fpug39.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz4fpug39.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocz3kmf.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpaocz3kmf.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpaocz3kmf.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaocz3kmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n\
    \    {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfoxoljz6.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpfoxoljz6.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpfoxoljz6.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoxoljz6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl97o_owf.d(16): Error: semicolon expected, not `:`\n/tmp/tmpl97o_owf.d(16):
    Error: expression expected, not `:`\n/tmp/tmpl97o_owf.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpl97o_owf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple \nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmevy52ot.d(16): Error: semicolon expected, not `:`\n/tmp/tmpmevy52ot.d(16):
    Error: expression expected, not `:`\n/tmp/tmpmevy52ot.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\n/tmp/tmpmevy52ot.d(34): Error: semicolon
    expected, not `:`\n/tmp/tmpmevy52ot.d(34): Error: expression expected, not `:`\n/tmp/tmpmevy52ot.d(34):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpmevy52ot.d(52):
    Error: semicolon expected, not `:`\n/tmp/tmpmevy52ot.d(52): Error: expression
    expected, not `:`\n/tmp/tmpmevy52ot.d(52): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmpmevy52ot.d(70): Error: semicolon expected,
    not `:`\n/tmp/tmpmevy52ot.d(70): Error: expression expected, not `:`\n/tmp/tmpmevy52ot.d(70):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpmevy52ot.d(88):
    Error: semicolon expected, not `:`\n/tmp/tmpmevy52ot.d(88): Error: expression
    expected, not `:`\n/tmp/tmpmevy52ot.d(88): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmpmevy52ot.d(95): Error: unterminated /*
    */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmevy52ot.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    for (long i : numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    for (long i : numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzlfmokqo.d(16): Error: semicolon expected, not `:`\n/tmp/tmpzlfmokqo.d(16):
    Error: expression expected, not `:`\n/tmp/tmpzlfmokqo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\n/tmp/tmpzlfmokqo.d(35): Error: semicolon
    expected, not `:`\n/tmp/tmpzlfmokqo.d(35): Error: expression expected, not `:`\n/tmp/tmpzlfmokqo.d(35):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpzlfmokqo.d(54):
    Error: semicolon expected, not `:`\n/tmp/tmpzlfmokqo.d(54): Error: expression
    expected, not `:`\n/tmp/tmpzlfmokqo.d(54): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmpzlfmokqo.d(73): Error: semicolon expected,
    not `:`\n/tmp/tmpzlfmokqo.d(73): Error: expression expected, not `:`\n/tmp/tmpzlfmokqo.d(73):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpzlfmokqo.d(93):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzlfmokqo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3w8dm1p.d(16): Error: no identifier for declarator `i`\n/tmp/tmpv3w8dm1p.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv3w8dm1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n  \
    \  {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt92r27h9.d(16): Error: no identifier for declarator `i`\n/tmp/tmpt92r27h9.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt92r27h9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\t\
    sum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkg3yrtid.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpkg3yrtid.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpkg3yrtid.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkg3yrtid.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp82z4h2rx.d(16): Error: no identifier for declarator `number`\n/tmp/tmp82z4h2rx.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp82z4h2rx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\t\
    sum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_czzddkw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp_czzddkw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp_czzddkw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_czzddkw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product_recursive([])\n    tuple(0L, 1L)\n    >>> sum_product_recursive([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product_recursive(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ array of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in an array.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product_iterative([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product_iterative([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n\
    */\nTuple!(long, long) sum_product_iterative(long[] numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given array of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product_recursive([])\n    tuple(0L, 1L)\n    >>> sum_product_recursive([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product_iterative(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0;\
    \ i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given\
    \ array of integers, return a tuple consisting of a sum and a product of all the\
    \ integers in an array.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product_iterative([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product_iterative([1L, 2L, \nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgxh2rfvk.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgxh2rfvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocz3kmf.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpaocz3kmf.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpaocz3kmf.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaocz3kmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\t\
    sum += n;\n\t\tproduct *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1smn4lq8.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp1smn4lq8.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp1smn4lq8.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1smn4lq8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long i, numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(long i, numbers)\n    {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i,\
    \ numbers)\n    {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given array of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in an array.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n\nunittest\n{\n  \
    \  alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppp10f_it.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmppp10f_it.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmppp10f_it.d(21): Error: found `return`
    when expecting `)`\n/tmp/tmppp10f_it.d(36): Error: no identifier for declarator
    `numbers`\n/tmp/tmppp10f_it.d(36): Error: found `)` when expecting `;`\n/tmp/tmppp10f_it.d(41):
    Error: found `return` when expecting `)`\n/tmp/tmppp10f_it.d(56): Error: no identifier
    for declarator `numbers`\n/tmp/tmppp10f_it.d(56): Error: found `)` when expecting
    `;`\n/tmp/tmppp10f_it.d(61): Error: found `return` when expecting `)`\n/tmp/tmppp10f_it.d(76):
    Error: no identifier for declarator `numbers`\n/tmp/tmppp10f_it.d(76): Error:
    found `)` when expecting `;`\n/tmp/tmppp10f_it.d(81): Error: found `return` when
    expecting `)`\n/tmp/tmppp10f_it.d(94): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp10f_it.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl97o_owf.d(16): Error: semicolon expected, not `:`\n/tmp/tmpl97o_owf.d(16):
    Error: expression expected, not `:`\n/tmp/tmpl97o_owf.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpl97o_owf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64lfl61n.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp64lfl61n.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp64lfl61n.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64lfl61n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\
    \t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcn1sng71.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpcn1sng71.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpcn1sng71.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcn1sng71.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_recursive([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product_recursive(long[] numbers) \n\
    {\n    if (numbers.length == 0)\n        return Tuple!(0L, 1L);\n    long sum\
    \ = numbers[0];\n    long product = 1;\n    for (long i : numbers)\n    {\n  \
    \      sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_iterative([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product_iterative(long[] numbers) \n\
    {\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product_recursive_recursive([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_recursive_recursive([1L, 2L, 3L, 4L])\n\
    \    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product_recursive_recursive(long[]\
    \ numbers) \n{\n    if (numbers.length == 0)\n        return Tuple!(0L, 1L);\n\
    \    long sum = numbers[0];\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjrrn15t3.d(16): Error: semicolon expected, not `:`\n/tmp/tmpjrrn15t3.d(16):
    Error: expression expected, not `:`\n/tmp/tmpjrrn15t3.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\n/tmp/tmpjrrn15t3.d(38): Error: semicolon
    expected, not `:`\n/tmp/tmpjrrn15t3.d(38): Error: expression expected, not `:`\n/tmp/tmpjrrn15t3.d(38):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpjrrn15t3.d(58):
    Error: semicolon expected, not `:`\n/tmp/tmpjrrn15t3.d(58): Error: expression
    expected, not `:`\n/tmp/tmpjrrn15t3.d(58): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmpjrrn15t3.d(80): Error: semicolon expected,
    not `:`\n/tmp/tmpjrrn15t3.d(80): Error: expression expected, not `:`\n/tmp/tmpjrrn15t3.d(80):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpjrrn15t3.d(87):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjrrn15t3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\n/*\n For a given array of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in an array.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n\
    \        product *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array\
    \ of integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc20kla9v.d(16): Error: no identifier for declarator `number`\n/tmp/tmpc20kla9v.d(16):
    Error: found `in` when expecting `;`\n/tmp/tmpc20kla9v.d(36): Error: no identifier
    for declarator `number`\n/tmp/tmpc20kla9v.d(36): Error: found `in` when expecting
    `;`\n/tmp/tmpc20kla9v.d(56): Error: no identifier for declarator `number`\n/tmp/tmpc20kla9v.d(56):
    Error: found `in` when expecting `;`\n/tmp/tmpc20kla9v.d(76): Error: no identifier
    for declarator `number`\n/tmp/tmpc20kla9v.d(76): Error: found `in` when expecting
    `;`\n/tmp/tmpc20kla9v.d(94): Error: semicolon expected following function declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc20kla9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppnjczq5t.d(93): Error: found `unittest` when expecting `.` following
    long\n/tmp/tmppnjczq5t.d(94): Error: found `{` when expecting identifier following
    `long`.\n/tmp/tmppnjczq5t.d(95): Error: found `alias` when expecting `)` following
    template argument list\n/tmp/tmppnjczq5t.d(97): Error: declaration expected, not
    `assert`\n/tmp/tmppnjczq5t.d(98): Error: declaration expected, not `assert`\n/tmp/tmppnjczq5t.d(99):
    Error: declaration expected, not `assert`\n/tmp/tmppnjczq5t.d(100): Error: declaration
    expected, not `assert`\n/tmp/tmppnjczq5t.d(101): Error: declaration expected,
    not `assert`\n/tmp/tmppnjczq5t.d(102): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnjczq5t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\t\
    sum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_czzddkw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp_czzddkw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp_czzddkw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_czzddkw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n\
    \    {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfoxoljz6.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpfoxoljz6.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpfoxoljz6.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoxoljz6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(double, double) sum_product(double[]\
    \ numbers) \n{\n    double sum = 0;\n    double product = 1;\n    for (double\
    \ i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n       \
    \ product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n/*\n For\
    \ a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(int,\
    \ int) sum_product(int[] numbers) \n{\n    int sum = 0;\n    int product = 1;\n\
    \    for (int i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(bool,\
    \ bool) sum_product(bool[] numbers) \n{\n    bool sum = false;\n    bool product\
    \ = true;\n    for (bool i = 0; i < numbers.length; ++i)\n    {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(string, string) sum_\nunittest\n{\n    alias candidate = sum_product;\n\
    \n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7c1d5wv.d(93): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7c1d5wv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers)\n  \
    \  {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt92r27h9.d(16): Error: no identifier for declarator `i`\n/tmp/tmpt92r27h9.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt92r27h9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3w8dm1p.d(16): Error: no identifier for declarator `i`\n/tmp/tmpv3w8dm1p.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv3w8dm1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_fast([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_fast([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product_fast(long[] numbers) \n{\n  \
    \  long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n \
    \       sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product_fast([])\n  \
    \  tuple(0L, 1L)\n    >>> sum_product_fast([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product_fast(long[] numbers) \n{\n    long sum\
    \ = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n        sum\
    \ += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product_fast([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product_fast([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product_fast(long[] numbers) \n{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i : numbers)\n    {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product_fast([])\n    tuple(0L, 1L)\n    >>> sum_product_fast([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple\nunittest\n{\n    alias candidate\
    \ = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps441kh_0.d(16): Error: semicolon expected, not `:`\n/tmp/tmps441kh_0.d(16):
    Error: expression expected, not `:`\n/tmp/tmps441kh_0.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\n/tmp/tmps441kh_0.d(36): Error: semicolon
    expected, not `:`\n/tmp/tmps441kh_0.d(36): Error: expression expected, not `:`\n/tmp/tmps441kh_0.d(36):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmps441kh_0.d(56):
    Error: semicolon expected, not `:`\n/tmp/tmps441kh_0.d(56): Error: expression
    expected, not `:`\n/tmp/tmps441kh_0.d(56): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmps441kh_0.d(76): Error: semicolon expected,
    not `:`\n/tmp/tmps441kh_0.d(76): Error: expression expected, not `:`\n/tmp/tmps441kh_0.d(76):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmps441kh_0.d(93):
    Error: no identifier for declarator `Tuple`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps441kh_0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(int, int) sum_product(int[] numbers)\
    \ \n{\n    int sum = 0;\n    int product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(int, int) sum_product(long[] numbers)\
    \ \n{\n    int sum = 0;\n    int product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(int, int) sum_product(float[] numbers)\
    \ \n{\n    int sum = 0;\n    int product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(int, int) sum_product(double[] number\n\
    unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) ==\
    \ tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n   \
    \ assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdiksbezj.d(93): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdiksbezj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(int, int) sum_product(int[] numbers) \n{\n    int sum = 0;\n    int product\
    \ = 1;\n    foreach(int x, numbers) {\n        sum += x;\n        product *= x;\n\
    \    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(double, double) sum_product(double[]\
    \ numbers) \n{\n    double sum = 0;\n    double product = 1;\n    foreach(double\
    \ x, numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(bool, bool) sum_product(bool[] numbers) \n{\n    bool sum =\
    \ false;\n    bool product = true;\n    foreach(bool x, numbers) {\n        sum\
    \ += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n\
    \ For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(string,\
    \ string) sum_product(string[] numbers) \n{\n    string sum = \"\";\n    string\
    \ product\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfvgd8p17.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpfvgd8p17.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpfvgd8p17.d(20): Error: found `return`
    when expecting `)`\n/tmp/tmpfvgd8p17.d(35): Error: no identifier for declarator
    `numbers`\n/tmp/tmpfvgd8p17.d(35): Error: found `)` when expecting `;`\n/tmp/tmpfvgd8p17.d(39):
    Error: found `return` when expecting `)`\n/tmp/tmpfvgd8p17.d(54): Error: no identifier
    for declarator `numbers`\n/tmp/tmpfvgd8p17.d(54): Error: found `)` when expecting
    `;`\n/tmp/tmpfvgd8p17.d(58): Error: found `return` when expecting `)`\n/tmp/tmpfvgd8p17.d(73):
    Error: no identifier for declarator `numbers`\n/tmp/tmpfvgd8p17.d(73): Error:
    found `)` when expecting `;`\n/tmp/tmpfvgd8p17.d(77): Error: found `return` when
    expecting `)`\n/tmp/tmpfvgd8p17.d(91): Error: found `product` when expecting `;`
    following statement\n/tmp/tmpfvgd8p17.d(92): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvgd8p17.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product\
    \ *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n\
    \        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given array of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    \nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9baiblg1.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(20): Error: found `return`
    when expecting `)`\n/tmp/tmp9baiblg1.d(35): Error: no identifier for declarator
    `numbers`\n/tmp/tmp9baiblg1.d(35): Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(39):
    Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(54): Error: no identifier
    for declarator `numbers`\n/tmp/tmp9baiblg1.d(54): Error: found `)` when expecting
    `;`\n/tmp/tmp9baiblg1.d(58): Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(73):
    Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(73): Error:
    found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(77): Error: found `return` when
    expecting `)`\n/tmp/tmp9baiblg1.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9baiblg1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpid4zb6sw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpid4zb6sw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpid4zb6sw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid4zb6sw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojvbpfbb.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpojvbpfbb.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpojvbpfbb.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojvbpfbb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\t\
    sum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_czzddkw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp_czzddkw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp_czzddkw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_czzddkw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpid4zb6sw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpid4zb6sw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpid4zb6sw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid4zb6sw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number, numbers) {\n\t\t\
    sum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkg3yrtid.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpkg3yrtid.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpkg3yrtid.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkg3yrtid.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocz3kmf.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpaocz3kmf.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpaocz3kmf.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaocz3kmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n\
    \    {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7j0qemb9.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp7j0qemb9.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp7j0qemb9.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j0qemb9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, product);\n}\n/*\n For a given array of integers, return\
    \ a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long product =\
    \ 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}\n\
    /*\n For a given array of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length; ++i)\n\
    \    {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n  \
    \  return Tuple!(sum, \nunittest\n{\n    alias candidate = sum_product;\n\n  \
    \  assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvwx847v.d(94): Error: expression expected, not `unittest`\n/tmp/tmpgvwx847v.d(95):
    Error: found `{` when expecting `)` following template argument list\n/tmp/tmpgvwx847v.d(96):
    Error: found `alias` when expecting `;` following `return` statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvwx847v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_recursive([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product_recursive(long[] numbers) \n\
    {\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_iterative([1L, 2L, 3L, 4L])\n    tuple(10L,\
    \ 24L)\n    \n*/\nTuple!(long, long) sum_product_iterative(long[] numbers) \n\
    {\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_fast([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_iterative_fast([1L, 2L, 3L, 4L])\n   \
    \ tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product_iterative_fast(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative_recursive([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product_iterative_recursive([1L, 2L, 3L, 4\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe7txvdtj.d(16): Error: semicolon expected, not `:`\n/tmp/tmpe7txvdtj.d(16):
    Error: expression expected, not `:`\n/tmp/tmpe7txvdtj.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\n/tmp/tmpe7txvdtj.d(36): Error: semicolon
    expected, not `:`\n/tmp/tmpe7txvdtj.d(36): Error: expression expected, not `:`\n/tmp/tmpe7txvdtj.d(36):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpe7txvdtj.d(56):
    Error: semicolon expected, not `:`\n/tmp/tmpe7txvdtj.d(56): Error: expression
    expected, not `:`\n/tmp/tmpe7txvdtj.d(56): Error: found `numbers` when expecting
    `;` following `for` condition\n/tmp/tmpe7txvdtj.d(76): Error: semicolon expected,
    not `:`\n/tmp/tmpe7txvdtj.d(76): Error: expression expected, not `:`\n/tmp/tmpe7txvdtj.d(76):
    Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpe7txvdtj.d(83):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7txvdtj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long n, numbers) {\n\t\t\
    sum += n;\n\t\tproduct *= n;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1smn4lq8.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp1smn4lq8.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp1smn4lq8.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1smn4lq8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3w8dm1p.d(16): Error: no identifier for declarator `i`\n/tmp/tmpv3w8dm1p.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv3w8dm1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3w8dm1p.d(16): Error: no identifier for declarator `i`\n/tmp/tmpv3w8dm1p.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv3w8dm1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\n\
    \    {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfoxoljz6.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpfoxoljz6.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpfoxoljz6.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoxoljz6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuexpwu_l.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpuexpwu_l.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpuexpwu_l.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuexpwu_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product\
    \ *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n\
    \        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given array of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    \nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9baiblg1.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(20): Error: found `return`
    when expecting `)`\n/tmp/tmp9baiblg1.d(35): Error: no identifier for declarator
    `numbers`\n/tmp/tmp9baiblg1.d(35): Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(39):
    Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(54): Error: no identifier
    for declarator `numbers`\n/tmp/tmp9baiblg1.d(54): Error: found `)` when expecting
    `;`\n/tmp/tmp9baiblg1.d(58): Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(73):
    Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(73): Error:
    found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(77): Error: found `return` when
    expecting `)`\n/tmp/tmp9baiblg1.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9baiblg1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmdd26jc.d(16): Error: semicolon expected, not `:`\n/tmp/tmpgmdd26jc.d(16):
    Error: expression expected, not `:`\n/tmp/tmpgmdd26jc.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgmdd26jc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given array of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in an array.\n    Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n        product\
    \ *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given array of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in an array.\n    Empty sum should be equal to 0 and empty product should be\
    \ equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x,\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given array of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in an array.\n    Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum += x;\n\
    \        product *= x;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given array of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in an array.\n    Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n\
    \    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long,\
    \ long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    \nunittest\n{\n\
    \    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n\
    \    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9baiblg1.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(20): Error: found `return`
    when expecting `)`\n/tmp/tmp9baiblg1.d(35): Error: no identifier for declarator
    `numbers`\n/tmp/tmp9baiblg1.d(35): Error: found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(39):
    Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(54): Error: no identifier
    for declarator `numbers`\n/tmp/tmp9baiblg1.d(54): Error: found `)` when expecting
    `;`\n/tmp/tmp9baiblg1.d(58): Error: found `return` when expecting `)`\n/tmp/tmp9baiblg1.d(73):
    Error: no identifier for declarator `numbers`\n/tmp/tmp9baiblg1.d(73): Error:
    found `)` when expecting `;`\n/tmp/tmp9baiblg1.d(77): Error: found `return` when
    expecting `)`\n/tmp/tmp9baiblg1.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9baiblg1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmdd26jc.d(16): Error: semicolon expected, not `:`\n/tmp/tmpgmdd26jc.d(16):
    Error: expression expected, not `:`\n/tmp/tmpgmdd26jc.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgmdd26jc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64lfl61n.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp64lfl61n.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp64lfl61n.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64lfl61n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n\
    \    {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7j0qemb9.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp7j0qemb9.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp7j0qemb9.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j0qemb9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\
    \t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcn1sng71.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpcn1sng71.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpcn1sng71.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcn1sng71.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers) {\n\t\tsum\
    \ += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxf_i_aj_.d(16): Error: no identifier for declarator `i`\n/tmp/tmpxf_i_aj_.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxf_i_aj_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20digjeo.d(16): Error: semicolon expected, not `:`\n/tmp/tmp20digjeo.d(16):
    Error: expression expected, not `:`\n/tmp/tmp20digjeo.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp20digjeo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpruumsmd0.d(21):
    Error: template instance `tmpruumsmd0.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruumsmd0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3r7s0qh.d(16): Error: no identifier for declarator `number`\n/tmp/tmpq3r7s0qh.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpq3r7s0qh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi31hphxw.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi31hphxw.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi31hphxw.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi31hphxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers) {\n\t\t\
    sum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_czzddkw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp_czzddkw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp_czzddkw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_czzddkw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(i : numbers)\n\t{\n\t\t\
    sum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kjgvmu.d(16): Error: no identifier for declarator `i`\n/tmp/tmps_kjgvmu.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps_kjgvmu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocz3kmf.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpaocz3kmf.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpaocz3kmf.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaocz3kmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwqr5f3cc.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpwqr5f3cc.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpwqr5f3cc.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqr5f3cc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(i : numbers) {\n\
    \        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3w8dm1p.d(16): Error: no identifier for declarator `i`\n/tmp/tmpv3w8dm1p.d(16):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv3w8dm1p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64lfl61n.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp64lfl61n.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp64lfl61n.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64lfl61n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfmdoimwu.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpfmdoimwu.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpfmdoimwu.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmdoimwu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrmw3dn_.d(16): Error: semicolon expected, not `:`\n/tmp/tmpkrmw3dn_.d(16):
    Error: expression expected, not `:`\n/tmp/tmpkrmw3dn_.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkrmw3dn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojvbpfbb.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpojvbpfbb.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpojvbpfbb.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojvbpfbb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp_3s3v77t.d(21):
    Error: template instance `tmp_3s3v77t.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3s3v77t.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long number, numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64lfl61n.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmp64lfl61n.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmp64lfl61n.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64lfl61n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsp6jrjd3.d(16): Error: no identifier for declarator `number`\n/tmp/tmpsp6jrjd3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsp6jrjd3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long x, numbers)\n\t{\n\
    \t\tsum += x;\n\t\tproduct *= x;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaocz3kmf.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpaocz3kmf.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpaocz3kmf.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaocz3kmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in an array.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpid4zb6sw.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpid4zb6sw.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpid4zb6sw.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid4zb6sw.d",
    "-I/tmp"]\n'''
  stdout: b''
