language: d
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn mean of all elements in the array.\n\
    \    >>> mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -2.5\n    \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++) \n     \
    \   sum += l[i];\n    return sum / l.length;\n}\n/*\nReturn median of all elements\
    \ in the array.\n    >>> median_elements([1L, 2L, 3L])\n    2.0\n    >>> median_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -2.5\n    \n*/\ndouble median_elements(long[]\
    \ l) \n{\n    long middle = l.length / 2;\n    long sum\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp24wqashh.d(91): Error: semicolon expected, not `unittest`\n/tmp/tmp24wqashh.d(91):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp24wqashh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n  \
    \  >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpna1gwn08.d(105): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpna1gwn08.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3\nunittest\n{\n    alias candidate = max_element;\n\n   \
    \ assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfxz59jey.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfxz59jey.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn absolute value of all elements\
    \ in the array.\n    >>> abs_elements([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>>\
    \ abs_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    [5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]\n    \n*/\nlong[] abs_elements(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = Math.abs(l[i]);\n    return result;\n}\n/*\nReturn\
    \ absolute value of all elements in the array.\n    >>> abs_elements([1L, 2L,\
    \ 3L])\n    [1L, 2L, 3L]\n    >>> abs_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7tv2qxzh.d(79): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7tv2qxzh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_value)\n        {\n       \
    \     min_value = l[i];\n            min_pos = i;\n        }\n    }\n    return\
    \ min_pos;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n \
    \   }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, \nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tx5xams.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2tx5xams.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxrm2go9s.d(94): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrm2go9s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of\
    \ all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n   \
    \ >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for (i = 1; i < l.length; ++i) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpirhq6mlx.d(85): Error: cannot implicitly convert expression
    `i` of type `double` to `ulong`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirhq6mlx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long i;\n    for\
    \ (i = 0; i < l.length; ++i)\n        prod *= l[i];\n    return prod;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\ndouble product(double[] l) \n{\n    double prod = 1;\n    long i;\n \
    \   for (i = 0; i < l.length; ++i)\n        prod *= \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0etdfk5.d(100): Error: expression expected, not `unittest`\n/tmp/tmpu0etdfk5.d(101):
    Error: found `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpu0etdfk5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxic0uf9_.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxic0uf9_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t\
    {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    for (int i = 1; i < l.length; ++i)\n \
    \       if (l[i] < min_val)\n            min_val = l[i];\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; ++i)\n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn mean of all elements in the array.\n\
    \    >>> mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n    double sum = 0;\n    double mean = 1.0;\n    for (int i = 0; i <\
    \ l.length; ++i)\n        sum += l[i];\n    mean = sum / l.length;\n    return\
    \ mean;\n}\n/*\nReturn median of all elements in the array.\n    >>> median_elements([1L,\
    \ 2L, 3L])\n    2.0\n    >>> median_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble median_elements(long[] l) \n{\n\
    \    \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm1vbu1o4.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1vbu1o4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppt4xaw2i.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppt4xaw2i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long prod = 1;\n    for (int i = 0; i < l.length; i++) \n        prod *=\
    \ l[i];\n    return prod;\n}\n/*\nReturn median of all elements in the array.\n\
    \    >>> median_elements([1L, 2L, 3L])\n    2L\n    >>> median_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -3L\n    \n*/\nlong median_elements(long[]\
    \ l) \n{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0) \n        return\
    \ l[mid];\n    else \n        return (l[mid] + l[mid-1]) / 2;\n}\n/*\nReturn mean\
    \ of all elements in the array.\n    >>> mean_elements([1L, 2L, 3L])\n    2.0\n\
    \    >>> mean_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n \
    \   -4.0\n    \n*/\ndouble mean_elements(long[] l) \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp93mol8bg.d(89): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93mol8bg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n \
    \   }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn absolute\
    \ value of all elements in the array.\n    >>> abs_elements([1L, 2L, 3L])\n  \
    \  [1L, 2L, 3L]\n    >>> abs_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    [5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]\n    \n*/\n\
    long[] abs_elements(long[] l) \n{\n    long[] abs_l = new long[l.length];\n  \
    \  for(int i = 0; i < l.length; i++)\n    {\n        abs_l[i] = Math.abs(l[i]);\n\
    \    }\n    return abs_l;\n}\n/*\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_as79l6o.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_as79l6o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_el\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max_el)\n\
    \            max_el = l[i];\n    return max_el;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++) \n   \
    \ {\n        if(l[i] > max_val) \n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpi5c0iyer.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmpi5c0iyer.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmpi5c0iyer.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xea258554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        product *= \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5a1wggn5.d(98): Error: expression expected, not `unittest`\n/tmp/tmp5a1wggn5.d(99):
    Error: found `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5a1wggn5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzu_p1la.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzzu_p1la.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_value)\n        {\n       \
    \     min_value = l[i];\n            min_pos = i;\n        }\n    }\n    return\
    \ min_pos;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n \
    \   }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, \nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tx5xams.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2tx5xams.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum([1L, 2L, 3L\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl03m9sau.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl03m9sau.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; ++i)\n        if(l[i] > max)\n   \
    \         max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for(int i = 1; i < l.length; ++i)\n      \
    \  if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> product_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -123L\n    \n*/\nlong product_elements(long[] l) \n{\n    long prod\
    \ = 1;\n    for(int i = 0; i < l.length; ++i)\n        prod *= l[i];\n    return\
    \ prod;\n}\n/*\nReturn mean of all elements in the array.\n    >>> mean_elements([1L,\
    \ 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -2.5\n    \n*/\ndouble mean_elements(long[] l) \n{\n \
    \   double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum / l.length;\n}\n/*\nReturn standard deviation of all elements\
    \ in the array.\n    >>> std_dev_elements([1L, 2L, 3L])\n    1.5811388300841898\n\
    \    >>> std_dev_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    1.5811388300841898\n    \n*/\ndouble std_dev_elements(long[] l\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvrjry7ud.d(88): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrjry7ud.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n\
    \        {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i = 0;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3rnhwu2n.d(107): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3rnhwu2n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l, long start) \n{\n    long sum = 0;\n    long i;\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqwxvtvs.d(106): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqwxvtvs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_guwznbe.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_guwznbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = 0;\n    for(int i = 1; i < l.length; ++i)\n  \
    \  {\n        if(l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_value;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] >\
    \ max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n  \
    \  for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < min) \n    \
    \    {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>>\
    \ product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n\
    */\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i = 0; i <\
    \ l.length; i++) \n    {\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    for (int i = 0; i < l.length\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvbd1_8_4.d(105): Error: found `unittest` when expecting `;`
    following `for` condition\n/tmp/tmpvbd1_8_4.d(112): Error: found `void` when expecting
    `)`\n/tmp/tmpvbd1_8_4.d(112): Error: found `{` when expecting `;` following statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbd1_8_4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++) \n        if(l[i] > max)\
    \ \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in\
    \ the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i=1; i<l.length; i++) \n\
    \        if(l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i=0; i<l.length;\
    \ i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i=0; i<l.length; i++) \n  \
    \      prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n\
    {\n    double sum = 0;\n    long i;\n    for(i=0; i<l.length; i++) \n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble prod(double[] l) \n{\n    double\
    \ prod = 1;\n    long i;\n\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn1zxsqq4.d(97): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1zxsqq4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble prod(double[] l) \n{\n    double\
    \ \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbaoxuzt1.d(105): Error: no identifier for declarator `double`\n/tmp/tmpbaoxuzt1.d(105):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbaoxuzt1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_te48gee.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmp_te48gee.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmp_te48gee.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xb2633554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0n8fs_wl.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmp0n8fs_wl.__unittest_L25_C1() [0x427dfb]\n??:?
    void tmp0n8fs_wl.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xdb6e2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n\
    \    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble\
    \ prod(double[] l) \n{\n    double prod = 1;\n    long \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpon_16az3.d(100): Error: no identifier for declarator `long`\n/tmp/tmpon_16az3.d(100):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpon_16az3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_te48gee.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmp_te48gee.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmp_te48gee.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xb2633554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long n = l.length;\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        if(l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max_value)\n\
    \            max_value = l[i];\n    }\n    return max_value;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++) \n   \
    \ {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n    \
    \        max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd73ginha.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmpd73ginha.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmpd73ginha.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0x6b0d0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \    {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n\
    \        if(l[i] < min) \n            min = l[i];\n    }\n    return min;\n}\n\
    /*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++) \n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l) \n{\n    float\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++) \n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l) \n{\n\
    \    float sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \    }\n    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 1; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn mean of all elements\
    \ in the array.\n    >>> mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble\
    \ mean_elements(long[] l) \n{\n    double sum = 0;\n    long i;\n    for (i =\
    \ 1; i < l.length; i++)\n        sum += l[i];\n    return sum / l.length;\n}\n\
    /*\nReturn standard deviation of all elements in the array.\n    >>> std_elements([1L,\
    \ 2L, 3L])\n    1.5811388300841898\n    >>> std_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    1.5811388300841898\n    \nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogqa6j_4.d(84): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpogqa6j_4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; ++i)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum([1L, 2L, 3L\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl03m9sau.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpl03m9sau.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n \
    \   >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n    long\
    \ min_pos = 0;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i]\
    \ < min_value)\n        {\n            min_value = l[i];\n            min_pos\
    \ = i;\n        }\n    }\n    return min_pos;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l)\
    \ \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n    \
    \    sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n  \
    \      sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l) \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsv964j6l.d(109): unittest failure\n----------------\n??:?
    _d_unittestp [0x42840d]\n??:? void tmpsv964j6l.__unittest_L105_C1() [0x4280eb]\n??:?
    void tmpsv964j6l.__modtest() [0x42818c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c46b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430940]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43041d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b2d5]\n??:? runModuleUnitTests [0x42c241]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428857]\n??:? _d_run_main [0x4287c2]\n??:? main [0x42819f]\n??:?
    __libc_start_main [0xd2282554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i] < min) \n \
    \       {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, \nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsh18wkfj.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsh18wkfj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n        }\n    }\n    return max_value;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < min_value)\n\
    \        {\n            min_value = l[i];\n        }\n    }\n    return min_value;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n  \
    \  for (int i = 0; i < l.length; i++)\n    {\n        product *= \nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp169o1rga.d(107): Error: expression expected, not `unittest`\n/tmp/tmp169o1rga.d(108):
    Error: found `{` when expecting `;` following statement\n/tmp/tmp169o1rga.d(114):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp169o1rga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n  \
    \          max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n        }\n    }\n    return max_value;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpykn57elj.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpykn57elj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i] < min) \n \
    \       {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i =\
    \ 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product([1L, 2L,\
    \ 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n \
    \   }\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp50hvr10e.d(107): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50hvr10e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] >\
    \ max) \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\
    \ \n        if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++) \n     \
    \   sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0s_jnmw.d(93): Error: found `unittest` when expecting `;` following
    `for` condition\n/tmp/tmpk0s_jnmw.d(100): Error: found `void` when expecting `)`\n/tmp/tmpk0s_jnmw.d(100):
    Error: found `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpk0s_jnmw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = -1;\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] > max_value) \n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\n/*\n\
    Return minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n\
    \    long min_index = -1;\n    for(int i = 1; i < l.length; i++) \n    {\n   \
    \     if(l[i] < min_value) \n        {\n            min_value = l[i];\n      \
    \      min_index = i;\n        }\n    }\n    return min_index;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkvm6zxb.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbkvm6zxb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppt4xaw2i.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppt4xaw2i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm85s7_th.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm85s7_th.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm85s7_th.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm85s7_th.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ \n        if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i =\
    \ 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for (i = 0;\
    \ i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l) \n{\n    float sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\
    \ \n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l, long\
    \ start) \n{\n    long sum = 0;\n    long i;\n    for (i = start; i < l.length;\
    \ i++) \n        \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9jdq3p35.d(98): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jdq3p35.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nfloat sum_elements(float[] l) \n{\n    float sum = 0;\n    float i;\n\
    \    for(i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp76u9ns7b.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp76u9ns7b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpppi1sord.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmpppi1sord.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmpppi1sord.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xefbcb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the array.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l, long start) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = start; i < l.length; i++) \n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2xood9a.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk2xood9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++) \n   \
    \ {\n        if(l[i] > max_value) \n        {\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n \
    \   >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n    long\
    \ min_pos = 0;\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ < min_value) \n        {\n            min_value = l[i];\n            min_pos\
    \ = i;\n        }\n    }\n    return min_pos;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn mean of all\
    \ elements in the array.\n    >>> mean_elements([1L, 2L, 3L])\n    2.0\n    >>>\
    \ mean_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n\
    \    \n*/\ndouble mean_elements(long[] l) \n{\n    double sum = 0;\n    double\
    \ mean = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    mean = sum / l.length;\n    return mean;\n}\n/*\nReturn median of\
    \ all elements in the array.\n    >>> median_elements([1L, 2L, 3\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0psx9g3m.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0psx9g3m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; i++) \n    \
    \    if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    for (int i = 0; i < l.length; i++) \n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn index of the first element in the\
    \ array which is greater or equal than x.\n    >>> first_greater_or_equal_element([1L,\
    \ 2L, 3L], 2L)\n    1L\n    >>> first_greater_or_equal_element([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L], -10L)\n    -10L\n    \n*/\nlong first_greater_or_equal_element(long[]\
    \ l, long x) \n{\n    for (int i = 0; i < l.length; i++) \n        if (l[i] >=\
    \ x) \n            return i;\n    return -1;\n}\n/*\nReturn index of the first\
    \ element in the array which is less than or equal than x.\n    >>> first_less_or_equal_element([1L,\
    \ 2L, 3L], 2L)\n    0L\n    >>> first_less_or_equal_element([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L], -10L)\n    \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw1ef4r8y.d(79): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw1ef4r8y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn median of all\
    \ elements in the array.\n    >>> median_elements([1L, 2L, 3L])\n    2L\n    >>>\
    \ median_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -3L\n\
    \    \n*/\nlong median_elements(long[] l) \n{\n    long mid = l.length / 2;\n\
    \    long median = l[mid];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n\
    \        if (l[i] < median)\n            median = l[i];\n    }\n    return median;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsd05wc7d.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsd05wc7d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_el\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_el)\n        {\n            max_el = l[i];\n          \
    \  max_idx = i;\n        }\n    }\n    return max_el;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpppi1sord.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x42811d]\n??:? void tmpppi1sord.__unittest_L24_C1() [0x427dfb]\n??:?
    void tmpppi1sord.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428567]\n??:? _d_run_main [0x4284d2]\n??:? main [0x427eaf]\n??:?
    __libc_start_main [0xefbcb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqnmjzwm_.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqnmjzwm_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++) \n   \
    \ {\n        if(l[i] > max_val) \n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++) \n    {\n        if(l[i] < min_val) \n        {\n       \
    \     min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return\
    \ min_val;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplf50ih2i.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplf50ih2i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n        }\n    }\n    return max_value;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for (i = 0;\
    \ i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l) \n{\n    float sum = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l, long defaultValue)\
    \ \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n  \
    \      sum += l\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx_p2v3y0.d(100): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmpx_p2v3y0.d(107): Error: found `End of File` when
    expecting `}` following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpx_p2v3y0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = 0;\n    for(int i = 1; i < l.length; i++)\n  \
    \  {\n        if(l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_value;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) \n        if (l[i]\
    \ > max) \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ \n        if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\n\
    Return sum of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 0; i < l.length; i++) \n   \
    \     product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for (i = 0; i < l.length; i++)\
    \ \n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5j9dkn09.d(93): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j9dkn09.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && max\
    \ < l[i])\n    {\n        max = l[i];\n        i++;\n    }\n    \n    while (j\
    \ < l.length)\n    {\n        if (max < l[j])\n        {\n            max = l[j];\n\
    \        }\n        j++;\n    }\n    \n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbhbq1kta.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbhbq1kta.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ array.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    double i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the array.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp6okbni_.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp6okbni_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; ++i)\n    {\n    \
    \    if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the array.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the array.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nfloat sum_elements(float[] l) \n{\n    float sum = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5v17hzzh.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5v17hzzh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
