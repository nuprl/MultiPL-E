name: HumanEval_31_is_prime
language: d
results:
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= n; i+=2) \n        {\n     \
    \       if (n % i == 0L) \n            {\n                prime = false;\n   \
    \             break;\n            }\n        }\n    }\n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf3zksuft.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpf3zksuft.__unittest_L43_C1()\
    \ [0x427ba6]\\n??:? void tmpf3zksuft.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x7935e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qjk5vtl.d(31): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_qjk5vtl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe OP wants to know if\
    \ `n` is prime, not if `n` is divisible by any prime factor.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe best way to find out whether a number is prime is by using the Sieve\
    \ of Eratosthenes algorithm. \nThe algorithm is very simple. \nIt goes through\
    \ all the numbers from 2 to sqrt(n), marking them as composite. \nThen it goes\
    \ through all the numbers from 3 to sqrt(n), marking them as composite. \nAnd\
    \ so on. \nIt will take O(sqrt(n)) time. \nThe algorithm is very easy to implement.\
    \ \n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq2oevdd6.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    n/tmp/tmpq2oevdd6.d(33): Error: declaration expected, not `<`\\n/tmp/tmpq2oevdd6.d(63):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpq2oevdd6.d(64): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpq2oevdd6.d(65): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpq2oevdd6.d(66): Error: declaration expected, not `assert`\\\
    n/tmp/tmpq2oevdd6.d(67): Error: declaration expected, not `assert`\\n/tmp/tmpq2oevdd6.d(68):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpq2oevdd6.d(69): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpq2oevdd6.d(70): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpq2oevdd6.d(71): Error: declaration expected, not `assert`\\\
    n/tmp/tmpq2oevdd6.d(72): Error: declaration expected, not `assert`\\n/tmp/tmpq2oevdd6.d(73):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpq2oevdd6.d(74): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpq2oevdd6.d(75): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpq2oevdd6.d(76): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2oevdd6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis is not the fastest\
    \ solution. Try it on `is_prime(10L)`.\n<|/ c |>\n<| c |>\nI didn't say it was\
    \ the fastest solution. Just that it was the simplest to implement.\n<|/ c |>\n\
    <| c |>\nI didn't say it was the fastest solution. Just that it was the simplest\
    \ to implement.\n<|/ c |>\n<| c |>\nI didn't say it was the fastest solution.\
    \ Just that it was the simplest to implement.\n<|/ c |>\n<| c |>\nI didn't say\
    \ it was the fastest solution. Just that it was the simplest to implement.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpardcwv1n.d(34): Error: declaration expected, not `<`\\n/tmp/tmpardcwv1n.d(40):\
    \ Error: unterminated character constant\\n/tmp/tmpardcwv1n.d(43): Error: unterminated\
    \ character constant\\n/tmp/tmpardcwv1n.d(46): Error: unterminated character constant\\\
    n/tmp/tmpardcwv1n.d(49): Error: unterminated character constant\\n/tmp/tmpardcwv1n.d(57):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpardcwv1n.d(58): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpardcwv1n.d(59): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpardcwv1n.d(60): Error: declaration expected, not `assert`\\\
    n/tmp/tmpardcwv1n.d(61): Error: declaration expected, not `assert`\\n/tmp/tmpardcwv1n.d(62):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpardcwv1n.d(63): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpardcwv1n.d(64): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpardcwv1n.d(65): Error: declaration expected, not `assert`\\\
    n/tmp/tmpardcwv1n.d(66): Error: declaration expected, not `assert`\\n/tmp/tmpardcwv1n.d(67):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpardcwv1n.d(68): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpardcwv1n.d(69): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpardcwv1n.d(70): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpardcwv1n.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2; i<=n/2;\
    \ i++) {\n        if(n%i==0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkawvyi5e.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmpkawvyi5e.__unittest_L30_C1()\
    \ [0x427b1e]\\n??:? void tmpkawvyi5e.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0xac8ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5opoejc3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5opoejc3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= sqrt(n); ++i) \n    {\n        if (n % i == 0L) \n        {\n     \
    \       b = false;\n            break;\n        }\n    }\n    \n    return b;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpro456xar.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpro456xar.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            b\
    \ = false;\n            break;\n        }\n    }\n    \n    return b;\n}\n</code>\n\
    <|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThe `is_prime` function\
    \ can be improved by using a `bool` variable instead of `bool` return value. `bool\
    \ is_prime(long n) { bool b = true; ... if (b) { b = false; ... } return b; }`\n\
    <|/ c |>\n<| c |>\n: That is true, but I wanted to keep the code as close to the\
    \ original as possible. Also, `bool` return values can be confusing to read, especially\
    \ for beginners.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to point\
    \ out that your `is_prime` function can be improved by using a `bool` variable\
    \ instead of `bool` return value. `bool is_prime(long n) { bool b = true; ...\
    \ if (b) { b = false; ... } return b; }`\n<|/ c |>\n<| c |>\n: I agree, thank\
    \ you. I will edit my answer to reflect that.\n<|/ c |>\n<| c |>\n: I added a\
    \ version that uses `bool` return values instead of `bool` variables. I hope you\
    \ don't mind.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz0yynftc.d(41): Error: declaration expected, not `<`\\n/tmp/tmpz0yynftc.d(56):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpz0yynftc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\n</code>\n<|/ a tags=c++,primes,c |>\n<| c |>\nI believe this\
    \ algorithm is O(n^2) in worst case. Sieve of Eratosthenes is O(n).\n<|/ c |>\n\
    <| c |>\n: It is not O(n^2) in the worst case. In the worst case it takes O(n)\
    \ time to find all primes up to n. In the best case it takes O(sqrt(n)) time to\
    \ find all primes up to n.\n<|/ c |>\n<| c |>\n: I believe it takes O(n) time\
    \ to find all primes up to n because it is O(n) in the best case. In the worst\
    \ case it takes O(n^2) time to find all primes up to n. In the best case it takes\
    \ O(sqrt(n)) time to find all primes up to n.\n<|/ c |>\n<| c |>\n: I believe\
    \ it takes O(n) time to find all primes up to n because it is O(n) in the best\
    \ case. In the worst case it takes O(n^2) time to find all primes up to n. In\
    \ the best case it takes O(sqrt(n)) time to find all primes up to n.\n<|/ c |>\n\
    <| c |>\n: I believe it takes O(n) time to find all primes up to n because it\
    \ is O(n) in the best case. In the worst case it takes O(n^2) time to find all\
    \ primes up to n. In the best case it takes O(sqrt(n)) time to find all primes\
    \ up to n.\n<|/ c |>\n<| a dscore=5 |>\nThe Sieve of Eratosthenes is O(n) in the\
    \ worst case, and O(sqrt(n)) in the best case. \nThe best case is when n is prime.\
    \ In the best case, the algorithm will find all primes up to n and store them\
    \ in an array (of size n). In the worst case, the algorithm will find all primes\
    \ up to n and store them in an array (of size sqrt(n)). \nThe best case is when\
    \ n is not prime. In the best case, the algorithm will find all primes up to n\
    \ and store them in an array (of size n). In the worst case, the algorithm will\
    \ find all primes up to n and store them in an array (of size sqrt(\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp901lgzfh.d(34): Error: declaration expected, not `<`\\n/tmp/tmp901lgzfh.d(59):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp901lgzfh.d(60): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp901lgzfh.d(61): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp901lgzfh.d(62): Error: declaration expected, not `assert`\\\
    n/tmp/tmp901lgzfh.d(63): Error: declaration expected, not `assert`\\n/tmp/tmp901lgzfh.d(64):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp901lgzfh.d(65): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp901lgzfh.d(66): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp901lgzfh.d(67): Error: declaration expected, not `assert`\\\
    n/tmp/tmp901lgzfh.d(68): Error: declaration expected, not `assert`\\n/tmp/tmp901lgzfh.d(69):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmp901lgzfh.d(70): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmp901lgzfh.d(71): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmp901lgzfh.d(72): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp901lgzfh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnp6xybgp.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpnp6xybgp.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpnp6xybgp.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xa5424554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest way to check primality.\
    \ Even if you use Sieve of Eratosthenes, it still takes O(n^2) time to check whether\
    \ a number is prime. Sieve of Atkin is O(sqrt(n)).\n<|/ c |>\n<| c |>\n: I agree,\
    \ that's why I said \"*if* you use Sieve of Eratosthenes\". I was just trying\
    \ to give a fast and simple solution. Of course there are other ways to do it.\n\
    <|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin is O(sqrt(n)) and Sieve\
    \ of Eratosthenes is O(n^2). But the question was about a fast and simple solution.\
    \ That's why I gave a fast and simple solution. Of course there are other ways\
    \ to do it.\n<|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin is O(sqrt(n))\
    \ and Sieve of Eratosthenes is O(n^2). But the question was about a fast and simple\
    \ solution. That's why I gave a fast and simple solution. Of course there are\
    \ other ways to do it.\n<|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin\
    \ is O(sqrt(n)) and Sieve of Eratosthenes is O(n^2). But the question was about\
    \ a fast and simple solution. That's why I gave a fast and simple solution. Of\
    \ course there are other ways to do it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpicshv2wn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    n/tmp/tmpicshv2wn.d(33): Error: declaration expected, not `<`\\n/tmp/tmpicshv2wn.d(39):\
    \ Error: unterminated character constant\\n/tmp/tmpicshv2wn.d(42): Error: unterminated\
    \ character constant\\n/tmp/tmpicshv2wn.d(45): Error: unterminated character constant\\\
    n/tmp/tmpicshv2wn.d(48): Error: unterminated character constant\\n/tmp/tmpicshv2wn.d(56):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpicshv2wn.d(57): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpicshv2wn.d(58): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpicshv2wn.d(59): Error: declaration expected, not `assert`\\\
    n/tmp/tmpicshv2wn.d(60): Error: declaration expected, not `assert`\\n/tmp/tmpicshv2wn.d(61):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpicshv2wn.d(62): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpicshv2wn.d(63): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpicshv2wn.d(64): Error: declaration expected, not `assert`\\\
    n/tmp/tmpicshv2wn.d(65): Error: declaration expected, not `assert`\\n/tmp/tmpicshv2wn.d(66):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpicshv2wn.d(67): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpicshv2wn.d(68): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpicshv2wn.d(69): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicshv2wn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbz9k5lwz.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpbz9k5lwz.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpbz9k5lwz.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x61d50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmpm8xoluhh.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmpm8xoluhh.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0x97363554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n <= 1) return false;\n    if (n == 2) return true;\n    \n   \
    \ prime = true;\n    \n    for (i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n        {\n            prime = false;\n            break;\n  \
    \      }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp283alpyf.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp283alpyf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0jfbpfzm.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp0jfbpfzm.__unittest_L35_C1()\
    \ [0x427b2a]\\n??:? void tmp0jfbpfzm.__modtest() [0x427bf8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c0b]\\\
    n??:? __libc_start_main [0x280ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9l0_vym6.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp9l0_vym6.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp9l0_vym6.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xfc6d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e75]\\n??:? void tmp7whq22jm.__unittest_L34_C1()\
    \ [0x427b26]\\n??:? void tmp7whq22jm.__modtest() [0x427bf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa05]\\n??:? runModuleUnitTests [0x42b971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42824b]\\n??:? _d_run_main [0x4281b6]\\n??:? main [0x427c07]\\\
    n??:? __libc_start_main [0xb42b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i\
    \ <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy0fhmoab.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e7d]\\n??:? void tmpy0fhmoab.__unittest_L39_C1()\
    \ [0x427b2e]\\n??:? void tmpy0fhmoab.__modtest() [0x427bfc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bba3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa0d]\\n??:? runModuleUnitTests [0x42b979]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428253]\\n??:? _d_run_main [0x4281be]\\n??:? main [0x427c0f]\\\
    n??:? __libc_start_main [0x165af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ti3hffn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplg1fd230.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg1fd230.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
