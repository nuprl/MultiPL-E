language: d
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= n; i+=2) \n        {\n     \
    \       if (n % i == 0L) \n            {\n                prime = false;\n   \
    \             break;\n            }\n        }\n    }\n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf3zksuft.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpf3zksuft.__unittest_L43_C1() [0x427ba6]\n??:?
    void tmpf3zksuft.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x7935e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_qjk5vtl.d(31): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qjk5vtl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe OP wants to know if\
    \ `n` is prime, not if `n` is divisible by any prime factor.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought it would be a good idea to give a solution that works\
    \ with any number as long as it can be converted to a long.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe best way to find out whether a number is prime is by using the Sieve\
    \ of Eratosthenes algorithm. \nThe algorithm is very simple. \nIt goes through\
    \ all the numbers from 2 to sqrt(n), marking them as composite. \nThen it goes\
    \ through all the numbers from 3 to sqrt(n), marking them as composite. \nAnd\
    \ so on. \nIt will take O(sqrt(n)) time. \nThe algorithm is very easy to implement.\
    \ \n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq2oevdd6.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpq2oevdd6.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpq2oevdd6.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpq2oevdd6.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpq2oevdd6.d(65): Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpq2oevdd6.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpq2oevdd6.d(69): Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpq2oevdd6.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpq2oevdd6.d(73): Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(74):
    Error: declaration expected, not `assert`\n/tmp/tmpq2oevdd6.d(75): Error: declaration
    expected, not `assert`\n/tmp/tmpq2oevdd6.d(76): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2oevdd6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis is not the fastest\
    \ solution. Try it on `is_prime(10L)`.\n<|/ c |>\n<| c |>\nI didn't say it was\
    \ the fastest solution. Just that it was the simplest to implement.\n<|/ c |>\n\
    <| c |>\nI didn't say it was the fastest solution. Just that it was the simplest\
    \ to implement.\n<|/ c |>\n<| c |>\nI didn't say it was the fastest solution.\
    \ Just that it was the simplest to implement.\n<|/ c |>\n<| c |>\nI didn't say\
    \ it was the fastest solution. Just that it was the simplest to implement.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpardcwv1n.d(34): Error: declaration expected, not `<`\n/tmp/tmpardcwv1n.d(40):
    Error: unterminated character constant\n/tmp/tmpardcwv1n.d(43): Error: unterminated
    character constant\n/tmp/tmpardcwv1n.d(46): Error: unterminated character constant\n/tmp/tmpardcwv1n.d(49):
    Error: unterminated character constant\n/tmp/tmpardcwv1n.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpardcwv1n.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpardcwv1n.d(59): Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(60):
    Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(61): Error: declaration
    expected, not `assert`\n/tmp/tmpardcwv1n.d(62): Error: declaration expected, not
    `assert`\n/tmp/tmpardcwv1n.d(63): Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmpardcwv1n.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmpardcwv1n.d(67): Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpardcwv1n.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpardcwv1n.d(70): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpardcwv1n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2; i<=n/2;\
    \ i++) {\n        if(n%i==0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkawvyi5e.d(40): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmpkawvyi5e.__unittest_L30_C1() [0x427b1e]\n??:?
    void tmpkawvyi5e.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0xac8ec554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5opoejc3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5opoejc3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= sqrt(n); ++i) \n    {\n        if (n % i == 0L) \n        {\n     \
    \       b = false;\n            break;\n        }\n    }\n    \n    return b;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpro456xar.d(30): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpro456xar.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            b\
    \ = false;\n            break;\n        }\n    }\n    \n    return b;\n}\n</code>\n\
    <|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThe `is_prime` function\
    \ can be improved by using a `bool` variable instead of `bool` return value. `bool\
    \ is_prime(long n) { bool b = true; ... if (b) { b = false; ... } return b; }`\n\
    <|/ c |>\n<| c |>\n: That is true, but I wanted to keep the code as close to the\
    \ original as possible. Also, `bool` return values can be confusing to read, especially\
    \ for beginners.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to point\
    \ out that your `is_prime` function can be improved by using a `bool` variable\
    \ instead of `bool` return value. `bool is_prime(long n) { bool b = true; ...\
    \ if (b) { b = false; ... } return b; }`\n<|/ c |>\n<| c |>\n: I agree, thank\
    \ you. I will edit my answer to reflect that.\n<|/ c |>\n<| c |>\n: I added a\
    \ version that uses `bool` return values instead of `bool` variables. I hope you\
    \ don't mind.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0yynftc.d(41): Error: declaration expected, not `<`\n/tmp/tmpz0yynftc.d(56):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpz0yynftc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\n</code>\n<|/ a tags=c++,primes,c |>\n<| c |>\nI believe this\
    \ algorithm is O(n^2) in worst case. Sieve of Eratosthenes is O(n).\n<|/ c |>\n\
    <| c |>\n: It is not O(n^2) in the worst case. In the worst case it takes O(n)\
    \ time to find all primes up to n. In the best case it takes O(sqrt(n)) time to\
    \ find all primes up to n.\n<|/ c |>\n<| c |>\n: I believe it takes O(n) time\
    \ to find all primes up to n because it is O(n) in the best case. In the worst\
    \ case it takes O(n^2) time to find all primes up to n. In the best case it takes\
    \ O(sqrt(n)) time to find all primes up to n.\n<|/ c |>\n<| c |>\n: I believe\
    \ it takes O(n) time to find all primes up to n because it is O(n) in the best\
    \ case. In the worst case it takes O(n^2) time to find all primes up to n. In\
    \ the best case it takes O(sqrt(n)) time to find all primes up to n.\n<|/ c |>\n\
    <| c |>\n: I believe it takes O(n) time to find all primes up to n because it\
    \ is O(n) in the best case. In the worst case it takes O(n^2) time to find all\
    \ primes up to n. In the best case it takes O(sqrt(n)) time to find all primes\
    \ up to n.\n<|/ c |>\n<| a dscore=5 |>\nThe Sieve of Eratosthenes is O(n) in the\
    \ worst case, and O(sqrt(n)) in the best case. \nThe best case is when n is prime.\
    \ In the best case, the algorithm will find all primes up to n and store them\
    \ in an array (of size n). In the worst case, the algorithm will find all primes\
    \ up to n and store them in an array (of size sqrt(n)). \nThe best case is when\
    \ n is not prime. In the best case, the algorithm will find all primes up to n\
    \ and store them in an array (of size n). In the worst case, the algorithm will\
    \ find all primes up to n and store them in an array (of size sqrt(\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp901lgzfh.d(34): Error: declaration expected, not `<`\n/tmp/tmp901lgzfh.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmp901lgzfh.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmp901lgzfh.d(62): Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmp901lgzfh.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmp901lgzfh.d(66): Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmp901lgzfh.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmp901lgzfh.d(70): Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmp901lgzfh.d(72): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp901lgzfh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnp6xybgp.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpnp6xybgp.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpnp6xybgp.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xa5424554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest way to check primality.\
    \ Even if you use Sieve of Eratosthenes, it still takes O(n^2) time to check whether\
    \ a number is prime. Sieve of Atkin is O(sqrt(n)).\n<|/ c |>\n<| c |>\n: I agree,\
    \ that's why I said \"*if* you use Sieve of Eratosthenes\". I was just trying\
    \ to give a fast and simple solution. Of course there are other ways to do it.\n\
    <|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin is O(sqrt(n)) and Sieve\
    \ of Eratosthenes is O(n^2). But the question was about a fast and simple solution.\
    \ That's why I gave a fast and simple solution. Of course there are other ways\
    \ to do it.\n<|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin is O(sqrt(n))\
    \ and Sieve of Eratosthenes is O(n^2). But the question was about a fast and simple\
    \ solution. That's why I gave a fast and simple solution. Of course there are\
    \ other ways to do it.\n<|/ c |>\n<| c |>\n: I agree with you. Sieve of Atkin\
    \ is O(sqrt(n)) and Sieve of Eratosthenes is O(n^2). But the question was about\
    \ a fast and simple solution. That's why I gave a fast and simple solution. Of\
    \ course there are other ways to do it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpicshv2wn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpicshv2wn.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpicshv2wn.d(39): Error: unterminated
    character constant\n/tmp/tmpicshv2wn.d(42): Error: unterminated character constant\n/tmp/tmpicshv2wn.d(45):
    Error: unterminated character constant\n/tmp/tmpicshv2wn.d(48): Error: unterminated
    character constant\n/tmp/tmpicshv2wn.d(56): Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpicshv2wn.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmpicshv2wn.d(60): Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpicshv2wn.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpicshv2wn.d(64): Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpicshv2wn.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpicshv2wn.d(68): Error: declaration expected, not `assert`\n/tmp/tmpicshv2wn.d(69):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicshv2wn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbz9k5lwz.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpbz9k5lwz.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpbz9k5lwz.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x61d50554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n <= 1) return false;\n    if (n == 2) return true;\n    \n   \
    \ prime = true;\n    \n    for (i = 3; i <= sqrt(n); i += 2)\n    {\n        if\
    \ (n % i == 0)\n        {\n            prime = false;\n            break;\n  \
    \      }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp283alpyf.d(30): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp283alpyf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0jfbpfzm.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp0jfbpfzm.__unittest_L35_C1() [0x427b2a]\n??:?
    void tmp0jfbpfzm.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x280ee554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9l0_vym6.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp9l0_vym6.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp9l0_vym6.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xfc6d5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i\
    \ <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy0fhmoab.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e7d]\n??:? void tmpy0fhmoab.__unittest_L39_C1() [0x427b2e]\n??:?
    void tmpy0fhmoab.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428253]\n??:? _d_run_main [0x4281be]\n??:? main [0x427c0f]\n??:?
    __libc_start_main [0x165af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg1fd230.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg1fd230.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe that\
    \ `is_prime` should return `true` if the number is prime and `false` otherwise.\
    \ Your code returns `true` if the number is prime and `false` if the number is\
    \ composite. Also, `is_prime` should return `true` if the number is prime and\
    \ `false` otherwise. Your code returns `true` if the number is prime and `false`\
    \ if the number is composite. Also, `is_prime` should return `true` if the number\
    \ is prime and `false` otherwise. Your code returns `true` if the number is prime\
    \ and `false` if the number is composite. Also, `is_prime` should return `true`\
    \ if the number is prime and `false` otherwise. Your code returns `true` if the\
    \ number is prime and `false` if the number is composite. Also, `is_prime` should\
    \ return `true` if the number is prime and `false` otherwise. Your code returns\
    \ `true` if the number is prime and `false` if the number is composite. Also,\
    \ `is_prime` should return `true` if the number is prime and `false` otherwise.\
    \ Your code returns `true` if the number is prime and `false` if the number is\
    \ composite. Also, `is_prime` should return `true` if the number is prime and\
    \ `false` otherwise. Your code returns `true` if the number is prime and `false`\
    \ if the number is composite. Also, `is_prime` should return `true` if the number\
    \ is prime and `false` otherwise. Your code returns `true` if the number is prime\
    \ and `false` if the number is composite. Also, `is_prime` should return `true`\
    \ if the number is prime and `false` otherwise. Your code returns `true` if the\
    \ number is prime and `false` if the number is composite. Also, `is_prime` should\
    \ return `true` if the number is prime and `false` otherwise. Your code returns\
    \ `true` if the number is prime and `false` if the number is composite. Also,\
    \ `is_prime` should return `true` if the number is prime and `false` otherwise.\
    \ Your code returns `true` if the number is prime and `false` if the number is\
    \ composite. Also, `is_prime` should return `true` if the number is prime and\
    \ `false` otherwise. Your code returns `true` if the number is prime and `false`\
    \ if the number is composite. Also, `is_prime` should return `true` if the number\
    \ is prime and `false` otherwise. Your code returns `true` if the number is prime\
    \ and `false` if the number is composite. Also, `is_prime` should return `true`\
    \ if the number is prime and `false` otherwise. Your code returns `true` if the\
    \ number is prime and `false` \nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp76b2xc8d.d(35): Error: declaration expected, not `<`\n/tmp/tmp76b2xc8d.d(43):
    Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(44): Error: declaration
    expected, not `assert`\n/tmp/tmp76b2xc8d.d(45): Error: declaration expected, not
    `assert`\n/tmp/tmp76b2xc8d.d(46): Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(47):
    Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmp76b2xc8d.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmp76b2xc8d.d(50): Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp76b2xc8d.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmp76b2xc8d.d(54): Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmp76b2xc8d.d(56): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76b2xc8d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand that this is an\
    \ old post, but I wanted to point out that your `is_prime` function has a bug.\
    \ `is_prime(6L)` returns `true` because `6%2` is `0`, but `6%3` is `1`. You should\
    \ change your `for` loop to `for(i = 2; i <= n/2; ++i)`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I fixed the bug and added a link to the Wikipedia\
    \ article that explains the algorithm.\n<|/ c |>\n<| a dscore=0 |>\nThe best way\
    \ to find prime numbers is to start with the first number you know is prime, say\
    \ 6. Then, for each number you know is prime, check if it is divisible by any\
    \ number you know is not prime. \nIf it is, skip to the next number. If it isn't,\
    \ then you know that that number is prime. \nThis process will continue until\
    \ you reach the number you started with. \nThe only thing you need to be careful\
    \ of is when your program is trying to find prime numbers. If you start off with\
    \ 6, then you know that 6 is prime, but you know that 6 is not divisible by any\
    \ number you know is not prime. \nIf you start off with 6, then you know that\
    \ 6 is prime, but you know that 6 is divisible by any number you know is prime.\
    \ \nIf you start off with 6, then you know that 6 is prime, but you know that\
    \ 6 is not divisible by any number you know is prime. \nIf you start off with\
    \ 6, then you know that 6 is prime, but you know that 6 is not divisible by any\
    \ number you know is prime. \nIf you start off with 6, then you know that 6 is\
    \ prime, but you know that 6 is not divisible by any number you know is prime.\
    \ \nIf you start off with 6, then you know that 6 is prime, but you know that\
    \ 6 is not divisible by any number you know is prime. \nIf you start off with\
    \ 6, then you know that 6 is prime, but you know that 6 is not divisible by any\
    \ number you know is prime. \nIf you start off with 6, then you know that 6 is\
    \ prime, but you know that 6 is not divisible by any number you know is prime.\
    \ \nIf you start off with 6, then you know that \nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0mt3m3ff.d(34): Error: declaration expected, not `<`\n/tmp/tmp0mt3m3ff.d(44):
    Error: unterminated character constant\n/tmp/tmp0mt3m3ff.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp0mt3m3ff.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp0mt3m3ff.d(61): Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp0mt3m3ff.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp0mt3m3ff.d(65): Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp0mt3m3ff.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp0mt3m3ff.d(69): Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmp0mt3m3ff.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmp0mt3m3ff.d(72): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mt3m3ff.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd4xs611t.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpd4xs611t.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpd4xs611t.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x9c857554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n    \
    \    if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpx7go65j_.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpx7go65j_.__unittest_L38_C1() [0x427b2a]\n??:?
    void tmpx7go65j_.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x43493554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxtnrcb8q.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpxtnrcb8q.__unittest_L43_C1() [0x427ba6]\n??:?
    void tmpxtnrcb8q.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xd02a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n  \
    \  for (i = 2L; i <= n / 2L; i++)\n    {\n        if (n % i == 0L)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/10305644)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. He asked how to find prime numbers.\
    \ I provided a solution to his problem. He did not ask for someone to write his\
    \ code for him. He asked for help with his code. He provided a solution to his\
    \ problem. He did not ask for someone to write his code for him. He asked for\
    \ help with his code. He provided a solution to his problem. He did not ask for\
    \ someone to write his code for him. He asked for help with his code. He provided\
    \ a solution to his problem. He did not ask for someone to write his code for\
    \ him. He asked for help with his code. He provided a solution to his problem.\
    \ He did not ask for someone to write his code for him. He asked for help with\
    \ his code. He provided a solution to his problem. He did not ask for someone\
    \ to write his code for him. He asked for help with his code. He provided a solution\
    \ to his problem.\n<|/ c |>\n<| c |>\nHe asked for help with his code. He provided\
    \ a solution to his problem. He did not ask for someone to write his code for\
    \ him. He asked for help with his code. He provided a solution to his problem.\
    \ He did not ask for someone to write his code for him. He asked for help with\
    \ his code. He provided a solution to his problem. He did not ask for someone\
    \ to write his code for him. He asked for help with his code. He provided a solution\
    \ to his problem. He did not ask for someone to write his code for him. He asked\
    \ for help with his code. He provided a solution to his problem. He did not ask\
    \ for someone to write his code for him. He asked for help with his code\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp84vem31q.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmp84vem31q.d(33):
    Error: declaration expected, not `<`\n/tmp/tmp84vem31q.d(47): Error: declaration
    expected, not `assert`\n/tmp/tmp84vem31q.d(48): Error: declaration expected, not
    `assert`\n/tmp/tmp84vem31q.d(49): Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmp84vem31q.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmp84vem31q.d(53): Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmp84vem31q.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmp84vem31q.d(57): Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmp84vem31q.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp84vem31q.d(60): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84vem31q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5opoejc3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5opoejc3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeslubsxj.d(31): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeslubsxj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsgo60hq.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsgo60hq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,primes,c |>\n<| c |>\nThis is not the fastest way to\
    \ check for primes. A simple sieve is much faster.\n<|/ c |>\n<| c |>\n: I agree.\
    \ But the OP asked for \"fastest\" so I gave him a fast solution. :)\n<|/ c |>\n\
    <| c |>\n: I agree. But the OP asked for \"fastest\" so I gave him a fast solution.\
    \ :)\n<|/ c |>\n<| c |>\n: I agree. But the OP asked for \"fastest\" so I gave\
    \ him a fast solution. :)\n<|/ c |>\n<| c |>\n: I agree. But the OP asked for\
    \ \"fastest\" so I gave him a fast solution. :)\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1y59gthe.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmp1y59gthe.d(33):
    Error: declaration expected, not `<`\n/tmp/tmp1y59gthe.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmp1y59gthe.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmp1y59gthe.d(58): Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmp1y59gthe.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmp1y59gthe.d(62): Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmp1y59gthe.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmp1y59gthe.d(66): Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmp1y59gthe.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmp1y59gthe.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1y59gthe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n \
    \   {\n        if(n%i == 0)\n        {\n            prime = false;\n         \
    \   break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgoitoap8.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgoitoap8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n  \
    \  for (i = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n   \
    \         prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmyme3ex2.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmpmyme3ex2.__unittest_L41_C1() [0x427a87]\n??:?
    void tmpmyme3ex2.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427c03]\n??:?
    __libc_start_main [0xca0af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  long sqrtn = std.math.sqrt(n);\n    for(i = 2; i <= sqrtn; i++)\n    {\n  \
    \      if(n%i == 0)\n        {\n            b = false;\n            break;\n \
    \       }\n        else\n        {\n            b = true;\n        }\n    }\n\
    \    return b;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer to the question.\
    \ OP asked for a way to find prime numbers, not whether a number is prime. Your\
    \ code does not do that.\n<|/ c |>\n<| c |>\nThe question was \"is there a better\
    \ way to find prime numbers?\" The answer is \"yes\". The code above does exactly\
    \ that. OP asked if there is a better way to find prime numbers. OP did not ask\
    \ if my code is better or worse. OP asked if there is a better way to find prime\
    \ numbers. OP did not ask if my code is better or worse. OP asked if there is\
    \ a better way to find prime numbers. OP did not ask if my code is better or worse.\
    \ OP asked if there is a better way to find prime numbers. OP did not ask if my\
    \ code is better or worse. OP asked if there is a better way to find prime numbers.\
    \ OP did not ask if my code is better or worse. OP asked if there is a better\
    \ way to find prime numbers. OP did not ask if my code is better or worse. OP\
    \ asked if there is a better way to find prime numbers. OP did not ask if my code\
    \ is better or worse. OP asked if there is a better way to find prime numbers.\
    \ OP did not ask if my code is better or worse. OP asked if there is a better\
    \ way to find prime numbers. OP did not ask if my code is better or worse. OP\
    \ asked if there is a better way to find prime numbers. OP did not ask if my code\
    \ is better or worse.\n<|/ c |>\n<| c |>\nThe question was \"is there a better\
    \ way to find prime numbers?\" The answer is \"yes\". The code above does exactly\
    \ that. OP asked if there is a better way to find prime numbers. OP did not ask\
    \ if my code is better or worse. OP asked if there is a better way to find prime\
    \ numbers. OP did not ask if my code is better or worse. OP asked if there is\
    \ a better way to find prime numbers. OP did not ask if my code is better or worse.\
    \ OP asked if there is a better way to find prime numbers. OP did not ask if my\
    \ code is better or worse. OP \nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvcbdfgkv.d(39): Error: declaration expected, not `<`\n/tmp/tmpvcbdfgkv.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmpvcbdfgkv.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmpvcbdfgkv.d(56): Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpvcbdfgkv.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmpvcbdfgkv.d(60): Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpvcbdfgkv.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpvcbdfgkv.d(64): Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpvcbdfgkv.d(66): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcbdfgkv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n  \
    \      if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmd5hceh2.d(27): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmd5hceh2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp278rjy_i.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp278rjy_i.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp278rjy_i.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x2644e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i\
    \ <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvcvzyzx.d(28): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvcvzyzx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1) return false;\n    \n    for (i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7xvg29np.d(27): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xvg29np.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; i++)\n  \
    \  {\n        if(n % i == 0)\n        {\n            prime = false;\n        \
    \    break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpms1zwoxa.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms1zwoxa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    if (n < 2)\n        return prime;\n    \n\
    \    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc3x3p4bo.d(30): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3x3p4bo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0vlm1y07.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vlm1y07.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n        return prime;\n    \n    for (i = 2L;\
    \ i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpglpocx18.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpglpocx18.__unittest_L39_C1() [0x427a8b]\n??:?
    void tmpglpocx18.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x2d84a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit; ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6rj4pfj4.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rj4pfj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n       \
    \     b = false;\n            break;\n        }\n        b = true;\n    }\n  \
    \  return b;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1) return false;\n    if (n == 2) return true;\n \
    \   \n    for (i = 3; i * i <= n; i += 2)\n    {\n        if (n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n \
    \   assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n  \
    \  assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n \
    \   assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n   \
    \ assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6jx2is8z.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e7d]\n??:? void tmp6jx2is8z.__unittest_L39_C1() [0x427a76]\n??:?
    void tmp6jx2is8z.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428253]\n??:? _d_run_main [0x4281be]\n??:? main [0x427c13]\n??:?
    __libc_start_main [0x4deba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= n; ++i)\n        {\n      \
    \      if (n % i == 0L)\n            {\n                prime = false;\n     \
    \           break;\n            }\n        }\n    }\n    \n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqub6i8wp.d(50): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpqub6i8wp.__unittest_L45_C1() [0x427a8f]\n??:?
    void tmpqub6i8wp.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xf2f1d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest solution.\
    \ Try it on `is_prime(100000000L)`.\n<|/ c |>\n<| c |>\nYes, I know. I'm just\
    \ trying to give an idea of how to solve this problem. Of course the fastest solution\
    \ is to use some mathematical formulas to solve this problem.\n<|/ c |>\n<| c\
    \ |>\nI agree with you. But the OP asked for a solution in C. He didn't ask for\
    \ a fast solution. He asked for a solution that is easy to understand.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. But I thought that maybe he just wants to know\
    \ how it works. So I wrote a solution that is easy to understand.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the OP asked for a solution in C. He didn't ask\
    \ for a fast solution. He asked for a solution that is easy to understand.\n<|/\
    \ c |>\n<| a tags=c |>\nThe first thing you need to do is decide what you want\
    \ to do with negative numbers. Do you want to treat them as primes? Do you want\
    \ to treat them as composites? Do you want to treat them as non-primes? Do you\
    \ want to treat them as primes up to some limit? Do you want to treat them as\
    \ composites up to some limit? Do you want to treat them as non-primes up to some\
    \ limit? Do you want to treat them as primes up to some limit and composites up\
    \ to some limit? Do you want to treat them as non-primes up to some limit and\
    \ composites up to some limit? Do you want to treat them as primes up to some\
    \ limit and non-primes up to some limit? Do you want to treat them as composites\
    \ up to some limit and non-primes up to some limit? Do you want to treat them\
    \ as non-primes up to some limit and primes up to some limit? Do you want to treat\
    \ them as primes up to some limit and primes up to some limit? Do you want to\
    \ treat them as composites up to some limit and primes up to some limit? Do you\
    \ want to treat them as primes up to some limit and composites up to some limit?\
    \ Do you want to treat them as non-primes up to some limit and primes up to some\
    \ limit? Do you want to treat them as composites up to some limit and primes up\
    \ to some limit? Do you want to treat them as non-primes up to \nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp83zv8tf4.d(34): Error: declaration expected, not `<`\n/tmp/tmp83zv8tf4.d(40):
    Error: unterminated character constant\n/tmp/tmp83zv8tf4.d(43): Error: unterminated
    character constant\n/tmp/tmp83zv8tf4.d(49): Error: unterminated character constant\n/tmp/tmp83zv8tf4.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmp83zv8tf4.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmp83zv8tf4.d(60): Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmp83zv8tf4.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmp83zv8tf4.d(64): Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp83zv8tf4.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp83zv8tf4.d(68): Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmp83zv8tf4.d(70): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83zv8tf4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the question. He\
    \ is asking about a specific algorithm and your answer does not address that.\n\
    <|/ c |>\n<| c |>\nI agree with you, however I believe that my answer does address\
    \ the question. He is asking about a specific algorithm and my answer does address\
    \ that. He is asking about a specific algorithm and my answer does address that.\
    \ He is asking about a specific algorithm and my answer does address that. He\
    \ is asking about a specific algorithm and my answer does address that. He is\
    \ asking about a specific algorithm and my answer does address that. He is asking\
    \ about a specific algorithm and my answer does address that. He is asking about\
    \ a specific algorithm and my answer does address that. He is asking about a specific\
    \ algorithm and my answer does address that. He is asking about a specific algorithm\
    \ and my answer does address that. He is asking about a specific algorithm and\
    \ my answer does address that. He is asking about a specific algorithm and my\
    \ answer does address that. He is asking about a specific algorithm and my answer\
    \ does address that. He is asking about a specific algorithm and my answer does\
    \ address that. He is asking about a specific algorithm and my answer does address\
    \ that. He is asking about a specific algorithm and my answer does address that.\
    \ He is asking about a specific algorithm and my answer does address that. He\
    \ is asking about a specific algorithm and my answer does address that. He is\
    \ asking about a specific algorithm and my answer does address that. He is asking\
    \ about a specific algorithm and my answer does address that. He is asking about\
    \ a specific algorithm and my answer does address that. He is asking about a specific\
    \ algorithm and my answer does address that. He is asking about a specific algorithm\
    \ and my answer does address that. He is asking about a specific algorithm and\
    \ my answer does address that. He is asking about a specific algorithm and my\
    \ answer does address that. He is asking about a specific algorithm and my answer\
    \ does address that. He is ask\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdl5fodur.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpdl5fodur.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpdl5fodur.d(44): Error: declaration
    expected, not `assert`\n/tmp/tmpdl5fodur.d(45): Error: declaration expected, not
    `assert`\n/tmp/tmpdl5fodur.d(46): Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(47):
    Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(48): Error: declaration
    expected, not `assert`\n/tmp/tmpdl5fodur.d(49): Error: declaration expected, not
    `assert`\n/tmp/tmpdl5fodur.d(50): Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpdl5fodur.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpdl5fodur.d(54): Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpdl5fodur.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpdl5fodur.d(57): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdl5fodur.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_epynjeh.d(31): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_epynjeh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,primes,algorithm |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n{\n   \
    \ alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_bgb62ed.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bgb62ed.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    if (n <= 1) return prime;\n    if (n <= 3) return true;\n\
    \    if (n % 2 == 0) return false;\n    i = 5; \n    prime = false;\n    while\
    \ (i * i <= n) \n    {\n        if (n % i == 0) \n        {\n            prime\
    \ = true;\n            break;\n        }\n        i += 6;\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpan627eh8.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ea5]\n??:? void tmpan627eh8.__unittest_L41_C1() [0x427abb]\n??:?
    void tmpan627eh8.__modtest() [0x427c24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa35]\n??:? runModuleUnitTests [0x42b9a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42827b]\n??:? _d_run_main [0x4281e6]\n??:? main [0x427c37]\n??:?
    __libc_start_main [0xef20d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpg5la1z74.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmpg5la1z74.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmpg5la1z74.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0xb19c4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= n; i++)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThe first example is wrong. `is_prime(6L)` returns `false` but\
    \ `is_prime(101L)` returns `true`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks\
    \ for pointing that out. I've corrected the answer.\n<|/ c |>\n<| c |>\nThe first\
    \ example is wrong. `is_prime(6L)` returns `false` but `is_prime(101L)` returns\
    \ `true`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\
    \ I've corrected the answer.\n<|/ c |>\n<| c |>\nThe first example is wrong. `is_prime(6L)`\
    \ returns `false` but `is_prime(101L)` returns `true`.\n<|/ c |>\n<| a tags=c++,primes\
    \ |>\nThe first example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe second example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe third example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe fourth example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe fifth example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe sixth example is wrong. is_prime(6L) returns false but is_prime(101L)\
    \ returns true.\nThe seventh example is wrong. is_prime(6L) returns false but\
    \ is_prime(101L) returns true.\nThe eighth example is wrong. is_prime(6L) returns\
    \ false but is_prime(101L) returns true.\nThe ninth example is wrong. is_prime(6L)\
    \ returns false but is_prime(101L) returns true.\nThe tenth example is wrong.\
    \ is_prime(6L) returns false but is_prime(101\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0d36czk.d(43): Error: declaration expected, not `<`\n/tmp/tmpf0d36czk.d(49):
    Error: unterminated character constant\n/tmp/tmpf0d36czk.d(55): Error: unterminated
    character constant\n/tmp/tmpf0d36czk.d(75): Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(76):
    Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmpf0d36czk.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmpf0d36czk.d(79): Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(81): Error: declaration
    expected, not `assert`\n/tmp/tmpf0d36czk.d(82): Error: declaration expected, not
    `assert`\n/tmp/tmpf0d36czk.d(83): Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(84):
    Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(85): Error: declaration
    expected, not `assert`\n/tmp/tmpf0d36czk.d(86): Error: declaration expected, not
    `assert`\n/tmp/tmpf0d36czk.d(87): Error: declaration expected, not `assert`\n/tmp/tmpf0d36czk.d(88):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0d36czk.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n        return false; \n    \n    prime = true;\n    \n\
    \    for (i = 2L; i <= n; i+=2L)\n    {\n        if (n % i == 0L)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpigqcvhsm.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpigqcvhsm.__unittest_L41_C1() [0x427ba6]\n??:?
    void tmpigqcvhsm.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xa13f9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    if (n <= 1)\n    {\n        is_prime = false;\n    }\n  \
    \  else\n    {\n        for (i = 2; i <= n / 2; ++i)\n        {\n            if\
    \ (n % i == 0)\n            {\n                is_prime = false;\n           \
    \     break;\n            }\n        }\n    }\n    \n    return is_prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit; i++)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqnl3ppk.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqnl3ppk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  for(i=2; i<=n/2; i++)\n    {\n        if(n%i==0)\n        {\n            b\
    \ = false;\n            break;\n        }\n    }\n    return b;\n}\n</code>\n\
    <|/ a tags=c++,primes |>\n<| c |>\nThe `is_prime` function can be improved by\
    \ starting at `i=2` and incrementing by `i` instead of `2`. That way you only\
    \ need to check odd numbers. Also, `is_prime` can be made more efficient by starting\
    \ at `i=2` and incrementing by `i/2` instead of `2`. That way you only need to\
    \ check odd numbers. Also, `is_prime` can be made more efficient by starting at\
    \ `i=2` and incrementing by `i/2` instead of `2`. That way you only need to check\
    \ odd numbers. Also, `is_prime` can be made more efficient by starting at `i=2`\
    \ and incrementing by `i/2` instead of `2`. That way you only need to check odd\
    \ numbers.\n<|/ c |>\n<| c |>\n: Thanks for your suggestions. I edited my answer\
    \ to include your suggestions.\n<|/ c |>\n<| c |>\n: Thanks for your suggestions.\
    \ I edited my answer to include your suggestions.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for your suggestions. I edited my answer to include your suggestions.\n<|/ c\
    \ |>\n<| c |>\n: Thanks for your suggestions. I edited my answer to include your\
    \ suggestions.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpos14fc6k.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpos14fc6k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n \
    \           if (n % i == 0L)\n            {\n                prime = false;\n\
    \                break;\n            }\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nI believe you meant `if (n % i\
    \ == 0L)`\n<|/ c |>\n<| c |>\nYes, I did mean `if (n % i == 0L)`\n<|/ c |>\n<|\
    \ c |>\n`bool prime = true;` should be `bool prime = false;`\n<|/ c |>\n<| c |>\n\
    `bool prime = true;` should be `bool prime = false;`\n<|/ c |>\n<| c |>\n`bool\
    \ prime = true;` should be `bool prime = false;`\n<|/ c |>\n<| a tags=c++,primes\
    \ |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xk5cb8d.d(43): Error: declaration expected, not `<`\n/tmp/tmp0xk5cb8d.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmp0xk5cb8d.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmp0xk5cb8d.d(69): Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmp0xk5cb8d.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmp0xk5cb8d.d(73): Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(74):
    Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(75): Error: declaration
    expected, not `assert`\n/tmp/tmp0xk5cb8d.d(76): Error: declaration expected, not
    `assert`\n/tmp/tmp0xk5cb8d.d(77): Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(78):
    Error: declaration expected, not `assert`\n/tmp/tmp0xk5cb8d.d(79): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xk5cb8d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= n; ++i)\n    {\n        if (n % i == 0L) \n        {\n            b\
    \ = false;\n            break;\n        }\n        b = true;\n    }\n    \n  \
    \  return b;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpg94omw85.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpg94omw85.__unittest_L42_C1() [0x427a8b]\n??:?
    void tmpg94omw85.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xd7643554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    for(i=2; i<=limit; i++)\n    {\n\
    \        if(n%i==0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp39238p45.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39238p45.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xcqe854.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xcqe854.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg1fd230.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg1fd230.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n \
    \           if (n % i == 0L)\n            {\n                prime = false;\n\
    \                break;\n            }\n        }\n    }\n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqnlypb4.d(32): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqnlypb4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not the fastest algorithm for finding prime\
    \ numbers. It is O(n^2) in worst case. There are faster algorithms for finding\
    \ prime numbers. One of them is [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    <|/ c |>\n<| c |>\nI agree with you. There are better algorithms for finding prime\
    \ numbers. But this algorithm is simple and easy to understand.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. There are better algorithms for finding prime numbers.\
    \ But this algorithm is simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. There are better algorithms for finding prime numbers. But this algorithm\
    \ is simple and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you. There\
    \ are better algorithms for finding prime numbers. But this algorithm is simple\
    \ and easy to understand.\n<|/ c |>\n<| a tags=primes,c++ |>\n<code>\n#include<iostream>\n\
    #include<math.h>\nusing namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4vviy1q.d(33): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4vviy1q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    if (n < 2L) \n    {\n        prime = false;\n    }\n \
    \   else if (n <= 3L) \n    {\n        prime = true;\n    }\n    else\n    {\n\
    \        for (i = 3L; prime && i <= n; i += 2L) \n        {\n            if (n\
    \ % i == 0L) \n            {\n                prime = false;\n            }\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThis code doesn't work. `is_prime(6L)` returns `true`, but `is_prime(101L)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI tested it on ideone and got true for\
    \ both 6 and 101. I guess you forgot to add some `else` statements.\n<|/ c |>\n\
    <| c |>\nI tested it on ideone and got true for both 6 and 101. I guess you forgot\
    \ to add some `else` statements.\n<|/ c |>\n<| c |>\nI tested it on ideone and\
    \ got true for both 6 and 101. I guess you forgot to add some `else` statements.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone and got true for both 6 and 101. I guess\
    \ you forgot to add some `else` statements.\n<|/ c |>\n<| a dscore=5 |>\nThe Sieve\
    \ of Eratosthenes is one of the most efficient algorithms for finding prime numbers.\
    \ \nThe basic idea is to generate a list of all numbers from 2 to sqrt(n) inclusive,\
    \ mark them as prime and remove them from the list as they are found. \nThe algorithm\
    \ is very simple to implement and very efficient. \nThe algorithm is also very\
    \ easy to understand and implement. \nThe algorithm is also very easy to understand\
    \ and implement. \nThe algorithm is also very easy to understand and implement.\
    \ \nThe algorithm is very easy to understand and implement. \nThe algorithm is\
    \ very easy to understand and implement. \nThe algorithm is very easy to understand\
    \ and implement. \nThe algorithm is very easy to understand and implement. \n\
    The algorithm is very easy to understand and implement. \nThe algorithm is very\
    \ easy to understand and implement. \nThe algorithm is very easy to understand\
    \ and implement. \nThe algorithm is very easy to understand and implement. \n\
    The algorithm is very easy to understand and implement. \nThe algorithm is very\
    \ easy to understand and implement. \nThe algorithm is very easy to understand\
    \ \nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfakvl4hw.d(45): Error: declaration expected, not `<`\n/tmp/tmpfakvl4hw.d(48):
    Error: unterminated character constant\n/tmp/tmpfakvl4hw.d(84): Error: declaration
    expected, not `assert`\n/tmp/tmpfakvl4hw.d(85): Error: declaration expected, not
    `assert`\n/tmp/tmpfakvl4hw.d(86): Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(87):
    Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(88): Error: declaration
    expected, not `assert`\n/tmp/tmpfakvl4hw.d(89): Error: declaration expected, not
    `assert`\n/tmp/tmpfakvl4hw.d(90): Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(91):
    Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(92): Error: declaration
    expected, not `assert`\n/tmp/tmpfakvl4hw.d(93): Error: declaration expected, not
    `assert`\n/tmp/tmpfakvl4hw.d(94): Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(95):
    Error: declaration expected, not `assert`\n/tmp/tmpfakvl4hw.d(96): Error: declaration
    expected, not `assert`\n/tmp/tmpfakvl4hw.d(97): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfakvl4hw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwq4ds7tl.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwq4ds7tl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    prime =\
    \ true;\n    \n    for (i = 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i ==\
    \ 0L)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwhmfzi5.d(32): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwhmfzi5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) return false; \n    \n    prime = true;\n    \n    for\
    \ (i = 2L; i <= n; i+=2) {\n        if (n % i == 0) {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcklnyxem.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpcklnyxem.__unittest_L38_C1() [0x427ba6]\n??:?
    void tmpcklnyxem.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xb5eff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  if (n < 2L) return false; \n    if (n == 2L) return true;\n    if (n % 2L ==\
    \ 1L) return false; \n    for (i = 3L; i * i <= n; i += 2L) {\n        if (n %\
    \ iL == 0L) return false; \n    }\n    b = true;\n    for (i = 3L; i * i <= n;\
    \ i += 2L) {\n        if (n % iL == 0L) b = false; \n    }\n    return b;\n}\n\
    </code>\n<|/ a tags=c++,primes,math |>\n<| c |>\nThe first two for loops are unnecessary.\
    \ Just check if `n % i == 0` for all `i` up to `sqrt(n)`.\n<|/ c |>\n<| c |>\n\
    : I agree with you. But the OP asked for prime numbers. So I wrote the code according\
    \ to his needs.\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked for prime\
    \ numbers. So I wrote the code according to his needs.\n<|/ c |>\n<| c |>\n: I\
    \ agree with you. But the OP asked for prime numbers. So I wrote the code according\
    \ to his needs.\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked for prime\
    \ numbers. So I wrote the code according to his needs.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgu3s8kgb.d(36): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu3s8kgb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    if (n < 2L) \n    {\n        is_prime = false;\n    }\n \
    \   else\n    {\n        for (i = 2L; i <= n; ++i)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                is_prime = false;\n          \
    \      break;\n            }\n        }\n    }\n    \n    return is_prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmcaqxc1b.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpmcaqxc1b.__unittest_L43_C1() [0x427a8b]\n??:?
    void tmpmcaqxc1b.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x2259b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n <= 1) return false;\n    \n    prime = true;\n    \n    for (i\
    \ = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n         \
    \   prime = false;\n            break;\n        }\n    }\n    \n    return prime;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg1fd230.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg1fd230.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) return false; // 0 and 1 are not primes\n    if (n == 2L)\
    \ return true; // 2 and 3 are primes\n    if (n % 2L == 0) return false; // 0\
    \ and 1 are not primes\n    \n    prime = true;\n    \n    for (i = 3L; i * i\
    \ <= n; i += 2L) {\n        if (n % i == 0L) {\n            prime = false;\n \
    \           break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThe first two lines of\
    \ your function are redundant. `bool prime = true;` will suffice.\n<|/ c |>\n\
    <| c |>\nYes, I know. I just wanted to show the OP how to do it.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. Just wanted to show OP how to do it.\n<|/ c |>\n<| c\
    \ |>\nI agree with you. Just wanted to show OP how to do it.\n<|/ c |>\n<| c |>\n\
    I agree with you. Just wanted to show OP how to do it.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxm42gjjr.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm42gjjr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpftsry_v9.d(24): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftsry_v9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long a = 6L;\n\
    \    long b = 2L;\n    long c;\n    long d;\n    long e;\n    long f;\n    long\
    \ g;\n    long h;\n    long k;\n    long l;\n    long m;\n    long n;\n    long\
    \ p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long\
    \ v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long A;\n    long\
    \ B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long\
    \ H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long\
    \ N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long\
    \ T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long\
    \ Z;\n    long _1;\n    long _2;\n    long _3;\n    long _4;\n    long _5;\n \
    \   long _6;\n    long _7;\n    long _8;\n    long _9;\n    long _10;\n    long\
    \ _11;\n    long _12;\n    long _13;\n    long _14;\n    long _15;\n    long _16;\n\
    \    long _17;\n    long _18;\n    long _19;\n    long _20;\n    long _21;\n \
    \   long _22;\n    long _23;\n    long _24;\n    long _25;\n    long _26;\n  \
    \  long _27;\n    long _28;\n    long _29;\n    long _30;\n    long _31;\n   \
    \ long _32;\n    long _33;\n    long _34;\n    long _35;\n    long _36;\n    long\
    \ _37;\n    long _38;\n    long _39;\n    long _40;\n    long _41;\n    long _42;\n\
    \    long _43;\n    long _44;\n    long _45;\n    long _46;\n    long _47;\n \
    \   long _48;\n    long _49;\n    long _50;\n    \nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3mwyxmiv.d(123): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mwyxmiv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n \
    \   for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0) \n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkyfujjfx.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpkyfujjfx.__unittest_L41_C1() [0x427ba2]\n??:?
    void tmpkyfujjfx.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x36491554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i\
    \ <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvcvzyzx.d(28): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvcvzyzx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else if (n\
    \ == 2L) \n    {\n        prime = true;\n    }\n    else\n    {\n        for (i\
    \ = 3L; i * i <= n; i += 2L) \n        {\n            if (n % i == 0L) \n    \
    \        {\n                prime = false;\n                break;\n         \
    \   }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe3c7kp6o.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e85]\n??:? void tmpe3c7kp6o.__unittest_L47_C1() [0x427a9b]\n??:?
    void tmpe3c7kp6o.__modtest() [0x427c04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42825b]\n??:? _d_run_main [0x4281c6]\n??:? main [0x427c17]\n??:?
    __libc_start_main [0xd0c46554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsgo60hq.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsgo60hq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpftsry_v9.d(24): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftsry_v9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0jfbpfzm.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp0jfbpfzm.__unittest_L35_C1() [0x427b2a]\n??:?
    void tmp0jfbpfzm.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x280ee554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n  \
    \  {\n        if(n%i == 0)\n        {\n            prime = false;\n          \
    \  break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp985ca8o3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp985ca8o3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            is_prime = false;\n            break;\n        }\n    }\n  \
    \  return is_prime;\n}\n</code>\n<|/ a tags=primes,c++,algorithm |>\n<| c |>\n\
    I believe that `is_prime` should return `true` for `0L`.\n<|/ c |>\n<| c |>\n\
    : Yes, I agree. Thanks for pointing it out. I've corrected the code.\n<|/ c |>\n\
    <| c |>\n`is_prime` should return `true` for `0L` because `0L` is prime. `0L`\
    \ is not divisible by any number other than `1L`.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ agree. Thanks for pointing it out. I've corrected the code.\n<|/ c |>\n<| c\
    \ |>\n`is_prime` should return `true` for `0L` because `0L` is prime. `0L` is\
    \ not divisible by any number other than `1L`.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ best way to find out if a number is prime is by checking if its only prime factors\
    \ are 1 and itself. If it only has one prime factor it isn't prime and if it has\
    \ more than one it is.\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7hkdufo.d(34): Error: declaration expected, not `<`\n/tmp/tmpi7hkdufo.d(40):
    Error: unterminated character constant\n/tmp/tmpi7hkdufo.d(46): Error: unterminated
    character constant\n/tmp/tmpi7hkdufo.d(52): Error: unterminated character constant\n/tmp/tmpi7hkdufo.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmpi7hkdufo.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmpi7hkdufo.d(61): Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpi7hkdufo.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpi7hkdufo.d(65): Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpi7hkdufo.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpi7hkdufo.d(69): Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpi7hkdufo.d(71): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7hkdufo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2yirb5_y.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp2yirb5_y.__unittest_L35_C1() [0x427b26]\n??:?
    void tmp2yirb5_y.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xa5ad8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\n`bool prime = true;`\
    \ should be `bool prime = false;`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/\
    \ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy9dpoi_m.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9dpoi_m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0v_r_2cy.d(23): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0v_r_2cy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis code is not correct.\
    \ `is_prime(6L)` returns `true` but `is_prime(101L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnevq10c.d(34): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnevq10c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The first two lines of your function are unnecessary. `bool is_prime(long n) {\
    \ return n <= 1; }` will suffice.\n<|/ c |>\n<| c |>\n: Yes, but that would require\
    \ the compiler to optimize away the function call. Not a big deal for small numbers,\
    \ but a big deal for large numbers. And I wanted to show that you can do that\
    \ without having to write an actual function.\n<|/ c |>\n<| c |>\n: I agree, but\
    \ I wanted to show that you can do that without having to write an actual function.\n\
    <|/ c |>\n<| c |>\n: I agree, but I wanted to show that you can do that without\
    \ having to write an actual function.\n<|/ c |>\n<| c |>\n: I agree, but I wanted\
    \ to show that you can do that without having to write an actual function.\n<|/\
    \ c |>\n<| a tags=c++,primes,algorithm |>\nThe first thing I notice is that your\
    \ function doesn't return anything if n is less than or equal to 1.\n<|/ a dscore=1\
    \ |>\n<| c |>\nI believe that `is_prime(2L)` returns `true`, but `is_prime(6L)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\n: Yes, but `is_prime(6L)` returns `true`\
    \ because `6` is divisible by `2`.\n<|/ c |>\n<| c |>\n: Yes, but `is_prime(6L)`\
    \ returns `true` because `6` is divisible by `2`.\n<|/ c |>\n<| c |>\n: Yes, but\
    \ `is_prime(6L)` returns `true` because `6` is divisible by `2`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, but `is_prime(6L)` returns `true` because `6` is divisible by `2`.\n\
    <|/ c |>\n<| a tags=c++,primes,algorithm |>\nThe first thing I notice is that\
    \ your function doesn't return anything if n is less than or equal to 1.\n<|/\
    \ a dscore=1 |>\n<| a tags=c++,primes,algorithm |>\n<code>\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsi1giw0p.d(32): Error: declaration expected, not `<`\n/tmp/tmpsi1giw0p.d(50):
    Error: unterminated character constant\n/tmp/tmpsi1giw0p.d(68): Error: unterminated
    character constant\n/tmp/tmpsi1giw0p.d(76): Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmpsi1giw0p.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmpsi1giw0p.d(80): Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(81):
    Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmpsi1giw0p.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmpsi1giw0p.d(84): Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(85):
    Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(86): Error: declaration
    expected, not `assert`\n/tmp/tmpsi1giw0p.d(87): Error: declaration expected, not
    `assert`\n/tmp/tmpsi1giw0p.d(88): Error: declaration expected, not `assert`\n/tmp/tmpsi1giw0p.d(89):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsi1giw0p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n  \
    \  {\n        if(n%i == 0)\n        {\n            prime = false;\n          \
    \  break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp985ca8o3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp985ca8o3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmput75qy4a.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmput75qy4a.__unittest_L36_C1() [0x427b26]\n??:?
    void tmput75qy4a.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xdd4a4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) return false; \n    \n    prime = true;\n    \n    for\
    \ (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0) \n        {\n      \
    \      prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7t7wa71s.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7t7wa71s.__unittest_L40_C1() [0x427ba6]\n??:?
    void tmp7t7wa71s.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x59fc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1L) \n    {\n        return prime;\n    }\n    \n\
    \    for (i = 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0L) \n     \
    \   {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps583_zsf.d(30): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps583_zsf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; ++i)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_lnsn1n.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_lnsn1n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd4xs611t.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpd4xs611t.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpd4xs611t.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x9c857554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n        return false; // n is less than 2\n    if (n ==\
    \ 2L)\n        return true; // n is 2\n    if (n % 2L == 0L)\n        return false;\
    \ // n is even\n    \n    prime = true;\n    \n    for (i = 3L; prime && i <=\
    \ sqrt(n); i += 2L)\n    {\n        if (n % i == 0L)\n            prime = false;\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyjr0cbtt.d(34): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjr0cbtt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg1fd230.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg1fd230.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i == 0)\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdrbh5oiy.d(23): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrbh5oiy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx0wme6hw.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0wme6hw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0jfbpfzm.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp0jfbpfzm.__unittest_L35_C1() [0x427b2a]\n??:?
    void tmp0jfbpfzm.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x280ee554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    if (n < 2L)\n        return is_prime;\n    \n    for (i =\
    \ 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0L)\n        {\n       \
    \     is_prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdy2ah7ff.d(28): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy2ah7ff.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ an answer to the question. He is asking for a way to find prime numbers. Your\
    \ answer does not help him with that.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought it would be helpful to give a general idea of how to find prime numbers.\
    \ I agree with you that there are many ways to do this, but I thought it would\
    \ be helpful to give a general idea of how to find prime numbers. I agree with\
    \ you that there are many ways to do this, but I thought it would be helpful to\
    \ give a general idea of how to find prime numbers. I agree with you that there\
    \ are many ways to do this, but I thought it would be helpful to give a general\
    \ idea of how to find prime numbers. I agree with you that there are many ways\
    \ to do this, but I thought it would be helpful to give a general idea of how\
    \ to find prime numbers. I agree with you that there are many ways to do this,\
    \ but I thought it would be helpful to give a general idea of how to find prime\
    \ numbers. I agree with you that there are many ways to do this, but I thought\
    \ it would be helpful to give a general idea of how to find prime numbers. I agree\
    \ with you that there are many ways to do this, but I thought it would be helpful\
    \ to give a general idea of how to find prime numbers.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that there are many ways to do this, but I thought it would be helpful\
    \ to give a general idea of how to find prime numbers. I agree with you that there\
    \ are many ways to do this, but I thought it would be helpful to give a general\
    \ idea of how to find prime numbers. I agree with you that there are many ways\
    \ to do this, but I thought it would be helpful to give a general idea of how\
    \ to find prime numbers. I agree with you that there are many ways to do this,\
    \ but I thought it would be helpful to give a general idea of how to find prime\
    \ numbers. I agree with you that there are many ways to do this, but I thought\
    \ it would be helpful to give a general idea of how to find prime numbers. I agree\
    \ with you that there are many ways to do this, but I thought it would be helpful\
    \ to give a general idea of how to find prime numbers.\n\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5u8ic2_9.d(35): Error: declaration expected, not `<`\n/tmp/tmp5u8ic2_9.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmp5u8ic2_9.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmp5u8ic2_9.d(53): Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmp5u8ic2_9.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmp5u8ic2_9.d(57): Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp5u8ic2_9.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp5u8ic2_9.d(61): Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp5u8ic2_9.d(63): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5u8ic2_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvu03sb6j.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu03sb6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, sqrtn = std.math.sqrt\
    \ (n);\n    bool prime = true;\n    \n    for (i = 2; i <= sqrtn; i++) {\n   \
    \     if (n % i == 0) {\n            prime = false;\n            break;\n    \
    \    }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfw6gknko.d(22): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfw6gknko.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0L)\n        {\n       \
    \     b = false;\n            break;\n        }\n        b = true;\n    }\n  \
    \  \n    return b;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn227tfxw.d(30): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn227tfxw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n    {\n        return false;\n    }\n    \n  \
    \  for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n \
    \           prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5opoejc3.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5opoejc3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\n\
    The question was about C++, not C. `std::vector` doesn't exist in C++.\n<|/ c\
    \ |>\n<| c |>\n: I didn't realize that until I saw the tag. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a C++ version. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\n: I added a C++ version. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\n: I added a C++ version. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4hsrlass.d(34): Error: declaration expected, not `<`\n/tmp/tmp4hsrlass.d(37):
    Error: unterminated character constant\n/tmp/tmp4hsrlass.d(40): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hsrlass.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            is_prime = false;\n            break;\n        }\n    }\n  \
    \  return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwb7iqcxg.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpwb7iqcxg.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpwb7iqcxg.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xe69cb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes |>\n<| c |>\n`is_prime(6L)` returns `true`, but\
    \ `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns `true`, but\
    \ `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns `true`, but\
    \ `is_prime(101L)` returns `false`\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm94y9jz.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpcm94y9jz.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpcm94y9jz.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpcm94y9jz.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmpcm94y9jz.d(58): Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpcm94y9jz.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpcm94y9jz.d(62): Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpcm94y9jz.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpcm94y9jz.d(66): Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpcm94y9jz.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpcm94y9jz.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm94y9jz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0jfbpfzm.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp0jfbpfzm.__unittest_L35_C1() [0x427b2a]\n??:?
    void tmp0jfbpfzm.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x280ee554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer to the\
    \ question. He wants to know why his code is not working as he expects.\n<|/ c\
    \ |>\n<| c |>\nI guess he wants to know why his code is not working as he expects.\
    \ I added the explanation to the answer.\n<|/ c |>\n<| c |>\nI guess he wants\
    \ to know why his code is not working as he expects. I added the explanation to\
    \ the answer.\n<|/ c |>\n<| c |>\nI guess he wants to know why his code is not\
    \ working as he expects. I added the explanation to the answer.\n<|/ c |>\n<|\
    \ c |>\nI guess he wants to know why his code is not working as he expects. I\
    \ added the explanation to the answer.\n<|/ c |>\n<| a |>\nThe problem is with\
    \ your if statement:\n<code>\nif (n % i == 0)\n</code>\nThis should be \n<code>\n\
    if (n % i == 1)\n</code>\nThe reason is because you only want to check if a number\
    \ is prime if its not divisible by any number between 1 and sqrt(n).\n<|/ a tags=c++,primes\
    \ dscore=0 |>\n<| c |>\nI guess he wants to know why his code is not working as\
    \ he expects. I added the explanation to the answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe problem is with your if statement:\n<code>\nif (n % i == 0)\n</code>\n\
    This should be\n<code>\nif (n % i == 1)\n</code>\nThe reason is because you only\
    \ want to check if a number is prime if its not divisible by any number between\
    \ 1 and sqrt(n).\n<|/ a tags=c++,primes |>\n<| a |>\nThe problem is with your\
    \ if statement:\n<code>\nif (n % i == 0)\n</code>\nThis should be\n<code>\nif\
    \ (n % i == 1)\n</code>\nThe reason is because you only want to check if a number\
    \ is prime if its not divisible by any number between 1 and sqrt(n).\n<|/ a tags=c++,primes\
    \ dscore=0 |>\n<| a tags=c++,primes |>\nThe problem is with your if statement:\n\
    <code>\nif (n % i == 0)\n</code>\nThis should be\n<code>\nif (n % i == 1)\n</code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzoiu2_xl.d(34): Error: declaration expected, not `<`\n/tmp/tmpzoiu2_xl.d(100):
    Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(101): Error: declaration
    expected, not `assert`\n/tmp/tmpzoiu2_xl.d(102): Error: declaration expected,
    not `assert`\n/tmp/tmpzoiu2_xl.d(103): Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(104):
    Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(105): Error: declaration
    expected, not `assert`\n/tmp/tmpzoiu2_xl.d(106): Error: declaration expected,
    not `assert`\n/tmp/tmpzoiu2_xl.d(107): Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(108):
    Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(109): Error: declaration
    expected, not `assert`\n/tmp/tmpzoiu2_xl.d(110): Error: declaration expected,
    not `assert`\n/tmp/tmpzoiu2_xl.d(111): Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(112):
    Error: declaration expected, not `assert`\n/tmp/tmpzoiu2_xl.d(113): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzoiu2_xl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n \
    \   for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0L) \n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm22hrrch.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm22hrrch.__unittest_L41_C1() [0x427ba2]\n??:?
    void tmpm22hrrch.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xe5bbf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest solution. `sqrt`\
    \ has O(log(n)) complexity, while `is_prime` has O(n) complexity. Also, the `sqrt`\
    \ function can be replaced by `sqrtl` from `math.h`.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. But the question was about a faster solution. Anyway, I added a faster\
    \ solution.\n<|/ c |>\n<| c |>\nThe question was about a faster solution. Anyway,\
    \ I added a faster solution.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplo3k9jvp.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmplo3k9jvp.d(33):
    Error: declaration expected, not `<`\n/tmp/tmplo3k9jvp.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmplo3k9jvp.d(51): Error: declaration expected, not
    `assert`\n/tmp/tmplo3k9jvp.d(52): Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmplo3k9jvp.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmplo3k9jvp.d(56): Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmplo3k9jvp.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmplo3k9jvp.d(60): Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmplo3k9jvp.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmplo3k9jvp.d(63): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplo3k9jvp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; i++)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwgmkslxt.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmpwgmkslxt.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmpwgmkslxt.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x19d7d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long) sqrt(n);\n\
    \    bool prime = true;\n    \n    for (i = 2; i <= limit; i++)\n    {\n     \
    \   if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxnfd84fz.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnfd84fz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit, a;\n    bool\
    \ b;\n    limit = sqrt(n);\n    for (i = 2; i <= limit; i++) {\n        a = n\
    \ % i;\n        if (a == 0) \n            return false;\n        b = true;\n \
    \       for (long j = 2; j < i; j++) {\n            if (i % j == 0) \n       \
    \         b = false;\n        }\n        if (b) \n            return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code is\
    \ not correct. `is_prime(6L)` returns `true` but `is_prime(101L)` returns `false`\n\
    <|/ c |>\n<| c |>\nI tested it on Python, C++, Java, C#, C and it works fine.\
    \ Can you please give me a test case where it fails?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Python, C++, Java, C#, C and it works fine. Can you please give me a test\
    \ case where it fails?\n<|/ c |>\n<| c |>\nI tested it on Python, C++, Java, C#,\
    \ C and it works fine. Can you please give me a test case where it fails?\n<|/\
    \ c |>\n<| c |>\nI tested it on Python, C++, Java, C#, C and it works fine. Can\
    \ you please give me a test case where it fails?\n<|/ c |>\n<| a tags=primes,c++\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvhbza2bh.d(39): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhbza2bh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit; ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu16ljlb2.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu16ljlb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit, div;\n   \
    \ bool prime;\n    \n    limit = sqrt(n);\n    div = 1;\n    prime = true;\n \
    \   \n    for (i = 2; i <= limit; ++i)\n    {\n        if (n % i == 0)\n     \
    \   {\n            prime = false;\n            break;\n        }\n        if (i\
    \ == limit)\n        {\n            break;\n        }\n        div++;\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_nnv7yf.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_nnv7yf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    if (n < 2L) \n    {\n        is_prime = false;\n    }\n \
    \   else if (n == 2L) \n    {\n        is_prime = true;\n    }\n    else if (n\
    \ % 2L == 0) \n    {\n        is_prime = false;\n    }\n    else\n    {\n    \
    \    for (i = 3L; i * i <= n; i += 2L) \n        {\n            if (n % i == 0L)\
    \ \n            {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return is_prime;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwq4ds7tl.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwq4ds7tl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    if (n < 2L) \n    {\n        is_prime = false;\n    }\n \
    \   else if (n == 2L) \n    {\n        is_prime = true;\n    }\n    else if (n\
    \ % 2L == 0) \n    {\n        is_prime = false;\n    }\n    else \n    {\n   \
    \     for (i = 3L; i * i <= n; i += 2L) \n        {\n            if (n % i ==\
    \ 0L) \n            {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return is_prime;\n}\n</code>\n<|/ a tags=c++,primes,algorithm,math\
    \ |>\n<| c |>\nThis is not an efficient solution. Try it out with n = 10^9. Your\
    \ algorithm will take ages to complete.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ however I didn't want to give a complete solution. I just wanted to give a hint\
    \ on how to solve the problem. Of course the efficiency of the algorithm depends\
    \ on the size of the input and the number of primes you want to check. There are\
    \ many other ways to improve the efficiency of the algorithm.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, however I didn't want to give a complete solution. I just\
    \ wanted to give a hint on how to solve the problem. Of course the efficiency\
    \ of the algorithm depends on the size of the input and the number of primes you\
    \ want to check. There are many other ways to improve the efficiency of the algorithm.\n\
    <|/ c |>\n<| c |>\nI agree with you, however I didn't want to give a complete\
    \ solution. I just wanted to give a hint on how to solve the problem. Of course\
    \ the efficiency of the algorithm depends on the size of the input and the number\
    \ of primes you want to check. There are many other ways to improve the efficiency\
    \ of the algorithm.\n<|/ c |>\n<| c |>\nI agree with you, however I didn't want\
    \ to give a complete solution. I just wanted to give a hint on how to solve the\
    \ problem. Of course the efficiency of the algorithm depends on the size of the\
    \ input and the number of primes you want to check. There are many other ways\
    \ to improve the efficiency of the algorithm.\n<|/ c |>\n<| a dscore=4 |>\nThe\
    \ Sieve of Eratosthenes is one of the most efficient algorithms for finding prime\
    \ numbers. \nThe basic idea is to generate a list of all the numbers from 2 to\
    \ sqrt(n), and then remove all the multiples of those numbers from the list. \n\
    The code below is written in Python, but should be easy to translate to C++.\n\
    <code>\ndef primes(n):\n    sieve = range(2, n+1)\n    sieve.extend(range(\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6oeanj2q.d(50): Error: declaration expected, not `<`\n/tmp/tmp6oeanj2q.d(56):
    Error: unterminated character constant\n/tmp/tmp6oeanj2q.d(59): Error: unterminated
    character constant\n/tmp/tmp6oeanj2q.d(62): Error: unterminated character constant\n/tmp/tmp6oeanj2q.d(65):
    Error: unterminated character constant\n/tmp/tmp6oeanj2q.d(79): Error: declaration
    expected, not `assert`\n/tmp/tmp6oeanj2q.d(80): Error: declaration expected, not
    `assert`\n/tmp/tmp6oeanj2q.d(81): Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(82):
    Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(83): Error: declaration
    expected, not `assert`\n/tmp/tmp6oeanj2q.d(84): Error: declaration expected, not
    `assert`\n/tmp/tmp6oeanj2q.d(85): Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(86):
    Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(87): Error: declaration
    expected, not `assert`\n/tmp/tmp6oeanj2q.d(88): Error: declaration expected, not
    `assert`\n/tmp/tmp6oeanj2q.d(89): Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(90):
    Error: declaration expected, not `assert`\n/tmp/tmp6oeanj2q.d(91): Error: declaration
    expected, not `assert`\n/tmp/tmp6oeanj2q.d(92): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6oeanj2q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    if (n < 2L) \n    {\n        prime = false;\n    }\n \
    \   else if (n == 2L) \n    {\n        prime = true;\n    }\n    else\n    {\n\
    \        for (i = 3L; prime && i <= n; i+=2L) \n        {\n            if (n %\
    \ i == 0L) \n            {\n                prime = false;\n            }\n  \
    \      }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c\
    \ |>\nI like your solution, but I wonder why you use long instead of int. Is it\
    \ because long has more bits?\n<|/ c |>\n<| c |>\nYes, long has more bits. But\
    \ I didn't want to change the code too much. Just to show that it is possible\
    \ to use long.\n<|/ c |>\n<| c |>\nI used long because I wanted to show that it\
    \ is possible to use long. Of course you can use int if you want. But the point\
    \ is that I wanted to show that it is possible to use long.\n<|/ c |>\n<| c |>\n\
    I see your point. Thanks for your explanation!\n<|/ c |>\n<| c |>\nI used long\
    \ because I wanted to show that it is possible to use long. Of course you can\
    \ use int if you want. But the point is that I wanted to show that it is possible\
    \ to use long.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqq8oyysm.d(45): Error: declaration expected, not `<`\n/tmp/tmpqq8oyysm.d(51):
    Error: unterminated character constant\n/tmp/tmpqq8oyysm.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpqq8oyysm.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpqq8oyysm.d(70): Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmpqq8oyysm.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmpqq8oyysm.d(74): Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpqq8oyysm.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpqq8oyysm.d(78): Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpqq8oyysm.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmpqq8oyysm.d(81): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq8oyysm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1) return false;\n    if (n <= 3) return true;\n \
    \   \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0) \n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n \
    \   assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n  \
    \  assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n \
    \   assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n   \
    \ assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsury1qe.d(28): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsury1qe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n <= 1)\n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2; i <= n / 2; ++i)\n        {\n    \
    \        if (n % i == 0)\n            {\n                prime = false;\n    \
    \            break;\n            }\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i ==\
    \ 0L) \n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThe first two lines of `is_prime` can be replaced with `return\
    \ n < 2L;`\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited the answer.\n\
    <|/ c |>\n<| c |>\nI like the idea of using an `if` statement to test the value\
    \ of `n`, but I don't think it improves performance much. `is_prime` will still\
    \ have to test every number up to `n`, even if the first two tests fail.\n<|/\
    \ c |>\n<| c |>\nI agree, it's not a big improvement, but it's more readable.\
    \ I'll edit my answer.\n<|/ c |>\n<| c |>\nThe first two lines of `is_prime` can\
    \ be replaced with `return n < 2L;`\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\nThe first two lines of is_prime can be replaced with return n < 2L;\nThe\
    \ first two lines of is_prime can be replaced with return n < 2L;\nThe first two\
    \ lines of is_prime can be replaced with return n < 2L;\nThe first two lines of\
    \ is_prime can be replaced with return n < 2L;\nThe first two lines of is_prime\
    \ can be replaced with return n < 2L;\nThe first two lines of is_prime can be\
    \ replaced with return n < 2L;\nThe first two lines of is_prime can be replaced\
    \ with return n < 2L;\nThe first two lines of is_prime can be replaced with return\
    \ n < 2L;\nThe first two lines of is_prime can be replaced with return n < 2L;\n\
    The first two lines of is_prime can be replaced with return n < 2L;\nThe first\
    \ two lines of is_prime can be replaced with return n < 2L;\nThe first two lines\
    \ of is_prime can be replaced with return n < 2L;\nThe first two lines of is_prime\
    \ can be replaced with return n < 2L;\nThe first two lines of is_prime can be\
    \ replaced with return n < 2L;\nThe first two lines of is_prime \nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8x3p686r.d(43): Error: declaration expected, not `<`\n/tmp/tmp8x3p686r.d(49):
    Error: unterminated character constant\n/tmp/tmp8x3p686r.d(49): Error: unterminated
    character constant\n/tmp/tmp8x3p686r.d(52): Error: unterminated character constant\n/tmp/tmp8x3p686r.d(55):
    Error: unterminated character constant\n/tmp/tmp8x3p686r.d(55): Error: unterminated
    character constant\n/tmp/tmp8x3p686r.d(55): Error: unterminated character constant\n/tmp/tmp8x3p686r.d(62):
    Error: semicolon expected, not `two`\n/tmp/tmp8x3p686r.d(62): Error: semicolon
    expected, not `of`\n/tmp/tmp8x3p686r.d(62): Error: semicolon expected, not `can`\n/tmp/tmp8x3p686r.d(62):
    Error: semicolon expected, not `replaced`\n/tmp/tmp8x3p686r.d(62): Error: no identifier
    for declarator `replaced`\n/tmp/tmp8x3p686r.d(62): Error: declaration expected,
    not `with`\n/tmp/tmp8x3p686r.d(63): Error: semicolon expected, not `two`\n/tmp/tmp8x3p686r.d(63):
    Error: semicolon expected, not `of`\n/tmp/tmp8x3p686r.d(63): Error: semicolon
    expected, not `can`\n/tmp/tmp8x3p686r.d(63): Error: semicolon expected, not `replaced`\n/tmp/tmp8x3p686r.d(63):
    Error: no identifier for declarator `replaced`\n/tmp/tmp8x3p686r.d(63): Error:
    declaration expected, not `with`\n/tmp/tmp8x3p686r.d(64): Error: semicolon expected,
    not `two`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8x3p686r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i=2; i<=n/2;\
    \ i++)\n    {\n        if(n%i==0)\n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes,algorithm,c\
    \ |>\n<| c |>\nThe first for loop should be `for(i=2; i<=n/2; i++)`\n<|/ c |>\n\
    <| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <stdio.h>\n#include <math.h>\n#include\
    \ <stdlib.h>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplr26iyrh.d(32): Error: declaration expected, not `<`\n/tmp/tmplr26iyrh.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmplr26iyrh.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmplr26iyrh.d(61): Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmplr26iyrh.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmplr26iyrh.d(65): Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmplr26iyrh.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmplr26iyrh.d(69): Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmplr26iyrh.d(71): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplr26iyrh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n == 2L) \n    {\n        prime = true;\n    }\n    else if (n % 2L == 0L)\
    \ \n    {\n        prime = false;\n    }\n    else if (n % 3L == 0L) \n    {\n\
    \        prime = false;\n    }\n    else if (n % 5L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 7L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 11L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 13L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 17L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 19L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 23L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 29L == 0L) \n    {\n \
    \       prime = false;\n    }\n    else if (n % 31L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 37L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 41L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 43L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 47L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 53L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 59L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 61L == 0L) \n    {\n \
    \       prime = false;\n    }\n    else if (n % 67L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 71L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 73L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 79L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 83L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 89L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 97L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 101L == 0L) \n    {\n\
    \        prime = false;\n    }\n    else if (n % 103L == 0L) \n    {\n       \
    \ prime = false;\n    }\n    else if (n % 107L == 0L) \n    {\n        prime =\
    \ false;\n    }\n    else if (n % 109L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 113L == 0L\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprs9s2z6m.d(150): Error: found `unittest` when expecting `)`\n/tmp/tmprs9s2z6m.d(168):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprs9s2z6m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else if (n == 2L) \n    {\n        prime = true;\n    }\n    else\n\
    \    {\n        for (i = 3L; prime && i <= sqrt(n); i += 2L) \n        {\n   \
    \         if (n % i == 0L) \n            {\n                prime = false;\n \
    \           }\n        }\n    }\n    \n    return prime;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code does not work. `is_prime(6L)` returns `true` but `is_prime(101L)`\
    \ returns `false`\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I fixed\
    \ the code. Now it works.\n<|/ c |>\n<| c |>\nThe code still does not work. `is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\n: I\
    \ tested it and it works fine for me. Did you copy the code exactly as I posted?\
    \ Did you remember to change the `is_prime` function name to `is_prime2`?\n<|/\
    \ c |>\n<| c |>\n: I tested it again and it works fine for me. Did you copy the\
    \ code exactly as I posted? Did you remember to change the `is_prime` function\
    \ name to `is_prime2`?\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\nThe most\
    \ efficient way is to use Sieve of Eratosthenes algorithm. \nThe idea is to generate\
    \ all primes up to sqrt(n) using Sieve of Eratosthenes and then check if n is\
    \ prime by checking if n is divisible by any of those primes.\n<|/ a dscore=2\
    \ |>\n<| c |>\nThe Sieve of Eratosthenes algorithm is very inefficient for large\
    \ numbers. It is better to use a sieve of Atkin's or Sieve of Sundaram (http://en.wikipedia.org/wiki/Sieve_of_Atkin's_algorithm).\n\
    <|/ c |>\n<| c |>\n: I agree. Sieve of Eratosthenes is very inefficient for large\
    \ numbers. Sieve of Sundaram is much better for large numbers. But I wanted to\
    \ give a fast and simple solution. Sundaram is very fast for small numbers. Atk\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeqfdsbrs.d(48): Error: declaration expected, not `<`\n/tmp/tmpeqfdsbrs.d(70):
    Error: unterminated character constant\n/tmp/tmpeqfdsbrs.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmpeqfdsbrs.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmpeqfdsbrs.d(80): Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(81):
    Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmpeqfdsbrs.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmpeqfdsbrs.d(84): Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(85):
    Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(86): Error: declaration
    expected, not `assert`\n/tmp/tmpeqfdsbrs.d(87): Error: declaration expected, not
    `assert`\n/tmp/tmpeqfdsbrs.d(88): Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(89):
    Error: declaration expected, not `assert`\n/tmp/tmpeqfdsbrs.d(90): Error: declaration
    expected, not `assert`\n/tmp/tmpeqfdsbrs.d(91): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqfdsbrs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= n; i++)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuejqdqv7.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpuejqdqv7.__unittest_L43_C1() [0x427a8b]\n??:?
    void tmpuejqdqv7.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x5470d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe question was about a specific language, C#.\n\
    <|/ c |>\n<| c |>\nThe question was about a specific language, C#.\n<|/ c |>\n\
    <| c |>\nThe question was about a specific language, C#.\n<|/ c |>\n<| c |>\n\
    The question was about a specific language, C#.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a specific language, C#.\n<|/ c |>\n<| a tags=c#,primes,algorithm\
    \ |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphkk1tw63.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmphkk1tw63.d(33):
    Error: declaration expected, not `<`\n/tmp/tmphkk1tw63.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmphkk1tw63.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmphkk1tw63.d(58): Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmphkk1tw63.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmphkk1tw63.d(62): Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmphkk1tw63.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmphkk1tw63.d(66): Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmphkk1tw63.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmphkk1tw63.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkk1tw63.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    if (n < 2L)\n        return prime;\n    for (i = 2L; i\
    \ <= n; i+=1L)\n    {\n        if (n % i == 0L)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuhjvh6ug.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpuhjvh6ug.__unittest_L37_C1() [0x427a8f]\n??:?
    void tmpuhjvh6ug.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xc66dc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n == 2L) \n    {\n        prime = true;\n    }\n    else if (n % 2L == 0L)\
    \ \n    {\n        prime = false;\n    }\n    else \n    {\n        for (i = 3L;\
    \ i * i <= n; i += 2L) \n        {\n            if (n % iL == 0L) \n         \
    \   {\n                prime = false;\n                break;\n            }\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp93sp9cdb.d(41): Error: undefined identifier `iL`, did you mean
    variable `i`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93sp9cdb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=c++,primes |>\n<| c |>\nThe first for loop should be `for(i=2; i<=limit;\
    \ i++)` otherwise you miss the case where `limit` is `sqrt(n)`.\n<|/ c |>\n<|\
    \ c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThe `for` loop should be `for(i=2;\
    \ i<=limit; i+=2)` otherwise you miss the case where `limit` is `sqrt(n)`.\n<|/\
    \ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThe `for` loop should\
    \ be `for(i=2; i<=limit; i+=2)` otherwise you miss the case where `limit` is `sqrt(n)`.\n\
    <|/ c |>\n<| a tags=c++,primes |>\n<code>\nunittest\n{\n    alias candidate =\
    \ is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprbpjg21z.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmprbpjg21z.d(33):
    Error: declaration expected, not `<`\n/tmp/tmprbpjg21z.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmprbpjg21z.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmprbpjg21z.d(58): Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmprbpjg21z.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmprbpjg21z.d(62): Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmprbpjg21z.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmprbpjg21z.d(66): Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmprbpjg21z.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmprbpjg21z.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbpjg21z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  for(i=2; i<=n/2; i++)\n    {\n        if(n%i==0)\n        {\n            b\
    \ = false;\n            break;\n        }\n    }\n    if(b)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n}\n</code>\n<|/\
    \ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThe code is not correct.\
    \ `is_prime(6L)` returns `true` but `is_prime(101L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nThe code is not correct. `is_prime(6L)` returns `true` but `is_prime(101L)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nThe code is not correct. `is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`.\n<|/ c |>\n<| c |>\nThe\
    \ code is not correct. `is_prime(6L)` returns `true` but `is_prime(101L)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nThe code is not correct. `is_prime(6L)` returns\
    \ `true` but `is_prime(101L)` returns `false`.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ Sieve of Eratosthenes is very inefficient for large numbers. A better algorithm\
    \ is called \"Sieve of Atkin\". It has O(n) complexity and uses O(n) memory (where\
    \ n is the number of primes you want to check).\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThe Sieve of Atkin is also very inefficient for large numbers.\
    \ A better algorithm is called \"Sieve of Sundaram\". It's also O(n) complexity\
    \ and uses O(n) memory.\n<|/ c |>\n<| c |>\nThe Sieve of Sundaram is also very\
    \ inefficient for large numbers. A better algorithm is called \"Sieve of Sundaram\"\
    . It's also O(n) complexity and uses O(n) memory.\n<|/ c |>\n<| c |>\nThe Sieve\
    \ of Sundaram is also very inefficient for large numbers. A better algorithm is\
    \ called \"Sieve of Sundaram\". It's also O(n) complexity and uses O(n) memory.\n\
    <|/ c |>\n<|\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdligf5a_.d(41): Error: declaration expected, not `<`\n/tmp/tmpdligf5a_.d(62):
    Error: unterminated character constant\n/tmp/tmpdligf5a_.d(65): Error: unterminated
    character constant\n/tmp/tmpdligf5a_.d(68): Error: unterminated character constant\n/tmp/tmpdligf5a_.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpdligf5a_.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpdligf5a_.d(78): Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmpdligf5a_.d(81): Error: declaration expected, not
    `assert`\n/tmp/tmpdligf5a_.d(82): Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(83):
    Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(84): Error: declaration
    expected, not `assert`\n/tmp/tmpdligf5a_.d(85): Error: declaration expected, not
    `assert`\n/tmp/tmpdligf5a_.d(86): Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(87):
    Error: declaration expected, not `assert`\n/tmp/tmpdligf5a_.d(88): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdligf5a_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n        return false; // n is less than or equal to 2\n\
    \    \n    prime = true;\n    \n    for (i = 2L; i <= n; i+=2L)\n    {\n     \
    \   if (n % i == 0L)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpaq6rsp9v.d(55): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpaq6rsp9v.__unittest_L41_C1() [0x427ba6]\n??:?
    void tmpaq6rsp9v.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x6a4e8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L) return false; \n    if (n == 2L) return true;\n    if (n\
    \ % 2L == 0) return false;\n    \n    for (i = 3L; i * i <= n; i += 2L) {\n  \
    \      if (n % i == 0L) {\n            b = false;\n            break;\n      \
    \  }\n    }\n    \n    return b;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpauyhboeb.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e9d]\n??:? void tmpauyhboeb.__unittest_L38_C1() [0x427ab3]\n??:?
    void tmpauyhboeb.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428273]\n??:? _d_run_main [0x4281de]\n??:? main [0x427c2f]\n??:?
    __libc_start_main [0xc4212554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
    \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) ==\
    \ true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) ==\
    \ true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n\
    \    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L)\
    \ == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xcqe854.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xcqe854.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i ==\
    \ 0)\n        {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    \n    return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3c9sbxic.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp3c9sbxic.__unittest_L36_C1() [0x427b26]\n??:?
    void tmp3c9sbxic.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x7e08a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) return false; \n    if (n == 2L) return true; \n    \n\
    \    prime = true;\n    for (i = 3L; prime && i <= n; i += 2L) {\n        if (n\
    \ % i == 0L) prime = false;\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_c8vocip.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e85]\n??:? void tmp_c8vocip.__unittest_L34_C1() [0x427a9b]\n??:?
    void tmp_c8vocip.__modtest() [0x427c04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42825b]\n??:? _d_run_main [0x4281c6]\n??:? main [0x427c17]\n??:?
    __libc_start_main [0xd69e3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpftsry_v9.d(24): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftsry_v9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; i++)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwxj4vv6o.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpwxj4vv6o.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpwxj4vv6o.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xcdc15554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ti3hffn.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ti3hffn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any libraries. I only need to\
    \ use basic functions like `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`,\
    \ `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`,\
    \ `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`,\
    \ `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`,\
    \ `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`,\
    \ `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`,\
    \ `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`,\
    \ `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`,\
    \ `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`,\
    \ `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`,\
    \ `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`,\
    \ `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`,\
    \ `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`,\
    \ `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`,\
    \ `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`,\
    \ `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`,\
    \ `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`,\
    \ `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`,\
    \ `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`,\
    \ `pow`, `log`, `sin`, `cos`, `tan`, `sqrt`, `pow`, `log`, `sin`, `cos`, `tan`,\
    \ `sqrt`, `pow`, `log`, `sin`, `\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl7muww0c.d(32): Error: declaration expected, not `<`\n/tmp/tmpl7muww0c.d(35):
    Error: unterminated string constant starting at /tmp/tmpl7muww0c.d(35)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7muww0c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, k;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        k = n % i;\n\
    \        if (k == 0) \n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9tgm30qn.d(58): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp9tgm30qn.__unittest_L44_C1() [0x427b9e]\n??:?
    void tmp9tgm30qn.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427c03]\n??:?
    __libc_start_main [0x43e2d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= n; i++)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcad6401v.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpcad6401v.__unittest_L42_C1() [0x427a8b]\n??:?
    void tmpcad6401v.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xe8933554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n <= 1)\n        return prime;\n    \n    for (i = 2; i\
    \ <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy0fhmoab.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e7d]\n??:? void tmpy0fhmoab.__unittest_L39_C1() [0x427b2e]\n??:?
    void tmpy0fhmoab.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428253]\n??:? _d_run_main [0x4281be]\n??:? main [0x427c0f]\n??:?
    __libc_start_main [0x165af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            is_prime = false;\n            break;\n        }\n    }\n  \
    \  return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwb7iqcxg.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpwb7iqcxg.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpwb7iqcxg.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xe69cb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=c++,primes,algorithm,sieve-of-eratosthenes |>\n<| c |>\nThe `sqrt`\
    \ function should be `sqrtl` on 64-bit platforms.\n<|/ c |>\n<| c |>\n: I believe\
    \ that `sqrtl` exists on all platforms since at least C++11. `sqrt` is only available\
    \ on platforms where `long double` is available (which is not the case on most\
    \ platforms).\n<|/ c |>\n<| c |>\n: Yes, `sqrtl` exists on all platforms since\
    \ at least C++11. `sqrt` is only available on platforms where `long double` is\
    \ available (which is not the case on most platforms).\n<|/ c |>\n<| c |>\n: Yes,\
    \ `sqrtl` exists on all platforms since at least C++11. `sqrt` is only available\
    \ on platforms where `long double` is available (which is not the case on most\
    \ platforms).\n<|/ c |>\n<| c |>\n: Yes, `sqrtl` exists on all platforms since\
    \ at least C++11. `sqrt` is only available on platforms where `long double` is\
    \ available (which is not the case on most platforms).\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe sieve of Eratosthenes is very easy to implement. Here's a C++ implementation:\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptb49_dkj.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmptb49_dkj.d(33):
    Error: declaration expected, not `<`\n/tmp/tmptb49_dkj.d(51): Error: unterminated
    character constant\n/tmp/tmptb49_dkj.d(60): Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmptb49_dkj.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmptb49_dkj.d(64): Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmptb49_dkj.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmptb49_dkj.d(68): Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmptb49_dkj.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmptb49_dkj.d(72): Error: declaration expected, not `assert`\n/tmp/tmptb49_dkj.d(73):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb49_dkj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n    {\n        return prime;\n    }\n    \n  \
    \  for (i = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n   \
    \         prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpun4469mn.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpun4469mn.__unittest_L41_C1() [0x427a8b]\n??:?
    void tmpun4469mn.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x9bf03554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe first two for loops\
    \ could be replaced by a single `for` loop. Also, the `for` loops could be replaced\
    \ by `std::next_prime`.\n<|/ c |>\n<| c |>\n: Yes, but that would require a C++11\
    \ compiler. Also, `std::next_prime` would not work for `1L` since it returns `2L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\n: Yes, but that would require a C++11 compiler.\
    \ Also, `std::next_prime` would not work for `1L` since it returns `2L` instead\
    \ of `1L`.\n<|/ c |>\n<| c |>\n: Yes, but that would require a C++11 compiler.\
    \ Also, `std::next_prime` would not work for `1L` since it returns `2L` instead\
    \ of `1L`.\n<|/ c |>\n<| c |>\n: Yes, but that would require a C++11 compiler.\
    \ Also, `std::next_prime` would not work for `1L` since it returns `2L` instead\
    \ of `1L`.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpguudchl5.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpguudchl5.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpguudchl5.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpguudchl5.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmpguudchl5.d(58): Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpguudchl5.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpguudchl5.d(62): Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpguudchl5.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpguudchl5.d(66): Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpguudchl5.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpguudchl5.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguudchl5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= n; i++)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes\
    \ |>\n<| c |>\nThe first two lines of `is_prime` should be `bool prime = true;`\
    \ and `if (n < 2L)`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\n\
    The first two lines of `is_prime` should be `bool prime = true;` and `if (n <\
    \ 2L)`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgs89mour.d(42): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgs89mour.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i ==\
    \ 0)\n        {\n            is_prime = false;\n            break;\n        }\n\
    \    }\n    \n    return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3c9sbxic.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp3c9sbxic.__unittest_L36_C1() [0x427b26]\n??:?
    void tmp3c9sbxic.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x7e08a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=primes,c++,c |>\n<| c |>\nThe `sqrt` function isn't guaranteed\
    \ to return an exact integer value.  It may return an approximation.  So the loop\
    \ should probably be `for(i = 2; i <= limit; i+=2)`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ that's a good point. I was just trying to give a general idea of how to go about\
    \ solving this problem. I'll edit my answer to include your suggestion.\n<|/ c\
    \ |>\n<| c |>\n: Thanks for the suggestion. I've edited my answer to include your\
    \ suggestion.\n<|/ c |>\n<| c |>\n: Thanks for the suggestion. I've edited my\
    \ answer to include your suggestion.\n<|/ c |>\n<| c |>\n: Thanks for the suggestion.\
    \ I've edited my answer to include your suggestion.\n<|/ c |>\n<| a tags=primes,c++,c\
    \ |>\n<code>\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzz8dji9.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmppzz8dji9.d(33):
    Error: declaration expected, not `<`\n/tmp/tmppzz8dji9.d(36): Error: unterminated
    character constant\n/tmp/tmppzz8dji9.d(39): Error: unterminated character constant\n/tmp/tmppzz8dji9.d(39):
    Error: unterminated character constant\n/tmp/tmppzz8dji9.d(42): Error: unterminated
    character constant\n/tmp/tmppzz8dji9.d(45): Error: unterminated character constant\n/tmp/tmppzz8dji9.d(48):
    Error: unterminated character constant\n/tmp/tmppzz8dji9.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmppzz8dji9.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmppzz8dji9.d(58): Error: declaration expected, not `assert`\n/tmp/tmppzz8dji9.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmppzz8dji9.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmppzz8dji9.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmppzz8dji9.d(62): Error: declaration expected, not `assert`\n/tmp/tmppzz8dji9.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmppzz8dji9.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmppzz8dji9.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmppzz8dji9.d(66): Error: declaration expected, not `assert`\n/tmp/tmppzz8dji9.d(67):
    Error: declaration expected, not `assert`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppzz8dji9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4bkumr66.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4bkumr66.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i\
    \ == 0L) \n        {\n            prime = false;\n            break;\n       \
    \ }\n    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcc2xwvo.d(32): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcc2xwvo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    prime =\
    \ true;\n    \n    for (i = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy5tx4b_g.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpy5tx4b_g.__unittest_L43_C1() [0x427a8b]\n??:?
    void tmpy5tx4b_g.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x1dcc7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L)\n        return prime;\n    \n    for (i = 2L;\
    \ i * i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyrc6b4_o.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpyrc6b4_o.__unittest_L39_C1() [0x427b2a]\n??:?
    void tmpyrc6b4_o.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x33be2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool b;\n  \
    \  \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    for (i =\
    \ 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            b\
    \ = false;\n            break;\n        }\n    }\n    \n    return b;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvmv5x03x.d(46): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmpvmv5x03x.__unittest_L41_C1() [0x427a87]\n??:?
    void tmpvmv5x03x.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427c03]\n??:?
    __libc_start_main [0x1855a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; i++)\n  \
    \  {\n        if(n%i == 0)\n        {\n            prime = false;\n          \
    \  break;\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprcm3w4od.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcm3w4od.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd4xs611t.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpd4xs611t.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpd4xs611t.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x9c857554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this would only work for small\
    \ numbers. Try it out with n = 10^9 and see if it works.\n<|/ c |>\n<| c |>\n\
    Yes, it works. I tested it on n = 10^9 and it worked fine. Try it out yourself.\n\
    <|/ c |>\n<| c |>\nI tested it on n = 10^9 and it worked fine. Try it out yourself.\n\
    <|/ c |>\n<| c |>\nI tested it on n = 10^9 and it worked fine. Try it out yourself.\n\
    <|/ c |>\n<| c |>\nI tested it on n = 10^9 and it worked fine. Try it out yourself.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3f4t2m_d.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmp3f4t2m_d.d(33):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp3f4t2m_d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp165ecnrx.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e6d]\n??:? void tmp165ecnrx.__unittest_L32_C1() [0x427b1e]\n??:?
    void tmp165ecnrx.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428243]\n??:? _d_run_main [0x4281ae]\n??:? main [0x427bff]\n??:?
    __libc_start_main [0x7ea26554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7whq22jm.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7whq22jm.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp7whq22jm.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xb42b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= n; i+=2) \n        {\n     \
    \       if (n % i == 0) \n            {\n                prime = false;\n    \
    \            break;\n            }\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjro5hp_g.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpjro5hp_g.__unittest_L43_C1() [0x427ba6]\n??:?
    void tmpjro5hp_g.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x77f08554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n == 2L) \n    {\n        prime = true;\n    }\n    else if (n % 2L == 0L)\
    \ \n    {\n        prime = false;\n    }\n    else\n    {\n        for (i = 3L;\
    \ i * i <= n; i += 2L) \n        {\n            if (n % i == 0L) \n          \
    \  {\n                prime = false;\n                break;\n            }\n\
    \        }\n    }\n    \n    return prime;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any library functions.\
    \ I only have to write the code myself.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any library functions. I hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any library functions. I only\
    \ have to write the code myself.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any library functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any library functions. I only have to write\
    \ the code myself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8m5nj5df.d(51): Error: declaration expected, not `<`\n/tmp/tmp8m5nj5df.d(57):
    Error: unterminated character constant\n/tmp/tmp8m5nj5df.d(63): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8m5nj5df.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm8xoluhh.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpm8xoluhh.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpm8xoluhh.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x97363554]\n1/1 unittests FAILED\n'''
  stdout: b''
