language: d
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base) \n{\n\
    \    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++) s += to_string(i,\
    \ base);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpawar00zz.d(14): Error: undefined identifier `to_string`\n/tmp/tmpawar00zz.d(29):
    Error: undefined identifier `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpawar00zz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmcbgep_e.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcbgep_e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3amxferz.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3amxferz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps0rfd_bk.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0rfd_bk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    for(i = 0; i <= n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgwjq4cgi.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwjq4cgi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxil_95ys.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxil_95ys.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppness1re.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppness1re.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxkys2nzq.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkys2nzq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\ts = to_string(0);\n\twhile (n > 0)\n\t{\n\t\ts +=\
    \ \" \";\n\t\ts += to_string(n % 10);\n\t\tn /= 10;\n\t}\n\treturn s;\n}\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpelnje1bf.d(14): Error: undefined identifier `to_string`\n/tmp/tmpelnje1bf.d(17):
    Error: slice `s` is not mutable\n/tmp/tmpelnje1bf.d(18): Error: undefined identifier
    `to_string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelnje1bf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_0mw4xr6.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0mw4xr6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_u8hg8r.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_u8hg8r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpko_7fb45.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpko_7fb45.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw8c1g2wo.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8c1g2wo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbrqv0lpe.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrqv0lpe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64dsdk32.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64dsdk32.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo0ug0aov.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0ug0aov.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4xx75hs.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4xx75hs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char delim) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\
    \        s += to_string(i, delim);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string delim) \n{\n    string s = \"\";\n    for (long\
    \ i = 0; i < n; ++i)\n        s += to_string(i, delim);\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim, string delim2)\
    \ \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ delim, delim2);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string delim, string delim2) \n{\n    string s = \"\";\n    for (long i =\
    \ 0; i < n; ++i)\n        s += to_string(i, delim, delim2);\n    return s;\n}\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim, string\
    \ delim, string delim2) \n{\n    string s = \"\";\n    for (long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, delim, delim, delim2);\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfjook2lj.d(101): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjook2lj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9782udi.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9782udi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64dsdk32.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64dsdk32.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7jyevqkc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jyevqkc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7jyevqkc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jyevqkc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vvyxro5.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vvyxro5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vvyxro5.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vvyxro5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp531ul8s2.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp531ul8s2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int digits) \n{\n    string s = \"\";\n  \
    \  for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int sci) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, base, digits, precision, sci);\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int sci, int e) \n{\n    string s = \"\";\n    for(long i = 0;\
    \ i < n; ++i)\n        s += to_string(i, base, digits, precision, sci, e);\n \
    \   return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7les149d.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7les149d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn6rx_wcu.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn6rx_wcu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i <= n; i++) s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i <= n;\
    \ i++) s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    long i;\n    for(i = 0; i <= n; i++) s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i <=\
    \ n; i++) s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    long i;\n    for(i\
    \ = 0; i <= n; i++) s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    long\
    \ i;\n    for(i = 0; i <= n; i++) s += to_string(i) + sep + pad + pad2 + pad3\
    \ + pad4;\n    return s;\n}\n/*\n Return a \nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm2ox6g7w.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm2ox6g7w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\ts = string(n);\n\t\n\tfor (int i = 0; i < n; i++)\n\
    \t\ts += \" \" + (i+1);\n\t\n\treturn s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5skvi3aj.d(14): Error: function expected before `()`, not `string`
    of type `string`\n/tmp/tmp5skvi3aj.d(17): Error: incompatible types for `(" ")
    + (i + 1)`: `string` and `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5skvi3aj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9782udi.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9782udi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\ts += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0lmtk7on.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lmtk7on.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6m5j22u.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6m5j22u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn6rx_wcu.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn6rx_wcu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9782udi.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9782udi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for (i = 0; i <= n; i++) {\n\
    \        s = s + to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkakeghwf.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkakeghwf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7jyevqkc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jyevqkc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    \n    s = \"\";\n    for (i = 0; i <\
    \ n; i++) s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoq4bynsm.d(16): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoq4bynsm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i <= n; ++i)\n   \
    \     s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpauisl1xm.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpauisl1xm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1qym4n4_.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qym4n4_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vvyxro5.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vvyxro5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi5wc0ol.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi5wc0ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp531ul8s2.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp531ul8s2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\ts += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0lmtk7on.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lmtk7on.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdy8nbqfv.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy8nbqfv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6m5j22u.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6m5j22u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\twhile (n > 0) {\n\t\ts += \" \" + (n % 10);\n\t\
    \tn /= 10;\n\t}\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu34_eg7k.d(14): Error: incompatible types for `(" ") + (n %
    cast(long)10)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu34_eg7k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int radix) \n{\n    string s = \"\";\n   \
    \ for(long i = 0; i < n; ++i)\n        s += to_string(i, base, radix);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int radix) \n{\n\
    \    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ radix);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int radix, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, radix, base);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int radix, int base, int\
    \ radix) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s\
    \ += to_string(i, radix, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int radix, int base, int \nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpssemam71.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssemam71.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n    {\n        s +=\
    \ to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb3zdg05_.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3zdg05_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3 + pad4;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9r71mwi8.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp9r71mwi8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    for(i = 0; i <= n; i++) s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base) \n{\n\
    \    string s;\n    long i;\n    for(i = 0; i <= n; i++) s += to_string(i, base);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string base) \n\
    {\n    string s;\n    long i;\n    for(i = 0; i <= n; i++) s += to_string(i, base);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string\
    \ base) \n{\n    string s;\n    long i;\n    for(i = 0; i <= n; i++) s += to_string(i,\
    \ base, base);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string base, string base) \n{\n    string s;\n    long i;\n    for(i = 0;\
    \ i <= n; i++) s += to_string(i, base, base);\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string base,\
    \ string base) \n{\n    string s;\n    long i;\n    for(i = 0; i <= n; i++) s\
    \ += to_string(i, base, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3zrfme9v.d(101): Error: basic type expected, not `unittest`\n/tmp/tmp3zrfme9v.d(101):
    Error: found `unittest` when expecting `)`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3zrfme9v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    {\n\
    \        s += to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3mhb0oi.d(16): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3mhb0oi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpypearfm9.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypearfm9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i < n; ++i)\n      \
    \  result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_3k04hb.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_3k04hb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    long i;\n    for(i = 0; i < n; i++) result\
    \ += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpchwevyge.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchwevyge.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdy8nbqfv.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy8nbqfv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tkkathc.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tkkathc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\twhile (n > 0) {\n\t\ts += \" \" + (n % 10);\n\t\
    \tn /= 10;\n\t}\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu34_eg7k.d(14): Error: incompatible types for `(" ") + (n %
    cast(long)10)`: `string` and `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu34_eg7k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i < n; ++i)\n      \
    \  result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_3k04hb.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_3k04hb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string result = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        result += to_string(i) + sep;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n     \
    \   result += to_string(i) + sep + pad;\n    return result;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string fill) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        result += to_string(i) + sep + pad + fill;\n    return result;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string fill, string pad2) \n{\n    string result = \"\";\n    for(long i = 0;\
    \ i < n; ++i)\n        result += to_string(i) + sep + pad + fill + pad2;\n   \
    \ return result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string fill, string pad2, string pad3) \n{\n    string result = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        result += to_string(i) + sep + pad +\
    \ fill + pad2 + pad3;\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvx02m2e.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdvx02m2e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    for(i = 0L; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9rrd0eaq.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rrd0eaq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\twhile (n > 0)\n\t{\n\t\ts += to_string(n%10);\n\
    \t\tn /= 10;\n\t}\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffr9wupa.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffr9wupa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9782udi.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9782udi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    \n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2kicauis.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kicauis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwi5wc0ol.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi5wc0ol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4xx75hs.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4xx75hs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmrlqlrd.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmrlqlrd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpne4trz.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpne4trz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8glk72ec.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8glk72ec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt25tbpig.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt25tbpig.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpok512cuj.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok512cuj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep) \n{\n    string s = \"\";\n    for(long i\
    \ = 0; i < n; ++i)\n    {\n        s += to_string(i) + sep;\n    }\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep) \n\
    {\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n        s +=\
    \ to_string(i) + sep;\n    }\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep, string sep2) \n{\n    string s = \"\";\n \
    \   for(long i = 0; i < n; ++i)\n    {\n        s += to_string(i) + sep + sep2;\n\
    \    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n    {\n        s += to_string(i) + sep + sep2;\n    }\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string\
    \ sep2, string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \    {\n        s += to_string(i) + sep + sep2 + sep3;\n    }\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99rnrrhu.d(104): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99rnrrhu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9euru11s.d(13): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9euru11s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4xx75hs.d(101): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4xx75hs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    \n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2kicauis.d(15): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kicauis.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk577upbc.d(14): Error: undefined identifier `to_string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk577upbc.d", "-I/tmp"]\n'''
  stdout: b''
