name: HumanEval_118_get_closest_vowel
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\
  \n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\"\
  )\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n\
    \    int end = word.length() - 1;\n    \n    while(start < end) {\n        string\
    \ vowel = word.substr(start, 1);\n        \n        if(vowels.find(vowel) != string::npos)\
    \ {\n            int index = vowels.find(vowel);\n            \n            if(index\
    \ != string::npos) {\n                if(index > start) {\n                  \
    \  start = index;\n                } else {\n                    end = index;\n\
    \                }\n            }\n        }\n    }\n    \n    return word.substr(start,\
    \ 1);\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n\
    \    int end = word.length() - 1;\n    \n    while (start <= end) {\n        int\
    \ mid = (start + end) / 2;\n        \n        if (word.startsWith(vowels, mid))\
    \ {\n            end = mid - 1;\n        } else if (word.endsWith(vowels, mid))\
    \ {\n            start = mid + 1;\n        } else {\n            start = mid +\
    \ 1;\n            end = mid - 1;\n        }\n    }\n    \n    return word.substring(start,\
    \ end + 1);\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    \n    int len = word.length();\n\
    \    int start = 0;\n    int end = 0;\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(word[i] == consonants[len - 1])\n        {\n            end\
    \ = len - 1;\n            break;\n        }\n        else if(word[i] == consonants[0])\n\
    \        {\n            start = len - 1;\n            break;\n        }\n    }\n\
    \    \n    if(start == end)\n    {\n        return \"\";\n    }\n    \n    string\
    \ result = \"\";\n    \n    for(int i = start; i <= end; i++)\n    {\n       \
    \ if(vowels.find(word[i]) != string::npos)\n        {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n\
    \    {\n        if(word[i] == vowels[word.find_last_of(\"aeiouAEIOU\") - 1])\n\
    \        {\n            return word[i];\n        }\n    }\n    return \"\";\n}",
  "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n \
    \       if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n    \
    \    }\n    }\n    map<string,int>::iterator it;\n    string vowel;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==1)\n        {\n            vowel=it->first;\n \
    \           break;\n        }\n    }\n    if(vowel.length()==0)\n    {\n     \
    \   return \"\";\n    }\n    string vowel_before;\n    string vowel_after;\n \
    \   for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n  \
    \      {\n            if(word[i]==vowel)\n            {\n                vowel_before=word.substr(0,i);\n\
    \                vowel_after=word.substr(i+1,word.length());\n               \
    \ break;\n            }\n        }\n    }\n    if(vowel_before.length()==0)\n\
    \    {\n        return \"\";\n    }\n    if(vowel_after.length()==0)\n    {\n\
    \        return \"\";\n    }\n    string vowel_before2=get_closest_vowel(vowel_before);\n\
    \    string vowel_after2=get_closest_vowel(vowel_after);\n    if(vowel_before2.length()==0)\n\
    \    {\n        return vowel;\n    }\n    if(vowel_after2.length()==0)\n    {\n\
    \        return vowel;\n    }\n    if(vowel_before2==vowel)\n    {\n        return\
    \ vowel_after2;\n    }\n    if(vowel_after2==vowel)\n    {\n        return vowel_before2;\n\
    \    }\n    if(vowel_before2<vowel)\n    {\n        return vowel_before2;\n  \
    \  }\n    return vowel_after2;\n}", "{\n    map<string, int> vowels;\n    for(int\
    \ i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n      \
    \  {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second > 0)\n        {\n            string vowel = it->first;\n\
    \            int count = it->second;\n            int index = word.length() -\
    \ 1;\n            while(index >= 0)\n            {\n                if(isVowel(word[index]))\n\
    \                {\n                    if(word[index] == vowel)\n           \
    \         {\n                        count++;\n                    }\n       \
    \             else\n                    {\n                        break;\n  \
    \                  }\n                }\n                index--;\n          \
    \  }\n            if(count > 0)\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_right = vowels.right(vowels.length());\n    \n    for(int\
    \ i = word.length() - 1; i >= 0; i--)\n    {\n        if(word[i] == vowels_right[i])\n\
    \        {\n            return word[i];\n        }\n    }\n    return \"\";\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int start\
    \ = 0;\n    int end = len - 1;\n    string result = \"\";\n    while(start < end)\
    \ {\n        string s = word.substr(start, 1);\n        if(vowels.find(s) == string::npos)\
    \ {\n            start = start + 1;\n        } else {\n            end = end -\
    \ 1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n/*\nYou are given a word. Your task is to find the closest\
    \ vowel that stands between \n    two consonants from the right side of the word\
    \ (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    find any vowel met the above condition. ",
  "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n    {\n \
    \       if(word[i]=='a' || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n\
    \        {\n            vowels[word[i]]=vowels[word[i]]+1;\n        }\n    }\n\
    \    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the word is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<|\
    \ c |>\nYes, I missed that case. Thanks for pointing it out. Updated the code.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string vowels = \"aeiouAEIOU\";\n    map<string, int>\
    \ vowel_map;\n    for(int i = 0; i < word.length(); i++)\n    {\n        string\
    \ vowel = word.substr(i, 1);\n        vowel_map[vowel] = vowel_map[vowel] + 1;\n\
    \    }\n    map<string, int>::iterator it;\n    for(it = vowel_map.begin(); it\
    \ != vowel_map.end(); ++it)\n    {\n        if(it->second == 1)\n        {\n \
    \           return it->first;\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nI didn't downvote you, but I suspect it's because\
    \ you didn't explain what your code does, and how it does it.\n<|/ c |>\n<| c\
    \ |>\nI added some explanation to the code. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I didn't downvote you, but I suspect it's because you didn't explain what your\
    \ code does, and how it does it.\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nI didn't downvote you, but I\
    \ suspect it's because you didn't explain what your code does, and how it does\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    map<string, int> vowels;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n\
    \    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"\
    y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] =\
    \ 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"a\"] =\
    \ 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n\
    \    vowels[\"u\"] = 1;\n    vowels[\"y", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string vowels_right = vowels.substr(vowels.rfind('e') + 1);\n    string\
    \ vowels_left = vowels.substr(0, vowels.rfind('e'));\n    string vowels_mid =\
    \ vowels.substr(vowels.rfind('e') + 1, vowels.rfind('e') - vowels.rfind('e') -\
    \ 1);\n    \n    string vowels_right_lower = vowels_right.substr(0, vowels_right.rfind('e'));\n\
    \    string vowels_right_upper = vowels_right.substr(vowels_right.rfind('e') +\
    \ 1, vowels_right.rfind('e') - vowels_right.rfind('e') - 1);\n    string vowels_left_lower\
    \ = vowels_left.substr(0, vowels_left.rfind('e'));\n    string vowels_left_upper\
    \ = vowels_left.substr(vowels_left.rfind('e') + 1, vowels_left.rfind('e') - vowels_left.rfind('e')\
    \ - 1);\n    string vowels_mid_lower = vowels_mid.substr(0, vowels_mid.rfind('e'));\n\
    \    string vowels_mid_upper = vowels_mid.substr(vowels_mid.rfind('e') + 1, vowels_mid.rfind('e')\
    \ - vowels_mid.rfind('e') - 1);\n    \n    string vowels_right_lower = vowels_right.substr(0,\
    \ vowels_right.rfind('e'));\n    string vowels_right_upper = vowels_right.substr(vowels_right.rfind('e')\
    \ + 1, vowels_right.rfind('e') - vowels_right.rfind('e') - 1);\n    string vowels_left_lower\
    \ = vowels_left.substr(0, vowels_left.rfind('e'));\n    string vowels_left_upper\
    \ = vowels_left.substr(vowels_left.rfind('e') + 1, vowels_left.rfind('e') - vowels_left.rfind('e')\
    \ - 1);\n    string vowels_mid_lower = vowels_mid.substr(0, vowels_mid.rfind('e'));\n\
    \    string vowels_mid_upper = vowels_mid.substr(vowels_mid.rfind('e') + 1, vowels_mid.rfind('e')\
    \ - vowels_mid.rfind('e') - 1);\n    \n    string vowels_right_lower = vowels_right.substr(0,\
    \ vowels_right.rfind('e'));\n    string vowels_right_upper = vowels_right.substr(vowels_right.rfind('e')\
    \ + 1, vowels_right.rfind('e') - vowels_right.rfind('e') - 1);\n    string vowels_left_lower\
    \ = vowels_left.substr(0, vowels_left.rfind('e", "{\n    \n    for(int i=word.length()-1;i>=0;i--)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            for(int j=word.length()-1;j>=0;j--)\n\
    \            {\n                if(isConsonant(word[j]))\n                {\n\
    \                    if(word[j]==word[i])\n                    {\n           \
    \             if(word[j+1]==word[i])\n                        {\n            \
    \                if(word[j+2]==word[i])\n                            {\n     \
    \                           return word[i];\n                            }\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "{\n    int left = 0;\n    int\
    \ right = word.length() - 1;\n    while(left < right) {\n        int mid = (left\
    \ + right) / 2;\n        if(word[mid] >= 'a' && word[mid] <= 'z') {\n        \
    \    left = mid;\n        } else {\n            right = mid;\n        }\n    }\n\
    \    if(word[left] >= 'a' && word[left] <= 'z') {\n        return word[left];\n\
    \    } else {\n        return \"\";\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,algorithm,c++,c |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    map<string, int> vowels;\n\
    \    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"A\"] =\
    \ 1;\n    vowels[\"E\"] = 1;\n    vowels[\"I\"] = 1;\n    vowels[\"O\"] = 1;\n\
    \    vowels[\"U\"] = 1;\n    vowels[\"Y\"] = 1;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    vowels[\"y\"] = 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] = 1;\n\
    \    vowels[\"I\"] = 1;\n    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n    vowels[\"\
    Y\"] = 1;\n    map<string, int>::iterator it;\n    string vowel;\n    map<string,\
    \ int>::iterator it2;\n    string vowel2;\n    map<string, int>::iterator it3;\n\
    \    string vowel3;\n    map<string, int>::iterator it4;\n    string vowel4;\n\
    \    map<string, int>::iterator it5;\n    string vowel5;\n    map<string, int>::iterator\
    \ it6;\n    string vowel6;\n    map<string, int>::iterator it7;\n    string vowel7;\n\
    \    map<string, int>::iterator it8;\n    string vowel8;\n    map<string, int>::iterator\
    \ it9;\n    string vowel9;\n    map<string, int>::iterator it10;\n    string vowel10;\n\
    \    map<string, int>::iterator it11;\n    string vowel11;\n    map<string, int>::iterator\
    \ it12;\n    string vowel12;\n    map<string, int>::iterator it13;\n    string\
    \ vowel13;\n    map<string, int>::iterator it14;\n    string vowel14;\n    map<string,\
    \ int>::iterator it15;\n    string vowel15;\n    map<string, int>::iterator it16;\n\
    \    string vowel16;\n    map<string, int>::iterator it17;\n    string vowel17;\n\
    \    map<string, int>::iterator it18;\n    string vowel18;\n    map<string, int>::iterator\
    \ it19;\n    string vowel19;\n    map<string, int>::iterator it20;\n    string\
    \ vowel20;\n    map<string, int>::iterator it21;\n    string vowel21;\n    map<string,\
    \ int>::iterator it22;", "{\n    string vowels = \"aeiouAEIOU\";\n    string vowels_right\
    \ = vowels.substr(vowels.rfind('A') + 1);\n    string vowels_left = vowels.substr(0,\
    \ vowels.rfind('A'));\n    \n    for(int i = 0; i < word.length(); i++)\n    {\n\
    \        if(word[i] == vowels_right[0])\n        {\n            int index = vowels.find(word[i]);\n\
    \            if(index != -1)\n            {\n                string vowels_before\
    \ = vowels.substr(0, index);\n                if(vowels_before == vowels_left\
    \ || vowels_before == vowels_right)\n                {\n                    return\
    \ word[i];\n                }\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int start = 0;\n    int end\
    \ = word.length() - 1;\n    while(start < end)\n    {\n        int mid = (start\
    \ + end) / 2;\n        if(word.at(mid) == vowels.at(mid))\n        {\n       \
    \     end = mid - 1;\n        }\n        else if(word.at(mid) == vowels.at(mid+1))\n\
    \        {\n            start = mid + 1;\n        }\n        else\n        {\n\
    \            start = mid + 1;\n            end = mid - 1;\n        }\n    }\n\
    \    return word.at(start);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  map<string, int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n\
    \        if(isVowel(word[i]))\n        {\n            string vowel = word[i];\n\
    \            vowels[vowel] += 1;\n        }\n    }\n    map<string, int>::iterator\
    \ it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n    {\n       \
    \ if(it->second == 1)\n        {\n            return it->first;\n        }\n \
    \   }\n    return \"\";\n}", "{\n    \n    string vowels = \"aeiouAEIOU\";\n \
    \   \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i])\
    \ != string::npos)\n        {\n            int index = vowels.find(word[i]);\n\
    \            int j = word.length() - 1;\n            while(j >= 0 && vowels.find(word[j])\
    \ != string::npos)\n            {\n                if(index > vowels.find(word[j]))\n\
    \                {\n                    index = vowels.find(word[j]);\n      \
    \          }\n                j--;\n            }\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}", "{\n    int len = word.length();\n  \
    \  int vowel_start = len - 1;\n    int vowel_end = len - 1;\n    int vowel_mid\
    \ = 0;\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(word[i] == 'a'\
    \ || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n \
    \       {\n            vowel_start = i;\n        }\n        else if(word[i] ==\
    \ 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U')\n\
    \        {\n            vowel_end = i;\n        }\n    }\n    \n    for(int i\
    \ = vowel_start; i <= vowel_end; i++)\n    {\n        vowel_mid += word[i];\n\
    \    }\n    \n    for(int i = vowel_end; i >= vowel_start; i--)\n    {\n     \
    \   vowel_mid += word[i];\n    }\n    \n    return vowel_mid;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
