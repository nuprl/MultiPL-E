language: d
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n        median =\
    \ (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median = l[mid];\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n        median =\
    \ (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median = l[mid];\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid =\
    \ l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n      \
    \  median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median =\
    \ l[mid];\n    }\n    return median;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n\
    \    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n  \
    \      median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long long l[]) \n\
    {\n    long mid = l.length / 2;\n    float median;\n    if (l.length \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb2afqlab.d(32): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpb2afqlab.d(54): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpb2afqlab.d(76): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpb2afqlab.d(98): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb2afqlab.d(98):
    Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpb2afqlab.d(103):
    Error: found `unittest` when expecting `)`\n/tmp/tmpb2afqlab.d(113): Error: found
    `End of File` when expecting `}` following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb2afqlab.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        throw new IllegalArgumentException(\"List must have\
    \ at least one element\");\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return m;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0fg2fchg.d(12): Error: cannot implicitly convert expression
    `l.length` of type `ulong` to `int`\n/tmp/tmp0fg2fchg.d(14): Error: undefined
    identifier `IllegalArgumentException`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0fg2fchg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n  \
    \          m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    float m = l[0];\n  \
    \  for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(ulong\
    \ l[]) \n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxerycart.d(30): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpxerycart.d(50): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpxerycart.d(70): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpxerycart.d(90): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpxerycart.d(90):
    Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpxerycart.d(110):
    Deprecation: instead of C-style syntax, use D-style syntax `ulong[] l`\n/tmp/tmpxerycart.d(112):
    Error: semicolon expected following function declaration\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxerycart.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1pdrzisq.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmp1pdrzisq.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pdrzisq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bve3e0t.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bve3e0t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = (float)l[mid];\n\tfor (int i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < m) \n\t\t{\n\t\t\tm = l[i];\n\t\t}\n\t}\n\treturn m;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpopvbuwu0.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopvbuwu0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = (float)l.length/2;\n\
    \tfloat temp;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] < m[temp])\n\
    \t\t{\n\t\t\ttemp = i;\n\t\t}\n\t}\n\treturn l[temp];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnjdqw60z.d(12): Error: C style cast illegal, use `cast(float)l.length`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjdqw60z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdzsca22q.d(15): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpdzsca22q.d(19): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzsca22q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu5wcvahp.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x428265]\n??:? void tmpu5wcvahp.__unittest_L22_C1() [0x427e3f]\n??:?
    void tmpu5wcvahp.__modtest() [0x427fe8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43030d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430299]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428728]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286af]\n??:? _d_run_main [0x42861a]\n??:? main [0x427ffb]\n??:?
    __libc_start_main [0x56d87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprkm8wo96.d(14): Error: undefined identifier `toFloat` in module
    `std.math`\n/tmp/tmprkm8wo96.d(16): Error: undefined identifier `toFloat` in module
    `std.math`\n/tmp/tmprkm8wo96.d(16): Error: undefined identifier `toFloat` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkm8wo96.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw447lgzp.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpw447lgzp.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw447lgzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0) \n        return std.math::mid(l, l / 2);\n    else \n  \
    \      return std.math::mid(l / 2, l);\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1yf_fnl.d(14): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmps1yf_fnl.d(14): Error: found `:` instead of statement\n/tmp/tmps1yf_fnl.d(15):
    Error: found `else` without a corresponding `if`, `version` or `debug` statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1yf_fnl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float m = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n    {\n        if (l[i] < l[mid])\n        {\n            m = l[i];\n\
    \        }\n    }\n    \n    for (i = mid; i < l.length; i++)\n    {\n       \
    \ if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    \n  \
    \  return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_86n2cd_.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282f5]\n??:? void tmp_86n2cd_.__unittest_L35_C1() [0x427ecb]\n??:?
    void tmp_86n2cd_.__modtest() [0x428074]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c377]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43039d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43084c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430329]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1e1]\n??:? runModuleUnitTests [0x42c14d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42873f]\n??:? _d_run_main [0x4286aa]\n??:? main [0x428087]\n??:?
    __libc_start_main [0xbef08554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2852a02h.d(59): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2852a02h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n    {\n        return std.math::mid(l, l / 2);\n    }\n\
    \    else\n    {\n        long mid = l / 2;\n        long a = l[mid];\n      \
    \  long b = l[mid-1];\n        return std.math::mid(std.math::min(a, b), std.math::max(a,\
    \ b));\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8o0hds2.d(15): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmps8o0hds2.d(15): Error: found `:` instead of statement\n/tmp/tmps8o0hds2.d(22):
    Error: found `:` when expecting `;` following `return` statement\n/tmp/tmps8o0hds2.d(22):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps8o0hds2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid - 1, mid);\n    }\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpml3q15ex.d(15): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpml3q15ex.d(19): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpml3q15ex.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float med;\n    \n    med = l[0];\n    \n    for (i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] < med)\n        {\n            med = l[i];\n        }\n\
    \    }\n    \n    mid = l.length / 2;\n    \n    if (l.length % 2 == 0)\n    {\n\
    \        if (l[mid] < med)\n        {\n            return l[mid];\n        }\n\
    \        else\n        {\n            return l[mid-1];\n        }\n    }\n   \
    \ else\n    {\n        if (l[mid] < med)\n        {\n            return l[mid];\n\
    \        }\n        else\n        {\n            return l[mid+1];\n        }\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpc0czxd8g.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283d5]\n??:? void tmpc0czxd8g.__unittest_L50_C1() [0x427faf]\n??:?
    void tmpc0czxd8g.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428898]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42881f]\n??:? _d_run_main [0x42878a]\n??:? main [0x42816b]\n??:?
    __libc_start_main [0x61ae5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwnb_gy3b.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x42827d]\n??:? void tmpwnb_gy3b.__unittest_L20_C1() [0x427e57]\n??:?
    void tmpwnb_gy3b.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b192]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430325]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b169]\n??:? runModuleUnitTests [0x42c0d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428740]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286c7]\n??:? _d_run_main [0x428632]\n??:? main [0x428013]\n??:?
    __libc_start_main [0x198554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_lkh2ee.d(27): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpg_lkh2ee.d(44): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpg_lkh2ee.d(61): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpg_lkh2ee.d(78): Deprecation:
    instead of C-style syntax, use D-style syntax `char[] l`\n/tmp/tmpg_lkh2ee.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpg_lkh2ee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\ndouble median(double\
    \ l[]) \n{\n    double m = l[0];\n    double n = l[0];\n    for(int i = 1; i <\
    \ l.length; i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n\
    \    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nlong median(long l[]) \n{\n    long\
    \ m = l[0];\n    long n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n        if(l[i]\
    \ > n)\n        {\n            n = l[i];\n        }\n    }\n    return (n + m)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ndouble median(double l[]) \n{\n    double \nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp04go50h.d(35): Deprecation: instead of C-style syntax, use
    D-style syntax `float[] l`\n/tmp/tmpp04go50h.d(60): Deprecation: instead of C-style
    syntax, use D-style syntax `double[] l`\n/tmp/tmpp04go50h.d(85): Deprecation:
    instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpp04go50h.d(110):
    Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpp04go50h.d(113):
    Error: no identifier for declarator `double`\n/tmp/tmpp04go50h.d(113): Error:
    found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp04go50h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return (midVal + rightMedian)\
    \ / 2.0f;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2.0f;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2.0f;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2.0f;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2.0f;\n}\n/*\nReturn median of elements in the array l.\n    >>> \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ea26w9o.d(74): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5ea26w9o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpciyedle1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = 0.0;\n\t\
    \n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tmed = (med + l[i]) / 2;\n\t\
    }\n\t\n\treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdw5s04qu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfshi1urk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7rukj32a.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7rukj32a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong n = l.length;\n\
    \tif (n < 1) return 0;\n\tlong mid = n / 2;\n\tlong left = l[mid];\n\tlong right\
    \ = l[n - 1];\n\tif (left > right) swap(left, right);\n\treturn left;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo81bpenc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2xvd9aw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        long mid1 = mid - 1;\n        long mid2 = mid\
    \ + 1;\n        return std.math.mid(l, mid1) + std.math.mid(l, mid2);\n    }\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1n8hxjuc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8bgka2k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long med = std.math.median(l);\n\
    \    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdnxuo0j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, \nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpubrondsv.d(100): Error: expression expected, not \''unittest\''\n/tmp/tmpubrondsv.d(101):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(102): Error: expression
    expected, not \''alias\''\n/tmp/tmpubrondsv.d(102): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpubrondsv.d(102): Error: expression expected, not
    \''=\''\n/tmp/tmpubrondsv.d(102): Error: found \''median\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(102):
    Error: expression expected, not \'';\''\n/tmp/tmpubrondsv.d(104): Error: found
    \''assert\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(104): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpubrondsv.d(105): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpubrondsv.d(106): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(107):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(108): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(109): Error: expression expected,
    not \''}\''\n/tmp/tmpubrondsv.d(110): Error: found \''void\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(110):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpubrondsv.d(110): Error: expression
    expected, not \''}\''\n/tmp/tmpubrondsv.d(110): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpubrondsv.d(110): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpubrondsv.d(110):
    Error: found \''EOF\'' when expecting \'';\'' following return statement\n/tmp/tmpubrondsv.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubrondsv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmce2oowq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fdiv(leftMedian, rightMedian);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(short[]\
    \ l) \n{\n    short mid = l.length / 2;\n    float leftMedian = median(l);\n \
    \   float rightMedian = median(l.subarray(0, mid));\n    return std.fdiv(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(int[] l) \n{\n    int mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fdiv(leftMedian, rightMedian);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[]\
    \ l) \n{\n    float mid = l.length / 2;\n    float leftMedian = median(l);\n \
    \   float rightMedian = median(l.subarray(0, mid));\n    return std.fdiv(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double[] l) \n{\n    double mid = l.length /\
    \ 2;\n    double leftMedian = median(l);\n    double rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.fdiv(leftMedian, rightMedian);\n}\n/*\nReturn \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpclyu6dhf.d(77): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpclyu6dhf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\
    \treturn std.math.mid(l, mid, l.length - mid);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp848ja3fo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float med = 0.0;\n\
    \    long i;\n    \n    for (i = 0; i < l.length; i++) \n    {\n        med =\
    \ (med + l[i]) / 2;\n    }\n    return med;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48k39ml7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n   \
    \ else\n        return std.math.mid(l, mid + 1, l.length - mid);\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long[] l, int start, int end) \n{\n    if (start == end)\n      \
    \  return l[start];\n    \n    long mid = start + (end - start) / 2;\n    if (end\
    \ % 2 == 0)\n        return std.math.mid(l, start, mid);\n    else\n        return\
    \ std.math.mid(l, mid + 1, end);\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step) \n{\n    if (start == end)\n        return l[start];\n  \
    \  \n    long mid = start + (end - start) / 2;\n    if (end % 2 == 0)\n      \
    \  return std.math.mid(l, start, mid, step);\n    else\n        return std.math.mid(l,\
    \ mid + 1, end, step);\n}\n/*\nReturn median of elements in the array l.\n   \
    \ >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int\
    \ step, float stepSize) \n{\n    if (start == end)\n        return l[start];\n\
    \    \n    long mid = start + (end - start) / 2;\n    if (end % 2 == 0)\n    \
    \    return std.math.mid(l, start, mid, stepSize, step);\n    else\n        return\
    \ std.math.mid(l, mid + 1, end, stepSize, step);\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step, float stepSize, float stepSize2) \n\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp11jsrmmz.d(85): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11jsrmmz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return leftMedian + (rightMedian - leftMedian) * (mid) / 2;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,median |>\n<| c |>\nThe median of [1,2,3,4,5] is 3, not\
    \ 4.\n<|/ c |>\n<| c |>\n: I believe that is the definition of the median.\n<|/\
    \ c |>\n<| c |>\n: I believe that is the definition of the median.\n<|/ c |>\n\
    <| c |>\n: I believe that is the definition of the median.\n<|/ c |>\n<| c |>\n\
    : I believe that is the definition of the median.\n<|/ c |>\n<| a tags=algorithm,c++,median\
    \ |>\nThe median is the middle number of the sorted array.\nThe median is the\
    \ number that divides the array into two halves such that the difference between\
    \ the two medians is as small as possible.\nThe median is defined as the middle\
    \ number of the sorted array.\nThe median is defined as the number that divides\
    \ the array into two halves such that the difference between the two medians is\
    \ as small as possible.\nThe median is defined as the middle number of the sorted\
    \ array.\nThe median is defined as the number that divides the array into two\
    \ halves such that the difference between the two medians is as small as possible.\n\
    The median is defined as the middle number of the sorted array.\nThe median is\
    \ defined as the number that divides the array into two halves such that the difference\
    \ between the two medians is as small as possible.\nThe median is defined as the\
    \ middle number of the sorted array.\nThe median is defined as the number that\
    \ divides the array into two halves such that the difference between the two medians\
    \ is as small as possible.\nThe median is defined as the middle number of the\
    \ sorted array.\nThe median is defined as the number that divides the array into\
    \ two halves such that the difference between the two medians is as small as possible.\n\
    The median is defined as the middle number of the sorted array.\nThe median is\
    \ defined as the number that divides the array into two halves such that the difference\
    \ between the two medians is as small as possible.\nThe median is defined as the\
    \ middle number of the sorted array.\nThe median is defined as the number that\
    \ divides the array into two halves such that the difference between the two medians\
    \ is as small as possible.\nThe median is defined as the middle number of the\
    \ sorted array.\nThe median is defined as the number that divides the array into\
    \ two halves such that the difference between the two median\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6z27bk1g.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp6z27bk1g.d(57):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6z27bk1g.d(58): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6z27bk1g.d(59): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6z27bk1g.d(60): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp6z27bk1g.d(61): Error: Declaration expected, not \''assert\''\n/tmp/tmp6z27bk1g.d(62):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z27bk1g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid, l.length);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    if (start == end) \n        return l[start];\n\
    \    else \n        return std.math.mid(l, start, end);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step) \n{\n    if (start == end) \n        return\
    \ l[start];\n    else \n        return std.math.mid(l, start, end, step);\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end, int step, float stepSize)\
    \ \n{\n    if (start == end) \n        return l[start];\n    else \n        return\
    \ std.math.mid(l, start, end, step, stepSize);\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step, float stepSize, float stepSize2) \n{\n    if (start == end)\
    \ \n        return l[start];\n    else \n        return std.math.mid(l, start,\
    \ end, step, stepSize, stepSize2);\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step, float stepSize, \nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpliowa47b.d(87): Error: basic type expected, not unittest\n/tmp/tmpliowa47b.d(87):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpliowa47b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length%2 == 0)\n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsudf2_vm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprb8efrgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t\treturn std.math.mid(l, mid);\n\telse \n\
    \t\treturn std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggbwwble.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = std.math.median(l);\n\
    \treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw00cfdak.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpciyedle1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float median;\n    \n    mid = l.length / 2;\n    \n    if (l.length % 2 ==\
    \ 1)\n    {\n        median = l[mid];\n    }\n    else\n    {\n        median\
    \ = (l[mid] + l[mid-1]) / 2;\n    }\n    \n    return median;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1k049xr8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphj8ylaam.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n   \
    \ else\n        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvd87bpa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = 0;\n    float s = 0.0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        s += l[i];\n        if(s > m)\n        {\n            m\
    \ = s;\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float m = 0;\n    float s = 0.0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        s += l[i];\n        if(s > m)\n  \
    \      {\n            m = s;\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float m = 0;\n    float s = 0.0;\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        s += l[i];\n        if(s\
    \ > m)\n        {\n            m = s;\n        }\n    }\n    return m;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long mid = l.length / 2;\n    float m = 0;\n\
    \    float s = 0.0;\n    for(int i = 0; i < l.length; i++)\n    {\n        s +=\
    \ l[i];\n        if(s > m)\n        {\n            m = s;\n        }\n    }\n\
    \    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long l[], int n) \n{\n    long mid = l.length\
    \ / 2;\n    float m = 0;\n    float s = 0.0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        s += l[i];\n        if(s > m)\n        {\n            m = s;\n\
    \        }\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu_77sfx5.d(115): Error: found \''unittest\'' instead of statement\n/tmp/tmpu_77sfx5.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_77sfx5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeuptrnpm.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuptrnpm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n) \n{\n    long mid =\
    \ l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn_ls1zsp.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(34):
    Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(55): Error:
    C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(76): Error: C
    style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(97): Error: C style
    cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(104): Error: found \''unittest\''
    instead of statement\n/tmp/tmpn_ls1zsp.d(114): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpn_ls1zsp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + l[mid]) / 4;\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36_qix_o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = 0;\n  \
    \  int n = l.length;\n    float sum = 0;\n    for(int i = 0; i < n; i++)\n   \
    \ {\n        sum += l[i];\n    }\n    float avg = sum / n;\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        if(l[i] < avg)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39z0dfck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqlu5sqg4.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqlu5sqg4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum, x;\n    \n    sum = 0;\n    mid = l.length / 2;\n    for (i = 0;\
    \ i < mid; i++)\n        sum += l[i];\n    x = sum / mid;\n    \n    for (i =\
    \ 0; i < mid; i++)\n        if (l[i] < x)\n            return l[i];\n    return\
    \ x;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnmm9lic.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdzsca22q.d(15): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpdzsca22q.d(19): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzsca22q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\
    \treturn std.math.mid(l, mid, l.length - mid);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp848ja3fo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[], int len) \n{\n    long mid\
    \ = len / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < len; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkvyh13e4.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpkvyh13e4.d(34):
    Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpkvyh13e4.d(55): Error:
    C style cast illegal, use cast(float)l[mid]\n/tmp/tmpkvyh13e4.d(76): Error: C
    style cast illegal, use cast(float)l[mid]\n/tmp/tmpkvyh13e4.d(97): Error: C style
    cast illegal, use cast(float)l[mid]\n/tmp/tmpkvyh13e4.d(105): Error: found \''unittest\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvyh13e4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, 0,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejokqacv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            mid = i;\n            m =\
    \ (float)l[mid];\n        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsjyny_l0.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpsjyny_l0.d(19):
    Error: C style cast illegal, use cast(float)l[mid]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpsjyny_l0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        else if(l[i] > n)\n\
    \        {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double[] l) \n{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        else if(l[i] > n)\n        {\n    \
    \        n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[]\
    \ l) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        else if(l[i] > n)\n        {\n            n = l[i];\n        }\n\
    \    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n   \
    \ float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \      else if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n \
    \   >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n    \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvu6ypylg.d(113): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu6ypylg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpl2xzxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0qq8yxi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5wi6ilb.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5wi6ilb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5wi6ilb.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5wi6ilb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return midVal + (leftMedian\
    \ + rightMedian)/2;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ if there are any negative numbers in the array. For example, median([-10, 4,\
    \ 6, 1000]) returns -10.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the median function from here: http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the median function from here:\
    \ http://stackoverflow.com/questions/2477495/finding-median-of-array-in-java\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic class Median{\n    public static void\
    \ main(String[] args){\n        int[] arr = {1,2,3,4,5,6,7,8,9,10};\n        System.out.println(median(arr));\n\
    \    }\n    public static int median(int[] arr){\n        int mid = arr.length/2;\n\
    \        int left = arr[mid];\n        int right = arr[mid+1];\n        if(left>right){\n\
    \            return left;\n        }\n        return right;\n    }\n}\n</code>\n\
    <|/ a tags=median,java,arrays |>\n<| a tags=median,java,arrays |>\n<code>\npublic\
    \ int median(int[] arr) {\n    int mid = arr.length/2;\n    int left = arr[mid];\n\
    \    int right = arr[mid+1];\n    if(left>right){\n        return left;\n    }\n\
    \    return right;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=median,java,arrays\
    \ |>\n<code>\npublic int median(int[] arr) {\n    int mid = arr.length/2;\n  \
    \  int left = arr[mid];\n    int right = arr[mid+1];\n    if(left>right){\n  \
    \      return left;\n    }\n    return right;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that \nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp58f0sxl9.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmp58f0sxl9.d(21):
    Error: unterminated character constant\n/tmp/tmp58f0sxl9.d(40): Error: identifier
    expected following \''.\'' instead of \''out\''\n/tmp/tmp58f0sxl9.d(40): Error:
    no identifier for declarator System\n/tmp/tmp58f0sxl9.d(40): Error: Declaration
    expected, not \''out\''\n/tmp/tmp58f0sxl9.d(41): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58f0sxl9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijkn8lqd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long med = std.math.median(l);\n\
    \    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdnxuo0j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n \
    \   float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n\
    \    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float m =\
    \ l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n    float\
    \ m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n \
    \   float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n = l[1];\n\
    \    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float n =\
    \ l[1];\n    float m = l[0];\n    float n = l[1];\n    float m = l[0];\n    float\
    \ n = l[1];\n    float m = l[0];\n\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfq31e5fs.d(98): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq31e5fs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat sum = 0;\n\t\
    float n = l.length;\n\tfor (int i = 0; i < n; i++) {\n\t\tsum += l[i];\n\t}\n\t\
    return sum / n;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5u54xg5z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpl2xzxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd6hh8wc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu5wcvahp.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x428265]\n??:? void tmpu5wcvahp.__unittest_L22_C1() [0x427e3f]\n??:?
    void tmpu5wcvahp.__modtest() [0x427fe8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43030d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430299]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428728]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286af]\n??:? _d_run_main [0x42861a]\n??:? main [0x427ffb]\n??:?
    __libc_start_main [0x56d87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu5wcvahp.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x428265]\n??:? void tmpu5wcvahp.__unittest_L22_C1() [0x427e3f]\n??:?
    void tmpu5wcvahp.__modtest() [0x427fe8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43030d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430299]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428728]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286af]\n??:? _d_run_main [0x42861a]\n??:? main [0x427ffb]\n??:?
    __libc_start_main [0x56d87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long i, mid;\n    float sum;\n    \n    sum =\
    \ 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum\
    \ += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long i, mid;\n    float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n\
    \    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum\
    \ / mid;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long i, mid;\n    float\
    \ sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i <\
    \ mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(char l[]) \n{\n    long i, mid;\n    float sum;\n    \n    sum =\
    \ 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum\
    \ += l[i];\n    \n    return sum / mid;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, \nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpefdkcf_6.d(107): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefdkcf_6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34du8p6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62z0o5do.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    float a = 0;\n    float b = l.length\
    \ - 1;\n    float c = l[0];\n    float d = l[l.length - 1];\n    while (a <= b)\
    \ {\n        float mid = (a + b) / 2;\n        if (mid > c) {\n            b =\
    \ mid - 1;\n        } else if (mid < d) {\n            a = mid + 1;\n        }\
    \ else {\n            return mid;\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(short[] l) \n{\n    short mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    float a = 0;\n    float b = l.length - 1;\n    float c = l[0];\n    float\
    \ d = l[l.length - 1];\n    while (a <= b) {\n        float mid = (a + b) / 2;\n\
    \        if (mid > c) {\n            b = mid - 1;\n        } else if (mid < d)\
    \ {\n            a = mid + 1;\n        } else {\n            return mid;\n   \
    \     }\n    }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n    int mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    float a = 0;\n    float b = l.length\
    \ - 1;\n    float c = l[0];\n    float d = l[l.length - 1];\n    while (a <= b)\
    \ {\n        float mid = (a + b) / 2;\n        if (mid > c) {\n            b =\
    \ mid - 1;\n        } else if (mid < d) {\n            a = mid + 1;\n        }\
    \ else {\n            return mid;\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float[] l) \n{\n    float mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    float a = 0;\n    float b = \nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppp50fhz.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpppp50fhz.d(41):
    Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpppp50fhz.d(69): Error:
    C style cast illegal, use cast(float)l[mid]\n/tmp/tmpppp50fhz.d(97): Error: C
    style cast illegal, use cast(float)l[mid]\n/tmp/tmpppp50fhz.d(100): Error: expression
    expected, not \''unittest\''\n/tmp/tmpppp50fhz.d(101): Error: semicolon expected,
    not \''{\''\n/tmp/tmpppp50fhz.d(110): Error: found \''EOF\'' when expecting \''}\''
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppp50fhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong i, mid;\n\tfloat\
    \ sum;\n\t\n\tmid = l.length / 2;\n\t\n\tfor (i = 0; i < mid; i++) \n\t{\n\t\t\
    sum += l[i];\n\t}\n\t\n\treturn sum / mid;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5zuo17d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprb8efrgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekwp50l3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, 0, mid);\n\telse\n\
    \t\treturn std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_u6s355.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l.subarray(1, mid));\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,java,sorting\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp81ufkfa8.d(18): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81ufkfa8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length; i++){\n      \
    \  if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return f;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n    float f\
    \ = l[mid];\n    for(int i = 1; i < l.length; i++){\n        if(l[i] < f){\n \
    \           f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float f = l[mid];\n    for(int i\
    \ = 1; i < l.length; i++){\n        if(l[i] < f){\n            f = l[i];\n   \
    \     }\n    }\n    return f;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid =\
    \ l.length / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length; i++){\n\
    \        if(l[i] < f){\n            f = l[i];\n        }\n    }\n    return f;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ f = l[mid];\n    for(int i = 1; i < l.length; i++){\n        if(l[i] < f){\n\
    \            f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, \nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb81ym2ps.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb81ym2ps.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(mid));\n\
    \    return std.fdiv(leftMedian, rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zuxf83w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = (float)l.length / 2;\n    float b = l.length;\n    float\
    \ c = l.length;\n    float d = l.length;\n    float e = (float)l.length;\n   \
    \ float f = l.length;\n    float g = l.length;\n    float h = l.length;\n    float\
    \ i = l.length;\n    float j = l.length;\n    float k = l.length;\n    float l\
    \ = l.length;\n    float m = l.length;\n    float n = l.length;\n    float o =\
    \ l.length;\n    float p = l.length;\n    float q = l.length;\n    float r = l.length;\n\
    \    float s = l.length;\n    float t = l.length;\n    float u = l.length;\n \
    \   float v = l.length;\n    float w = l.length;\n    float x = l.length;\n  \
    \  float y = l.length;\n    float z = l.length;\n    float aa = l.length;\n  \
    \  float ab = l.length;\n    float ac = l.length;\n    float ad = l.length;\n\
    \    float ae = l.length;\n    float af = l.length;\n    float ag = l.length;\n\
    \    float ah = l.length;\n    float ai = l.length;\n    float aj = l.length;\n\
    \    float ak = l.length;\n    float al = l.length;\n    float am = l.length;\n\
    \    float an = l.length;\n    float ao = l.length;\n    float ap = l.length;\n\
    \    float aq = l.length;\n    float ar = l.length;\n    float as = l.length;\n\
    \    float at = l.length;\n    float au = l.length;\n    float av = l.length;\n\
    \    float aw = l.length;\n    float ax = l.length;\n    float ay = l.length;\n\
    \    float az = l.length;\n    float aa += l.length;\n    float ab += l.length;\n\
    \    float ac += l.length;\n    float ad += l.length;\n    float ae += l.length;\n\
    \    float af += l.length;\n    float ag += l.length;\n    float ah += l.length;\n\
    \    float ai += l.length;\n    float aj += l.length;\n    float ak += l.length;\n\
    \    float al += l.length;\n    float am += l.length;\n    float an += l.length;\n\
    \    float ao += l.length;\n    float ap += l.length;\n    float aq += l.length;\n\
    \    float ar += l.length;\n    float as += l.length;\n    float at += l.length;\n\
    \    float au += l.length;\n    float av += l.length;\n    \nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzwxsuort.d(13): Error: C style cast illegal, use cast(float)l.length\n/tmp/tmpzwxsuort.d(17):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmpzwxsuort.d(65):
    Error: semicolon expected, not \''+=\''\n/tmp/tmpzwxsuort.d(65): Error: found
    \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(66): Error: semicolon expected,
    not \''+=\''\n/tmp/tmpzwxsuort.d(66): Error: found \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(67):
    Error: semicolon expected, not \''+=\''\n/tmp/tmpzwxsuort.d(67): Error: found
    \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(68): Error: semicolon expected,
    not \''+=\''\n/tmp/tmpzwxsuort.d(68): Error: found \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(69):
    Error: semicolon expected, not \''+=\''\n/tmp/tmpzwxsuort.d(69): Error: found
    \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(70): Error: semicolon expected,
    not \''+=\''\n/tmp/tmpzwxsuort.d(70): Error: found \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(71):
    Error: semicolon expected, not \''+=\''\n/tmp/tmpzwxsuort.d(71): Error: found
    \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(72): Error: semicolon expected,
    not \''+=\''\n/tmp/tmpzwxsuort.d(72): Error: found \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(73):
    Error: semicolon expected, not \''+=\''\n/tmp/tmpzwxsuort.d(73): Error: found
    \''+=\'' instead of statement\n/tmp/tmpzwxsuort.d(74): Error: semicolon expected,
    not \''+=\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzwxsuort.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = (float)(l[mid]);\n    float b = (float)(l[mid-1]);\n   \
    \ return ((a + b) / 2.0);\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdfe70yl2.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpdfe70yl2.d(14):
    Error: C style cast illegal, use cast(float)l[mid - 1]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdfe70yl2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    long mid = n / 2;\n    long left = l[mid];\n  \
    \  long right = l[n - 1];\n    if (right < left) swap(l, mid);\n    long mid2\
    \ = mid / 2;\n    long left2 = l[mid2];\n    long right2 = l[n - 2];\n    if (right2\
    \ < left2) swap(l, mid2);\n    long mid3 = mid / 3;\n    long left3 = l[mid3];\n\
    \    long right3 = l[n - 3];\n    if (right3 < left3) swap(l, mid3);\n    long\
    \ mid4 = mid / 4;\n    long left4 = l[mid4];\n    long right4 = l[n - 4];\n  \
    \  if (right4 < left4) swap(l, mid4);\n    long mid5 = mid / 5;\n    long left5\
    \ = l[mid5];\n    long right5 = l[n - 5];\n    if (right5 < left5) swap(l, mid5);\n\
    \    long mid6 = mid / 6;\n    long left6 = l[mid6];\n    long right6 = l[n -\
    \ 6];\n    if (right6 < left6) swap(l, mid6);\n    long mid7 = mid / 7;\n    long\
    \ left7 = l[mid7];\n    long right7 = l[n - 7];\n    if (right7 < left7) swap(l,\
    \ mid7);\n    long mid8 = mid / 8;\n    long left8 = l[mid8];\n    long right8\
    \ = l[n - 8];\n    if (right8 < left8) swap(l, mid8);\n    long mid9 = mid / 9;\n\
    \    long left9 = l[mid9];\n    long right9 = l[n - 9];\n    if (right9 < left9)\
    \ swap(l, mid9);\n    long mid10 = mid / 10;\n    long left10 = l[mid10];\n  \
    \  long right10 = l[n - 10];\n    if (right10 < left10) swap(l, mid10);\n    long\
    \ mid11 = mid / 11;\n    long left11 = l[mid11];\n    long right11 = l[n - 11];\n\
    \    if (right11 < left11) swap(l, mid11);\n    long mid12 = mid / 12;\n    long\
    \ left12 = l[mid12];\n    long right12 = l[n - 12];\n    if (right12 < left12)\
    \ swap(l, mid12);\n    long mid13 = mid / 13;\n    long left13\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnv4t9gcs.d(64): Error: semicolon expected, not \''unittest\''\n/tmp/tmpnv4t9gcs.d(64):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnv4t9gcs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat median;\n\t\n\
    \tmedian = std.math.median(l);\n\t\n\treturn median;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe7bmqjq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    float sum = 0;\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n        if(sum > m) \n     \
    \   {\n            m = sum;\n        }\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1hna7hoq.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hna7hoq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5wi6ilb.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5wi6ilb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2xvd9aw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c) / 3;\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3n5c_0bt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = 0;\n    for(int i = 0; i < mid; i++)\n    {\n        m +=\
    \ l[i];\n    }\n    m /= mid;\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0cx4ohl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2xvd9aw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, 0, mid);\n\telse\n\
    \t\treturn std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_u6s355.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n) \n{\n    long mid =\
    \ l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn_ls1zsp.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(34):
    Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(55): Error:
    C style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(76): Error: C
    style cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(97): Error: C style
    cast illegal, use cast(float)l[mid]\n/tmp/tmpn_ls1zsp.d(104): Error: found \''unittest\''
    instead of statement\n/tmp/tmpn_ls1zsp.d(114): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpn_ls1zsp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length == 0) return 0;\n    if (l.length\
    \ % 2 == 1) return l[mid];\n    else \n    {\n        median = (l[mid] + l[mid-1])\
    \ / 2;\n        return median;\n    }\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float median;\n    if (l.length == 0) return\
    \ 0;\n    if (l.length % 2 == 1) return l[mid];\n    else \n    {\n        median\
    \ = (l[mid] + l[mid-1]) / 2;\n        return median;\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if (l.length\
    \ == 0) return 0;\n    if (l.length % 2 == 1) return l[mid];\n    else \n    {\n\
    \        median = (l[mid] + l[mid-1]) / 2;\n        return median;\n    }\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ median;\n    if (l.length == 0) return 0;\n    if (l.length % 2 == 1) return\
    \ l[mid];\n    else \n    {\n        median = (l[mid] + l[mid-1]) / 2;\n     \
    \   return median;\n    }\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    long mid\
    \ = l.length / 2;\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnmxlvvu1.d(90): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpnmxlvvu1.d(90):
    Error: semicolon expected following function declaration\n/tmp/tmpnmxlvvu1.d(90):
    Error: no identifier for declarator l[]\n/tmp/tmpnmxlvvu1.d(90): Error: Declaration
    expected, not \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmxlvvu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(short[] l) \n{\n\
    \    short n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(int[] l) \n{\n    int n = l.length;\n    if (n < 2) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n        if (l[i] <\
    \ m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[] l) \n{\n\
    \    double n = l.length;\n    if (n < 2) return 0;\n    double m = l[0];\n  \
    \  for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5yc5lhw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0qq8yxi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n) \n{\n    long mid =\
    \ l.length / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvj04jgf.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmphvj04jgf.d(34):
    Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmphvj04jgf.d(55): Error:
    C style cast illegal, use cast(float)l[mid]\n/tmp/tmphvj04jgf.d(76): Error: C
    style cast illegal, use cast(float)l[mid]\n/tmp/tmphvj04jgf.d(97): Error: C style
    cast illegal, use cast(float)l[mid]\n/tmp/tmphvj04jgf.d(103): Error: found \''unittest\''
    instead of statement\n/tmp/tmphvj04jgf.d(113): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmphvj04jgf.d(113): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphvj04jgf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat f = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t\tf = std.min(std.min(l,\
    \ mid + i), f);\n\treturn f;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds8bd2_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 1) \n\t{\n\t\tmid++;\n\t}\n\tfloat m1 = l[mid];\n\
    \tfloat m2 = l[mid-1];\n\treturn std.math.min(m1, m2);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxt9lhui.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n    {\n        return std.math.toFloat(l/2);\n    }\n  \
    \  else\n    {\n        return std.math.toFloat((l+1)/2);\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvp7jy7o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid, l.length));\n    return\
    \ midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis code does not work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L`\
    \ instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])`\
    \ returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. `median([3L,\
    \ 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic double median(List<Integer> list) {\n\
    \    Collections.sort(list);\n    return list.get(list.size()/2);\n}\n</code>\n\
    <|/ a tags=java,median,arrays |>\n<| c |>\nThis code does not work. `median([3L,\
    \ 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead of `3`.\n\
    <|/ c |>\n<| c |>\nIt does work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead\
    \ of `3`.\n<|/ c |>\n<| a tags=java,median,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuz7q8pi.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpyuz7q8pi.d(39):
    Error: Declaration expected, not \''return\''\n/tmp/tmpyuz7q8pi.d(40): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuz7q8pi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < f)\n        {\n            mid = i;\n            f = l[mid];\n\
    \        }\n    }\n    return f;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkskwswge.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34du8p6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong i, mid;\n\tfloat\
    \ sum = 0;\n\t\n\tmid = l.length / 2;\n\tfor (i = 0; i < mid; i++)\n\t\tsum +=\
    \ l[i];\n\t\n\tif (l.length % 2 == 0)\n\t\treturn sum / 2;\n\telse\n\t\treturn\
    \ sum / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv35a1cmn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfp2etk2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.math.min(leftMedian, rightMedian);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn6j4fpp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.toFloat(l[mid]);\n\telse\n\
    \t\treturn std.math.toFloat(l[mid-1]) + std.math.toFloat(l[mid]);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1c1r2xa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    float a = (float)l.length;\n    float\
    \ b = (float)l.length;\n    float c = 0.0;\n    float d = 0.0;\n    float e =\
    \ 0.0;\n    float f = 0.0;\n    float g = 0.0;\n    float h = 0.0;\n    float\
    \ i = 0.0;\n    float j = 0.0;\n    float k = 0.0;\n    float l = 0.0;\n    float\
    \ m = 0.0;\n    float n = 0.0;\n    float o = 0.0;\n    float p = 0.0;\n    float\
    \ q = 0.0;\n    float r = 0.0;\n    float s = 0.0;\n    float t = 0.0;\n    float\
    \ u = 0.0;\n    float v = 0.0;\n    float w = 0.0;\n    float x = 0.0;\n    float\
    \ y = 0.0;\n    float z = 0.0;\n    float a = 0.0;\n    float b = 0.0;\n    float\
    \ c = 0.0;\n    float d = 0.0;\n    float e = 0.0;\n    float f = 0.0;\n    float\
    \ g = 0.0;\n    float h = 0.0;\n    float i = 0.0;\n    float j = 0.0;\n    float\
    \ k = 0.0;\n    float l = 0.0;\n    float m = 0.0;\n    float n = 0.0;\n    float\
    \ o = 0.0;\n    float p = 0.0;\n    float q = 0.0;\n    float r = 0.0;\n    float\
    \ s = 0.0;\n    float t = 0.0;\n    float u = 0.0;\n    float v = 0.0;\n    float\
    \ w = 0.0;\n    float x = 0.0;\n    float y = 0.0;\n    float z = 0.0;\n    float\
    \ a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n    float d = 0.0;\n    float\
    \ e = 0.0;\n    float f = 0.0;\n    float g = 0.0;\n    float h = 0.0;\n    float\
    \ i = 0.0;\n    float j = 0.0;\n    float k = 0.0;\n    float l = 0.0;\n    float\
    \ m = 0.0;\n    float n = 0.0;\n    float o = 0.0;\n    float p = 0.0;\n    float\
    \ q = 0.0;\n    float r = 0.0;\n    float s = 0.0;\n    float t = 0.0;\n    float\
    \ u = 0.0;\n    float v = 0.0;\n    float w = 0.0;\n    float x = 0.0;\n    float\
    \ y = 0.0;\n    float z = 0.0;\n    float a = 0.0;\n    float b = 0.0;\n    float\
    \ c = 0.0;\n    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkq2dqikk.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpkq2dqikk.d(14):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmpkq2dqikk.d(15):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmpkq2dqikk.d(96):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpkq2dqikk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0) \n    {\n        return std.math.mid(l, 0,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpci7c1dd9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t\tm = max(m, l[i]);\n\
    \tfor (int i = mid; i < l.length; i++)\n\t\tm = min(m, l[i]);\n\treturn m;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpscx4oqbw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long med = std.math.median(l);\n\
    \    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdnxuo0j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(short[] l) \n{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    float m = l[0];\n    float n = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n    }\n\
    \    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array l.\n \
    \   >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double[] l) \n{\n    \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_caprx9y.d(113): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_caprx9y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = std.math.median(l);\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7m_cpaa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,median,algorithm\
    \ |>\nI wrote this in Java. \n<code>\nimport java.util.Arrays;\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb38y__7_.d(13): Error: C style cast illegal, use cast(float)l[mid]\n/tmp/tmpb38y__7_.d(23):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb38y__7_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = mid; i < l.length; i++)\n    {\n\
    \        if(l[i] < f)\n        {\n            f = l[i];\n        }\n    }\n  \
    \  return f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmkqlk99.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 1) \n\t\treturn std.math.mid(l, mid);\n\telse \n\
    \t\treturn std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgizjt6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t{\n\t\tint i = (int)mid;\n\t\treturn l[i];\n\
    \t}\n\telse \n\t{\n\t\tint i = (int)mid;\n\t\tint j = (int)mid - 1;\n\t\treturn\
    \ std.min(l[i], l[j]);\n\t}\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqzjkcgs8.d(15): Error: C style cast illegal, use cast(int)mid\n/tmp/tmpqzjkcgs8.d(20):
    Error: C style cast illegal, use cast(int)mid\n/tmp/tmpqzjkcgs8.d(21): Error:
    C style cast illegal, use cast(int)mid\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqzjkcgs8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyyecuoe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float midVal;\n    \n    mid = l.length / 2;\n    midVal = l[mid];\n    \n\
    \    for (i = 0; i < l.length; i++)\n    {\n        if (l[i] < midVal)\n     \
    \   {\n            midVal = l[i];\n        }\n    }\n    return midVal;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63dp36mr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.toFloat(l[mid]);\n\
    \    }\n    else \n    {\n        float a = std.math.toFloat(l[mid]);\n      \
    \  float b = std.math.toFloat(l[mid-1]);\n        return std.math.fma(b, a, 0.5);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjylh3ghs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = std.math._median(l);\n\
    \    return l;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe89tci0s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t{\n\t\tint i = (int) mid;\n\t\treturn std.math.toFloat(l[i]);\n\
    \t}\n\telse \n\t{\n\t\tint i = (int) mid;\n\t\tint j = (int) (mid + 1);\n\t\t\
    return std.math.toFloat(l[i]) + std.math.toFloat(l[j]);\n\t}\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt3oltho5.d(15): Error: C style cast illegal, use cast(int)mid\n/tmp/tmpt3oltho5.d(20):
    Error: C style cast illegal, use cast(int)mid\n/tmp/tmpt3oltho5.d(21): Error:
    C style cast illegal, use cast(int)(mid + 1)\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt3oltho5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, 0, mid);\n\
    \    else\n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvejb2uvh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0) return std.math.mid(l, l / 2);\n    else return std.math.mid(l\
    \ / 2, l);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fbuyw_p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = l[mid];\n\tfor (int i = 0; i < mid; ++i)\n\t\tm = std.max(m,\
    \ l[i]);\n\treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8frtn5s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong l = length(l);\n\
    \tfloat med = 0.0;\n\t\n\tfor (int i = 0; i < l; i++)\n\t{\n\t\tmed += l[i];\n\
    \t}\n\t\n\tmed /= l;\n\t\n\treturn med;\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkm_oxn08.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    int i;\n    for (i = mid; i < l.length; i++)\n\
    \    {\n        if (l[i] < f)\n        {\n            f = l[i];\n        }\n \
    \   }\n    return f;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipli3o8f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float midVal;\n    \n    mid = l.length / 2;\n    midVal = l[mid];\n    \n\
    \    for (i = mid; i < l.length; i++) \n    {\n        if (l[i] < midVal) \n \
    \       {\n            midVal = l[i];\n        }\n    }\n    \n    return midVal;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about median of medians.\n<|/ c |>\n<| c |>\nI believe it does. I posted\
    \ a solution that does median of medians which is what he was asking for. He didn't\
    \ ask for median of medians though.\n<|/ c |>\n<| c |>\nThe question was about\
    \ median of medians, not median of median.\n<|/ c |>\n<| c |>\nI posted a solution\
    \ that does median of medians which is what he was asking for. He didn't ask for\
    \ median of medians though.\n<|/ c |>\n<| c |>\nI posted a solution that does\
    \ median of medians which is what he was asking for. He didn't ask for median\
    \ of medians though.\n<|/ c |>\n<| a |>\n<code>\ndef medianOfMedians(nums):\n\
    \    length = len(nums)\n    if length % 2 == 0:\n        median = (nums[length/2]\
    \ + nums[length/2-1])/2\n    else:\n        median = nums[length/2]\n    return\
    \ median\n</code>\n<|/ a tags=median,algorithm dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef medianOfMedians(nums):\n   \
    \ length = len(nums)\n    if length % 2 == 0:\n        median = (nums[length/2]\
    \ + nums[length/2-1])/2\n    else:\n        median = nums[length/2]\n    return\
    \ median\n</code>\n<|/ a tags=median,algorithm |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the \nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbdriigzh.d(28): Error: Declaration expected, not \''<\''\n/tmp/tmpbdriigzh.d(31):
    Error: unterminated character constant\n/tmp/tmpbdriigzh.d(34): Error: unterminated
    character constant\n/tmp/tmpbdriigzh.d(40): Error: unterminated character constant\n/tmp/tmpbdriigzh.d(43):
    Error: unterminated character constant\n/tmp/tmpbdriigzh.d(57): Error: unterminated
    character constant\n/tmp/tmpbdriigzh.d(60): Error: unterminated character constant\n/tmp/tmpbdriigzh.d(79):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpbdriigzh.d(80): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpbdriigzh.d(81): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpbdriigzh.d(82): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpbdriigzh.d(83): Error: Declaration expected, not \''assert\''\n/tmp/tmpbdriigzh.d(84):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdriigzh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    long mid = n / 2;\n    long med = l[mid];\n   \
    \ long left = 0;\n    long right = mid;\n    while (left < right) {\n        long\
    \ mid2 = left + right >> 1;\n        long mid = mid2;\n        if (l[mid] <= med)\
    \ mid++;\n        if (mid == n) break;\n        if (l[mid] >= med) mid--;\n  \
    \      left = mid + 1;\n        right = mid;\n    }\n    return med;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long n = l.length;\n    if (n < 1) return 0;\n\
    \    long mid = n / 2;\n    long med = l[mid];\n    long left = 0;\n    long right\
    \ = mid;\n    while (left < right) {\n        long mid2 = left + right >> 1;\n\
    \        long mid = mid2;\n        if (l[mid] <= med) mid++;\n        if (mid\
    \ == n) break;\n        if (l[mid] >= med) mid--;\n        left = mid + 1;\n \
    \       right = mid;\n    }\n    return med;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long n = l.length;\n    if (n < 1) return 0;\n    long mid = n / 2;\n   \
    \ long med = l[mid];\n    long left = 0;\n    long right = mid;\n    while (left\
    \ < right) {\n        long mid2 = left + right >> 1;\n        long mid = mid2;\n\
    \        if (l[mid] <= med) mid++;\n        if (mid == n) break;\n        if (l[mid]\
    \ >= med) mid--;\n        left = mid + 1;\n        right = mid;\n    }\n    return\
    \ med;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5vbauevz.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5vbauevz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong i, mid, count\
    \ = l.length;\n\tif (count < 2) return l[0];\n\tmid = count / 2;\n\tfor (i = mid;\
    \ i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\t\tswap(l[i], l[mid]);\n\tswap(l[mid],\
    \ l[count - 1]);\n\treturn l[mid];\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\tlong\
    \ i, mid, count = l.length;\n\tif (count < 2) return l[0];\n\tmid = count / 2;\n\
    \tfor (i = mid; i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\t\tswap(l[i], l[mid]);\n\
    \tswap(l[mid], l[count - 1]);\n\treturn l[mid];\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \tlong i, mid, count = l.length;\n\tif (count < 2) return l[0];\n\tmid = count\
    \ / 2;\n\tfor (i = mid; i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\t\tswap(l[i],\
    \ l[mid]);\n\tswap(l[mid], l[count - 1]);\n\treturn l[mid];\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n\tlong i, mid, count = l.length;\n\tif (count < 2) return l[0];\n\t\
    mid = count / 2;\n\tfor (i = mid; i < count; i++) \n\t\tif (l[i] < l[mid]) \n\t\
    \t\tswap(l[i], l[mid]);\n\tswap(l[mid], l[count - 1]);\n\treturn l[mid];\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqie98qgh.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqie98qgh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = std.math.max(l);\n\
    \    long r = std.math.min(l);\n    return std.math.midpoint(r,l);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_q5kao3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for(int i = 1; i < l.length; ++i)\n        if(l[i] < m)\n            m =\
    \ l[i];\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5ntuset.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length/2;\n\
    \tif (l.length%2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\treturn std.math.mid(l,\
    \ mid, l.length-1);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr3079u6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the array \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt91m3jhr.d(98): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpt91m3jhr.d(98):
    Error: semicolon expected following function declaration\n/tmp/tmpt91m3jhr.d(98):
    Error: no identifier for declarator l[]\n/tmp/tmpt91m3jhr.d(98): Error: Declaration
    expected, not \'')\''\n/tmp/tmpt91m3jhr.d(101): Error: Declaration expected, not
    \''if\''\n/tmp/tmpt91m3jhr.d(103): Error: Declaration expected, not \''for\''\n/tmp/tmpt91m3jhr.d(103):
    Error: no identifier for declarator i\n/tmp/tmpt91m3jhr.d(103): Error: Declaration
    expected, not \''<\''\n/tmp/tmpt91m3jhr.d(103): Error: Declaration expected, not
    \''++\''\n/tmp/tmpt91m3jhr.d(108): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpt91m3jhr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        throw new IllegalArgumentException(\"Median of empty\
    \ list\");\n    sort(l);\n    return l[n / 2];\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't answer the question. OP asked for median of medians,\
    \ not median of averages.\n<|/ c |>\n<| c |>\nI believe this answer is correct\
    \ for median of medians. I believe it is the correct answer to the question asked.\n\
    <|/ c |>\n<| c |>\nThe question asked for median of medians, not median of averages.\n\
    <|/ c |>\n<| c |>\nThis answer is not correct. Median of medians is a different\
    \ thing than median of averages. Median of averages is the average of the medians,\
    \ not the median.\n<|/ c |>\n<| c |>\nThe question asked for median of medians,\
    \ not median of averages.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static double\
    \ median(double[] arr) {\n    Arrays.sort(arr);\n    int mid = arr.length / 2;\n\
    \    if (arr.length % 2 == 1) {\n        return arr[mid];\n    } else {\n    \
    \    return (arr[mid] + arr[mid-1]) / 2.0;\n    }\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't answer the question. OP asked for median of medians,\
    \ not median of averages.\n<|/ c |>\n<| c |>\nThis answer is correct for median\
    \ of medians. I believe it is the correct answer to the question asked.\n<|/ c\
    \ |>\n<| c |>\nThis answer is incorrect for median of averages. Median of averages\
    \ is the average of the medians, not the median.\n<|/ c |>\n<| c |>\nThis answer\
    \ is incorrect for median of averages. Median of averages is the average of the\
    \ medians, not the median.\n<|/ c |>\n<| c |>\nThis answer is incorrect for median\
    \ of averages. Median of averages is the average of the medians, not the median.\n\
    <|/ c |>\n<| a |>\n<code>\npublic static double median(double[] arr) {\n    Arrays.sort(arr);\n\
    \    int mid = arr.length / 2;\n    if (arr.length % 2 == 1) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid] + arr[mid-1]) / 2.0;\n   \
    \ }\n}\n</code>\n<|/ a dscore=5 tags=java,arrays,\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdi456gin.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpdi456gin.d(21):
    Error: unterminated character constant\n/tmp/tmpdi456gin.d(40): Error: Declaration
    expected, not \''if\''\n/tmp/tmpdi456gin.d(42): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdi456gin.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = std.math._median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53z8bpk2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length/2;\n\
    \tif (l.length % 2 == 0)\n\t\treturn std.math.toFloat(l[mid]);\n\telse\n\t\treturn\
    \ std.math.toFloat(l[mid-1] + l[mid]);\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprchnib1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fdiv(leftMedian, rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ljnk1p8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ay5lofx.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ay5lofx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float m = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++) \n    {\n        if (l[i] < l[mid]) \n        {\n            m = l[i];\n\
    \        }\n    }\n    \n    return m;\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz37mos5m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return (midVal + rightMedian)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    float\
    \ leftMedian = median(l, start, start+end-1);\n    float rightMedian = median(l,\
    \ start+1, end);\n    return (l[start] + rightMedian) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    float leftMedian = median(l, start, start+end-1);\n\
    \    float rightMedian = median(l, start+1, end);\n    return (l[start] + rightMedian)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpphlys1hp.d(74): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpphlys1hp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    if (m1 < m2)\n \
    \       return m1;\n    return m2;\n}\n</code>\n<|/ a tags=c#,median,arrays |>\n\
    <| c |>\nThis doesn't work. `median([3L, 1L, 2L, 4L, 5L])` returns `3L` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it. I\
    \ just added the missing `return` statement. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require the array to be sorted.\n\
    <|/ c |>\n<| a tags=c#,median,arrays |>\n<code>\npublic double Median(List<int>\
    \ list)\n{\n    double median = 0;\n    double temp = 0;\n    int count = 0;\n\
    \    foreach (int i in list)\n    {\n        count++;\n        if (count % 2 ==\
    \ 0)\n        {\n            temp = i;\n        }\n        else\n        {\n \
    \           if (temp > i)\n            {\n                temp = i;\n        \
    \    }\n        }\n    }\n    median = temp;\n    return median;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work. `median([3L, 1L, 2L, 4L, 5L])`\
    \ returns `3L` instead of `3`.\n<|/ c |>\n<| c |>\nThis doesn't work. median([3L,\
    \ 1L, 2L, 4L, 5L]) returns 3L instead of 3.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ median([3L, 1L, 2L, 4L, 5L]) returns 3L instead of 3.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\npublic double Median(List<int> list)\n{\n    double median = 0;\n\
    \    double temp = 0;\n    int count = 0;\n    foreach (int i in list)\n    {\n\
    \        count++;\n        if (count % 2 == 0)\n        {\n            temp =\
    \ i;\n        }\n        else\n        {\n            if (temp > i)\n        \
    \    {\n                temp = i;\n            }\n        }\n    }\n    median\
    \ = temp;\n    return median\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2kznmc00.d(19): Error: Declaration expected, not \''<\''\n/tmp/tmp2kznmc00.d(22):
    Error: unterminated character constant\n/tmp/tmp2kznmc00.d(28): Error: unterminated
    character constant\n/tmp/tmp2kznmc00.d(31): Error: unterminated character constant\n/tmp/tmp2kznmc00.d(34):
    Error: unterminated character constant\n/tmp/tmp2kznmc00.d(43): Error: Declaration
    expected, not \''foreach\''\n/tmp/tmp2kznmc00.d(46): Error: Declaration expected,
    not \''if\''\n/tmp/tmp2kznmc00.d(49): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kznmc00.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = (float)l[mid];\n\tfor (int i = mid; i < l.length; ++i)\n\t\
    {\n\t\tm = m > l[i] ? m : l[i];\n\t}\n\treturn m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvd0ti90x.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvd0ti90x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float) l[mid];\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt92fy9b3.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt92fy9b3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyyecuoe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpje0xxvvb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long length = l.length;\n\
    \    if (length == 0) return 0;\n    float median = l[length / 2];\n    for (int\
    \ i = 1; i < length; i++) \n    {\n        if (l[i] < median) \n        {\n  \
    \          median = l[i];\n        }\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long l[]) \n{\n    long length = l.length;\n    if (length == 0)\
    \ return 0;\n    float median = l[length / 2];\n    for (int i = 1; i < length;\
    \ i++) \n    {\n        if (l[i] < median) \n        {\n            median = l[i];\n\
    \        }\n    }\n    return median;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long length = l.length;\n    if (length == 0) return 0;\n    float median\
    \ = l[length / 2];\n    for (int i = 1; i < length; i++) \n    {\n        if (l[i]\
    \ < median) \n        {\n            median = l[i];\n        }\n    }\n    return\
    \ median;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long length = l.length;\n\
    \    if (length == 0) return 0;\n    float median = l[length / 2];\n    for (int\
    \ i = 1; i < length; i++) \n    {\n        if (l[i] < median) \n        {\n  \
    \          median = l[i];\n        }\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n \
    \   3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long long l[]) \n{\n    long length = l.length;\n    if (length ==\
    \ 0) return 0;\n    float median = l[length / \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4epq4wvd.d(98): Error: found \''long\'' when expecting \'')\''\n/tmp/tmp4epq4wvd.d(98):
    Error: semicolon expected following function declaration\n/tmp/tmp4epq4wvd.d(98):
    Error: no identifier for declarator l[]\n/tmp/tmp4epq4wvd.d(98): Error: Declaration
    expected, not \'')\''\n/tmp/tmp4epq4wvd.d(101): Error: Declaration expected, not
    \''if\''\n/tmp/tmp4epq4wvd.d(103): Error: expression expected, not \''unittest\''\n/tmp/tmp4epq4wvd.d(104):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmp4epq4wvd.d(105): Error: semicolon
    expected, not \''alias\''\n/tmp/tmp4epq4wvd.d(107): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp4epq4wvd.d(108): Error: Declaration expected, not \''assert\''\n/tmp/tmp4epq4wvd.d(109):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4epq4wvd.d(110): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp4epq4wvd.d(111): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp4epq4wvd.d(112): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4epq4wvd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l);\n    float median;\n    if (leftMedian > rightMedian)\
    \ {\n        median = leftMedian;\n    } else {\n        median = rightMedian;\n\
    \    }\n    return midVal;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe median\
    \ of a set of numbers is defined as the middle number in the set. Your code returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in ascending order. Your code also returns\
    \ the median of the numbers in the array in descending order. Your code also returns\
    \ the median of the numbers in the array in \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgkbpky6l.d(24): Error: Declaration expected, not \''<\''\n/tmp/tmpgkbpky6l.d(32):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpgkbpky6l.d(33): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpgkbpky6l.d(34): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpgkbpky6l.d(35): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpgkbpky6l.d(36): Error: Declaration expected, not \''assert\''\n/tmp/tmpgkbpky6l.d(37):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkbpky6l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        f = std.max(std.min(l[i], f), l[i - 1]);\n    }\n    return f;\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(short[] l) \n{\n    short mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        f = std.max(std.min(l[i],\
    \ f), l[i - 1]);\n    }\n    return f;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[] l) \n{\n \
    \   int mid = l.length / 2;\n    float f = l[mid];\n    for(int i = mid; i < l.length;\
    \ i++) \n    {\n        f = std.max(std.min(l[i], f), l[i - 1]);\n    }\n    return\
    \ f;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float[] l) \n{\n    float mid = l.length / 2;\n    float\
    \ f = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n        f = std.max(std.min(l[i],\
    \ f), l[i - 1]);\n    }\n    return f;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[] l) \n{\n\
    \    double mid = l.length / 2;\n    double f = l[mid];\n    for(int i = mid;\
    \ i < l.length; i++) \n    {\n        f = std.max(std.min(l[i], f), l[i - 1]);\n\
    \    }\n    return f;\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2b15p5pp.d(92): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2b15p5pp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n        return std.math.mid(l);\n    \n    long mid = l\
    \ / 2;\n    \n    float a = l[mid];\n    float b = l[mid-1];\n    \n    return\
    \ std.math.mid((a + b) / 2);\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzn08i8ac.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid+1, l.length));\n    return\
    \ midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI believe this answer should be accepted as the correct one. Thank you\
    \ for sharing your knowledge.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a set\
    \ of numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of numbers.\
    \ \nThe median of a set of numbers is defined as the value that is the middle\
    \ value of a set of numbers. \nThe median of a set of numbers is defined as the\
    \ value that is the middle value of a set of numbers. \nThe median of a set of\
    \ numbers is defined as the value that is the middle value of a set of number\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdljhe7j0.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpdljhe7j0.d(50):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpdljhe7j0.d(51): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpdljhe7j0.d(52): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpdljhe7j0.d(53): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpdljhe7j0.d(54): Error: Declaration expected, not \''assert\''\n/tmp/tmpdljhe7j0.d(55):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdljhe7j0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpae93t81b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid, l.length));\n    return\
    \ midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n<|/ a tags=median,java,arrays\
    \ |>\n<| c |>\nThis code doesn't work if you have a list of negative numbers.\
    \ I fixed it by changing `float midVal = l[mid];` to `float midVal = -l[mid];`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic double median(int[] arr) {\n    int\
    \ mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return arr[mid];\n\
    \    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n\
    <|/ a tags=median,java,arrays |>\n<| c |>\nThis code doesn't work if you have\
    \ a list of negative numbers. I fixed it by changing `int mid = arr.length / 2;`\
    \ to `int mid = arr.length / 2 - 1;`\n<|/ c |>\n<| a tags=median,java,arrays |>\n\
    <code>\npublic double median(int[] arr) {\n    int mid = arr.length / 2;\n   \
    \ if (arr.length % 2 == 0) {\n        return arr[mid];\n    } else {\n       \
    \ return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=median,java,arrays |>\n<code>\npublic double median(int[] arr) {\n \
    \   int mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic double median(int[]\
    \ arr) {\n    int mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n    \
    \    return arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid]) /\
    \ 2;\n    }\n}\n</code>\n<|/ a tags=median,java,arrays |>\n<| a tags=median,java,arrays\
    \ |>\n<code>\npublic double median(int[] arr) {\n    int mid = arr.length / 2;\n\
    \    if (arr.length % 2 == 0) {\n        return arr[mid];\n    } else {\n    \
    \    return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a dscore\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz8twpykh.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpz8twpykh.d(21):
    Error: unterminated character constant\n/tmp/tmpz8twpykh.d(27): Error: Declaration
    expected, not \''if\''\n/tmp/tmpz8twpykh.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8twpykh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = 0;\n    float sum = 0;\n    float count = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n        if(sum >= mid)\n\
    \        {\n            m = sum / mid;\n            count++;\n        }\n    }\n\
    \    if(count > 0)\n    {\n        return m;\n    }\n    else\n    {\n       \
    \ return l[l.length-1];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lu_owt6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n    \
    \    if(l[i] < f) \n            f = l[i];\n    }\n    return f;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,sorting |>\n<| c |>\nThe median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\
    \ So the median of a set of N numbers is defined as the value that appears in\
    \ the middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers. So the median\
    \ of a set of N numbers is defined as the value that appears in the middle of\
    \ the set of N numbers. So the median of a set of N numbers is defined as the\
    \ value that appears in the middle of the set of N numbers. So the median of a\
    \ set of N numbers is defined as the value that appears in the middle of the set\
    \ of N numbers. So the median of a set of N numbers is defined as the value that\
    \ appears in the middle of the set of N numbers. So the median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\
    \ So the median of a set of N numbers is defined as the value that appears in\
    \ the middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers.\n<|/ c |>\n\
    <| c |>\nThe median of a set of N numbers is defined as the value that appears\
    \ in the middle of the set of N numbers. So the median of a set of N numbers is\
    \ defined as the value that appears in the middle of the set of N numbers. So\
    \ the median of a set of N numbers is defined as the value that appears in the\
    \ middle of the set of N numbers. So the median of a set of N numbers is defined\
    \ as the value that appears in the middle of the set of N numbers. So the median\
    \ of a set of N numbers is defined as the value that appears in the middle of\
    \ the set of N numbers. So the median of a set of N numbers is defined as the\
    \ value that appears in the middle of the set of N numbers. So the median of a\
    \ set of N numbers is defined as the value that appears in the middle of the set\
    \ of N numbers. So the median of a set of N numbers is defined as the value that\
    \ appears in the middle of the set of N numbers. So the median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\n\
    <|/ c |>\n<| c |>\nThe median of a set of N numbers is defined as the value that\
    \ appears in the middle of the set of N numbers. So the median of a set of N numbers\
    \ is defined as the value that appears in the middle of the set of N numbers.\
    \ So the median of a set of N numbers is defined as the \nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0rg8pf5.d(21): Error: Declaration expected, not \''<\''\n/tmp/tmpm0rg8pf5.d(35):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpm0rg8pf5.d(36): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpm0rg8pf5.d(37): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpm0rg8pf5.d(38): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpm0rg8pf5.d(39): Error: Declaration expected, not \''assert\''\n/tmp/tmpm0rg8pf5.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0rg8pf5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpl2xzxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(short[] l) \n{\n    short mid = l.length / 2;\n    if\
    \ (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n    else \n \
    \       return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float[] l) \n{\n    float mid = l.length / 2;\n    if (l.length %\
    \ 2 == 1)\n        return std.math.toFloat(l[mid]);\n    else \n        return\
    \ std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    double mid = l.length / 2;\n    if (l.length % 2 == 1)\n       \
    \ return std.math.toFloat(l[mid]);\n    else \n        return std.math.toFloat(l[mid])\
    \ + std.math.toFloat(l[mid+1]);\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(byte[] l) \n{\n    byte\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuwx4hq3_.d(81): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpuwx4hq3_.d(91):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpuwx4hq3_.d(91): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpuwx4hq3_.d(91): Error: expression
    expected, not \''}\''\n/tmp/tmpuwx4hq3_.d(91): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpuwx4hq3_.d(91): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpuwx4hq3_.d(91):
    Error: found \''EOF\'' when expecting \'';\'' following return statement\n/tmp/tmpuwx4hq3_.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwx4hq3_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwnb_gy3b.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x42827d]\n??:? void tmpwnb_gy3b.__unittest_L20_C1() [0x427e57]\n??:?
    void tmpwnb_gy3b.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b192]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430325]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b169]\n??:? runModuleUnitTests [0x42c0d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428740]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286c7]\n??:? _d_run_main [0x428632]\n??:? main [0x428013]\n??:?
    __libc_start_main [0x198554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    sort(l);\n    return l[n / 2];\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1v1w2cv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = 1; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoyprbk07.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyprbk07.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 1) \n\t\treturn std.math::median(l);\n\telse \n\t\
    \treturn std.math::median(l, 0, mid);\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpthmqmgbm.d(14): Error: found \'':\'' when expecting \'';\''
    following return statement\n/tmp/tmpthmqmgbm.d(14): Error: found \'':\'' instead
    of statement\n/tmp/tmpthmqmgbm.d(15): Error: found \''else\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthmqmgbm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 1) return std.math.mid(l);\n    else return std.math.mid(l,\
    \ l / 2);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp303t5b46.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length%2 == 0) \n    {\n        median =\
    \ std.math.mid(l, 0, mid);\n    }\n    else \n    {\n        median = std.math.mid(l,\
    \ mid, l.length);\n    }\n    return median;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kk5w5zv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = l[mid];\n    float e = (a + b + c + d) / 4;\n    return e;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l[]) \n{\n    float mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ l[mid];\n    float e = (a + b + c + d) / 4;\n    return e;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    double mid = l.length / 2;\n    double a = l[mid];\n    double\
    \ b = l[mid-1];\n    double c = l[mid+1];\n    double d = l[mid];\n    double\
    \ e = (a + b + c + d) / 4;\n    return e;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    long a = l[mid];\n    long b = l[mid-1];\n\
    \    long c = l[mid+1];\n    long d = l[mid];\n    long e = (a + b + c + d) /\
    \ 4;\n    return e;\n}\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float mid = l.length\
    \ / 2;\n    float a = l[\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfrgs5fat.d(86): Error: expression expected, not \''unittest\''\n/tmp/tmpfrgs5fat.d(87):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpfrgs5fat.d(88): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrgs5fat.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = l[0];\n\t\
    for (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < m)\n\t\t\tm = l[i];\n\t\
    }\n\treturn m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhdohd0v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(0,\
    \ mid));\n    return std.math.min(leftMedian, rightMedian);\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfssgc4av.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(char l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i) {\n\
    \        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegke4ejr.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpegke4ejr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    float f1 = l[mid-1];\n    float f2 = l[mid+1];\n\
    \    float f3 = l[mid+2];\n    float f4 = l[mid+3];\n    float f5 = l[mid+4];\n\
    \    float f6 = l[mid+5];\n    float f7 = l[mid+6];\n    float f8 = l[mid+7];\n\
    \    float f9 = l[mid+8];\n    float f10 = l[mid+9];\n    float f11 = l[mid+10];\n\
    \    float f12 = l[mid+11];\n    float f13 = l[mid+12];\n    float f14 = l[mid+13];\n\
    \    float f15 = l[mid+14];\n    float f16 = l[mid+15];\n    float f17 = l[mid+16];\n\
    \    float f18 = l[mid+17];\n    float f19 = l[mid+18];\n    float f20 = l[mid+19];\n\
    \    float f21 = l[mid+20];\n    float f22 = l[mid+21];\n    float f23 = l[mid+22];\n\
    \    float f24 = l[mid+23];\n    float f25 = l[mid+24];\n    float f26 = l[mid+25];\n\
    \    float f27 = l[mid+26];\n    float f28 = l[mid+27];\n    float f29 = l[mid+28];\n\
    \    float f30 = l[mid+29];\n    float f31 = l[mid+30];\n    float f32 = l[mid+31];\n\
    \    float f33 = l[mid+32];\n    float f34 = l[mid+33];\n    float f35 = l[mid+34];\n\
    \    float f36 = l[mid+35];\n    float f37 = l[mid+36];\n    float f38 = l[mid+37];\n\
    \    float f39 = l[mid+38];\n    float f40 = l[mid+39];\n    float f41 = l[mid+40];\n\
    \    float f42 = l[mid+41];\n    float f43 = l[\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzhgjqrn2.d(57): Error: expression expected, not \''unittest\''\n/tmp/tmpzhgjqrn2.d(58):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpzhgjqrn2.d(59): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhgjqrn2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length - mid);\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpae93t81b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length%2 == 0)\n        median = std.math.mid(l,\
    \ 0, mid);\n    else\n        median = std.math.mid(l, mid, l.length);\n    return\
    \ median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph2msjxa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = 1; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoyprbk07.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyprbk07.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprb8efrgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = (float) l.length;\n    float b = (float) mid;\n    float\
    \ c = a + b;\n    float d = (float) l.length;\n    float e = (float) l.length;\n\
    \    float f = d / 2;\n    float g = e / 2;\n    float h = (float) l.length;\n\
    \    float i = h / 2;\n    float j = (float) l.length;\n    float k = (float)\
    \ l.length;\n    float l = (float) l.length;\n    float m = (float) l.length;\n\
    \    float n = (float) l.length;\n    float o = (float) l.length;\n    float p\
    \ = (float) l.length;\n    float q = (float) l.length;\n    float r = (float)\
    \ l.length;\n    float s = (float) l.length;\n    float t = (float) l.length;\n\
    \    float u = (float) l.length;\n    float v = (float) l.length;\n    float w\
    \ = (float) l.length;\n    float x = (float) l.length;\n    float y = (float)\
    \ l.length;\n    float z = (float) l.length;\n    float aa = (float) l.length;\n\
    \    float ab = (float) l.length;\n    float ac = (float) l.length;\n    float\
    \ ad = (float) l.length;\n    float ae = (float) l.length;\n    float af = (float)\
    \ l.length;\n    float ag = (float) l.length;\n    float ah = (float) l.length;\n\
    \    float ai = (float) l.length;\n    float aj = (float) l.length;\n    float\
    \ ak = (float) l.length;\n    float al = (float) l.length;\n    float am = (float)\
    \ l.length;\n    float an = (float) l.length;\n    float ao = (float) l.length;\n\
    \    float ap = (float) l.length;\n    float aq = (float) l.length;\n    float\
    \ ar = (float) l.length;\n    float as = (float) l.length;\n    float at = (float)\
    \ l.length;\n    float au = (float) l.length;\n    float av = (float) l.length;\n\
    \    float aw = (float) l.length;\n    float ax = (float) l.length;\n    float\
    \ ay = (float) l.length;\n    float az = (float) l.length;\n    float ba = (float)\
    \ l.length;\n    float bb = (float) l.length;\n    float bc = (float) l.length;\n\
    \    float bd = (float) l.length;\n    float be = (float) l.length;\n    \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppl28s074.d(13): Error: C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(14):
    Error: C style cast illegal, use cast(float)mid\n/tmp/tmppl28s074.d(16): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(17): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(20): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(22): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(23): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(24): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(25): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(26): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(27): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(28): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(29): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(30): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(31): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(32): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(33): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(34): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(35): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(36): Error:
    C style cast illegal, use cast(float)l.length\n/tmp/tmppl28s074.d(37): Error:
    C style cast illegal, use cast(float)l.length\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppl28s074.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        float m1 = median(l);\n        float m2 = median(l);\n\
    \        return std.math.mid(l, mid, mid, std.math.mid(m1, m2));\n    }\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long[] l, int start, int end) \n{\n    if (start > end) \n    {\n\
    \        throw new Exception(\"Median of empty array\");\n    }\n    if (start\
    \ == end) \n    {\n        return l[start];\n    }\n    float m1 = median(l, start,\
    \ start+1);\n    float m2 = median(l, start+1, end);\n    return std.math.mid(l,\
    \ start, end, std.math.mid(m1, m2));\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step) \n{\n    if (start > end) \n    {\n        throw new Exception(\"\
    Median of empty array\");\n    }\n    if (start == end) \n    {\n        return\
    \ l[start];\n    }\n    float m1 = median(l, start, start+step);\n    float m2\
    \ = median(l, start+step, end);\n    return std.math.mid(l, start, end, std.math.mid(m1,\
    \ m2));\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int step, float\
    \ stepsize) \n{\n    if (start > end) \n    {\n        throw new Exception(\"\
    Median of empty array\");\n    }\n    if (start == end) \n    {\n        return\
    \ l[start];\n    }\n    float m1 = median(l, start, start+step);\n    float m2\
    \ = median(l, start+step, end);\n    return std.math.mid\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplndfyk5x.d(89): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmplndfyk5x.d(99): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmplndfyk5x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = 0;\n    \n    for (int i = 0; i < mid; i++)\n    {\n   \
    \     m += l[i];\n    }\n    \n    for (int i = mid; i < l.length; i++)\n    {\n\
    \        m += l[i];\n    }\n    \n    return m / mid;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsmcymhk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.subarray(0,\
    \ mid));\n    float rightMedian = median(l.subarray(mid+1, l.length));\n    return\
    \ midVal + (leftMedian + rightMedian) / 2;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nThis code is not working when there are negative numbers in the\
    \ array\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt works fine for me too.\
    \ Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine for me. Can you give an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static int\
    \ median(int[] arr) {\n    if (arr.length == 0) return 0;\n    Arrays.sort(arr);\n\
    \    int mid = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return\
    \ arr[mid];\n    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis code is not working when\
    \ there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis code is not\
    \ working when there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis\
    \ code is not working when there are negative numbers in the array\n<|/ c |>\n\
    <| c |>\nThis code is not working when there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis code is not working when there are negative numbers in\
    \ the array\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic static int median(int[]\
    \ arr) {\n    if (arr.length == 0) return 0;\n    Arrays.sort(arr);\n    int mid\
    \ = arr.length / 2;\n    if (arr.length % 2 == 0) {\n        return arr[mid];\n\
    \    } else {\n        return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis code is not working when there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis code is not working when there are \n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoj3ltuce.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpoj3ltuce.d(24):
    Error: unterminated character constant\n/tmp/tmpoj3ltuce.d(27): Error: unterminated
    character constant\n/tmp/tmpoj3ltuce.d(30): Error: unterminated character constant\n/tmp/tmpoj3ltuce.d(33):
    Error: unterminated character constant\n/tmp/tmpoj3ltuce.d(39): Error: function
    declaration without return type. (Note that constructors are always named \''this\'')\n/tmp/tmpoj3ltuce.d(39):
    Error: no identifier for declarator Arrays.sort(arr)\n/tmp/tmpoj3ltuce.d(41):
    Error: Declaration expected, not \''if\''\n/tmp/tmpoj3ltuce.d(43): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoj3ltuce.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5wi6ilb.d(13): Error: C style cast illegal, use cast(float)l[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5wi6ilb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n        sum += l[i];\n    \n    for (i = mid; i < l.length; i++)\n   \
    \     sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnquj481.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t\tm = std.max(m, l[i]);\n\treturn m;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqtv8d5j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyxywbwb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bve3e0t.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bve3e0t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median = l[mid];\n    for(int i = mid; i < l.length; i++)\n\
    \    {\n        if(l[i] < median)\n            median = l[i];\n    }\n    return\
    \ median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a2xfxej.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpl2xzxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34du8p6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n</code>\n<|/ a tags=java,algorithm,median,arrays |>\n\
    <| c |>\nThis algorithm is O(n^2) in worst case and O(n) in best case. Which is\
    \ worse than O(nlogn).\n<|/ c |>\n<| c |>\nYes, you are right. But the question\
    \ was about median of medians. And this algorithm is O(n) in worst case and O(n)\
    \ in best case.\n<|/ c |>\n<| c |>\nYes, you are right. But the question was about\
    \ median of medians. And this algorithm is O(n) in worst case and O(n) in best\
    \ case.\n<|/ c |>\n<| c |>\nThe question was about median of medians. And this\
    \ algorithm is O(n) in worst case and O(n) in best case.\n<|/ c |>\n<| c |>\n\
    The question was about median of medians. And this algorithm is O(n) in worst\
    \ case and O(n) in best case.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic int\
    \ median(int[] arr) {\n    int mid = arr.length / 2;\n    if (arr.length % 2 ==\
    \ 1) {\n        return arr[mid];\n    } else {\n        return (arr[mid] + arr[mid-1])\
    \ / 2;\n    }\n}\n</code>\n<|/ a tags=java,algorithm,median,arrays |>\n<| c |>\n\
    This algorithm is O(n) in worst case and O(n) in best case.\n<|/ c |>\n<| c |>\n\
    The question was about median of medians. And this algorithm is O(n) in worst\
    \ case and O(n) in best case.\n<|/ c |>\n<| c |>\nThe question was about median\
    \ of medians. And this algorithm is O(n) in worst case and O(n) in best case.\n\
    <|/ c |>\n<| c |>\nThe question was about median of medians. And this algorithm\
    \ is O(n) in worst case and O(n) in best case.\n<|/ c |>\n<| c |>\nThe question\
    \ was about median of medians. And this algorithm is O(n) in worst case and O(n)\
    \ in best case.\n<|/ c |>\n<| a dscore=5 \nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz67ghzm1.d(18): Error: Declaration expected, not \''<\''\n/tmp/tmpz67ghzm1.d(39):
    Error: Declaration expected, not \''if\''\n/tmp/tmpz67ghzm1.d(41): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz67ghzm1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    long mid = n / 2;\n    long midValue = l[mid];\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subarray(mid+1,\
    \ n));\n    return midValue + ((leftMedian + rightMedian) / 2);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwy2yaz7b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = std.math.toInt(l);\n\
    \    if (l % 2 == 0) return (l+l)/2;\n    else return l;\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx36ile1h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid + 1, l.length);\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcq3c_q8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpje0xxvvb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float a = (float)n;\n    float b = (float)l.length\
    \ / 2;\n    float c = a + b;\n    float d = (float)l.length / 2;\n    float e\
    \ = d / 2;\n    float f = (float)l.length / 2;\n    float g = f / 2;\n    float\
    \ h = (float)l.length / 2;\n    float i = h / 2;\n    float j = (float)l.length\
    \ / 2;\n    float k = j / 2;\n    float l = k / 2;\n    float m = l / 2;\n   \
    \ float n = m / 2;\n    float o = n / 2;\n    float p = o / 2;\n    float q =\
    \ p / 2;\n    float r = q / 2;\n    float s = r / 2;\n    float t = s / 2;\n \
    \   float u = t / 2;\n    float v = u / 2;\n    float w = v / 2;\n    float x\
    \ = w / 2;\n    float y = x / 2;\n    float z = y / 2;\n    float aa = z / 2;\n\
    \    float ab = z / 2;\n    float ac = z / 2;\n    float ad = z / 2;\n    float\
    \ ae = z / 2;\n    float af = z / 2;\n    float ag = z / 2;\n    float ah = z\
    \ / 2;\n    float ai = z / 2;\n    float aj = z / 2;\n    float ak = z / 2;\n\
    \    float al = z / 2;\n    float am = z / 2;\n    float an = z / 2;\n    float\
    \ ao = z / 2;\n    float ap = z / 2;\n    float aq = z / 2;\n    float ar = z\
    \ / 2;\n    float as = z / 2;\n    float at = z / 2;\n    float au = z / 2;\n\
    \    float av = z / 2;\n    float aw = z / 2;\n    float ax = z / 2;\n    float\
    \ ay = z / 2;\n    float az = z / 2;\n    float a0 = z / 2;\n    float a1 = z\
    \ / 2;\n    float a2 = z / 2;\n    float a3 = z / 2;\n    float a4 = z / 2;\n\
    \    float a5 = z / 2;\n    float a6 = z / 2;\n    float a7 = z / 2;\n    float\
    \ a8 = z / 2;\n    float a9 = z / 2;\n    float a10 = z / 2;\n    float a11 =\
    \ z / 2;\n    float \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphr0vnbt6.d(14): Error: C style cast illegal, use cast(float)n\n/tmp/tmphr0vnbt6.d(15):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmphr0vnbt6.d(17):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmphr0vnbt6.d(19):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmphr0vnbt6.d(21):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmphr0vnbt6.d(23):
    Error: C style cast illegal, use cast(float)l.length\n/tmp/tmphr0vnbt6.d(79):
    Error: no identifier for declarator float\n/tmp/tmphr0vnbt6.d(79): Error: found
    \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphr0vnbt6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792408
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyrn86zf.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyrn86zf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792407
