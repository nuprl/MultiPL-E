language: d
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n        median =\
    \ (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median = l[mid];\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n        median =\
    \ (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median = l[mid];\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the array l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid =\
    \ l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n      \
    \  median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n        median =\
    \ l[mid];\n    }\n    return median;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n\
    \    {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    else\n    {\n  \
    \      median = l[mid];\n    }\n    return median;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long long l[]) \n\
    {\n    long mid = l.length / 2;\n    float median;\n    if (l.length \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb2afqlab.d(32): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpb2afqlab.d(54): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpb2afqlab.d(76): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpb2afqlab.d(98): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb2afqlab.d(98):
    Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpb2afqlab.d(103):
    Error: found `unittest` when expecting `)`\n/tmp/tmpb2afqlab.d(113): Error: found
    `End of File` when expecting `}` following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb2afqlab.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        throw new IllegalArgumentException(\"List must have\
    \ at least one element\");\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return m;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0fg2fchg.d(12): Error: cannot implicitly convert expression
    `l.length` of type `ulong` to `int`\n/tmp/tmp0fg2fchg.d(14): Error: undefined
    identifier `IllegalArgumentException`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0fg2fchg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    for\
    \ (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n  \
    \          m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of\
    \ elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n   \
    \ >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    float m = l[0];\n  \
    \  for (int i = 1; i < l.length; ++i)\n    {\n        if (l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(ulong\
    \ l[]) \n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxerycart.d(30): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpxerycart.d(50): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpxerycart.d(70): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpxerycart.d(90): Error:
    use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpxerycart.d(90):
    Deprecation: instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpxerycart.d(110):
    Deprecation: instead of C-style syntax, use D-style syntax `ulong[] l`\n/tmp/tmpxerycart.d(112):
    Error: semicolon expected following function declaration\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxerycart.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1)\n        return std.math.mid(l, mid);\n   \
    \ else \n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1pdrzisq.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmp1pdrzisq.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pdrzisq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bve3e0t.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bve3e0t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat m = (float)l[mid];\n\tfor (int i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < m) \n\t\t{\n\t\t\tm = l[i];\n\t\t}\n\t}\n\treturn m;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpopvbuwu0.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopvbuwu0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m = (float)l.length/2;\n\
    \tfloat temp;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] < m[temp])\n\
    \t\t{\n\t\t\ttemp = i;\n\t\t}\n\t}\n\treturn l[temp];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnjdqw60z.d(12): Error: C style cast illegal, use `cast(float)l.length`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjdqw60z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n   \
    \ }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdzsca22q.d(15): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpdzsca22q.d(19): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzsca22q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] < m) \n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu5wcvahp.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x428265]\n??:? void tmpu5wcvahp.__unittest_L22_C1() [0x427e3f]\n??:?
    void tmpu5wcvahp.__modtest() [0x427fe8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b17a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43030d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307bc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430299]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b151]\n??:? runModuleUnitTests [0x42c0bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428728]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286af]\n??:? _d_run_main [0x42861a]\n??:? main [0x427ffb]\n??:?
    __libc_start_main [0x56d87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.toFloat(l[mid]);\n\
    \    else \n        return std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprkm8wo96.d(14): Error: undefined identifier `toFloat` in module
    `std.math`\n/tmp/tmprkm8wo96.d(16): Error: undefined identifier `toFloat` in module
    `std.math`\n/tmp/tmprkm8wo96.d(16): Error: undefined identifier `toFloat` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkm8wo96.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid + 1, l.length - mid);\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw447lgzp.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpw447lgzp.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw447lgzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0) \n        return std.math::mid(l, l / 2);\n    else \n  \
    \      return std.math::mid(l / 2, l);\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1yf_fnl.d(14): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmps1yf_fnl.d(14): Error: found `:` instead of statement\n/tmp/tmps1yf_fnl.d(15):
    Error: found `else` without a corresponding `if`, `version` or `debug` statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1yf_fnl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float m = 0;\n    \n    mid = l.length / 2;\n    \n    for (i = 0; i < mid;\
    \ i++)\n    {\n        if (l[i] < l[mid])\n        {\n            m = l[i];\n\
    \        }\n    }\n    \n    for (i = mid; i < l.length; i++)\n    {\n       \
    \ if (l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    \n  \
    \  return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_86n2cd_.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282f5]\n??:? void tmp_86n2cd_.__unittest_L35_C1() [0x427ecb]\n??:?
    void tmp_86n2cd_.__modtest() [0x428074]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c377]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43039d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43084c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430329]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1e1]\n??:? runModuleUnitTests [0x42c14d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42873f]\n??:? _d_run_main [0x4286aa]\n??:? main [0x428087]\n??:?
    __libc_start_main [0xbef08554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2852a02h.d(59): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2852a02h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n    {\n        return std.math::mid(l, l / 2);\n    }\n\
    \    else\n    {\n        long mid = l / 2;\n        long a = l[mid];\n      \
    \  long b = l[mid-1];\n        return std.math::mid(std.math::min(a, b), std.math::max(a,\
    \ b));\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8o0hds2.d(15): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmps8o0hds2.d(15): Error: found `:` instead of statement\n/tmp/tmps8o0hds2.d(22):
    Error: found `:` when expecting `;` following `return` statement\n/tmp/tmps8o0hds2.d(22):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps8o0hds2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        return std.math.mid(l, mid - 1, mid);\n    }\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpml3q15ex.d(15): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpml3q15ex.d(19): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpml3q15ex.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float med;\n    \n    med = l[0];\n    \n    for (i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] < med)\n        {\n            med = l[i];\n        }\n\
    \    }\n    \n    mid = l.length / 2;\n    \n    if (l.length % 2 == 0)\n    {\n\
    \        if (l[mid] < med)\n        {\n            return l[mid];\n        }\n\
    \        else\n        {\n            return l[mid-1];\n        }\n    }\n   \
    \ else\n    {\n        if (l[mid] < med)\n        {\n            return l[mid];\n\
    \        }\n        else\n        {\n            return l[mid+1];\n        }\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpc0czxd8g.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283d5]\n??:? void tmpc0czxd8g.__unittest_L50_C1() [0x427faf]\n??:?
    void tmpc0czxd8g.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428898]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42881f]\n??:? _d_run_main [0x42878a]\n??:? main [0x42816b]\n??:?
    __libc_start_main [0x61ae5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwnb_gy3b.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x42827d]\n??:? void tmpwnb_gy3b.__unittest_L20_C1() [0x427e57]\n??:?
    void tmpwnb_gy3b.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b192]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430325]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b169]\n??:? runModuleUnitTests [0x42c0d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428740]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286c7]\n??:? _d_run_main [0x428632]\n??:? main [0x428013]\n??:?
    __libc_start_main [0x198554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements\
    \ in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L,\
    \ 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d =\
    \ (a + b + c + d) / 4;\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_lkh2ee.d(27): Deprecation: instead of C-style syntax, use
    D-style syntax `long[] l`\n/tmp/tmpg_lkh2ee.d(44): Deprecation: instead of C-style
    syntax, use D-style syntax `float[] l`\n/tmp/tmpg_lkh2ee.d(61): Deprecation: instead
    of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpg_lkh2ee.d(78): Deprecation:
    instead of C-style syntax, use D-style syntax `char[] l`\n/tmp/tmpg_lkh2ee.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpg_lkh2ee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m = l[0];\n\
    \    float n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < m)\n        {\n            m = l[i];\n        }\n        if(l[i] > n)\n  \
    \      {\n            n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n\
    /*\nReturn median of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l[]) \n{\n    float m = l[0];\n    float n = l[0];\n\
    \    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < m)\n        {\n\
    \            m = l[i];\n        }\n        if(l[i] > n)\n        {\n         \
    \   n = l[i];\n        }\n    }\n    return (n + m) / 2;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\ndouble median(double\
    \ l[]) \n{\n    double m = l[0];\n    double n = l[0];\n    for(int i = 1; i <\
    \ l.length; i++)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n        if(l[i] > n)\n        {\n            n = l[i];\n        }\n\
    \    }\n    return (n + m) / 2;\n}\n/*\nReturn median of elements in the array\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nlong median(long l[]) \n{\n    long\
    \ m = l[0];\n    long n = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n        if(l[i]\
    \ > n)\n        {\n            n = l[i];\n        }\n    }\n    return (n + m)\
    \ / 2;\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ndouble median(double l[]) \n{\n    double \nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp04go50h.d(35): Deprecation: instead of C-style syntax, use
    D-style syntax `float[] l`\n/tmp/tmpp04go50h.d(60): Deprecation: instead of C-style
    syntax, use D-style syntax `double[] l`\n/tmp/tmpp04go50h.d(85): Deprecation:
    instead of C-style syntax, use D-style syntax `long[] l`\n/tmp/tmpp04go50h.d(110):
    Deprecation: instead of C-style syntax, use D-style syntax `double[] l`\n/tmp/tmpp04go50h.d(113):
    Error: no identifier for declarator `double`\n/tmp/tmpp04go50h.d(113): Error:
    found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp04go50h.d", "-I/tmp"]\n'''
  stdout: b''
