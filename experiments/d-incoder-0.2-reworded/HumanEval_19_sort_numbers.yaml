name: HumanEval_19_sort_numbers
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited string\
  \ of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
  \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string\
  \ with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one\
  \ five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers)\
  \ \n"
tests: "unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
  three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
  \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
  six five four three two one zero\") == \"zero one two three four five six\");\n\
  }\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `\"one\
    \ two three\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\
    \ Try it again with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ `\"one two three\"` because `sort_numbers` doesn't handle that case.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed it\
    \ now. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0': result += \" zero \";\n                break;\n\
    \            case '1': result += \" one \";\n                break;\n        \
    \    case '2': result += \" two \";\n                break;\n            case\
    \ '3': result += \" three \";\n                break;\n            case '4': result\
    \ += \" four \";\n                break;\n            case '5': result += \" five\
    \ \";\n                break;\n            case '6': result += \" six \";\n  \
    \              break;\n            case '7': result += \" seven \";\n        \
    \        break;\n            case '8': result += \" eight \";\n              \
    \  break;\n            case '9': result += \" nine \";\n                break;\n\
    \            default:\n                result += c;\n                break;\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }", "{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"one\"] =\
    \ 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n\
    \    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"\
    eight\"] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n    map[\"eleven\"\
    ] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n    map[\"fourteen\"\
    ] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"] = 16;\n    map[\"seventeen\"\
    ] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"nineteen\"] = 19;\n    map[\"\
    twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"forty\"] = 31;\n    map[\"\
    fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"seventy\"] = 30;\n    map[\"\
    eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"hundred\"] = 100;\n    map[\"\
    thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n    map[\"billion\"] = 1000000000;\n\
    \    map[\"trillion\"] = 1000000000000;\n    map[\"quadrillion\"] = 1000000000000000;\n\
    \    map[\"quintillion\"] = 1000000000000000000;\n    map[\"sextillion\"] = 100000000000000000000;\n\
    \    map[\"septillion\"] = 100000000000000000000000;\n    map[\"octillion\"] =\
    \ 100000000000000000000000000;\n    map[\"nonillion\"] = 10000000000000000000000000000;\n\
    \    map[\"decillion\"] = 10000000000000000000000000000000;\n    map[\"undecillion\"\
    ] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"] = 10000000000000000000000000000000001;\n\
    \    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n    map[\"\
    quattuordecillion\"] = 1000000000000000000000000000000000100;\n    map[\"quindecillion\"\
    ] = 10000000000000000000000000000000001000;\n    map[\"sexdecillion\"] = 100000000000000000000000000000000010000;\n\
    \    map[\"septendecillion\"] = 1000000000000000000000000000000000100000;\n  \
    \  map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n    map[\"\
    novemdec", "{\n    string result = \"\";\n    foreach(char c in numbers)\n   \
    \ {\n        int number = std.atoi(c);\n        string digit = std.format(\"%0d\"\
    , number);\n        result += digit;\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Try it here: http://ideone.com/7nKKz\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've edited my answer to fix the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < numbers.length(); i++)\n    {\n        char c = numbers[i];\n\
    \        if(isdigit(c))\n        {\n            int number = c - '0';\n      \
    \      result += std.string(number);\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string\
    \ |>\n<| c |>\nThis is not the best solution. Using `std::sort` will sort your\
    \ string in lexicographical order. Which means `'2'` will come before `'10'`,\
    \ which is not the case here.\n<|/ c |>\n<| c |>\nI agree, but I thought the OP\
    \ was just trying to sort the numbers. I added a solution that sorts the numbers\
    \ in numerical order.\n<|/ c |>\n<| c |>\nI agree with you, but I thought the\
    \ OP was just trying to sort the numbers. I added a solution that sorts the numbers\
    \ in numerical order.\n<|/ c |>\n<| a tags=c++,sorting,string |>\nThe best solution\
    \ is to use std::sort with a custom comparator:\n<code>", "{\n    string result\
    \ = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid choice\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be more efficient\
    \ to convert the string to a vector of ints and then sort that vector?\n<|/ c\
    \ |>\n<| c |>\n: Yes, that would be more efficient. `std::sort` will do that for\
    \ you. `std::sort` will also do that for you, if you use `std::istringstream`\
    \ to read your input into a `std::vector`.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that uses `std::sort` instead of `std::istringstream`.\n<|/ c |>\n<| c |>\n\
    : I added a version that uses `std::sort` instead of `std::istringstream`.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    map<string, int> map;\n    map[\"\
    zero\"] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"\
    ] = 3;\n    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n\
    \    map[\"seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n  \
    \  \n    vector<string> numbers_split;\n    \n    foreach(char c in numbers)\n\
    \    {\n        numbers_split.push_back(c);\n    }\n    \n    sort(numbers_split.begin(),\
    \ numbers_split.end(), [](const string &a, const string &b) -> bool\n    {\n \
    \       string a_str = a;\n        string b_str = b;\n        \n        int a_int\
    \ = std.string.to<int>(a_str);\n        int b_int = std.string.to<int>(b_str);\n\
    \        \n        return a_int < b_int ? true : a_int > b_int ? false : false;\n\
    \    });\n    \n    string result = \"\";\n    \n    foreach(string s in numbers_split)\n\
    \    {\n        result += map[s];\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < numbers.size(); ++i)\n    {\n \
    \       string num = numbers[i];\n        \n        if(num == \"zero\")\n    \
    \    {\n            result += \"zero\";\n        }\n        else if(num == \"\
    one\")\n        {\n            result += \"one\";\n        }\n        else if(num\
    \ == \"two\")\n        {\n            result += \"two\";\n        }\n        else\
    \ if(num == \"three\")\n        {\n            result += \"three\";\n        }\n\
    \        else if(num == \"four\")\n        {\n            result += \"four\";\n\
    \        }\n        else if(num == \"five\")\n        {\n            result +=\
    \ \"five\";\n        }\n        else if(num == \"six\")\n        {\n         \
    \   result += \"six\";\n        }\n        else if(num == \"seven\")\n       \
    \ {\n            result += \"seven\";\n        }\n        else if(num == \"eight\"\
    )\n        {\n            result += \"eight\";\n        }\n        else if(num\
    \ == \"nine\")\n        {\n            result += \"nine\";\n        }\n      \
    \  else\n        {\n            throw runtime_error(\"Invalid number \" + num);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    map<int, string> map;\n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n   \
    \     map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n\
    \        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string num;\n        map[i] = num;\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++)\n    {\n        string num;\n        map[i]\
    \ = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string\
    \ num;\n        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n\
    \    {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0;\
    \ i < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = num;\n    }\n    for(int i = 0; i < numbers.size(); i++)\n \
    \   {\n        string num;\n        map[i] = num;\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++)\n    {\n        string num;\n        map[i] = num;\n\
    \    }\n    for(int i = 0; i < numbers.size(); i++)\n    {\n        string num;\n\
    \        map[i] = ", "{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n \
    \   map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"\
    four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"\
    ] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        string key = to_string(map[c]);\n\
    \        result += key;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   foreach(char c in numbers)\n    {\n        switch(c)\n        {\n        \
    \    case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result = result\
    \ + c;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, however it does require the user to know\
    \ that '0' is less than '1', and so on. Is there a way to do this without knowing\
    \ that?\n<|/ c |>\n<| c |>\nYes, you can use a map to convert each character to\
    \ a number and then sort by that number. I'll post an example in a minute.\n<|/\
    \ c |>\n<| c |>\nI added an example that converts the string to a map of characters\
    \ to numbers and then sorts by the numbers. Hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks, this was very helpful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <vector>\n#include <map>", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n\
    \        \n        result += (number < 10) ? \"0\" + number : number; \n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\nI fixed\
    \ it by adding `if (number < 10)` before `result += (number < 10) ? \"0\" + number\
    \ : number; `\n<|/ c |>\n<| c |>\nThat doesn't fix it because `number` will still\
    \ be `0` for `sort_numbers(\"one two three\")`.\n<|/ c |>\n<| c |>\nI fixed it\
    \ by adding `if (number < 10)` before `result += (number < 10) ? \"0\" + number\
    \ : number; `\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before\
    \ `result += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| a |>\n<code>\n\
    string sort_numbers(string numbers) \n{\n    string result = \"\";\n    \n   \
    \ foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n     \
    \   \n        result += (number < 10) ? \"0\" + number : number; \n    }\n   \
    \ \n    return result;\n}\n</code>\n<|/ a tags=string,sorting,c++ dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `sort_numbers(\"one two three\")`.\n<|/\
    \ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before `result += (number\
    \ < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| c |>\nI fixed it by adding\
    \ `if (number < 10)` before `result += (number < 10) ? \"0\" + number : number;\
    \ `\n<|/ c |>\n<| c |>\nI fixed it by adding `if (number < 10)` before `result\
    \ += (number < 10) ? \"0\" + number : number; `\n<|/ c |>\n<| a tags=string,sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    stringstream ss;\n    vector<string> numbers_vec;\n\
    \    vector<string> sorted_numbers_vec;\n    vector<string> sorted_numbers_vec_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp;\n    vector<string>\
    \ sorted_numbers_vec_temp_temp_temp_temp_temp;\n    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp;\n \
    \   vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    vector<string> sorted_numbers_vec_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers) {\n        switch(c)\
    \ {\n            case '0':\n            case '1':\n            case '2':\n   \
    \         case '3':\n            case '4':\n            case '5':\n          \
    \  case '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using strings. I guess I could use chars, but that would require me to convert\
    \ them to strings. I wonder if there is a way to do it without using strings.\
    \ I guess I could use chars, but that would require me to convert them to strings.\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I wonder if there is a way to do it without using strings. I guess\
    \ I could use chars, but that would require me to convert them to strings. I wonder\
    \ if there is a way to do it without using strings. I guess I could use chars,\
    \ but that would require me to convert them to strings. I wonder if there is a\
    \ way to do it without using strings. I guess I could use chars, but that would\
    \ require me to convert them to strings. I wonder if there is a way to do it without\
    \ using strings. I guess I could use chars, but that would require me to convert\
    \ them to strings. I wonder if there is a way to do it without using strings.\
    \ I guess I could use chars, but that would require me to convert them to strings.\
    \ I wonder if there is a way to do it without using strings. I guess I could use\
    \ chars, but that would require me to convert them to strings. I wonder if there\
    \ is a way to do it without using strings. I guess I could use chars, but that\
    \ would require me to convert them to strings. I wonder if there is a way to do\
    \ it without using strings. I guess I could use chars, but that would require\
    \ me to convert them to strings. I wonder if there is a way to do it without using\
    \ strings. I guess I could use chars, but that would require me to convert them\
    \ to strings. I ", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like the idea of using a switch statement to map the characters\
    \ to numbers. But this doesn't work for \"one two three\" which should return\
    \ \"one two three\" but instead returns \"one two threethree\"\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug in my code (I forgot to put a break statement after each\
    \ case). Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    map<int, int> map;\n    map[0] = 0;\n    map[1] = 1;\n    map[2]\
    \ = 2;\n    map[3] = 3;\n    map[4] = 4;\n    map[5] = 5;\n    map[6] = 6;\n \
    \   map[7] = 7;\n    map[8] = 8;\n    map[9] = 9;\n    \n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        int number = map[c];\n\
    \        result += to_string(number);\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>", "{\n    map<int, string>\
    \ map;\n    map[0] = \"zero\";\n    map[1] = \"one\";\n    map[2] = \"two\";\n\
    \    map[3] = \"three\";\n    map[4] = \"four\";\n    map[5] = \"five\";\n   \
    \ map[6] = \"six\";\n    map[7] = \"seven\";\n    map[8] = \"eight\";\n    map[9]\
    \ = \"nine\";\n    \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string number = numbers[i];\n        \n        for(int\
    \ j = 0; j < number.length(); ++j)\n        {\n            int number = number[j];\n\
    \            \n            string choice = map[number];\n            \n      \
    \      if(choice != \"\")\n            {\n                result += choice;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,sorting |>\n<| c |>\nThanks so much for the help! I appreciate it!\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't use maps, just for fun.\n<|/\
    \ c |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    map<string, int> map;\n \
    \   map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"\
    three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"\
    ] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] =\
    \ 9;\n    \n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int value = map[c];\n        result += to_string(value);\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < numbers.length(); i++)\n    {\n        string number = numbers[i];\n\
    \        if(number == \"zero\")\n            number = \"one\";\n        else if(number\
    \ == \"one\")\n            number = \"two\";\n        else if(number == \"two\"\
    )\n            number = \"three\";\n        else if(number == \"three\")\n   \
    \         number = \"four\";\n        else if(number == \"four\")\n          \
    \  number = \"five\";\n        else if(number == \"five\")\n            number\
    \ = \"six\";\n        else if(number == \"six\")\n            number = \"seven\"\
    ;\n        else if(number == \"seven\")\n            number = \"eight\";\n   \
    \     else if(number == \"eight\")\n            number = \"nine\";\n        else\
    \ if(number == \"nine\")\n            number = \"zero\";\n        result += number;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result = result + c;\n                break;\n       \
    \     default:\n                throw new Exception(\"Invalid choice\");\n   \
    \     }\n    }\n    sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nstring sort_numbers(string numbers) \n{\n    string result\
    \ = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result = result + c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid choice\");\n        }\n    }\n\
    \    sort(result);\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw runtime_error(\"Invalid number in sort_numbers: \" + numbers);\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\nI wrote a\
    \ program to sort numbers in ascending order using C++.\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    map<string, int> map;\n    map[\"\
    zero\"] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"\
    ] = 3;\n    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n\
    \    map[\"seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n  \
    \  \n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n\
    \        int number = map[c];\n        result += to_string(number);\n    }\n \
    \   \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to avoid the map and just use\
    \ string::find and string::substr.\n<|/ c |>\n<| c |>\nYes, but that would require\
    \ a lot of code duplication. I'd rather not do that. :)\n<|/ c |>\n<| c |>\nI\
    \ like your solution, but I wonder if there is a way to avoid the map and just\
    \ use string::find and string::substr.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to avoid the map and just use string::find and\
    \ string::substr.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the map and just use string::find and string::substr.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the map and just use string::find and string::substr.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid number: \" + numbers);\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like the\
    \ idea of using a switch statement to map the characters to numbers. I like your\
    \ use of exceptions though. I'll have to look into that more. Thanks!\n<|/ c |>\n\
    <| c |>\nI added a version that uses exceptions instead of switch statements.\n\
    <|/ c |>\n<| c |>\nI added a version that uses exceptions instead of switch statements.\n\
    <|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid number '\" + c + \"'\");\n    \
    \    }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n   \
    \ map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"\
    four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"\
    ] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n\
    \    map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] =\
    \ 13;\n    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"\
    forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"\
    seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"\
    hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n\
    \    map[\"billion\"] = 1000000000;\n    map[\"trillion\"] = 1000000000000;\n\
    \    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"] = 1000000000000000000;\n\
    \    map[\"sextillion\"] = 100000000000000000000;\n    map[\"septillion\"] = 100000000000000000000000;\n\
    \    map[\"octillion\"] = 100000000000000000000000000;\n    map[\"nonillion\"\
    ] = 10000000000000000000000000000;\n    map[\"decillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"undecillion\"] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"\
    ] = 10000000000000000000000000000000001;\n    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n\
    \    map[\"quattuordecillion\"] = 1000000000000000000000000000000000100;\n   \
    \ map[\"quindecillion\"] = 10000000000000000000000000000000001000;\n    map[\"\
    sexdecillion\"] = 100000000000000000000000000000000010000;\n    map[\"septendecillion\"\
    ] = 1000000000000000000000000000000000100000;\n    map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n\
    \    map[\"novemdec", "{\n    stringstream ss(numbers);\n    string numbers_sorted;\n\
    \    \n    while(!ss.eof())\n    {\n        string number;\n        ss >> number;\n\
    \        numbers_sorted = numbers_sorted + number + \" \";\n    }\n    \n    sort(numbers_sorted.begin(),\
    \ numbers_sorted.end());\n    \n    return numbers_sorted;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>", "{\n    string result = \"\";\n    \n \
    \   foreach(char c in numbers)\n    {\n        switch(c)\n        {\n        \
    \    case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw runtime_error(\"Invalid input\");\n        }\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c++,string |>\n<| c |>\nThis doesn't work if there are more\
    \ than 9 numbers in the string. For example, sort_numbers(\"one two three four\
    \ five six seven eight nine\") returns \"one two three four five six seven eight\
    \ nine\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just\
    \ tested it again and it works fine. I'll edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works fine. I'll edit my answer to\
    \ include a test case.\n<|/ c |>\n<| c |>\nI tested it again and it works fine.\
    \ I'll edit my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works fine. I'll edit my answer to include a test case.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result =\
    \ result + c;\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid number '\" + c + \"'\");\n    \
    \    }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it before you commented on it. I was just trying to show how\
    \ it could be done. I'll edit the answer to show how it could be done.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works with any number of digits. I didn't\
    \ want to make my answer too long.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with any number of digits. I didn't want to make my answer too long.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <algorithm>\n#include <iostream>\n\
    #include <string>", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis\
    \ doesn't work. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\n: I added a more efficient solution which doesn't require a switch statement.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ which doesn't require a switch statement. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\n: I added a more efficient solution which doesn't require a switch\
    \ statement. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number in sort_numbers:\
    \ \" + c;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ choice\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis doesn't\
    \ work if the numbers are in descending order. For example, sort_numbers(\"nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine\
    \ nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine ",
  "{\n    map<string, int> map;\n    foreach(char c in numbers)\n    {\n        if(map.contains(c))\n\
    \            map[c]++;\n        else\n            map[c] = 1;\n    }\n    string\
    \ result = \"\";\n    foreach(auto pair in map)\n    {\n        result += pair.key\
    \ + \" \";\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     if(isdigit(c))\n        {\n            int number = std.atoi(c);\n     \
    \       \n            for(int i = 9; i >= 0; i--)\n            {\n           \
    \     if(number == i)\n                {\n                    result += to_string(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=string,sorting,c++ |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using std.\n<|/ c |>\n<| c |>\nI added a solution without using std.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without using std.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without using std.\n<|/ c |>\n<| a tags=string,sorting,c++ |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid number \" + numbers);\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        string number =\
    \ numbers[i];\n        if(number == \"zero\")\n        {\n            result +=\
    \ \"zero\";\n        }\n        else if(number == \"one\")\n        {\n      \
    \      result += \"one\";\n        }\n        else if(number == \"two\")\n   \
    \     {\n            result += \"two\";\n        }\n        else if(number ==\
    \ \"three\")\n        {\n            result += \"three\";\n        }\n       \
    \ else if(number == \"four\")\n        {\n            result += \"four\";\n  \
    \      }\n        else if(number == \"five\")\n        {\n            result +=\
    \ \"five\";\n        }\n        else if(number == \"six\")\n        {\n      \
    \      result += \"six\";\n        }\n        else if(number == \"seven\")\n \
    \       {\n            result += \"seven\";\n        }\n        else if(number\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(number == \"nine\")\n        {\n            result += \"nine\";\n\
    \        }\n        else\n        {\n            result += number;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis\
    \ is not the best solution. `std::map` would be a better solution. `std::map`\
    \ would also allow you to add more numbers in the future without having to change\
    \ the code.\n<|/ c |>\n<| c |>\nI agree with you. But the OP asked for a solution\
    \ without using std::map. So I gave him a solution with std::map.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that OP wants to learn how to solve this\
    \ problem without using std::map. So I gave him a solution with std::map.\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I believe that OP wants to learn how to\
    \ solve this problem without using std::map. So I gave him a solution with std::map.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that OP wants to learn how\
    \ to solve this problem without using std::map. So I gave him a solution with\
    \ std::map.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>", "{\n    stringstream\
    \ ss(numbers);\n    string num;\n    vector<int> nums;\n    while(ss >> num) \n\
    \    {\n        nums.push_back(std.atoi(num.c_str()));\n    }\n    sort(nums.begin(),\
    \ nums.end());\n    string result = \"\";\n    for(int i = 0; i < nums.size();\
    \ i++) \n    {\n        result += nums[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"one two three four five\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it.\n<|/ c |>\n<| c |>\nIt doesn't work for me in VS2013. `sort_numbers(\"\
    one two three four five\")` returns `\"one two three four five\"`.\n<|/ c |>\n\
    <| c |>\nYes, it does work. Try it yourself and see if it works for you.\n<|/\
    \ c |>\n<| c |>\nI tested it myself and it works. I even tested it on ideone.com.\n\
    <|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n \
    \       {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid number \" + numbers);\n       \
    \ }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThis doesn't work if you have a\
    \ string like \"one two three\".  It will sort \"one\" before \"two\".\n<|/ c\
    \ |>\n<| c |>\n: Yes, I realized that after I posted.  I fixed it by adding a\
    \ space to the end of the string.  I tested it and it works.\n<|/ c |>\n<| c |>\n\
    : I fixed it by adding a space to the end of the string.  I tested it and it works.\n\
    <|/ c |>\n<| c |>\n: I fixed it by adding a space to the end of the string.  I\
    \ tested it and it works.\n<|/ c |>\n<| c |>\n: I fixed it by adding a space to\
    \ the end of the string.  I tested it and it works.\n<|/ c |>\n<| a |>\nI wrote\
    \ a solution using std::sort and std::istringstream to read and parse the numbers\
    \ from the input string. \n<code>\n#include <iostream>\n#include <sstream>\n#include\
    \ <algorithm>\n#include <vector>", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder why you used `string` instead of `char[]`?\n<|/ c |>\n<| c |>\n\
    I used `string` because I wanted to be as close as possible to OP's original code.\
    \ `char[]` would have worked just as well.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. `char[]` would also have worked just as well. Thanks for your help.\n\
    <|/ c |>\n<| a tags=c++,sorting |>\nI came up with this solution:\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <string>", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < numbers.size(); ++i)\n    {\n        string\
    \ num = numbers[i];\n        string num2 = num;\n        string num3 = num;\n\
    \        string num4 = num;\n        string num5 = num;\n        string num6 =\
    \ num;\n        string num7 = num;\n        string num8 = num;\n        string\
    \ num9 = num;\n        string num10 = num;\n        string num11 = num;\n    \
    \    string num12 = num;\n        string num13 = num;\n        string num14 =\
    \ num;\n        string num15 = num;\n        string num16 = num;\n        string\
    \ num17 = num;\n        string num18 = num;\n        string num19 = num;\n   \
    \     string num20 = num;\n        string num21 = num;\n        string num22 =\
    \ num;\n        string num23 = num;\n        string num24 = num;\n        string\
    \ num25 = num;\n        string num26 = num;\n        string num27 = num;\n   \
    \     string num28 = num;\n        string num29 = num;\n        string num30 =\
    \ num;\n        string num31 = num;\n        string num32 = num;\n        string\
    \ num33 = num;\n        string num34 = num;\n        string num35 = num;\n   \
    \     string num36 = num;\n        string num37 = num;\n        string num38 =\
    \ num;\n        string num39 = num;\n        string num40 = num;\n        string\
    \ num41 = num;\n        string num42 = num;\n        string num43 = num;\n   \
    \     string num44 = num;\n        string num45 = num;\n        string num46 =\
    \ num;\n        string num47 = num;\n        string num48 = num;\n        string\
    \ num49 = num;\n        string num50 = num;\n        string num51 = num;\n   \
    \     string num52 = num;\n        string num53 = num;\n        string num54 =\
    \ num;\n        string num55 = num;\n        string num56 = num;\n        string\
    \ num57 = num;\n        string num58 = num;\n        string num59 = num;\n   \
    \     string num60 = num;\n        string num61 = num;\n        string num62 =\
    \ num;\n        string num63 = num;\n        string num64", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n \
    \           case '0':\n            case '1':\n            case '2':\n        \
    \    case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries other\
    \ than std.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>", "{\n    string result =\
    \ \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid number in sort_numbers: \" + c;\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,c++,algorithm |>\nI wrote a solution in Python,\
    \ using an auxiliary list to store the sorted numbers. \n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n\
    \    numbers = [str(i) for i in numbers]\n    return ' '.join(numbers)\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\nusing namespace std;", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but I\
    \ wonder if there is a way to do this without having to write out each case statement.\
    \ Maybe some sort of loop?\n<|/ c |>\n<| c |>\nYou could use a switch statement\
    \ and just have it loop through each character in the string. I'll update my answer\
    \ with an example.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ you to write out each case statement. Hopefully this helps!\n<|/ c |>\n<| a\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nThe `sort` function will sort `'0'` before `'1'`, which is not what the\
    \ OP wants.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted my answer.\
    \ I've updated my answer to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid number: \" + c);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this\
    \ solution, although it does require a lot of extra code (like an extra function).\
    \ But it does solve the problem and it's very simple.\n<|/ c |>\n<| a tags=sorting,c++,algorithm\
    \ |>\nI like your solution, but I thought I'd post my solution as well. \n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<int,\
    \ string> map;\n    map[0] = \"zero\";\n    map[1] = \"one\";\n    map[2] = \"\
    two\";\n    map[3] = \"three\";\n    map[4] = \"four\";\n    map[5] = \"five\"\
    ;\n    map[6] = \"six\";\n    map[7] = \"seven\";\n    map[8] = \"eight\";\n \
    \   map[9] = \"nine\";\n    \n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        int index = c - '0';\n        result += map[index];\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, but I wonder if it would be possible to do this\
    \ without using strings and just using chars. I guess it would be more efficient\
    \ since you wouldn't have to allocate memory for the string, but I haven't tested\
    \ it yet.\n<|/ c |>\n<| c |>\nI guess it would be possible but would require a\
    \ lot of work. You'd have to implement a sorting algorithm that sorts characters.\
    \ You'd have to implement a comparison function that compares two characters.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You'd have to\
    \ implement a function that compares two strings. You'd have to implement a function\
    \ that compares two strings. You'd have to implement a function that compares\
    \ two strings. You'd have to implement a function that compares two strings. You'd\
    \ have to implement a function that compares two strings. You'd have to implement\
    \ a function that compares two strings. You'd have to implement a function that\
    \ compares two strings. You'd have to implement a function that compares two strings.\
    \ You'd have to implement a function that compares two strings. You", "{\n   \
    \ string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n       \
    \ switch(c)\n        {\n            case '0':\n            case '1':\n       \
    \     case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using strings. I guess it would\
    \ be more efficient to convert each number to a number and then sort them, but\
    \ I'm not sure how to do that.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ use strings. It's not as elegant as yours, but it does avoid the problem of\
    \ having to convert each number to a string.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't use strings. It's not as elegant as yours, but it does avoid the\
    \ problem of having to convert each number to a string.\n<|/ c |>\n<| c |>\nI\
    \ added a version that doesn't use strings. It's not as elegant as yours, but\
    \ it does avoid the problem of having to convert each number to a string.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>", "{\n    string result = \"\";\n    \n \
    \   foreach(char c in numbers)\n    {\n        switch(c)\n        {\n        \
    \    case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"one two three\"\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it, and it works\
    \ fine.\n<|/ c |>\n<| c |>\n: It doesn't work if you have a string like \"one\
    \ two three\"\n<|/ c |>\n<| c |>\n: It doesn't work if you have a string like\
    \ \"one two three\"\n<|/ c |>\n<| c |>\n: It doesn't work if you have a string\
    \ like \"one two three\"\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        result\
    \ += numbers[i];\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    stringstream ss(numbers);\n\
    \    string num;\n    vector<int> nums;\n    while(ss >> num)\n    {\n       \
    \ nums.push_back(int(num));\n    }\n    sort(nums.begin(), nums.end());\n    string\
    \ result = \"\";\n    for(int i = 0; i < nums.size(); i++)\n    {\n        result\
    \ += to_string(nums[i]);\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result = result + c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid choice\");\n        }\n    }\n\
    \    \n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,c++,string |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result = result + c;\n                break;\n       \
    \     default:\n                throw new Exception(\"Invalid input\");\n    \
    \    }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    map<string, int> map;\n\
    \    map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"\
    three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"\
    ] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] =\
    \ 9;\n    \n    map[\"ten\"] = 10;\n    map[\"eleven\"] = 11;\n    map[\"twelve\"\
    ] = 12;\n    map[\"thirteen\"] = 13;\n    map[\"fourteen\"] = 14;\n    map[\"\
    fifteen\"] = 15;\n    map[\"sixteen\"] = 16;\n    map[\"seventeen\"] = 17;\n \
    \   map[\"eighteen\"] = 18;\n    map[\"nineteen\"] = 19;\n    \n    map[\"twenty\"\
    ] = 20;\n    map[\"thirty\"] = 30;\n    map[\"forty\"] = 31;\n    map[\"fifty\"\
    ] = 30;\n    map[\"sixty\"] = 30;\n    map[\"seventy\"] = 30;\n    map[\"eighty\"\
    ] = 30;\n    map[\"ninety\"] = 30;\n    \n    map[\"hundred\"] = 100;\n    map[\"\
    thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n    map[\"billion\"] = 1000000000;\n\
    \    map[\"trillion\"] = 1000000000000;\n    map[\"quadrillion\"] = 1000000000000000;\n\
    \    map[\"quintillion\"] = 1000000000000000000;\n    map[\"sextillion\"] = 100000000000000000000;\n\
    \    map[\"septillion\"] = 100000000000000000000000;\n    map[\"octillion\"] =\
    \ 100000000000000000000000000;\n    map[\"nonillion\"] = 10000000000000000000000000000;\n\
    \    map[\"decillion\"] = 10000000000000000000000000000000;\n    map[\"undecillion\"\
    ] = 1000000000000000000000000000000000;\n    map[\"duodecillion\"] = 10000000000000000000000000000000001;\n\
    \    map[\"tredecillion\"] = 100000000000000000000000000000000010;\n    map[\"\
    quattuordecillion\"] = 1000000000000000000000000000000000100;\n    map[\"quindecillion\"\
    ] = 10000000000000000000000000000000001000;\n    map[\"sexdecillion\"] = 100000000000000000000000000000000010000;\n\
    \    map[\"septendecillion\"] = 1000000000000000000000000000000000100000;\n  \
    \  map[\"octodecillion\"] = 10000000000000000000000000000000001000000;\n", "{\n\
    \    map<string, int> numbers_map;\n    foreach(char c in numbers)\n    {\n  \
    \      numbers_map[c] = numbers_map[c] + 1;\n    }\n    map<string, int> sorted_numbers_map;\n\
    \    foreach(pair<string, int> p in numbers_map)\n    {\n        sorted_numbers_map[p.first]\
    \ = p.second;\n    }\n    string sorted_numbers = \"\";\n    foreach(pair<string,\
    \ int> p in sorted_numbers_map)\n    {\n        sorted_numbers += p.first + \"\
    \ \";\n    }\n    return sorted_numbers;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   for(int i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't answer the question. OP asked for sorting a string,\
    \ not an array.\n<|/ c |>\n<| c |>\nI added a solution that sorts a string. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP asked for sorting a string, not an array.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that sorts a string. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question. OP asked for sorting a string, not an array.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThe question was about sorting numbers, not strings. Your solution\
    \ sorts strings. Also, you should use `std::sort` instead of `std::for_each`.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting numbers, not strings. Your solution\
    \ sorts strings. Also, you should use `std::sort` instead of `std::for_each`.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought it would be better to show\
    \ a solution that sorts numbers. I agree that `std::for_each` is better than `std::sort`,\
    \ but `std::sort` also works.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ it would be better to show a solution that sorts numbers. I agree that `std::for_each`\
    \ is better than `std::sort`, but `std::sort` also works.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought it would be better to show a solution that sorts\
    \ numbers. I agree that `std::for_each` is better than `std::sort`, but `std::sort`\
    \ also works.\n<|/ c |>\n<| a tags=c++,sorting,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        string num = numbers[i];\n        \n        if(num == \"zero\"\
    )\n        {\n            result += \"zero \";\n        }\n        else if(num\
    \ == \"one\")\n        {\n            result += \"one \";\n        }\n       \
    \ else if(num == \"two\")\n        {\n            result += \"two \";\n      \
    \  }\n        else if(num == \"three\")\n        {\n            result += \"three\
    \ \";\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four \";\n        }\n        else if(num == \"five\")\n        {\n    \
    \        result += \"five \";\n        }\n        else if(num == \"six\")\n  \
    \      {\n            result += \"six \";\n        }\n        else if(num == \"\
    seven\")\n        {\n            result += \"seven \";\n        }\n        else\
    \ if(num == \"eight\")\n        {\n            result += \"eight \";\n       \
    \ }\n        else if(num == \"nine\")\n        {\n            result += \"nine\
    \ \";\n        }\n        else\n        {\n            result += \"zero \";\n\
    \        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == \"zero\")\n        {\n            result += \"zero \"\
    ;\n        }\n        else if(result[i] == \"one\")\n        {\n            result\
    \ += \"one \";\n        }\n        else if(result[i] == \"two\")\n        {\n\
    \            result += \"two \";\n        }\n        else if(result[i] == \"three\"\
    )\n        {\n            result += \"three \";\n        }\n        else if(result[i]\
    \ == \"four\")\n        {\n            result += \"four \";\n        }\n     \
    \   else if(result[i] == \"five\")\n        {\n            result += \"five \"\
    ;\n        }\n        else if(result[i] == \"six\")\n        {\n            result\
    \ += \"six \";\n        }\n        else if(result[i] == \"seven\")\n        {\n\
    \            result += \"seven \";\n        }\n        else if(result[i] == \"\
    eight\")\n        {\n            result += \"eight \";\n        }\n        else\
    \ if(result[i] == \"nine\")\n        {\n            result += \"nine \";\n   \
    \     }\n        else\n        {\n            result += \"zero \";\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    map<int, string> map;\n    map[0]\
    \ = \"zero\";\n    map[1] = \"one\";\n    map[2] = \"two\";\n    map[3] = \"three\"\
    ;\n    map[4] = \"four\";\n    map[5] = \"five\";\n    map[6] = \"six\";\n   \
    \ map[7] = \"seven\";\n    map[8] = \"eight\";\n    map[9] = \"nine\";\n    \n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    int number = map[to_integer(c)];\n        result += number;\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,string,sorting |>\n<| c |>\nThis\
    \ doesn't work. `map` doesn't have a `[]` operator. `map[0] = \"zero\";` should\
    \ be `map[\"zero\"] = \"zero\";`\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the code in the answer.\n<|/ c |>\n<| a tags=c++,string,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <vector>", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=string,sorting,c++ |>\n<| c |>\nThanks\
    \ for your answer! I understand your solution, but I wanted to know if there was\
    \ a way to do it without using switch statements.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without switch statements.\n<|/ c |>\n<| a tags=string,sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0': result += \" zero\"; break;\n            case '1': result += \"\
    \ one\"; break;\n            case '2': result += \" two\"; break;\n          \
    \  case '3': result += \" three\"; break;\n            case '4': result += \"\
    \ four\"; break;\n            case '5': result += \" five\"; break;\n        \
    \    case '6': result += \" six\"; break;\n            case '7': result += \"\
    \ seven\"; break;\n            case '8': result += \" eight\"; break;\n      \
    \      case '9': result += \" nine\"; break;\n            default: result += c;\
    \ break;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n  \
    \  \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis\
    \ solution doesn't work for negative numbers. Try it with `sort_numbers(\"one\
    \ two -three\")`.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers. I didn't want to change too much of the original code so I didn't add\
    \ any comments.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i]\
    \ == \"zero\")\n        {\n            result += \" zero \";\n        }\n    \
    \    else if(numbers[i] == \"one\")\n        {\n            result += \" one \"\
    ;\n        }\n        else if(numbers[i] == \"two\")\n        {\n            result\
    \ += \" two \";\n        }\n        else if(numbers[i] == \"three\")\n       \
    \ {\n            result += \" three \";\n        }\n        else if(numbers[i]\
    \ == \"four\")\n        {\n            result += \" four \";\n        }\n    \
    \    else if(numbers[i] == \"five\")\n        {\n            result += \" five\
    \ \";\n        }\n        else if(numbers[i] == \"six\")\n        {\n        \
    \    result += \" six \";\n        }\n        else if(numbers[i] == \"seven\"\
    )\n        {\n            result += \" seven \";\n        }\n        else if(numbers[i]\
    \ == \"eight\")\n        {\n            result += \" eight \";\n        }\n  \
    \      else if(numbers[i] == \"nine\")\n        {\n            result += \" nine\
    \ \";\n        }\n        else\n        {\n            result += numbers[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == \" \")\n        {\n            result += \" \";\n   \
    \     }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n  \
    \      if(result[i] == \"nine\")\n        {\n            result += \" nine \"\
    ;\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n\
    \        if(result[i] == \"eight\")\n        {\n            result += \" eight\
    \ \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"seven\")\n        {\n            result += \"\
    \ seven \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"six\")\n        {\n            result += \"\
    \ six \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"five\")\n        {\n            result += \"\
    \ five \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"four\")\n        {\n            result += \"\
    \ four \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"three\")\n        {\n            result += \"\
    \ three \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n\
    \    {\n        if(result[i] == \"two\")\n        {\n            result += \"\
    \ two \";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using strings. I understand that strings are immutable and that sorting algorithms\
    \ work on strings, but I wonder if there is a way to do it without using strings.\
    \ I understand that strings are immutable and that sorting algorithms work on\
    \ strings, but I wonder if there is a way to do it without using strings. I understand\
    \ that strings are immutable and that sorting algorithms work on strings, but\
    \ I wonder if there is a way to do it without using strings. I understand that\
    \ strings are immutable and that sorting algorithms work on strings, but I wonder\
    \ if there is a way to do it without using strings. I understand that strings\
    \ are immutable and that sorting algorithms work on strings, but I wonder if there\
    \ is a way to do it without using strings. I understand that strings are immutable\
    \ and that sorting algorithms work on strings, but I wonder if there is a way\
    \ to do it without using strings. I understand that strings are immutable and\
    \ that sorting algorithms work on strings, but I wonder if there is a way to do\
    \ it without using strings. I understand that strings are immutable and that sorting\
    \ algorithms work on strings, but I wonder if there is a way to do it without\
    \ using strings. I understand that strings are immutable and that sorting algorithms\
    \ work on strings, but I wonder if there is a way to do it without using strings.\
    \ I understand that strings are immutable and that sorting algorithms work on\
    \ strings, but I wonder if there is a way to do it without using strings. I understand\
    \ that strings are immutable and that sorting algorithms work on strings, but\
    \ I wonder if there is a way to do it without using strings. I understand that\
    \ strings are immutable and that sorting algorithms work on strings, but I wonder\
    \ if there is a way to do it without using strings. I understand that strings\
    \ are immutable and that sorting algorithms work on strings, but I wonder if there\
    \ is a way to do it without using strings. I understand that strings are immutable\
    \ and that sorting algorithms work on strings, but I wonder if there is a way\
    \ to do it without using strings. I understand that strings are immutable and\
    \ that sorting algorithms work on strings, but I wonder if there is a way to do\
    \ it ", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid number in sort_numbers()\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\n: I like your solution as well, but I wonder\
    \ how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n: I like\
    \ your solution as well, but I wonder how it compares to other solutions posted\
    \ so far.\n<|/ c |>\n<| c |>\n: I like your solution as well, but I wonder how\
    \ it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n: I like your\
    \ solution as well, but I wonder how it compares to other solutions posted so\
    \ far.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    map<string, int> map;\n    for(int\
    \ i = 0; i < numbers.length(); i++)\n    {\n        string num = numbers[i];\n\
    \        map[num] = i;\n    }\n    \n    string result = \"\";\n    for(int i\
    \ = 0; i < numbers.length(); i++)\n    {\n        string num = numbers[i];\n \
    \       int index = map[num];\n        result += num;\n        \n        if(i\
    \ != index)\n            result += \" \";\n    }\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=string,sorting,c++ |>\n<| c |>\nThis code doesn't work for\
    \ \"three one five\" as input. Also it seems like it sorts the numbers alphabetically\
    \ instead of from smallest to largest.\n<|/ c |>\n<| c |>\nThe code sorts the\
    \ numbers from smallest to largest. I've added a test case to show that it works.\n\
    <|/ c |>\n<| c |>\nI see it now. Thanks for your help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid the\
    \ switch statement. Something like `switch(tolower(c))`\n<|/ c |>\n<| c |>\n:\
    \ Yes, `tolower()` would work. `switch` statements are just more concise and easier\
    \ to read. `tolower()` also works with `char` types, but it returns a `char` instead\
    \ of a `string`.\n<|/ c |>\n<| c |>\nI agree, `switch` is more concise, but I\
    \ find it easier to read and understand than `tolower()`.\n<|/ c |>\n<| c |>\n\
    : I agree. `switch` is more concise, but I find it easier to read and understand\
    \ than `tolower()`. `switch` statements are just more concise and easier to read.\
    \ `tolower()` also works with `char` types, but it returns a `char` instead of\
    \ a `string`.\n<|/ c |>\n<| c |>\n: I agree. `switch` is more concise, but I find\
    \ it easier to read and understand than `tolower()`. `switch` statements are just\
    \ more concise and easier to read. `tolower()` also works with `char` types, but\
    \ it returns a `char` instead of a `string`.\n<|/ c |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include\
    \ <string>", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number\
    \ '\" + c + \"'\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}", "{\n    map<string, int> m;\n    map<int, string>\
    \ m2;\n    \n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n \
    \       {\n            int n = c - '0';\n            m[n] = m[n] + 1;\n      \
    \  }\n    }\n    \n    foreach(int n, m)\n    {\n        m2[n] = to_string(n);\n\
    \    }\n    \n    string result = \"\";\n    foreach(int n, m2)\n    {\n     \
    \   result += n2[n];\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nI like the idea of using maps, but it seems like a lot of overhead\
    \ for something that should be fairly simple.\n<|/ c |>\n<| c |>\n: I agree, but\
    \ I wanted to show that it is possible to solve this problem without using maps.\
    \ I guess I should have made it clear that my solution was a very simple one,\
    \ and not necessarily the most efficient one.\n<|/ c |>\n<| c |>\n: I added a\
    \ solution that uses maps and a custom comparator that uses `std::sort`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `std::sort` with a custom comparator.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `std::sort` with a custom comparator.\n\
    <|/ c |>\n<| a tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers) {\n        switch(c)\
    \ {\n            case '0':\n            case '1':\n            case '2':\n   \
    \         case '3':\n            case '4':\n            case '5':\n          \
    \  case '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid number\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid choice\"\
    );\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c\
    \ |>\nI like your solution, but I wonder how it compares to other solutions posted\
    \ here (especially the one by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well, but I wonder how it compares to other solutions posted here (especially\
    \ the one by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution as well, but\
    \ I wonder how it compares to other solutions posted here (especially the one\
    \ by John Zwinck)\n<|/ c |>\n<| c |>\nI like your solution as well, but I wonder\
    \ how it compares to other solutions posted here (especially the one by John Zwinck)\n\
    <|/ c |>\n<| c |>\nI like your solution as well, but I wonder how it compares\
    \ to other solutions posted here (especially the one by John Zwinck)\n<|/ c |>\n\
    <| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    string result = \"\";\n    \n    foreach(char c\
    \ in numbers)\n    {\n        if(isdigit(c))\n        {\n            int num =\
    \ std.atoi(c);\n            \n            for(int i = 9; i >= 0; i--)\n      \
    \      {\n                if(num == i)\n                {\n                  \
    \  result += std.string(\"zero \");\n                    break;\n            \
    \    }\n                else if(num < i)\n                {\n                \
    \    result += std.string(\"one \");\n                    break;\n           \
    \     }\n            }\n        }\n        else\n        {\n            result\
    \ += c;\n        }\n    }\n    \n    return result;\n}", "{\n    stringstream\
    \ ss(numbers);\n    string numbers_sorted;\n    \n    while(ss.good())\n    {\n\
    \        string num;\n        ss >> num;\n        numbers_sorted += num;\n   \
    \ }\n    \n    sort(numbers_sorted.begin(), numbers_sorted.end());\n    \n   \
    \ return numbers_sorted;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThe\
    \ OP asked for a solution that doesn't use any libraries. He also asked for a\
    \ solution that doesn't use any loops. He also asked for a solution that doesn't\
    \ use any `if` statements. He also asked for a solution that doesn't use any `while`\
    \ statements. He also asked for a solution that doesn't use any `for` statements.\
    \ He also asked for a solution that doesn't use any `if` statements. He also asked\
    \ for a solution that doesn't use any `while` statements. He also asked for a\
    \ solution that doesn't use any `for` statements. He also asked for a solution\
    \ that doesn't use any `if` statements. He also asked for a solution that doesn't\
    \ use any `while` statements. He also asked for a solution that doesn't use any\
    \ `for` statements. He also asked for a solution that doesn't use any `if` statements.\
    \ He also asked for a solution that doesn't use any `while` statements. He also\
    \ asked for a solution that doesn't use any `for` statements. He also asked for\
    \ a solution that doesn't use any `if` statements. He also asked for a solution\
    \ that doesn't use any `while` statements. He also asked for a solution that doesn't\
    \ use any `for` statements. He also asked for a solution that doesn't use any\
    \ `if` statements. He also asked for a solution that doesn't use any `while` statements.\
    \ He also asked for a solution that doesn't use any `for` statements. He also\
    \ asked for a solution that doesn't use any `if` statements. He also asked for\
    \ a solution that doesn't use any `while` statements. He also asked for a solution\
    \ that doesn't use any `for` statements. He also asked for a solution that doesn't\
    \ use any `if` statements. He also asked for a solution that doesn't use any `while`\
    \ statements. He also asked for a solution that doesn't use any `for` statements.\
    \ He also asked for a solution that doesn't use any ", "{\n    string result =\
    \ \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0': result += \"zero \"; break;\n            case '1': result\
    \ += \"one \"; break;\n            case '2': result += \"two \"; break;\n    \
    \        case '3': result += \"three \"; break;\n            case '4': result\
    \ += \"four \"; break;\n            case '5': result += \"five \"; break;\n  \
    \          case '6': result += \"six \"; break;\n            case '7': result\
    \ += \"seven \"; break;\n            case '8': result += \"eight \"; break;\n\
    \            case '9': result += \"nine \"; break;\n            default: result\
    \ += \"error \"; break;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0': result\
    \ += \"zero\"; break;\n            case '1': result += \"one\"; break;\n     \
    \       case '2': result += \"two\"; break;\n            case '3': result += \"\
    three\"; break;\n            case '4': result += \"four\"; break;\n          \
    \  case '5': result += \"five\"; break;\n            case '6': result += \"six\"\
    ; break;\n            case '7': result += \"seven\"; break;\n            case\
    \ '8': result += \"eight\"; break;\n            case '9': result += \"nine\";\
    \ break;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        string num = numbers[i];\n        if(num == \"zero\")\n\
    \        {\n            result += \"zero\";\n        }\n        else if(num ==\
    \ \"one\")\n        {\n            result += \"one\";\n        }\n        else\
    \ if(num == \"two\")\n        {\n            result += \"two\";\n        }\n \
    \       else if(num == \"three\")\n        {\n            result += \"three\"\
    ;\n        }\n        else if(num == \"four\")\n        {\n            result\
    \ += \"four\";\n        }\n        else if(num == \"five\")\n        {\n     \
    \       result += \"five\";\n        }\n        else if(num == \"six\")\n    \
    \    {\n            result += \"six\";\n        }\n        else if(num == \"seven\"\
    )\n        {\n            result += \"seven\";\n        }\n        else if(num\
    \ == \"eight\")\n        {\n            result += \"eight\";\n        }\n    \
    \    else if(num == \"nine\")\n        {\n            result += \"nine\";\n  \
    \      }\n        else\n        {\n            throw runtime_error(\"Invalid number\
    \ in sort_numbers()\");\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,sorting,string |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do this without having to write out every possible permutation.\
    \ For example, if I wanted to sort \"one two three\", I would have to write out\
    \ \"one two three\", \"one three two\", \"two one three\", etc. Is there a way\
    \ to do this without having to write out every possible permutation?\n<|/ c |>\n\
    <| c |>\n: No, there isn't. You'd have to write out every permutation anyway.\
    \ That's why I wrote the code to do it for you. :)\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that doesn't require you to write out every permutation.\n<|/ c |>\n\
    <| c |>\n: I added a solution that doesn't require you to write out every permutation.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require you to write out\
    \ every permutation.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using std::next_permutation:\n\
    <code>\n#include <algorithm>\n#include <string>\n#include <vector>\n#include <iostream>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0': result += \"zero\"; break;\n\
    \            case '1': result += \"one\"; break;\n            case '2': result\
    \ += \"two\"; break;\n            case '3': result += \"three\"; break;\n    \
    \        case '4': result += \"four\"; break;\n            case '5': result +=\
    \ \"five\"; break;\n            case '6': result += \"six\"; break;\n        \
    \    case '7': result += \"seven\"; break;\n            case '8': result += \"\
    eight\"; break;\n            case '9': result += \"nine\"; break;\n          \
    \  default: result += \"?\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\n#include <algorithm>\n#include <iostream>\n#include <string>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid number\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `\"one two three\"` instead of `\"one three two\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested it on ideone.com, which is where I tested the code. http://ideone.com/4K8Ky\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com, which is where I tested the code.\
    \ http://ideone.com/4K8Ky\n<|/ c |>\n<| c |>\nI tested it on ideone.com, which\
    \ is where I tested the code. http://ideone.com/4K8Ky\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone.com, which is where I tested the code. http://ideone.com/4K8Ky\n\
    <|/ c |>\n<| a tags=string,sorting,c++ |>\nI wrote a little program to test the\
    \ sorting algorithms mentioned in the other answers. I used the standard library\
    \ sort function and compared it to the bubble sort algorithm. I used the string\
    \ class from STL. \n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <vector>", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThe\
    \ `switch` statement is unnecessary. `if` statements are enough.\n<|/ c |>\n<|\
    \ c |>\n: I agree, but I wanted to show how it could be done with switch statements.\
    \ I guess I should have been more clear.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ My comment was more about your `switch` statement being unnecessary. `if` statements\
    \ are enough.\n<|/ c |>\n<| c |>\n: I agree. I was just trying to show how it\
    \ could be done with switch statements. I guess I should have been more clear.\n\
    <|/ c |>\n<| c |>\nI agree with you. I was just trying to show how it could be\
    \ done with switch statements. I guess I should have been more clear.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    string result = \"\";\n    \n    for(int i = 0;\
    \ i < numbers.length(); i++)\n    {\n        string number = numbers[i];\n   \
    \     \n        if(number == \"zero\")\n            result += \"zero \";\n   \
    \     else if(number == \"one\")\n            result += \"one \";\n        else\
    \ if(number == \"two\")\n            result += \"two \";\n        else if(number\
    \ == \"three\")\n            result += \"three \";\n        else if(number ==\
    \ \"four\")\n            result += \"four \";\n        else if(number == \"five\"\
    )\n            result += \"five \";\n        else if(number == \"six\")\n    \
    \        result += \"six \";\n        else if(number == \"seven\")\n         \
    \   result += \"seven \";\n        else if(number == \"eight\")\n            result\
    \ += \"eight \";\n        else if(number == \"nine\")\n            result += \"\
    nine \";\n        else\n            result += number + \" \";\n    }\n    \n \
    \   for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i) ==\
    \ \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0; i\
    \ < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n        \
    \    result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i)\
    \ == \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n      \
    \      result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i)\
    \ == \" \")\n            result += \"zero \";\n    }\n    \n    for(int i = 0;\
    \ i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n      \
    \      result += \"zero \";\n    }\n    \n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result.at(i) == \" \")\n            result += \"zero\
    \ \";\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == \" \")\n            result += \"zero \";\n    }\n    \n\
    \    for(int i = 0; i < result.length(); i++)\n    {\n        if(", "{\n    string\
    \ result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n \
    \       {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\nusing namespace std;", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result = result + c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid number: \" + numbers);\n      \
    \  }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\n#include <string>", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid choice\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++,string\
    \ |>\nI wrote a solution in Python that uses string manipulation instead of sorting\
    \ algorithms. I hope it helps.\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split()\n    numbers.sort()\n    numbers = ' '.join(numbers)\n   \
    \ return numbers", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ choice\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0': result\
    \ += \"zero \"; break;\n            case '1': result += \"one \"; break;\n   \
    \         case '2': result += \"two \"; break;\n            case '3': result +=\
    \ \"three \"; break;\n            case '4': result += \"four \"; break;\n    \
    \        case '5': result += \"five \"; break;\n            case '6': result +=\
    \ \"six \"; break;\n            case '7': result += \"seven \"; break;\n     \
    \       case '8': result += \"eight \"; break;\n            case '9': result +=\
    \ \"nine \"; break;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, but I really don't like that I have to write all\
    \ those cases. I thought there might be a more elegant solution. Thanks anyway.\n\
    <|/ c |>\n<| c |>\nI agree, it's not a very elegant solution. I'm sure there are\
    \ some clever ways to do it, but I haven't found them yet. I'll keep looking though.\n\
    <|/ c |>\n<| c |>\nI added a more elegant solution that doesn't require you to\
    \ write all those cases. It's not as pretty as your original solution, but it's\
    \ more elegant.\n<|/ c |>\n<| c |>\nI like your solution, but I really don't like\
    \ that I have to write all those cases. I thought there might be a more elegant\
    \ solution. Thanks anyway.\n<|/ c |>\n<| c |>\nI added a more elegant solution\
    \ that doesn't require you to write all those cases. It's not as pretty as your\
    \ original solution, but it's more elegant.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string sort_numbers(string numbers) \n{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nI like your\
    \ solution, but I really don't like that I have to write all those cases. I thought\
    \ there might be a more elegant solution. Thanks anyway.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I really don't like that I have to write all those cases.\
    \ I thought ", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid number:\
    \ \" + c;\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    map<string, int> map;\n    for(int i = 0; i < numbers.length(); i++)\n \
    \   {\n        string num = numbers[i];\n        map[num] = i;\n    }\n    \n\
    \    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n  \
    \  {\n        string num = numbers[i];\n        int index = map[num];\n      \
    \  result += num;\n        for(int j = index + 1; j < numbers.length(); j++)\n\
    \        {\n            result += \" \" + numbers[j];\n        }\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
