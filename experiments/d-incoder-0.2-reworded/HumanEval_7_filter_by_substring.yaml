name: HumanEval_7_filter_by_substring
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], \"\
  a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
  ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
  \ strings, string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(string s in strings) {\n        if(s.contains(substring)) {\n   \
    \         result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new\
    \ string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"\
    cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    string sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"ba", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17646347)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to filter\
    \ an array by substring. He doesn't want to use LINQ. He wants to write his own\
    \ filter function. He doesn't want to use LINQ. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=java,string,arrays |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    String[] result\
    \ = new String[strings.length];\n    for (int i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays |>\n<| a tags=java,string,arrays |>\n\
    <code>\npublic static String[] filterBySubstring(String[] strings, String substring)\
    \ {\n    String[] result = new String[strings.length];\n    for (int i = 0; i\
    \ < strings.length; i++) {\n        if (strings[i].contains(substring)) {\n  \
    \          result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a tags=java,string,arrays\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I've tried this but I get an error\
    \ saying \"The method contains(String) in the type String is not applicable for\
    \ the arguments (int)\"\n<|/ c |>\n<| c |>\nI edited my answer to include a version\
    \ that uses `contains` instead of `indexOf`. Hope this helps.\n<|/ c |>\n<| c\
    \ |>\nThanks again for your help. I still get an error saying \"The method contains(String)\
    \ in the type String is not applicable for the arguments (int)\"\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a version that uses `contains` instead of\
    \ `indexOf`. Hope this helps.\n<|/ c |>\n<| c |>\nThanks again for your help.\
    \ I still get an error saying \"The method contains(String) in the type String\
    \ is not applicable for the arguments (int)\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a ", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| c |>\nThis doesn't answer the question of how to find all substrings\
    \ within a string. Your code only finds substrings within a single string.\n<|/\
    \ c |>\n<| c |>\nI thought the question was how to find all substrings within\
    \ a string. My code does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nYes, I read the question, but your answer doesn't answer the question.\
    \ Your code only finds substrings within a single string. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array.\n<|/ c |>\n<| c |>\nI added a code example to my answer. Does\
    \ it answer your question?\n<|/ c |>\n<| c |>\nNo, your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"abc\" in the\
    \ array and you search for \"a\" it will return \"abc\" instead of \"bacd\"\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filter_by_substring(", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n        {\n\
    \            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.IO;", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic static List<String> filterBySubstring(List<String> list, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays,string |>\n<code>\npublic\
    \ static String[] filterBySubstring(String[] strings, String substring) {\n  \
    \  String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=java,arrays,string |>\n<| a dscore=0 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a ", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this in C#.\n<|/\
    \ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<| c |>\nI added a C# solution\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=5 tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this in C#.\n<|/\
    \ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=5 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThanks for your answer. I tried it but\
    \ I get this error \"The type or namespace name 'std' could not be found (are\
    \ you missing a using directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\n\
    I added the using directive for std.math but now I get this error \"The type or\
    \ namespace name 'std' could not be found (are you missing a using directive or\
    \ an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using directive for\
    \ std.math but now I get this error \"The type or namespace name 'std' could not\
    \ be found (are you missing a using directive or an assembly reference?)\"\n<|/\
    \ c |>\n<| c |>\nI added the using directive for std.math but now I get this error\
    \ \"The type or namespace name 'std' could not be found (are you missing a using\
    \ directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using\
    \ directive for std.math but now I get this error \"The type or namespace name\
    \ 'std' could not be found (are you missing a using directive or an assembly reference?)\"\
    \n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] myArray = { \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nstring myString = \"a\";", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work for me. `filter_by_substring` returns an empty array\
    \ for me.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer. Maybe you forgot to copy the code from my answer?\n<|/ c |>\n<| c\
    \ |>\nI copied your code verbatim and ran it on my machine. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I added a test case to my answer. Maybe you forgot to copy the code from\
    \ my answer?\n<|/ c |>\n<| c |>\nI copied your code verbatim and ran it on my\
    \ machine. `filter_by_substring` returns an empty array for me.\n<|/ c |>\n<|\
    \ a tags=string,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a d", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ?\n<|/ c |>\n<| c |>\nI added a non-LINQ\
    \ solution\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ new string[strings.Length];\nfor (int i = 0; i < strings.Length; i++)\n{\n \
    \   if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"))\n  \
    \      result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = new string[strings.Length];\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any library functions. I only have\
    \ to use loops, if statements, arrays, string manipulation, etc.\n<|/ c |>\n<|\
    \ c |>\nI added a solution without using any library functions. I hope it helps.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm new to C#, so I didn't\
    \ know about `Contains`. However, it seems that it only works for strings. Is\
    \ there a way to make it work for arrays of strings?\n<|/ c |>\n<| c |>\nYes,\
    \ you can make it work for arrays of strings. I updated my answer to show how.\n\
    <|/ c |>\n<| c |>\nThanks for the update. I'm still getting an error though: `The\
    \ best overloaded method match for 'string.Contains(string)' has some invalid\
    \ arguments`\n<|/ c |>\n<| c |>\nI updated my answer to show how to make it work\
    \ for arrays of strings.\n<|/ c |>\n<| c |>\nThanks for the update. I'm still\
    \ getting an error though: `The best overloaded method match for 'string.Contains(string)'\
    \ has some invalid arguments`\n<|/ c |>\n<| a dscore=1 |>\nYou can use the LINQ\
    \ method Contains:\n<code>\nstring[] myStrings = new string[] { \"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar result\
    \ = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myStrings = new string[] { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar\
    \ result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myString", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,arrays,c# |>\n<| c |>\nI like this solution. Very concise. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile. `string[]\
    \ result = new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.Add(s);\n    }\n    return\
    \ result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain \"a\".\n<|/ c |>\n<| c |>\n: I misunderstood the question.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try it\
    \ with `filter_by_substring(\"ab\", \"a\")`.\n<|/ c |>\n<| c |>\n: I misunderstood\
    \ the question. I've updated my answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter out all strings that don't contain \"a\".\n<|/ c |>\n<| c |>\n: I\
    \ misunderstood the question. I've updated my answer.\n<|/ c |>\n<| c |>\nThis\
    \ answer doesn't work. Try it with `filter_by_substring(\"ab\", \"a\")`.\n<|/\
    \ c |>\n<| c |>\n: I misunderstood the question. I've updated my answer.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to filter out all strings that don't contain \"\
    a\".\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try it with `filter_by_substring(\"\
    ab\", \"a\")`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't answ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| c |>\n\
    This doesn't work for me. I'm getting an error: Error 1 The type or namespace\
    \ name 'string' could not be found (are you missing a using directive or an assembly\
    \ reference?) \nError 2 The type or namespace name 'string' could not be found\
    \ (are you missing a using directive or an assembly reference?)\n<|/ c |>\n<|\
    \ c |>\nI added the using statements I needed. Thanks!\n<|/ c |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[]\
    \ filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c#,search |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 tags=string,arrays,c#,search\
    \ |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 tags=string,arrays,c#,search |>\n<| a dscore=1 |>\n<code>\n\
    string[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string[] FilterBySubstring(string[] strings, string substring)\n{\n \
    \   List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `filter_by_substring` returns an empty array when `strings[i]` is an empty\
    \ string. `strings[i].Contains(substring)` returns `true` when `strings[i]` is\
    \ an empty string.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out. :)\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach (string s\
    \ in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string array that contains multiple\
    \ strings that contain the substring you're looking for. For example, if you have\
    \ `[\"abc\", \"bacd\", \"cde\", \"array\"]` and you search for \"a\", you'll get\
    \ `[\"abc\", \"bacd\", \"array\"]` instead of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated the answer\
    \ to account for that.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've\
    \ updated the answer to account for that.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. I've updated the answer to account for that.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have a string array that contains multiple strings that contain the substring\
    \ you're looking for. For example, if you have `[\"abc\", \"bacd\", \"cde\", \"\
    array\"]` and you search for \"a\", you'll get `[\"abc\", \"bacd\", \"array\"\
    ]` instead of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string array that contains\
    \ multiple strings that contain the substring you're looking for. For example,\
    \ if you have `[\"abc\", \"bacd", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that start with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not end with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    public static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArgumentOutOfRangeException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\nYes, you're right. I was thinking about a more general solution.\
    \ I'll edit my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result =\
    \ new string[strings.length];\n</code>\nThis line is wrong. strings.length is\
    \ 0 because you never assigned any value to strings. You probably meant to use\
    \ strings.length instead.\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length is 0 because you never assigned any value to strings.\
    \ You probably meant to use strings.length instead.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length is 0 because you never assigned any value to strings.\
    \ You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n</code>\n\
    This line is wrong. strings.length is 0 because you never assigned any value to\
    \ strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n\
    <code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis code doesn't compile. `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string\
    \ |>\n<code>\npublic static string[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\npublic\
    \ static string[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\npublic static string[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] filter_by_substring(", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string. For example, if `strings` contains `\"abc\"` and `\"ab\"`, then `filter_by_substring`\
    \ will return `[\"abc\"]` instead of `[\"abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\n\
    I fixed it now. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\n\
    Thanks for your answer. I've tried your code, but I got this error \"The type\
    \ or namespace name 'string' could not be found (are you missing a using directive\
    \ or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added\
    \ the using statement for you. Make sure you add it at the top of your code file.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error \"The type or namespace name 'string' could not be found (are you missing\
    \ a using directive or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added\
    \ the using statement for you. Make sure you add it at the top of your code file.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error \"The type or namespace name 'string' could not be found (are you missing\
    \ a using directive or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I've tried your code, but I got this error \"The type or namespace name 'string'\
    \ could not be found (are you missing a using directive or an assembly reference?)\"\
    . I've added \"using System.Collections.Generic;\" but still not working. I'm\
    \ using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added the using statement for\
    \ you. Make sure you add it at the top of your code file.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input array of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (!s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (!s.Contains(substring)) {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input array of strings only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a tags=arrays,java,string |>\n<| a |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a dscore=1 tags=arrays,java,string\
    \ |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a tags=arrays,java,string |>\n<| a\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=1 tags=arrays,java,string |>\n<| a |>\n<code>\npublic static\
    \ String[] filterBySubstring(String[] strings, String substring) {\n", "{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use LINQ\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I'm sorry I didn't specify that I was looking for a solution\
    \ that doesn't use LINQ. I've edited my question to reflect this.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nstring[] result = array.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n<|\
    \ c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,filter |>\n\
    <| a tags=string,c#,arrays,filter |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,filter |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,filter\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,filter |>\n<| a tags=string,c#,arrays,filter |>\n\
    <code>\nstring[] filterBySubstring(string[] strings, string substring)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. I'm getting an \"Index was outside the\
    \ bounds of the array.\" error on the line `result[i] = strings[i];`\n<|/ c |>\n\
    <| c |>\n: I tested it and it works for me. Are you sure you copied it correctly?\
    \ I added a screenshot of my test program to the answer.\n<|/ c |>\n<| c |>\n\
    : I added a screenshot of my test program to the answer. Maybe you didn't copy\
    \ it correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as you did. I'm running\
    \ it on Visual Studio 2012. Maybe it's something with that?\n<|/ c |>\n<| c |>\n\
    : Yes, it could be a problem with Visual Studio 2012. Try running it in a different\
    \ IDE.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| c |>\nThis doesn't work for me. I'm getting an \"Index was outside the bounds\
    \ of the array.\" error on the line `result[i] = strings[i];`\n<|/ c |>\n<| a\
    \ tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work for me. I'm getting an \"Index was outside the bounds of the array.\"\
    \ error on the line `result[i] = strings[i];`\n<|/ c |>\n<| c |>\nCan you post\
    \ the full exception message?\n<|/ c |>\n<| c |>\nI added a screenshot of the\
    \ full exception message to the question.\n<|/ c |>\n<| c |>\n: I added a screenshot\
    \ of my test program to the answer. Maybe you didn't copy it correctly?\n<|/ c\
    \ |>\n<| c |>\nI copied it exactly as you did. I'm running it on Visual Studio\
    \ 2012. Maybe it's something with that?\n<|/ c |>\n<| a tags=", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].Contains(substring) : !strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach (string s in strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    public static void main(String[] args) {\n    String[] arr = {\"abc\", \"bacd\"\
    , \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr, \"a\"));\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
