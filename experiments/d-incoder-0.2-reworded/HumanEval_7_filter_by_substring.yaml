name: HumanEval_7_filter_by_substring
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], \"\
  a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
  ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
  \ strings, string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(string s in strings) {\n        if(s.contains(substring)) {\n   \
    \         result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new\
    \ string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"\
    cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    string sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"ba", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17646347)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to filter\
    \ an array by substring. He doesn't want to use LINQ. He wants to write his own\
    \ filter function. He doesn't want to use LINQ. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=java,string,arrays |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    String[] result\
    \ = new String[strings.length];\n    for (int i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays |>\n<| a tags=java,string,arrays |>\n\
    <code>\npublic static String[] filterBySubstring(String[] strings, String substring)\
    \ {\n    String[] result = new String[strings.length];\n    for (int i = 0; i\
    \ < strings.length; i++) {\n        if (strings[i].contains(substring)) {\n  \
    \          result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a tags=java,string,arrays\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I've tried this but I get an error\
    \ saying \"The method contains(String) in the type String is not applicable for\
    \ the arguments (int)\"\n<|/ c |>\n<| c |>\nI edited my answer to include a version\
    \ that uses `contains` instead of `indexOf`. Hope this helps.\n<|/ c |>\n<| c\
    \ |>\nThanks again for your help. I still get an error saying \"The method contains(String)\
    \ in the type String is not applicable for the arguments (int)\"\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a version that uses `contains` instead of\
    \ `indexOf`. Hope this helps.\n<|/ c |>\n<| c |>\nThanks again for your help.\
    \ I still get an error saying \"The method contains(String) in the type String\
    \ is not applicable for the arguments (int)\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a ", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| c |>\nThis doesn't answer the question of how to find all substrings\
    \ within a string. Your code only finds substrings within a single string.\n<|/\
    \ c |>\n<| c |>\nI thought the question was how to find all substrings within\
    \ a string. My code does exactly that. Did you read the question?\n<|/ c |>\n\
    <| c |>\nYes, I read the question, but your answer doesn't answer the question.\
    \ Your code only finds substrings within a single string. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array.\n<|/ c |>\n<| c |>\nI added a code example to my answer. Does\
    \ it answer your question?\n<|/ c |>\n<| c |>\nNo, your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"abc\" in the\
    \ array and you search for \"a\" it will return \"abc\" instead of \"bacd\"\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filter_by_substring(", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n        {\n\
    \            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.IO;", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic static List<String> filterBySubstring(List<String> list, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : list) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays,string |>\n<code>\npublic\
    \ static String[] filterBySubstring(String[] strings, String substring) {\n  \
    \  String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=java,arrays,string |>\n<| a dscore=0 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a ", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this in C#.\n<|/\
    \ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<| c |>\nI added a C# solution\n\
    <|/ c |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=5 tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this in C#.\n<|/\
    \ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=5 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThanks for your answer. I tried it but\
    \ I get this error \"The type or namespace name 'std' could not be found (are\
    \ you missing a using directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\n\
    I added the using directive for std.math but now I get this error \"The type or\
    \ namespace name 'std' could not be found (are you missing a using directive or\
    \ an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using directive for\
    \ std.math but now I get this error \"The type or namespace name 'std' could not\
    \ be found (are you missing a using directive or an assembly reference?)\"\n<|/\
    \ c |>\n<| c |>\nI added the using directive for std.math but now I get this error\
    \ \"The type or namespace name 'std' could not be found (are you missing a using\
    \ directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using\
    \ directive for std.math but now I get this error \"The type or namespace name\
    \ 'std' could not be found (are you missing a using directive or an assembly reference?)\"\
    \n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] myArray = { \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nstring myString = \"a\";", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work for me. `filter_by_substring` returns an empty array\
    \ for me.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to\
    \ my answer. Maybe you forgot to copy the code from my answer?\n<|/ c |>\n<| c\
    \ |>\nI copied your code verbatim and ran it on my machine. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I added a test case to my answer. Maybe you forgot to copy the code from\
    \ my answer?\n<|/ c |>\n<| c |>\nI copied your code verbatim and ran it on my\
    \ machine. `filter_by_substring` returns an empty array for me.\n<|/ c |>\n<|\
    \ a tags=string,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a d", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ?\n<|/ c |>\n<| c |>\nI added a non-LINQ\
    \ solution\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ new string[strings.Length];\nfor (int i = 0; i < strings.Length; i++)\n{\n \
    \   if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"))\n  \
    \      result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = new string[strings.Length];\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any library functions. I only have\
    \ to use loops, if statements, arrays, string manipulation, etc.\n<|/ c |>\n<|\
    \ c |>\nI added a solution without using any library functions. I hope it helps.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm new to C#, so I didn't\
    \ know about `Contains`. However, it seems that it only works for strings. Is\
    \ there a way to make it work for arrays of strings?\n<|/ c |>\n<| c |>\nYes,\
    \ you can make it work for arrays of strings. I updated my answer to show how.\n\
    <|/ c |>\n<| c |>\nThanks for the update. I'm still getting an error though: `The\
    \ best overloaded method match for 'string.Contains(string)' has some invalid\
    \ arguments`\n<|/ c |>\n<| c |>\nI updated my answer to show how to make it work\
    \ for arrays of strings.\n<|/ c |>\n<| c |>\nThanks for the update. I'm still\
    \ getting an error though: `The best overloaded method match for 'string.Contains(string)'\
    \ has some invalid arguments`\n<|/ c |>\n<| a dscore=1 |>\nYou can use the LINQ\
    \ method Contains:\n<code>\nstring[] myStrings = new string[] { \"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar result\
    \ = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myStrings = new string[] { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar\
    \ result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myString", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,arrays,c# |>\n<| c |>\nI like this solution. Very concise. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile. `string[]\
    \ result = new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.Add(s);\n    }\n    return\
    \ result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain \"a\".\n<|/ c |>\n<| c |>\n: I misunderstood the question.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try it\
    \ with `filter_by_substring(\"ab\", \"a\")`.\n<|/ c |>\n<| c |>\n: I misunderstood\
    \ the question. I've updated my answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter out all strings that don't contain \"a\".\n<|/ c |>\n<| c |>\n: I\
    \ misunderstood the question. I've updated my answer.\n<|/ c |>\n<| c |>\nThis\
    \ answer doesn't work. Try it with `filter_by_substring(\"ab\", \"a\")`.\n<|/\
    \ c |>\n<| c |>\n: I misunderstood the question. I've updated my answer.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to filter out all strings that don't contain \"\
    a\".\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try it with `filter_by_substring(\"\
    ab\", \"a\")`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't answ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| c |>\n\
    This doesn't work for me. I'm getting an error: Error 1 The type or namespace\
    \ name 'string' could not be found (are you missing a using directive or an assembly\
    \ reference?) \nError 2 The type or namespace name 'string' could not be found\
    \ (are you missing a using directive or an assembly reference?)\n<|/ c |>\n<|\
    \ c |>\nI added the using statements I needed. Thanks!\n<|/ c |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[]\
    \ filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c#,search |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 tags=string,arrays,c#,search\
    \ |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 tags=string,arrays,c#,search |>\n<| a dscore=1 |>\n<code>\n\
    string[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string[] FilterBySubstring(string[] strings, string substring)\n{\n \
    \   List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `filter_by_substring` returns an empty array when `strings[i]` is an empty\
    \ string. `strings[i].Contains(substring)` returns `true` when `strings[i]` is\
    \ an empty string.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out. :)\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach (string s\
    \ in strings) {\n        if (s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string array that contains multiple\
    \ strings that contain the substring you're looking for. For example, if you have\
    \ `[\"abc\", \"bacd\", \"cde\", \"array\"]` and you search for \"a\", you'll get\
    \ `[\"abc\", \"bacd\", \"array\"]` instead of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated the answer\
    \ to account for that.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've\
    \ updated the answer to account for that.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. I've updated the answer to account for that.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have a string array that contains multiple strings that contain the substring\
    \ you're looking for. For example, if you have `[\"abc\", \"bacd\", \"cde\", \"\
    array\"]` and you search for \"a\", you'll get `[\"abc\", \"bacd\", \"array\"\
    ]` instead of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string array that contains\
    \ multiple strings that contain the substring you're looking for. For example,\
    \ if you have `[\"abc\", \"bacd", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that start with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not end with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    public static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArgumentOutOfRangeException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\nYes, you're right. I was thinking about a more general solution.\
    \ I'll edit my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result =\
    \ new string[strings.length];\n</code>\nThis line is wrong. strings.length is\
    \ 0 because you never assigned any value to strings. You probably meant to use\
    \ strings.length instead.\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length is 0 because you never assigned any value to strings.\
    \ You probably meant to use strings.length instead.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length is 0 because you never assigned any value to strings.\
    \ You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n</code>\n\
    This line is wrong. strings.length is 0 because you never assigned any value to\
    \ strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n\
    <code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis code doesn't compile. `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string\
    \ |>\n<code>\npublic static string[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\npublic\
    \ static string[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\npublic static string[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] filter_by_substring(", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string. For example, if `strings` contains `\"abc\"` and `\"ab\"`, then `filter_by_substring`\
    \ will return `[\"abc\"]` instead of `[\"abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\n\
    I fixed it now. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\n\
    Thanks for your answer. I've tried your code, but I got this error \"The type\
    \ or namespace name 'string' could not be found (are you missing a using directive\
    \ or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added\
    \ the using statement for you. Make sure you add it at the top of your code file.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error \"The type or namespace name 'string' could not be found (are you missing\
    \ a using directive or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added\
    \ the using statement for you. Make sure you add it at the top of your code file.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error \"The type or namespace name 'string' could not be found (are you missing\
    \ a using directive or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I've tried your code, but I got this error \"The type or namespace name 'string'\
    \ could not be found (are you missing a using directive or an assembly reference?)\"\
    . I've added \"using System.Collections.Generic;\" but still not working. I'm\
    \ using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added the using statement for\
    \ you. Make sure you add it at the top of your code file.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input array of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (!s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (!s.Contains(substring)) {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input array of strings only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a tags=arrays,java,string |>\n<| a |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a dscore=1 tags=arrays,java,string\
    \ |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a tags=arrays,java,string |>\n<| a\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=1 tags=arrays,java,string |>\n<| a |>\n<code>\npublic static\
    \ String[] filterBySubstring(String[] strings, String substring) {\n", "{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use LINQ\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I'm sorry I didn't specify that I was looking for a solution\
    \ that doesn't use LINQ. I've edited my question to reflect this.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nstring[] result = array.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n<|\
    \ c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,filter |>\n\
    <| a tags=string,c#,arrays,filter |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,filter |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,filter\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,filter |>\n<| a tags=string,c#,arrays,filter |>\n\
    <code>\nstring[] filterBySubstring(string[] strings, string substring)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. I'm getting an \"Index was outside the\
    \ bounds of the array.\" error on the line `result[i] = strings[i];`\n<|/ c |>\n\
    <| c |>\n: I tested it and it works for me. Are you sure you copied it correctly?\
    \ I added a screenshot of my test program to the answer.\n<|/ c |>\n<| c |>\n\
    : I added a screenshot of my test program to the answer. Maybe you didn't copy\
    \ it correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as you did. I'm running\
    \ it on Visual Studio 2012. Maybe it's something with that?\n<|/ c |>\n<| c |>\n\
    : Yes, it could be a problem with Visual Studio 2012. Try running it in a different\
    \ IDE.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| c |>\nThis doesn't work for me. I'm getting an \"Index was outside the bounds\
    \ of the array.\" error on the line `result[i] = strings[i];`\n<|/ c |>\n<| a\
    \ tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work for me. I'm getting an \"Index was outside the bounds of the array.\"\
    \ error on the line `result[i] = strings[i];`\n<|/ c |>\n<| c |>\nCan you post\
    \ the full exception message?\n<|/ c |>\n<| c |>\nI added a screenshot of the\
    \ full exception message to the question.\n<|/ c |>\n<| c |>\n: I added a screenshot\
    \ of my test program to the answer. Maybe you didn't copy it correctly?\n<|/ c\
    \ |>\n<| c |>\nI copied it exactly as you did. I'm running it on Visual Studio\
    \ 2012. Maybe it's something with that?\n<|/ c |>\n<| a tags=", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].Contains(substring) : !strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach (string s in strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    public static void main(String[] args) {\n    String[] arr = {\"abc\", \"bacd\"\
    , \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr, \"a\"));\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work if you have a string with multiple substrings.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a string with multiple substrings.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] substringArray = { \"a\", \"b\", \"\
    c\" };", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I wonder why you used `string[] result\
    \ = new string[strings.length];` instead of `string[] result = strings.ToArray();`?\n\
    <|/ c |>\n<| c |>\nI used `string[] result = strings.ToArray();` because I wanted\
    \ to avoid the overhead of copying the array and I wanted to avoid the overhead\
    \ of creating a new array and copying the contents of the old array to the new\
    \ array. `string[] result = new string[strings.length];` would have worked just\
    \ as well.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation. :)\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, however it only works with strings. I need a solution that works\
    \ with any type of objects. I added a comment to my question to clarify this.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for any type of objects. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nI added a solution that works for any type\
    \ of objects. I tested it and it works.\n<|/ c |>\n<| a |>\n<code>\npublic static\
    \ void main(String[] args) {\n    List<String> list = new ArrayList<String>();\n\
    \    list.add(\"abc\");\n    list.add(\"bacd\");\n    list.add(\"cde\");\n   \
    \ list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n \
    \   list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do it without using LINQ?\n<|/ c |>\n<| c |>\n\
    Yes, you can do it without LINQ, but it will be more complicated. I'll post a\
    \ solution without LINQ.\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n\
    <|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't work.\
    \ strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that takes a string, and returns a boolean.\n<|/ c |>\n<| c |>\n\
    I fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that takes a string, and returns a boolean.\n<|/ c |>\n<| c |>\n\
    I fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search = \"a\";\n\
    var result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring\
    \ search = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\" };\nstring search = \"a\";\nvar result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain given substring\n    >>> filter_by_substring([], \"\
    a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Can you post the code you tried?\n<|/ c |>\n<| c |>\nI added the code\
    \ I tried. I also tried it with the `string` type instead of `string[]` but that\
    \ didn't work either.\n<|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n<|/ c |>\n<| a |>\n\
    <code>\npublic static string[] filter_by_substring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring` returns\
    \ an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works for me.\
    \ Can you post the code you tried?\n<|/ c |>\n<| c |>\nI added the code I tried.\
    \ I also tried it with the `string` type instead of `string[]` but that didn't\
    \ work either.\n<|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Can you post the code you tried?\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns an array of strings that\
    \ don't contain the substring `substring`. `filter_by_substring` doesn't return\
    \ an array of strings that contain the substring `substring`.\n<|/ c |>\n<| c\
    \ |>\n: I misunderstood the question. I've updated my answer to reflect this.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works.\n<|/ c |>\n<| c |>\nI got it to work. Thanks so much. I was able to modify\
    \ it a bit to make it work for my needs.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,string,arrays |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a dscore=0 tags=c#,.net,string,arrays |>\n<| a tags=c#,.net,string,arrays |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| c |>\n\
    This answer doesn't seem to work. `filter_by_substring` returns an empty array\
    \ for me. `filter_by_substring` should return `[\"abc\", \"bacd\", \"array\"]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Maybe you missed something\
    \ in the code?\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Maybe\
    \ you missed something in the code?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Maybe you missed something in the code?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine for me. Maybe you missed something in the code?\n<|/ c\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis answer doesn't seem to work. `filter_by_substring`\
    \ returns an empty array for me. `filter_by_substring` should return `[\"abc\"\
    , \"bacd\", \"array\"]`\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer\
    \ doesn't seem to work. `filter_by_substring` returns an empty array for me. `filter_by_substring`\
    \ should return `[\"abc\", \"bacd\", \"array\"]`\n<|/ c |>\n<| c |>\nThis answer\
    \ doesn't seem to work. `filter_by_substring` returns an empty array for me. `filter_by_substring`\
    \ should return `[\"abc\", \"bacd\", \"array\"]`\n<|/ c |>\n<| c |>\nThis answer\
    \ doesn't seem to work. `", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays,substring |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a tags=c#,string,arrays,substring\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays,substring |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain given substring\n    >>> filter_by_substring([], \"\
    a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain given substring\n    >>> filter_by_substring([], \"\
    a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>> ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nI like this solution, but I believe it can be made more efficient\
    \ by using a `HashSet<string>` instead of a `List<string>` for the `result` array.\
    \ `HashSet` has `O(1)` lookup time, while `List` has `O(n)` lookup time.\n<|/\
    \ c |>\n<| c |>\n: Yes, that's a good point. I've edited my answer to include\
    \ that suggestion.\n<|/ c |>\n<| c |>\nI believe that `HashSet` will perform better\
    \ than `List` because `HashSet` uses hashing internally, while `List` uses linear\
    \ search. `HashSet` also has `O(1)` lookup time, while `List` has `O(n)` lookup\
    \ time.\n<|/ c |>\n<| c |>\n: Yes, that's true. I've edited my answer to include\
    \ that as well.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer. Your code works fine for me, but I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Now I understand why my code doesn't work.\
    \ Your code works fine for me, but I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value. Please read this [how-to-answer](http://stackoverflow.com/help/how-to-answer)\
    \ for providing quality answer.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns a new array and doesn't\
    \ modify the original array. `strings` will still contain all the strings.\n<|/\
    \ c |>\n<| c |>\nI missed that part. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| a |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string ", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to filter out all strings that don't contain\
    \ `substring`, not just those that contain it.\n<|/ c |>\n<| c |>\nI see your\
    \ point, but I believe that my code does exactly that. I've added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\nNo, it doesn't. Your code returns `[\"abc\"\
    , \"bacd\", \"array\"]` for `filter_by_substring([\"abc\", \"bacd\", \"cde\",\
    \ \"array\"], \"a\")`, which is not what the OP asked for.\n<|/ c |>\n<| c |>\n\
    I see your point, but I believe that my code does exactly that. I've added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\nI see your point, but I believe that\
    \ my code does exactly that. I've added a test case to my answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nfunction filter_by_substring(string[] strings, string\
    \ substring)\n{\n    var result = new List<string>();\n    foreach(var s in strings)\n\
    \    {\n        if(s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to filter out all strings that don't contain\
    \ `substring`, not just those that contain it.\n<|/ c |>\n<| c |>\nI see your\
    \ point, but I believe that my code does exactly that. I've added a test case\
    \ to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \         result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter out all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my code ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>> ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string |>\n\
    <code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a tags=c#,.net,linq,string |>\n<code>", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays |>\n<| c |>\nI like your solution. Just\
    \ a small improvement: you can replace `strings[i].contains(substring)` with `strings[i].contains(substring,\
    \ 0, strings[i].length())`\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've\
    \ updated the answer to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.List;", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\npublic static string[] FilterString(string[] stringArray, string\
    \ searchString)\n{\n    List<string> filteredStrings = new List<string>();", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction filterBySubstring(string[]\
    \ strings, string substring)\n{\n    var result = new List<string>();\n    foreach(var\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach(var s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach(var\
    \ s in strings)\n    {\n        if(s.Contains(", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,string,c# |>\n<| c |>\n\
    This doesn't work. `string[] result = new string[strings.length];` will throw\
    \ an exception because `strings` isn't an array.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ forgot to add that line. Thanks for pointing that out. I've edited my answer.\n\
    <|/ c |>\n<| a tags=arrays,string,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array, so you cannot assign it to a\
    \ string array. \n<code>\nstring[] result = new string[strings.length];\n</code>\n\
    This line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new string[strings.length];\n</code>\nThis\
    \ line is also wrong. strings is an array, so you cannot assign it to a string\
    \ array. \n<code>\nstring[] result = new ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small library for doing this in\
    \ F#:\n<code>\nopen System.Collections.Generic", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=arrays,c#,string dscore=1 |>\n<| a tags=arrays,c#,string |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    var result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x\
    \ => x.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result\
    \ = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nI like your solution, however\
    \ I believe that `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.length - 1];` because `strings.length` returns `string`\
    \ and not `int`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing that\
    \ out. I've fixed it.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns int and you are trying to assign it to string[].\n<|/ a dscore=2 |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length returns int and you are trying to\
    \ assign it to string[].\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns int and you are trying to assign it to string[].\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length returns int and you are trying to\
    \ assign it to string[].\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns int and you are trying to assign it to string[].\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\n</code>\nThis line is wrong. strings.length returns\
    \ int and you are trying to assign it to string[].\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns int and you are trying to assign it to string[].\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for the answer. I am not allowed to use LINQ. I am not allowed\
    \ to use any loops. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=arrays,c#,string\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=arrays,", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static String[] filterBySubstring(String[] strings, String substring) {\n  \
    \  String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[] strings,\
    \ String substring) {\n    String[] result = new String[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string |>\n<| a tags=java,arrays,string |>\n\
    <code>\npublic static String[] filterBySubstring(String[] strings, String substring)\
    \ {\n    String[] result = new String[strings.length];\n    for (int i = 0; i\
    \ < ", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain given substring\n    >>> filter_by_substring([], \"\
    a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcabc\" and the substring \"ab\"\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcabc\" and the substring \"ab\"\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] stringArray = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n\
    <|/ a dscore=0 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ `filter_by_substring` returns an array of strings that don't contain the substring\
    \ anywhere in them. `filter_by_substring` should return an array of strings that\
    \ do contain the substring anywhere in them.\n<|/ c |>\n<| c |>\nI fixed the code\
    \ so it works as intended. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed\
    \ the code so it works as intended. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code so it works as intended. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java,string\
    \ |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an array of strings\
    \ that don't contain the substring anywhere in them. `filter_by_substring` should\
    \ return an array of strings that do contain the substring anywhere in them.\n\
    <|/ c |>\n<| c |>\nI fixed the code so it works as intended. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    String[] result\
    \ = new String[strings.length];\n    for (int i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `filter_by_substring` returns an array of strings that don't\
    \ contain the substring anywhere in them. `filter_by_substring` should return\
    \ an array of strings that do contain the substring anywhere in them.\n<|/ c |>\n\
    <| c |>\nI fixed the code so it works as intended. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\nvar result = new List<string>();\nforeach (var item in strings)\n{\n \
    \   if (item.Contains(\"a\"))\n    {\n        result.Add(item);\n    }\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer the question. He wants to\
    \ filter out all strings that don't contain \"a\", not just those that contain\
    \ \"a\".\n<|/ c |>\n<| c |>\n: I believe he wants to filter out all strings that\
    \ don't contain \"a\" not just those that contain \"a\"\n<|/ c |>\n<| c |>\n:\
    \ Yes, I believe so. He wants to filter out all strings that don't contain \"\
    a\" not just those that contain \"a\".\n<|/ c |>\n<| c |>\n: Yes, I believe so.\
    \ He wants to filter out all strings that don't contain \"a\" not just those that\
    \ contain \"a\".\n<|/ c |>\n<| c |>\n: Yes, I believe so. He wants to filter out\
    \ all strings that don't contain \"a\" not just those that contain \"a\".\n<|/\
    \ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the\
    \ question. He wants to filter out all strings that don't contain \"a\", not just\
    \ those that contain \"a\".\n<|/ c |>\n<| c |>\n: I believe he wants to filter\
    \ out all strings that don't contain \"a\" not just those that contain \"a\"\n\
    <|/ c |>\n<| c |>\n: Yes, I believe so. He wants to filter out all strings that\
    \ don't contain \"a\" not just those that contain \"a\".\n<|/ c |>\n<| a |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq dscore=1 |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to filter out all strings that don't contain ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\npublic static List<String> filterBySubstring(List<String> strings, String\
    \ substring) {\n    List<String> result = new ArrayList<String>();\n    for (String\
    \ string : strings) {\n        if (string.contains(substring)) {\n           \
    \ result.add(string);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=java,arrays,string |>\n<| a |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 tags=java,arrays,string |>\n<| a dscore=2 |>\n<code>\n\
    public static List<String> filterBySubstring(List<String> strings, String substring)\
    \ {\n    List<String> result = new ArrayList<String>();\n    for (String string\
    \ : strings) {\n        if (string.contains(substring)) {\n            result.add(string);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 tags=java,arrays,string |>\n<| a dscore=2 |>\n<code>\n\
    public static List<String> filterBySubstring(List<String> strings, String substring)\
    \ {\n    List<String> result = new ArrayList<String>();\n    for (String string\
    \ : strings) {\n        if (string.contains(substring)) {\n            result.add(string);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=java,arrays,string |>\n<code>\npublic static\
    \ List<String> filterBySubstring(List<String> strings, String substring) {\n \
    \   List<String> result = new ArrayList<String>();", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#,filter |>\n\
    <| c |>\nThis doesn't work if you have multiple substrings in the same string.\
    \ For example, if you have \"abc def ghi\" and you search for \"abc\" and \"def\"\
    , it will return \"abc def ghi\" instead of \"abc def\".\n<|/ c |>\n<| c |>\n\
    It will also return \"abc def ghi\" if you search for \"abc\" and \"def\" in the\
    \ same string. Try it out and see.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used the example you gave in your question. Maybe you missed something in\
    \ your question or you didn't test it properly.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I used the example you gave in your question. Maybe you missed\
    \ something in your question or you didn't test it properly.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used the example you gave in your question. Maybe\
    \ you missed something in your question or you didn't test it properly.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#,filter\
    \ |>\n<| c |>\nThis doesn't work if you have multiple substrings in the same string.\
    \ For example, if you have \"abc def ghi\" and you search for \"abc\" and \"def\"\
    , it will return \"abc def ghi\" instead of \"abc def\".\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have multiple substrings in the same string. For example,\
    \ if you have \"abc def ghi\" and you search for \"abc\" and \"def\", it will\
    \ return \"abc def ghi\" instead of \"abc def\".\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have multiple substrings in the same string. For example, if you\
    \ have \"abc def ghi\" and you search for \"abc\" and \"def\", it will return\
    \ \"abc def ghi\" instead of \"abc def\".\n<|/ c |>\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe OP wants\
    \ to filter out all strings that do not contain `substring`, not just those that\
    \ contain `substring`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll update my\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried it and it works.\
    \ But I still don't understand why my code doesn't work. Could you please explain\
    \ it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n\
    <| c |>\nThank you very much! Now I understand why my code doesn't work. :)\n\
    <|/ c |>\n<| a |>\n<code>\nfunction filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,c# |>\n<| c |>\nPlease add some explanation to your\
    \ answer.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c# |>\n<| c |>\nPlease\
    \ add some explanation to your answer.\n<|/ c |>\n<| a tags=arrays,c# |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a ", "{\n  \
    \  string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an\
    \ array of strings that don't contain `substring`, not an array of strings that\
    \ do contain `substring`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns an array of strings that\
    \ don't contain `substring`, not an array of strings that do contain `substring`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain `substring`, not an array of\
    \ strings that do contain `substring`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I added a test case to my answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe OP wants\
    \ to filter out all strings that do not contain \"a\". Your code returns all strings\
    \ that contain \"a\".\n<|/ c |>\n<| c |>\nYes, I missed that part. Thanks for\
    \ pointing it out. I've updated the answer accordingly.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport std.array;\nimport std.conv;\nimport std.string;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcde\" in the array and you search for \"a\" it will return \"abcde\"\
    \ instead of \"abc\".\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't\
    \ require a nested loop.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require a nested loop.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=0 |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a\
    \ tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\"\
    )).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[]\
    \ result = strings.Where(s => s.", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI really like this solution, however it only works\
    \ with strings. I need a solution that works with any type that implements IEnumerable.\
    \ I've updated the question to reflect this.\n<|/ c |>\n<| c |>\n: I updated my\
    \ answer with a solution that works with any type that implements IEnumerable.\n\
    <|/ c |>\n<| c |>\nThanks, I really like this solution. I was hoping for a solution\
    \ that didn't require me to write an extension method for each type that implements\
    \ IEnumerable, but I guess that's not possible.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\npublic static IEnumerable<T> Filter<T>(this IEnumerable<T> source, Func<T,\
    \ bool> predicate)\n{\n    foreach (T item in source)\n    {\n        if (predicate(item))\n\
    \            yield return item;\n    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<|\
    \ c |>\nThis doesn't work if you have a `List<T>` as source (which `List<T>` implements\
    \ `IEnumerable<T>`).\n<|/ c |>\n<| c |>\n: It works with any type that implements\
    \ IEnumerable<T>. List<T> implements IEnumerable<T>.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer with a solution that works with any type that implements IEnumerable.\n\
    <|/ c |>\n<| c |>\n: I updated my answer with a solution that works with any type\
    \ that implements IEnumerable.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ IEnumerable<T> Filter<T>(this IEnumerable<T> source, Func<T, bool> predicate)\n\
    {\n    foreach (T item in source)\n    {\n        if (predicate(item))\n     \
    \       yield return item;\n    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\npublic static IEnumerable<T> Filter<T>(this IEnumerable<T> source,\
    \ Func<T, bool> predicate)\n{\n    foreach (T item in source)\n    {\n       \
    \ if (predicate(item))\n            yield return item;\n    }\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\npublic static IEnumerable<T> ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \       {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but\
    \ this doesn't really answer the question. I'm looking for a way to do this without\
    \ using LINQ. I'm also looking for a way to do this without using any external\
    \ libraries.\n<|/ c |>\n<| c |>\nI appreciate your answer, but this doesn't really\
    \ answer the question. I'm looking for a way to do this without using LINQ. I'm\
    \ also looking for a way to do this without using any external libraries.\n<|/\
    \ c |>\n<| c |>\nI appreciate your answer, but this doesn't really answer the\
    \ question. I'm looking for a way to do this without using LINQ. I'm also looking\
    \ for a way to do this without using any external libraries.\n<|/ c |>\n<| c |>\n\
    I appreciate your answer, but this doesn't really answer the question. I'm looking\
    \ for a way to do this without using LINQ. I'm also looking for a way to do this\
    \ without using any external libraries.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't really answer the question. I'm looking for a way to\
    \ do this without using LINQ. I'm also looking for a way to do this without using\
    \ any external libraries.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a tags=string,arrays,c#,substring |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This code will throw an exception if `substring` is an empty string. `Contains`\
    \ will throw an exception if `substring` is null.\n<|/ c |>\n<| c |>\nGood catch.\
    \ Fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,arrays,c#,substring |>\n<| a dscore=1 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,substring |>\n<| a tags=string,arrays,c#,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't work. \nThe result should\
    \ be [\"abc\", \"bacd\", \"array\"]\n<|/ c |>\n<| c |>\n: I updated my answer.\
    \ Now it works as you want.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterString(string[]\
    \ input, string search)\n{\n    List<string> result = new List<string>();\n  \
    \  foreach (string s in input)\n    {\n        if (s.Contains(search))\n     \
    \   {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static string[] FilterString(string[] input, string search)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in input)\n    {\n     \
    \   if (s.Contains(search))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach (string s in strings) {\n\
    \        if (s.Contains(substring)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(", "{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,arrays,string,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string,substring |>\n<| a tags=c#,arrays,string,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string,substring |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string,substring |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string,substring |>\n<| a tags=c#,arrays,string,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis code doesn't compile. `string[] filterBySubstring(string[]\
    \ strings, string substring)` should be `string[] filterBySubstring(string[] strings,\
    \ string substring)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=2\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n \
    \   if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=0 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    public static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n<|\
    \ a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.To", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I didn't know that I can use\
    \ string[] as an argument in methods. But I still don't understand how I can use\
    \ that method with my own string[]. Can you give me an example of how to use it?\n\
    <|/ c |>\n<| c |>\nI added an example to the answer.\n<|/ c |>\n<| c |>\nThank\
    \ you very much! I understand it now!\n<|/ c |>\n<| a tags=java,arrays,string\
    \ |>\n<code>\npublic static void main(String[] args) {\n    String[] strings =\
    \ new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n    String[] result =\
    \ filterBySubstring(strings, \"a\");\n    System.out.println(Arrays.toString(result));\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI like the idea of using LINQ, but this doesn't work if you have\
    \ a string array that contains strings that don't contain the substring.\n<|/\
    \ c |>\n<| c |>\nI added a version that works with strings that don't contain\
    \ the substring.\n<|/ c |>\n<| c |>\nI added a version that works with strings\
    \ that don't contain the substring.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[strings.length];\n    for(int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c#,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c#,substring |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer. Code-only answers are discouraged\
    \ on Stack Overflow.\n<|/ c |>\n<| a tags=string,arrays,c#,substring |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,arrays,c#,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 tags=string,arrays,c#,substring |>\n<| c |>", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nI like the idea of using LINQ, but this doesn't work for me. I\
    \ get an error that says \"The type arguments for method 'System.Linq.Enumerable.SelectMany<TSource,TResult>(System.Collections.Generic.IEnumerable<TSource>,\
    \ System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)' cannot\
    \ be inferred from the usage. Try specifying the type arguments explicitly.\"\
    \ I'm new to LINQ, so I'm not sure how to fix this.\n<|/ c |>\n<| c |>\nI fixed\
    \ the error, but now I'm getting a new error: \"Cannot implicitly convert type\
    \ 'string[]' to 'string'\" on the line \"return string[] result;\"\n<|/ c |>\n\
    <| c |>\nI fixed the error by changing \"string[] result;\" to \"string result;\"\
    \ but now I'm getting a new error: \"Cannot implicitly convert type 'string[]'\
    \ to 'string'\" on the line \"return result;\"\n<|/ c |>\n<| c |>\nI fixed the\
    \ error by changing \"string[] result;\" to \"string result;\" but now I'm getting\
    \ a new error: \"Cannot implicitly convert type 'string[]' to 'string'\" on the\
    \ line \"return result;\"\n<|/ c |>\n<| c |>\nI fixed the error by changing \"\
    string[] result;\" to \"string result;\" but now I'm getting a new error: \"Cannot\
    \ implicitly convert type 'string[]' to 'string'\" on the line \"return result;\"\
    \n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have multiple occurrences of the substring\
    \ in the string. For example, if you have \"abcabc\" and \"abc\", it will return\
    \ \"abcabc\" instead of \"abc\".\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting. I will update my answer to include a solution that does that.\n\
    <|/ c |>\n<| c |>\nI tested it again and it does work. My apologies. I must have\
    \ had a typo when I first tested it.\n<|/ c |>\n<| c |>\nNo problem. Thanks for\
    \ testing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n     \
    \   result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n    String[]\
    \ arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    String[] result = filter_by_substring(arr,\
    \ \"a\");\n    System.out.println(Arrays.toString(result));\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] strArray = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    string[] strArray = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=1 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] strArray = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nstring[] strArray = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,string,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tag", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I actually want to filter\
    \ out all strings that do not contain given substring. Your code returns all strings\
    \ that contain given substring.\n<|/ c |>\n<| c |>\nOh, I see. I've updated my\
    \ answer with a new function which does exactly what you want.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer! I actually want to filter out all strings that do\
    \ not contain given substring. Your code returns all strings that contain given\
    \ substring. My code returns all strings that do not contain given substring.\
    \ Your code returns all strings that contain given substring.\n<|/ c |>\n<| c\
    \ |>\nOh, I see. I've updated my answer with a new function which does exactly\
    \ what you want.\n<|/ c |>\n<| c |>\nThanks for your answer! I actually want to\
    \ filter out all strings that do not contain given substring. Your code returns\
    \ all strings that contain given substring. My code returns all strings that do\
    \ not contain given substring. Your code returns all strings that contain given\
    \ substring.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring [] strings = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring substring = \"a\";\nstring[] result\
    \ = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/\
    \ c |>\n<| c |>\nI added a more efficient version that uses `StringBuilder` instead\
    \ of `StringBuffer`.\n<|/ c |>\n<| c |>\nThanks so much for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/\
    \ c |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much\
    \ for the help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much for the help!\
    \ I appreciate it!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[", "{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThis doesn't work if you have a\
    \ string array containing \"abc\" and \"abd\" for example. You'll get \"abc\"\
    \ twice in the result array.\n<|/ c |>\n<| c |>\n: Yes, I see what you mean. I've\
    \ edited my answer to fix this.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n     \
    \   result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string dscore=1\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a d", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution. Very clean and easy to understand. Thanks!\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c\
    \ |>\n", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ solution, but I wonder why you didn't use std.algorithm.filter? It would be\
    \ more efficient and easier to read.\n<|/ c |>\n<| c |>\nI didn't know about std.algorithm.filter.\
    \ Thanks for pointing it out. I'll update my answer with your suggestion.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI like Andrey's answer, but here's another one that\
    \ uses std.algorithm.filter:\n<code>\nimport std.algorithm;", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays,substring\
    \ |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question, which is about a\
    \ specific string being in a list of strings. Your answer doesn't even attempt\
    \ to do that.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my answer\
    \ does answer the question. He wants to filter out strings that contain given\
    \ substring. He also stated that he is using C#, so I believe that my answer does\
    \ exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what ", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to use a\
    \ `HashSet<string>` instead of a `List<string>` for the `result` array. `HashSet`\
    \ has better performance characteristics than `List`.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, HashSet is better than List in this case. Thanks for pointing out.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nThis doesn't answer the question. OP wants to\
    \ know if there is a way to do this without looping through the array twice.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll leave this here\
    \ for future reference, but I guess I'll delete it after OP clarifies their question.\n\
    <|/ c |>\n<| c |>\nI agree with you. OP should clarify their question before answering.\n\
    <|/ c |>\n<| c |>\nI agree with you too. OP should clarify their question before\
    \ answering.\n<|/ c |>\n<| c |>\nI agree with you too. OP should clarify their\
    \ question before answering.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] arr\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring[] arr2 = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=2\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a ", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].Contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries other\
    \ than System.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than System.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any libraries other than System.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any libraries other than System.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries other than System.\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ System.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n  \
    \  if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n  \
    \  }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any libraries other than System.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays,linq |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,linq |>\n<| a tags=c#,string,arrays,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have a string like \"abc def ghi jkl mno\" and\
    \ you search for \"def\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work.\
    \ Try it yourself. It doesn't work if you have a string like \"abc def ghi jkl\
    \ mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ Try it yourself. It works if you have a string like \"abc def ghi jkl mno\"\
    \ and you search for \"def\"\n<|/ c |>\n<| c |>\nI tested it and it works. Try\
    \ it yourself. It works if you have a string like \"abc def ghi jkl mno\" and\
    \ you search for \"def\"\n<|/ c |>\n<| a tags=string,c# |>\n<code>\npublic static\
    \ string Remove(string input, string search)\n{\n    int pos = 0;\n    int length\
    \ = search.Length;\n    string result = \"\";\n    while (pos < input.Length)\n\
    \    {\n        int index = input.IndexOf(search, pos);\n        if (index ==\
    \ -1)\n        {\n            result += input.Substring(pos);\n            break;\n\
    \        }\n        result += input.Substring(pos, index - pos);\n        pos\
    \ = index + length;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have a string like \"abc def ghi jkl mno\" and\
    \ you search for \"def\"\n<|/ c |>\n<| c |>\nI tested it and it doesn't work.\
    \ Try it yourself. It doesn't work if you have a string like \"abc def ghi jkl\
    \ mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ Try it yourself. It works if you have a string like \"abc def ghi jkl mno\"\
    \ and you search for \"def\"\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static\
    \ string Remove(string input, string search)\n{", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that do not contain given substring\n    >>> filter_by_substring([], \"\
    a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> ", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArrayIndexOutOfBoundsException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\nI fixed the code by adding `strings.length` to the array size\
    \ in the for loop. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an `ArrayIndexOutOfBoundsException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| c |>\nI fixed the code by adding\
    \ `strings.length` to the array size in the for loop. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n\
    \    String[] strings = new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    \    System.out.println(filter_by_substring(strings, \"a\"));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
