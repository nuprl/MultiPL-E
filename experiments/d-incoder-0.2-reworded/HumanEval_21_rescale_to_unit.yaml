name: HumanEval_21_rescale_to_unit
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Given array of numbers (of at\
  \ least two elements), apply a linear transform to that array,\n    such that the\
  \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
  \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
  \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  }\nvoid main(){}"
completions: ["{\n    float min = numbers[0];\n    float max = numbers[0];\n    \n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        else if(numbers[i] > max)\n          \
    \  max = numbers[i];\n    }\n    \n    float scale = (max - min) / (float)(numbers.length\
    \ - 1);\n    \n    float[] result = new float[numbers.length];\n    for(int i\
    \ = 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n   \
    \ \n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        float number = numbers[i];\n      \
    \  if(number < min)\n            min = number;\n        if(number > max)\n   \
    \         max = number;\n        result[i] = (number - min) / (max - min);\n \
    \   }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not the correct\
    \ answer. `min` and `max` should be initialized to `numbers[0]` and `numbers[0]`,\
    \ respectively, and `numbers` should be initialized to `new float[numbers.length]`.\n\
    <|/ c |>\n<| c |>\n: I believe that `min` and `max` should be initialized to `numbers[0]`\
    \ and `numbers[0]`, respectively, and `numbers` should be initialized to `new\
    \ float[numbers.length]`.\n<|/ c |>\n<| c |>\n: I believe that `min` and `max`\
    \ should be initialized to `numbers[0]` and `numbers[0]`, respectively, and `numbers`\
    \ should be initialized to `new float[numbers.length]`.\n<|/ c |>\n<| c |>\n:\
    \ I believe that `min` and `max` should be initialized to `numbers[0]` and `numbers[0]`,\
    \ respectively, and `numbers` should be initialized to `new float[numbers.length]`.\n\
    <|/ c |>\n<| c |>\n: I believe that `min` and `max` should be initialized to `numbers[0]`\
    \ and `numbers[0]`, respectively, and `numbers` should be initialized to `new\
    \ float[numbers.length]`.\n<|/ c |>\n<| a dscore=4 |>\nI wrote this simple function\
    \ which works perfectly for me:\n<code>\npublic static float[] rescale(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if(number < min) {\n   \
    \         min = number;\n        }\n        if(number > max) {\n            max\
    \ = number;\n        }\n        result[i] = (number - min) / (max - min);\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,rescale |>\n<| c\
    \ |>\nThis is not the correct answer. `min` and `max` should be initialized to\
    \ `numbers[0]` and `numbers[0]`, respectively, and `numbers` should be initialized\
    \ to `new float[numbers.length]`.\n<|/ c |>\n<| c |>\nI believe that `min` and\
    \ `max` should be initialized to `numbers[0]` and `numbers[0]", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n    \
    \    min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,math |>\n<| c |>\n\
    This doesn't work if the array is all zeros, because `min` will be `0.0f` and\
    \ so `range` will be `0.0f` and the scale will be `1.0f`\n<|/ c |>\n<| c |>\n\
    I added a version that handles zeros correctly\n<|/ c |>\n<| a tags=java,arrays,math\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\
    \ {\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=3 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for(int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] *= scale;\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a tags=java,arrays,math |>\n<| a dscore=3 |>\n<code>\npublic static\
    \ float[] rescale_to_unit(float[] numbers) {\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    float range = max - min;\n    float scale = 1.0f\
    \ / range;\n    for(int i = 0; i < numbers.length; i++) {\n        numbers[i]\
    \ *= scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a tags=java,arrays,math\
    \ |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for(int i = 0; i <\
    \ numbers.length; i++) {\n        numbers[i] *= scale;\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=java,", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = (max - min);\n\
    \    float scale = (range/numbers.length);\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. `rescale_to_unit([-10, -20, -30,\
    \ -40, -50])` returns `[-10, -20, -30, -40, -50]` instead of `[-10, -20, -30,\
    \ -40, -50]`.\n<|/ c |>\n<| c |>\nI believe this solution will work fine for negative\
    \ numbers. I tested it on negative numbers and it worked fine. Can you please\
    \ provide an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it on\
    \ negative numbers and it worked fine. Can you please provide an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nI tested it on negative numbers and it\
    \ worked fine. Can you please provide an example where it doesn't work?\n<|/ c\
    \ |>\n<| c |>\nI tested it on negative numbers and it worked fine. Can you please\
    \ provide an example where it doesn't work?\n<|/ c |>\n<| a dscore=1 |>\nI wrote\
    \ a small library that does this for you:\n<code>\nimport std.math;\nimport std.array;",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = (max - min);\n    float scale = (float)(range / numbers.length);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = (numbers[i]\
    \ - min) * scale + 0.5;\n    return numbers;\n}", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float range = (max - min);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        result[i] = numbers[i] - min;\n    float\
    \ scale = range / result.length;\n    for (int i = 0; i < numbers.length; i++)\n\
    \        result[i] *= scale;\n    return result;\n}\n</code>\n<|/ a tags=math,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try rescale_to_unit([-5,\
    \ -10, -15, -20, -25])\n<|/ c |>\n<| c |>\nI fixed the negative numbers issue.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ negative numbers. Try rescale_to_unit([-5, -10, -15, -20, -25])\n<|/ c |>\n\
    <| c |>\nI fixed the negative numbers issue. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a tags=math,c#,algorithm |>\nI wrote a C# version that works with negative\
    \ numbers and also with zeros:\n<code>\npublic static class MathExtensions\n{\n\
    \    public static double RescaleToUnit(this double value, double min, double\
    \ max)\n    {\n        if (min == max)\n            return value;", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    \n    for (int i = 1; i\
    \ < numbers.length; i++)\n    {\n        if (numbers[i] < min)\n            min\
    \ = numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    \n    float range = (max - min);\n    float scale = (float)(1.0 /\
    \ range);\n    \n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n \
    \   \n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,math |>\n<| c |>\n\
    This doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used the example you gave in the\
    \ question. Are you sure you used the code exactly as I wrote it? I tested it\
    \ on C# and it works.\n<|/ c |>\n<| c |>\nI used the code exactly as you wrote\
    \ it. I used the example you gave in the question. Are you sure you used the code\
    \ exactly as I wrote it? I tested it on C# and it works.\n<|/ c |>\n<| c |>\n\
    I tested it on C# and it works. I used the example you gave in the question. Are\
    \ you sure you used the code exactly as I wrote it? I tested it on C# and it works.\n\
    <|/ c |>\n<| c |>\nI tested it on C# and it works. I used the example you gave\
    \ in the question. Are you sure you used the code exactly as I wrote it? I tested\
    \ it on C# and it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers)\n{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];", "{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    foreach (float number in numbers)\n    {\n        min = Mathf.Min(min, number);\n\
    \        max = Mathf.Max(max, number);\n    }\n    float[] result = new float[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ / max - min;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static float[] rescale(float[] numbers)\n{\n   \
    \ float min = float.MaxValue;\n    float max = float.MinValue;\n    foreach (float\
    \ number in numbers)\n    {\n        min = Mathf.Min(min, number);\n        max\
    \ = Mathf.Max(max, number);\n    }\n    float[] result = new float[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ / max - min;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static float[] rescale(float[] numbers)\n\
    {\n    float min = float.MaxValue;\n    float max = float.MinValue;\n    foreach\
    \ (float number in numbers)\n    {\n        min = Mathf.Min(min, number);\n  \
    \      max = Mathf.Max(max, number);\n    }\n    float[] result = new float[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ / max - min;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static float[] rescale(float[] numbers)\n{\n   \
    \ float min = float.MaxValue;\n    float max = float.MinValue;\n    foreach (float\
    \ number in numbers)\n    {\n        min = Mathf.Min(min, number);\n        max\
    \ = Mathf.Max(max, number);\n    }\n    float[] result = new float[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ / max - min;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static float[] rescale(float[] numbers)\n\
    {\n    float min = float.MaxValue;\n    float max = float.MinValue;\n    foreach\
    \ (float number in numbers)\n    {\n        min = Mathf.Min(min, number);\n  \
    \      max = Mathf.Max(max, number);\n", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; ++i) {\n        sum += numbers[i];\n\
    \        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    float scale = 1.0f / (max - min);\n    for (int\
    \ i = 0; i < numbers.length; ++i) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,math\
    \ |>\n<code>\npublic static float[] Rescale(float[] numbers, float min, float\
    \ max)\n{\n    float sum = 0;\n    float scale = (max - min) / (float)numbers.Length;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n\
    \        numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,math |>\n<code>\npublic static float[]\
    \ Rescale(float[] numbers, float min, float max)\n{\n    float sum = 0;\n    float\
    \ scale = (max - min) / (float)numbers.Length;\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        sum += numbers[i];\n        numbers[i] = numbers[i] * scale;\n\
    \    }\n    return numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,math\
    \ |>\n<code>\npublic static float[] Rescale(float[] numbers, float min, float\
    \ max)\n{\n    float sum = 0;\n    float scale = (max - min) / (float)numbers.Length;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n\
    \        numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,math |>\n<code>\npublic static float[]\
    \ Rescale(float[] numbers, float min, float max)\n{\n    float sum = 0;\n    float\
    \ scale = (max - min) / (float)numbers.Length;\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        sum += numbers[i];\n        numbers[i] = numbers[i] * scale;\n\
    \    }\n    return numbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    public static float[] Rescale(float[] numbers, float min, float max)\n{\n    float\
    \ sum = 0;\n    float scale = (max - min) / (float)numbers.Length;\n    for (int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n       \
    \ numbers[i] = numbers[i] * scale;\n", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n\
    \        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    \n    float[] result = new\
    \ float[numbers.length];\n    for(int i = 0; i < numbers.length; i++)\n      \
    \  result[i] = (numbers[i] - min) / (max - min);\n    \n    return result;\n}",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    float sum2 = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n  \
    \      sum2 += numbers[i] * numbers[i];\n        if (numbers[i] > max)\n     \
    \   {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    float scale =\
    \ (max - min) / (sum2 - sum * sum);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,java,math |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] numbers = {1, 2, 3, 4, 5};\n    int[]\
    \ result = rescale_to_unit(numbers);\n    System.out.println(Arrays.toString(result));\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = numbers[i] * scale;\n    return result;\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       else if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ range = max - min;\n    float scale = (float)(1.0 / range);\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; ++i)\n\
    \        result[i] = numbers[i] * scale;\n    return result;\n}", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = float.MAX_VALUE;\n    float\
    \ max = float.MIN_VALUE;\n    float sum = 0;\n    float sumOfSquares = 0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        sumOfSquares += numbers[i] * numbers[i];\n    }\n    float average =\
    \ sum / numbers.length;\n    float averageOfSquares = sumOfSquares / numbers.length;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - average) * (numbers[i] - average) / averageOfSquares;\n        min = Math.min(min,\
    \ result[i]);\n        max = Math.max(max, result[i]);\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nfunction rescale_to_unit(numbers)\
    \ {\n    var min = numbers.reduce(function(a, b) {\n        return Math.min(a,\
    \ b);\n    });\n    var max = numbers.reduce(function(a, b) {\n        return\
    \ Math.max(a, b);\n    });\n    var sum = numbers.reduce(function(a, b) {\n  \
    \      return a + b;\n    });\n    var average = sum / numbers.length;\n    var\
    \ averageOfSquares = sum * sum / numbers.length;\n    return numbers.map(function(number)\
    \ {\n        return (number - average) * (number - average) / averageOfSquares;\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,math,javascript |>\n<| a dscore=0 |>\n\
    <code>\nfunction rescale_to_unit(numbers) {\n    var min = numbers.reduce(function(a,\
    \ b) {\n        return Math.min(a, b);\n    });\n    var max = numbers.reduce(function(a,\
    \ b) {\n        return Math.max(a, b);\n    });\n    var sum = numbers.reduce(function(a,\
    \ b) {\n        return a + b;\n    });\n    var average = sum / numbers.length;\n\
    \    var averageOfSquares = sum * sum / numbers.length;\n    return numbers.map(function(number)\
    \ {\n        return (number - average) * (number - average) / averageOfSquares;\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,math,javascript |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nfunction rescale_to_unit(numbers) {\n    var min = numbers.reduce(function(a,\
    \ b) {\n        return Math.min(a, b);\n    });\n    var max = numbers.reduce(function(a,\
    \ b) {\n        return Math.max(a, b);\n    });\n    var sum = numbers.reduce(function(a,\
    \ b) {\n        return a + b;\n    });\n    var average = sum / numbers.length;\n\
    \    var averageOfSquares = sum * sum / ", "{\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n   \
    \ {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (numbers.length - 1);\n    float[] result = new float[numbers.length];\n \
    \   for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a tags=math,c#,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array has negative numbers. Try it with\
    \ `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\nYes, it does. Try it with\
    \ `[-1.0, 2.0, 3.0, 4.0, -5.0]`.\n<|/ c |>\n<| c |>\nI guess you meant `[-1.0,\
    \ 2.0, 3.0, 4.0, 5.0]` instead of `[-1.0, 2.0, 3.0, 4.0, -5.0]`\n<|/ c |>\n<|\
    \ c |>\nYes, I did. Thanks for pointing that out. Fixed.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the array has negative numbers. Try it with `[-1.0, 2.0,\
    \ 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = (max - min) / (numbers.length - 1);\n\
    \    float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=math,c#,algorithm,arrays |>\n<| c |>\nThis doesn't work if the array\
    \ has negative numbers. Try it with `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array has negative numbers. Try it with `[-1.0,\
    \ 2.0, 3.0, 4.0, -5.0]`.\n<|/ c |>\n<| c |>\nThis doesn't work if the array has\
    \ negative numbers. Try it with `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if the array has negative numbers. Try it with `[-1.0,\
    \ 2.0, 3.0, 4.0, 5.0]`.\n<|/", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays\
    \ |>\n<| a |>\nI wrote this in C#:\n<code>\npublic static class ArrayExtensions\n\
    {\n    public static float[] Rescale(float[] numbers, float min, float max)\n\
    \    {\n        float[] result = new float[numbers.Length];\n        float scale\
    \ = max - min;\n        for (int i = 0; i < numbers.Length; i++)\n        {\n\
    \            result[i] = numbers[i] - min;\n            result[i] *= scale;\n\
    \        }\n        return result;\n    }\n}\n</code>\n<|/ a dscore=2 tags=c#,math,arrays\
    \ |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static float[] Rescale(float[]\
    \ numbers, float min, float max)\n{\n    float[] result = new float[numbers.Length];\n\
    \    float scale = max - min;\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        result[i] = numbers[i] - min;\n        result[i] *= scale;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,math,arrays\
    \ |>\n<code>\npublic static float[] Rescale(float[] numbers, float min, float\
    \ max)\n{\n    float[] result = new float[numbers.Length];\n    float scale =\
    \ max - min;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i]\
    \ = numbers[i] - min;\n        result[i] *= scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static\
    \ float[] Rescale(float[] numbers, float min, float max)\n{\n    float[] result\
    \ = new float[numbers.Length];\n    float scale = max - min;\n    for (int i =\
    \ 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static float[] Rescale(float[] numbers,\
    \ float min, float max)\n{\n    float[] result = new float[numbers.", "{\n   \
    \ float[] result = new float[numbers.length];\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n   \
    \ {\n        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work when you have negative\
    \ numbers. I believe it should be: `float range = numbers[i] - min;`\n<|/ c |>\n\
    <| c |>\nI believe that `numbers[i] - min` will give the absolute value of the\
    \ difference, which is not what OP wants.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I was thinking about a more general solution. I'll edit my answer.\n<|/ c |>\n\
    <| a dscore=1 |>\nI believe that this is what you're looking for:\n<code>\npublic\
    \ static float[] rescale_to_unit(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;\n    float scale = 1.0f / range;\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic\
    \ static float[] rescale_to_unit(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float range = numbers[0];\n    for (int i =\
    \ 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n           \
    \ max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n    }\n    float scale = 1.0f / range;\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float range = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work.\
    \ `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the code I posted in the answer. Maybe you forgot to\
    \ copy the code from the answer?\n<|/ c |>\n<| c |>\nI copied your code exactly\
    \ and ran it. It returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI tested it again and it works. I used\
    \ the code I posted in the answer. Maybe you forgot to copy the code from the\
    \ answer?\n<|/ c |>\n<| c |>\nI copied your code exactly and ran it. It returns\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/\
    \ c |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    float scale = (max - min) / (numbers.length - 1);\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays,math\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    ", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \         max = numbers[i];\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n  \
    \  for (int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. For example,\
    \ [-1, -2, -3, -4, -5] is mapped to [-0.083333333, -0.166666667, -0.250000000,\
    \ -0.333333333, -0.400000005]\n<|/ c |>\n<| c |>\n: It works just fine for negative\
    \ numbers. Try it yourself.\n<|/ c |>\n<| c |>\nIt works fine for negative numbers.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself. Try it yourself. Try it yourself. Try it yourself.\
    \ Try it yourself. Try it yourself.", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = (float)(1.0f / range);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does\
    \ not work if the array contains negative numbers. Try it with `[-1.0, 0.0, 1.0]`.\n\
    <|/ c |>\n<| c |>\nI agree, that is a problem. I'll edit my answer to include\
    \ a solution that will handle negative numbers. Thanks!\n<|/ c |>\n<| c |>\nI\
    \ added a solution that will handle negative numbers. Thanks!\n<|/ c |>\n<| c\
    \ |>\nI added a solution that will handle negative numbers. Thanks!\n<|/ c |>\n\
    <| a |>\nI came up with a solution that will handle negative numbers. I first\
    \ calculate the minimum and maximum numbers in the array. Then I calculate the\
    \ range of the numbers. Then I calculate the scale factor and multiply each number\
    \ in the array by that factor.\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    float range = max - min;\n   \
    \ float scale = (float)(1.0f / range);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 tags=java,arrays |>\n<| a dscore=1 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float range = max\
    \ - min;\n    float scale = (float)(1.0f / range);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float range = max\
    \ - min;\n    float scale = (float)(1.0f / range);\n    ", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n\
    \            max = numbers[i];\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n    }\n    float range = (max - min);\n    float scale = (range/numbers.length);\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,math\
    \ |>\n<| c |>\nThis doesn't seem to work. Try it with `[1.0, 2.0, 3.0, 4.0, 5.0]`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it with `[1.0, 2.0, 3.0, 4.0, 5.0]`. What\
    \ do you mean by \"doesn't seem to work\"? It returns `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]`\n<|/ c |>\n<| c |>\nI mean that it doesn't work for me. Try it with `[1.0,\
    \ 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nI tested it with `[1.0, 2.0, 3.0, 4.0,\
    \ 5.0]` and it returned `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI tested\
    \ it with `[1.0, 2.0, 3.0, 4.0, 5.0]` and it returned `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]`\n<|/ c |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float range = 0;\n    for (int i = 0; i < numbers.length; i++) {\n      \
    \  if (numbers[i] > max) {\n            max = numbers[i];\n        }\n       \
    \ if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n \
    \   range = max - min;\n    float scale = (range / numbers.length);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. Try it with\
    \ `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nIt works. I tested it with `[1.0,\
    \ 2.0, 3.0, 4.0, 5.0]`. What do you mean by \"doesn't seem to work\"? It returns\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI mean that it doesn't work\
    \ for me. Try it with `[1.0, ", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    float range = max - min;\n    float scale\
    \ = 1.0f / range;\n    float[] result = new float[numbers.length];\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n \
    \   return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe easiest\
    \ way is to use MathUtils.clamp(float min, float max, float value) from the Apache\
    \ Commons Math library. \n<code>\nfloat min = Float.MAX_VALUE;\nfloat max = Float.MIN_VALUE;\n\
    float value = Float.MIN_VALUE;\nfloat result = MathUtils.clamp(min, max, value);\n\
    </code>\n<|/ a tags=java,arrays,math |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float rescaleToUnit(float min, float max, float[] numbers) {\n    float range\
    \ = (max - min);\n    float scale = 1f / range;\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,math\
    \ |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; i++) {\n        if(numbers[i] < min)\n          \
    \  min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    float[]\
    \ result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays,math |>\n<code>\npublic static\
    \ float[] rescaleToUnit(float[] numbers) {\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; i++) {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    float range = max - min;\n    float scale\
    \ = 1.0f / range;\n    float[] result = new float[numbers.length];\n    for(int\
    \ i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i] * scale;\n",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float number = numbers[i];\n        if(number < min)\n         \
    \   min = number;\n        if(number > max)\n            max = number;\n    }\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try rescale_to_unit([-10,\
    \ -20, -30, -40, -50])\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers. Try rescale_to_unit([-10, -20, -30, -40, -50])\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have negative numbers. Try rescale_to_unit([-10, -20,\
    \ -30, -40, -50])\n<|/ c |>\n<| a dscore=4 |>\n<code>\npublic static float RescaleToUnit(float\
    \ value)\n{\n    float scale = (float)Math.Max(Math.Abs(value), 1.0f);\n    return\
    \ value * scale;\n}\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try rescale_to_unit([-10, -20, -30, -40,\
    \ -50])\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. Try\
    \ rescale_to_unit([-10, -20, -30, -40, -50])\n<|/ c |>\n<| a tags=c#,math,algorithm\
    \ |>\n<code>\npublic static float RescaleToUnit(float value)\n{\n    float scale\
    \ = (float)Math.Max(Math.Abs(value), 1.0f);\n    return value * scale;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you have negative numbers. Try\
    \ rescale_to_unit([-10, -20, -30, -40, -50])\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try rescale_to_unit([-10, -20, -30, -40,\
    \ -50])\n<|/ c |>\n<| a dscore=4 |>\n<code>\npublic static float RescaleToUnit(float\
    \ value)\n{\n    ", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for(int i = 0; i <\
    \ numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays,algorithm |>\n<| c\
    \ |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the code from your question.\
    \ Maybe you missed something in the code?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used the code from your question. Maybe you missed something in\
    \ the code?\n<|/ c |>\n<| c |>\nI tested it and it works. I used the code from\
    \ your question. Maybe you missed something in the code?\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used the code from your question. Maybe you missed\
    \ something in the code?\n<|/ c |>\n<| a dscore=1 |>\nThe code below is based\
    \ on a previous answer by Jack Fleeting\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float range = max - min;\n \
    \   float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,math,arrays,algorithm |>\n<| a tags=c#,math,arrays,algorithm\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers)\n{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n    \
    \    if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; ++i)\n\
    \        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/\
    \ a tags=math,java,arrays |>\n<| c |>\nThis does not answer the question. OP wants\
    \ to rescale an array of numbers to fit a certain range. Your answer rescales\
    \ numbers to fit a certain range. OP wants to rescale an array of numbers to fit\
    \ a certain range.\n<|/ c |>\n<| c |>\nThe question was \"how to rescale an array\
    \ of numbers to fit a certain range\". The answer was \"rescale an array of numbers\
    \ to fit a certain range\". The answer was given by \"Jonathan Leffler\". The\
    \ answer was given by \"Jonathan Leffler\" because he was the first person to\
    \ answer this question. He was the first person to answer this question because\
    \ he was the first person to answer this question. He was the first person to\
    \ answer this question because he was the first person to answer this question.\
    \ He was the first person to answer this question because he was the first person\
    \ to answer this question. He was the first person to answer this question because\
    \ he was the first person to answer this question. He was the first person to\
    \ answer this question because he was the first person to answer this question.\
    \ He was the first person to answer this question because he was the first person\
    \ to answer this question. He was the first person to answer this question because\
    \ he was the first person to answer this question.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"how to rescale an array of numbers to fit a certain range\". The answer\
    \ was \"rescale an array of numbers to fit a certain range\". The answer was given\
    \ by \"Jonathan Leffler\". The answer was given by \"Jonathan Leffler\" because\
    \ he was the first person to answer this question. He was the first person to\
    \ answer this question because he was the first person to answer this question.\
    \ He was the first person to answer this question because he was the first person\
    \ to answer this question. He was the first person to answer this question because\
    \ he was the first person to answer this question. He was the first person to\
    \ answer this ", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float range = (max - min);\n    float scale = (range/numbers.length);\n\
    \    float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,math,arrays |>\n<| a dscore=2 |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float range = (max - min);\n    float scale = (range/numbers.length);\n\
    \    float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,math,arrays |>\n<| a dscore=2 |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float range = (max - min);\n    float scale = (range/numbers.length);\n\
    \    float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,math,arrays |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n    \
    \    if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = (max - min);\n\
    \    float scale = (range/numbers.length);\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,math",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] > max)\n            max = numbers[i];\n        if\
    \ (numbers[i] < min)\n            min = numbers[i];\n    }\n    float range =\
    \ max - min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = numbers[i] - min;\n        result[i] /= range;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction rescale_to_unit(numbers)\
    \ {\n    var min = numbers[0];\n    var max = numbers[0];\n    for (var i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min =\
    \ numbers[i];\n        }\n    }\n    var range = max - min;\n    for (var i =\
    \ 1; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) / range;\n\
    \    }\n    return numbers;\n}\n</code>\n<|/ a tags=java,math dscore=0 |>\n<|\
    \ a tags=java,math |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers)\
    \ {\n    float min = numbers[0];\n    float max = numbers[0];\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n         \
    \   max = numbers[i];\n        }\n        if (numbers[i] < min) {\n          \
    \  min = numbers[i];\n        }\n    }\n    float range = max - min;\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return numbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min) {\n            min = numbers[i];\n    \
    \    }\n    }\n    float range = max - min;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a tags=java,math |>\n<| a tags=java,math |>\n<code>\n\
    public static float[] rescale_to_unit(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    float range = max - min;", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - 1);\n    for (int i = 0; i < numbers.length; i++)\n        result[i]\
    \ = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. Try it\
    \ with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array contains negative numbers. Try it with `[-1.0, -2.0, -3.0, -4.0,\
    \ -5.0]`\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains negative\
    \ numbers. Try it with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array contains negative numbers. Try it with `[-1.0, -2.0,\
    \ -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains\
    \ negative numbers. Try it with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\npublic static double[] rescaleToUnit(double[] numbers)\
    \ {\n    double min = numbers[0];\n    double max = numbers[0];\n    double sum\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    double scale = (max - min) / (sum - 1);\n    double[] result = new double[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| c |>\nThis doesn't work if the array contains negative numbers. Try it with\
    \ `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. Try it with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array contains negative numbers. Try\
    \ it with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array ", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n  \
    \      if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++)\n      \
    \  result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is not the correct answer, it just rescales the numbers to fit in\
    \ the range [0,1]. Nothing about it makes the smallest number become 0 and the\
    \ largest become 1.\n<|/ c |>\n<| c |>\nI agree with you, my answer was more of\
    \ a \"how to\" rather than a \"how to *not* do it\" sort of thing. I'll update\
    \ my answer with some more information on how to do it.\n<|/ c |>\n<| a |>\nThe\
    \ easiest way is to find the min and max of the array and then scale each number\
    \ in the array by dividing by the difference between the min and max. \n<code>\n\
    var min = Math.Min(numbers);\nvar max = Math.Max(numbers);\nvar scale = (max -\
    \ min) / (numbers.Length - 1);\nfor (int i = 0; i < numbers.Length; i++)\n{\n\
    \    numbers[i] = numbers[i] / scale;\n}\n</code>\n<|/ a tags=c#,arrays,math dscore=1\
    \ |>\n<| c |>\nThis is not the correct answer, it just rescales the numbers to\
    \ fit in the range [0,1]. Nothing about it makes the smallest number become 0\
    \ and the largest become 1.\n<|/ c |>\n<| c |>\nI agree with you, my answer was\
    \ more of a \"how to\" rather than a \"how to *not* do it\" sort of thing. I'll\
    \ update my answer with some more information on how to do it.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nfloat[] numbers = new float[] { 1, 2, 3, 4 };\nfloat min\
    \ = numbers.Min();\nfloat max = numbers.Max();\nfloat sum = 0;\nfor (int i = 0;\
    \ i < numbers.Length; i++)\n{\n    sum += numbers[i];\n}\nfloat scale = (max -\
    \ min) / (sum - numbers[0]);\nfor (int i = 0; i < numbers.Length; i++)\n{\n  \
    \  numbers[i] = numbers[i] * scale;\n}\n</code>\n<|/ a tags=c#,arrays,math |>\n\
    <| a tags=c#,arrays,math |>\n<code>\nfloat[] numbers = new float[] { 1, 2, 3, ",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        else if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    \n    float range = (max - min);\n    float scale\
    \ = (float)(1.0 / range);\n    \n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    \n    return numbers;\n}\n</code>\n<|/ a tags=c#,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]).\
    \ You'll get [0.0, 0.25, 0.5, 0.75, 1.0] instead of [0.0, 0.25, 0.5, 0.75, 1.0].\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix it.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. Try rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]).\
    \ You'll get [0.0, 0.25, 0.5, 0.75, 1.0] instead of [0.0, 0.25, 0.5, 0.75, 1.0].\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix it.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. Try rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]).\
    \ You'll get [0.0, 0.25, 0.5, 0.75, 1.0] instead of [0.0, 0.25, 0.5, 0.75, 1.0].\n\
    <|/ c |>\n<| a |>\n<code>\npublic static float RescaleToUnit(this float value)\n\
    {\n    float min = float.MaxValue;\n    float max = float.MinValue;\n    float\
    \ range = (max - min);\n    float scale = (float)(1.0 / range);\n    return value\
    \ * scale;\n}\n</code>\n<|/ a dscore=4 tags=c#,math,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]). You'll get [0.0,\
    \ 0.25, 0.5, 0.75, 1.0] instead of [0.0, 0.25, 0.5, 0.75, 1.0].\n<|/ c |>\n<|\
    \ a tags=c#,math,algorithm |>\n<code>\npublic static float RescaleToUnit(this\
    \ float value)\n{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    float range = (max - min);\n    float scale = (float)(1.0 / range);\n   \
    \ return value * scale;\n}\n</code>\n<|/ a dscore=4 |>\n<| ", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n    {\n    \
    \    if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,arrays,algorithm |>\n<| c |>\nI believe this answer is\
    \ wrong. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]` which is not the expected result of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n\
    <|/ c |>\n<| c |>\nThe question was about how to rescale an array of numbers to\
    \ [0, 1]. Your answer does not do that. Your answer rescales the numbers to [0,\
    \ 1], which is not what the question asks for.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for rescaling to [0, 1]. Your answer rescales to [0, 1], which is not what\
    \ the question asks for.\n<|/ c |>\n<| c |>\nThe question asks for rescaling to\
    \ [0, 1]. Your answer rescales to [0, 1], which is not what the question asks\
    \ for.\n<|/ c |>\n<| c |>\nThe question asks for rescaling to [0, 1]. Your answer\
    \ rescales to [0, 1], which is not what the question asks for.\n<|/ c |>\n<| a\
    \ tags=c#,arrays,algorithm |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] > max)\n            max = numbers[i];\n \
    \       if(numbers[i] < min)\n            min = numbers[i];\n    }\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for(int i = 0; i <\
    \ numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer does\
    \ not do what the question asks for. The question asks for rescaling to [0, 1].\
    \ Your answer rescales to [0, 1], which is not what the question asks for.\n<|/\
    \ c |>\n<| a tags=c#,arrays,algorithm |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float[] result = ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i]\
    \ * scale;\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; ++i) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \  }\n    for (int i = 0; i < numbers.length; ++i) {\n        result[i] = numbers[i]\
    \ / sum;\n    }\n    float scale = (max - min) / (float) Math.pow(10, (float)\
    \ Math.log10(max) - 1);\n    for (int i = 0; i < numbers.length; ++i) {\n    \
    \    result[i] *= scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,math,algorithm\
    \ |>\n<| a tags=arrays,c#,math,algorithm |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.Length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for (int\
    \ i = 0; i < numbers.Length; ++i)\n    {\n        sum += numbers[i];\n       \
    \ if (numbers[i] > max)\n        {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min)\n        {\n            min = numbers[i];\n   \
    \     }\n    }\n    for (int i = 0; i < numbers.Length; ++i)\n    {\n        result[i]\
    \ = numbers[i] / sum;\n    }\n    float scale = (max - min) / (float) Math.Pow(10,\
    \ (float) Math.Log10(max) - 1);\n    for (int i = 0; i < numbers.Length; ++i)\n\
    \    {\n        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.Length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for (int\
    \ i = 0; i < numbers.Length; ++i)\n    {\n        sum += numbers[i];\n       \
    \ if (numbers[i] > max)\n        {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min)\n        {\n            min = numbers[i];\n   \
    \     }\n    }\n    for (int i = 0; i < numbers.Length; ++i)\n    {\n        result[i]\
    \ = numbers[i] / sum;\n    }\n    float scale = (max - min) / (float) Math.Pow(10,\
    \ (float) Math.Log10(max) - 1);\n    for (int i = 0; i < numbers.Length; ++i)\n\
    \    {\n        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,c#,math,algorithm |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers)\n{\n", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for(int i = 0; i < numbers.length; i++)\n       \
    \ result[i] = numbers[i] * scale;\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float range = max - min;\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] = result[i] / range;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the array contains negative numbers.\
    \ Try it with `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nI didn't see\
    \ that requirement in the question, but I added a note about it.\n<|/ c |>\n<|\
    \ c |>\nI added a note about negative numbers, thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ range = max - min;\n    float scale = 1;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = numbers[i] - min;\n        numbers[i] *= scale;\n\
    \        numbers[i] += min;\n        scale = range / numbers[i];\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static float[]\
    \ rescaleToUnit(float[] numbers) {\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float range = max - min;\n    float scale = 1;\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        numbers[i] = numbers[i] - min;\n\
    \        numbers[i] *= scale;\n        numbers[i] += min;\n        scale = range\
    \ / numbers[i];\n    }\n    return numbers;\n}\n</code>\n<|/ a dscore=1 tags=java,arrays,math\
    \ |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ range = max - min;\n    float scale = 1;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = numbers[i] - min;\n        numbers[i] *= scale;\n\
    \        numbers[i] += min;\n        scale = range / numbers[i];\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float[] rescaleToUnit(float[] ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tried it on [this\
    \ site](http://www.tutorialspoint.com/compile_java8_online.php) and it also worked\
    \ fine. I'm running Java 8u25 on Windows 8.1.\n<|/ c |>\n<| c |>\nI tested it\
    \ on Java 8u25 on Windows 8.1 and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I also tried it on [this\
    \ site](http://www.tutorialspoint.com/compile_java8_online.php) and it also worked\
    \ fine. I'm running Java 8u25 on Windows 8.1.\n<|/ c |>\n<| a tags=java,arrays,math\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        if(numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n        if(numbers[i] < min) {\n            min = numbers[i];\n      \
    \  }\n    }\n    float range = max - min;\n    float scale = 1.0f / range;\n \
    \   float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float range = max - min;\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] /= range;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static float[] RescaleToUnit(float[] numbers)\n\
    {\n    float min = numbers[0];\n    float max = numbers[0];\n    float range =\
    \ max - min;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n        if\
    \ (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i] <\
    \ min)\n            min = numbers[i];\n    }\n    float scale = range / numbers.Length;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static float[] RescaleToUnit(float[] numbers)\n\
    {\n    float min = numbers[0];\n    float max = numbers[0];\n    float range =\
    \ max - min;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n        if\
    \ (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i] <\
    \ min)\n            min = numbers[i];\n    }\n    float scale = range / numbers.Length;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic static float[] RescaleToUnit(float[] numbers)\n{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float scale = range / numbers.Length;\n  \
    \  for (int i = 0; i < numbers.Length; i++)\n    {\n        numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic static float[] RescaleToUnit(float[] numbers)\n\
    {\n    float min = numbers[0];\n    float max = numbers[0];\n    float range =\
    \ max - min;\n", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n       \
    \ if(numbers[i] > max)\n        {\n            max = numbers[i];\n        }\n\
    \        if(numbers[i] < min)\n        {\n            min = numbers[i];\n    \
    \    }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,math,algorithm\
    \ |>\n<code>\npublic static float[] Rescale(float[] numbers)\n{\n    float[] result\
    \ = new float[numbers.Length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float sum = 0;\n    for(int i = 0; i < numbers.Length; i++)\n    {\n    \
    \    sum += numbers[i];\n        if(numbers[i] > max)\n        {\n           \
    \ max = numbers[i];\n        }\n        if(numbers[i] < min)\n        {\n    \
    \        min = numbers[i];\n        }\n    }\n    float scale = (max - min) /\
    \ (sum - numbers[0]);\n    for(int i = 0; i < numbers.Length; i++)\n    {\n  \
    \      result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static float[] Rescale(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.Length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for(int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n       \
    \ if(numbers[i] > max)\n        {\n            max = numbers[i];\n        }\n\
    \        if(numbers[i] < min)\n        {\n            min = numbers[i];\n    \
    \    }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for(int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,math,algorithm |>\n\
    <| a dscore=0 |>\n<code>\npublic static float[] Rescale(float[] numbers)\n{\n\
    \    float[] result = new float[numbers.Length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    for(int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if(numbers[i] > max)\n    \
    \    {\n            max = numbers[i];\n        }\n        if(numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = (max - min) / (float)(numbers.length\
    \ - 1);\n    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i]\
    \ - min;\n    for(int i = 0; i < numbers.length; i++)\n        result[i] *= scale;\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays |>\n<| c |>\nThis doesn't\
    \ work when all numbers are negative.\n<|/ c |>\n<| c |>\nI didn't see that requirement\
    \ in the question. I'll add that to the answer.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work when all numbers are negative.\n<|/ c |>\n<| c |>\nI added a version that\
    \ handles negative numbers. I didn't test it thoroughly, so there might be some\
    \ bugs.\n<|/ c |>\n<| c |>\nThis doesn't work when all numbers are negative.\n\
    <|/ c |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static float[] Rescale(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.Length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.Length;\
    \ i++)\n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n \
    \       if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float\
    \ scale = (max - min) / (float)(numbers.Length - 1);\n    for(int i = 0; i < numbers.Length;\
    \ i++)\n        result[i] = numbers[i] - min;\n    for(int i = 0; i < numbers.Length;\
    \ i++)\n        result[i] *= scale;\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\npublic static float[] Rescale(float[] numbers)\n{\n   \
    \ float[] result = new float[numbers.Length];\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for(int i = 1; i < numbers.Length; i++)\n   \
    \ {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (float)(numbers.Length - 1);\n    for(int i = 0; i < numbers.Length; i++)\n\
    \        result[i] = numbers[i] - min;\n    for(int i = 0; i < numbers.Length;\
    \ i++)\n        result[i] *= scale;\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ tags=c", "{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n       \
    \ if (numbers[i] > max)\n        {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min)\n        {\n            min = numbers[i];\n   \
    \     }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the array is all zeros or all ones. Try it with `[0.0, 0.0, 0.0, 0.0,\
    \ 1.0]`.\n<|/ c |>\n<| c |>\nI guess this would work if you add `if (numbers[i]\
    \ == 0.0) result[i] = 0.0;` before the `if` statement\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array is all zeros or all ones. Try it with `[0.0, 0.0,\
    \ 0.0, 0.0, 1.0]`.\n<|/ c |>\n<| c |>\nI guess this would work if you add `if\
    \ (numbers[i] == 0.0) result[i] = 0.0;` before the `if` statement\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array is all zeros or all ones. Try it with\
    \ `[0.0, 0.0, 0.0, 0.0, 1.0]`.\n<|/ c |>\n<| a tags=c#,math,algorithm |>\nI believe\
    \ this should work:\n<code>\npublic static float[] Rescale(float[] numbers)\n\
    {\n    float min = numbers.Min();\n    float max = numbers.Max();\n    float sum\
    \ = 0;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    float[]\
    \ result = new float[numbers.Length];\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array is all\
    \ zeros or all ones. Try it with `[0.0, 0.0, 0.0, 0.0, 1.0]`.\n<|/ c |>\n<| c\
    \ |>\nI guess this would work if you add `if (numbers[i] == 0.0) result[i] = 0.0;`\
    \ before the `if` statement\n<|/ c |>\n<| c |>\nThis doesn't work if the array\
    \ is ", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; ++i)\n        numbers[i] *= scale;\n    return numbers;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (float)(numbers.length - 1);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,math,algorithm |>\n<code>\npublic static float RescaleToUnit(float\
    \ value)\n{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    float scale = 0;\n    foreach (float number in new float[] { value, value\
    \ + 1 })\n    {\n        if (number < min)\n            min = number;\n      \
    \  if (number > max)\n            max = number;\n    }\n    scale = max - min;\n\
    \    return value / scale;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,math,algorithm\
    \ |>\n<code>\npublic static float RescaleToUnit(float value)\n{\n    float min\
    \ = float.MaxValue;\n    float max = float.MinValue;\n    float scale = 0;\n \
    \   foreach (float number in new float[] { value, value + 1 })\n    {\n      \
    \  if (number < min)\n            min = number;\n        if (number > max)\n \
    \           max = number;\n    }\n    scale = max - min;\n    return value / scale;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static float RescaleToUnit(float\
    \ value)\n{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    float scale = 0;\n    foreach (float number in new float[] { value, value\
    \ + 1 })\n    {\n        if (number < min)\n            min = number;\n      \
    \  if (number > max)\n            max = number;\n    }\n    scale = max - min;\n\
    \    return value / scale;\n}\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| a\
    \ tags=c#,math,algorithm |>\n<code>\npublic static float RescaleToUnit(float value)\n\
    {\n    float min = float.MaxValue;\n    float max = float.MinValue;\n    float\
    \ scale = 0;\n    foreach (float number in new float[] { value, value + 1 })\n\
    \    {\n        if (number < min)\n            min = number;\n        if (number\
    \ > max)\n            max = number;\n    }\n    scale = max - ", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 0; i < numbers.length; ++i)\n    {\n    \
    \    if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = (float)(range / numbers.length);\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis code doesn't work if you have a negative\
    \ number in the array. For example, if you have [-3, -2, -1, 0, 1, 2, 3] the result\
    \ is [-0.5, -0.25, 0, 0.25, 0.5, 1, 2]\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ you mentioned. Thanks.\n<|/ c |>\n<| c |>\nThis code doesn't work if you have\
    \ a negative number in the array. For example, if you have [-3, -2, -1, 0, 1,\
    \ 2, 3] the result is [-0.5, -0.25, 0, 0.25, 0.5, 1, 2]\n<|/ c |>\n<| c |>\nI\
    \ fixed the problem you mentioned. Thanks.\n<|/ c |>\n<| a tags=java,arrays |>\n\
    <code>\npublic static float[] rescaleToUnit(float[] numbers) {\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min) {\n            min = numbers[i];\n    \
    \    }\n    }\n    float range = max - min;\n    float scale = (float) (range\
    \ / numbers.length);\n    float[] result = new float[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static float[] rescaleToUnit(float[] numbers) {\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min) {\n            min = numbers[i];\n    \
    \    }\n    }\n    float range = max - min;\n    float scale = (float) (range\
    \ / numbers.length);\n    float[] result = new float[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static float[] rescal", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        else\
    \ if(numbers[i] > max)\n            max = numbers[i];\n    }\n    float range\
    \ = max - min;\n    float scale = 1.0f / range;\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array has negative numbers. Try it with\
    \ `[-1.0, -2.0, -3.0, -4.0, -5.0]`.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ I've updated my answer to account for negative numbers. Thanks!\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        else if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n    return numbers;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe answer by is correct but\
    \ can be simplified a bit:\n<code>\nfloat rescale_to_unit(float[] numbers) {\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        else if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n    return numbers;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    float[] numbers = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f};\n\
    \    float[] rescaledNumbers = rescale_to_unit(numbers);\n    System.out.println(Arrays.toString(rescaledNumbers));\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \     {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    float scale =\
    \ (max - min) / (sum - 1);\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=math,c#,algorithm |>\n<code>\npublic static double[]\
    \ rescaleToUnit(double[] numbers)\n{\n    double min = numbers[0];\n    double\
    \ max = numbers[0];\n    double sum = 0;\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \     {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    double scale\
    \ = (max - min) / (sum - 1);\n    double[] result = new double[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,c#,algorithm\
    \ |>\n<code>\npublic static double[] rescaleToUnit(double[] numbers)\n{\n    double\
    \ min = numbers[0];\n    double max = numbers[0];\n    double sum = 0;\n    for\
    \ (int i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n  \
    \      if (numbers[i] > max)\n        {\n            max = numbers[i];\n     \
    \   }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    double scale = (max - min) / (sum - 1);\n    double[] result\
    \ = new double[numbers.Length];\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static double[] rescaleToUnit(double[]\
    \ numbers)\n{\n    double min = numbers[0];\n    double max = numbers[0];\n  \
    \  double sum = 0;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n    \
    \    sum += numbers[i];\n        if (numbers[i] > max)\n        {\n          \
    \  max = numbers[i];\n        }\n        if (numbers[i] < min)\n        {\n  \
    \          min = numbers[i];\n        }\n    }\n    double scale = (max - min)\
    \ / (sum - 1);\n    double[] result = new double[numbers.Length];\n    for (int\
    \ i = 0; i < ", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n  \
    \      if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - 1);\n    for (int i = 0; i < numbers.length; i++)\n        result[i]\
    \ = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nI needed a solution that would work with any type of numbers,\
    \ not just floats. I came up with this:\n<code>\npublic static double rescale(double\
    \ x, double min, double max) {\n    double scale = (max - min) / ((x - min) *\
    \ (x - min));\n    return min + scale * (x - min);\n}\n</code>\n<|/ a tags=math,c#,rescale\
    \ |>\n<| a tags=math,c#,rescale |>\n<code>\npublic static double rescale(double\
    \ x, double min, double max)\n{\n    double scale = (max - min) / ((x - min) *\
    \ (x - min));\n    return min + scale * (x - min);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=math,c#,rescale |>\n<code>\npublic static double rescale(double\
    \ x, double min, double max)\n{\n    double scale = (max - min) / ((x - min) *\
    \ (x - min));\n    return min + scale * (x - min);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static double rescale(double x, double\
    \ min, double max)\n{\n    double scale = (max - min) / ((x - min) * (x - min));\n\
    \    return min + scale * (x - min);\n}\n</code>\n<|/ a tags=math,c#,rescale |>\n\
    <| a dscore=1 |>\n<code>\npublic static double rescale(double x, double min, double\
    \ max)\n{\n    double scale = (max - min) / ((x - min) * (x - min));\n    return\
    \ min + scale * (x - min);\n}\n</code>\n<|/ a tags=math,c#,rescale |>\n<| a |>\n\
    <code>\npublic static double rescale(double x, double min, double max)\n{\n  \
    \  double scale = (max - min) / ((x - min) * (x - min));\n    return min + scale\
    \ * (x - min);\n}\n</code>\n<|/ a tags=math,c#,rescale dscore=1 |>\n<| a ", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float number = numbers[i];\n        if(number < min)\n         \
    \   min = number;\n        if(number > max)\n            max = number;\n    }\n\
    \    float scale = 1.0f / (max - min);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = numbers[i] - min;\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] *= scale;\n    return result;\n}\n/*\n Given array of\
    \ numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float scale) \n{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float[] result = new float[numbers.length];\n    for(int i = 0; i\
    \ < numbers.length; i++)\n        result[i] = numbers[i] - min;\n    for(int i\
    \ = 0; i < numbers.length; i++)\n        result[i] *= scale;\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float\
    \ scale, float offset) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float[] result = new float[numbers.length];\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] - min;\n   \
    \ for(int i = 0; i < numbers.length; i++)\n        result[i] *= scale;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        result[i] += offset;\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/", "{\n    float min = float.MaxValue;\n    float\
    \ max = float.MinValue;\n    foreach (float number in numbers)\n    {\n      \
    \  min = Mathf.Min(min, number);\n        max = Mathf.Max(max, number);\n    }\n\
    \    float[] result = new float[numbers.Length];\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c#,unity3d,arrays |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/19590397)\n\
    <|/ c |>\n<| c |>\nI thought it does. I added the code I used to test it and it\
    \ works.\n<|/ c |>\n<| c |>\nI added the code I used to test it and it works.\
    \ I tested it on Unity 2018.2.15f1.\n<|/ c |>\n<| c |>\nI added the code I used\
    \ to test it and it works. I tested it on Unity 2018.2.15f1. I tested it on Unity\
    \ 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1.\
    \ I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested\
    \ it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity\
    \ 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1.\
    \ I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested\
    \ it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity\
    \ 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1.\
    \ I tested it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested\
    \ it on Unity 2018.2.15f1. I tested it on Unity 2018.2.15f1. I tested it on Unity\
    \ 2018.2.15", "{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] > max)\n            max = numbers[i];\n \
    \       if(numbers[i] < min)\n            min = numbers[i];\n    }\n    float\
    \ range = (max - min);\n    float scale = (range/numbers.length);\n    for(int\
    \ i = 0; i < numbers.length; ++i)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,math,algorithm\
    \ |>\n<code>\npublic static double getMinMax(List<double> list)\n{\n    double\
    \ min = double.MaxValue;\n    double max = double.MinValue;\n    foreach (double\
    \ d in list)\n    {\n        if (d < min)\n            min = d;\n        if (d\
    \ > max)\n            max = d;\n    }\n    return max - min;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,math,algorithm |>\n<code>\npublic static double\
    \ getMinMax(List<double> list)\n{\n    double min = double.MaxValue;\n    double\
    \ max = double.MinValue;\n    foreach (double d in list)\n    {\n        if (d\
    \ < min)\n            min = d;\n        if (d > max)\n            max = d;\n \
    \   }\n    return max - min;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,math,algorithm\
    \ |>\n<code>\npublic static double getMinMax(List<double> list)\n{\n    double\
    \ min = double.MaxValue;\n    double max = double.MinValue;\n    foreach (double\
    \ d in list)\n    {\n        if (d < min)\n            min = d;\n        if (d\
    \ > max)\n            max = d;\n    }\n    return max - min;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static double getMinMax(List<double>\
    \ list)\n{\n    double min = double.MaxValue;\n    double max = double.MinValue;\n\
    \    foreach (double d in list)\n    {\n        if (d < min)\n            min\
    \ = d;\n        if (d > max)\n            max = d;\n    }\n    return max - min;\n\
    }\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static double getMinMax(List<double> list)\n{\n    double min = double.MaxValue;\n\
    \    double max = double.MinValue;\n    foreach (double d in list)\n    {\n  \
    \      if (d ", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if(numbers[i] > max)\n            max = numbers[i];\n \
    \       if(numbers[i] < min)\n            min = numbers[i];\n    }\n    float\
    \ scale = (max - min) / (float)(numbers.length - 1);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = numbers[i] - min;\n        result[i] *= scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,math |>\n<| c |>\n\
    This doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/\
    \ c |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| a tags=java,arrays,math |>\n<code>\npublic\
    \ static float[] rescale_to_unit(float[] numbers) {\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n\
    \            min = numbers[i];\n        }\n    }\n    float scale = (max - min)\
    \ / (float) (numbers.length - 1);\n    for (int i = 0; i < numbers.length; i++)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] *= scale;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't seem\
    \ to work. `rescale_to_unit([", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,math,arrays |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \     {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    float scale =\
    \ (max - min) / (sum - numbers[0]);\n    float[] result = new float[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float sum = 0;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n   \
    \     sum += numbers[i];\n        if (numbers[i] > max)\n        {\n         \
    \   max = numbers[i];\n        }\n        if (numbers[i] < min)\n        {\n \
    \           min = numbers[i];\n        }\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    float[] result = new float[numbers.Length];\n   \
    \ for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] *= scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\npublic static float[] rescale(float[] numbers)\n\
    {\n    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float ", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        else if(numbers[i] > max)\n \
    \           max = numbers[i];\n    }\n    float range = max - min;\n    float\
    \ scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; ++i)\n       \
    \ numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a tags=math,c#,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work when the array contains negative numbers. Try\
    \ it with `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ by adding `if(numbers[i] < 0)` before `if(numbers[i] < min)`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work when the array contains negative numbers. Try it with\
    \ `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\nI fixed the problem by adding\
    \ `if(numbers[i] < 0)` before `if(numbers[i] < min)`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work when the array contains negative numbers. Try it with `[-1.0, 2.0,\
    \ 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static float[]\
    \ rescaleToUnit(float[] numbers)\n{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        else if(numbers[i] > max)\n \
    \           max = numbers[i];\n    }\n    float range = max - min;\n    float\
    \ scale = 1.0f / range;\n    for(int i = 0; i < numbers.length; ++i)\n       \
    \ numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a tags=math,c#,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work when the array contains negative numbers. Try\
    \ it with `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ by adding `if(numbers[i] < 0)` before `if(numbers[i] < min)`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work when the array contains negative numbers. Try it with\
    \ `[-1.0, 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\nI fixed the problem by adding\
    \ `if(numbers[i] < 0)` before `if(numbers[i] < min)`", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        min = Math.min(min,\
    \ numbers[i]);\n        max = Math.max(max, numbers[i]);\n        result[i] =\
    \ (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=arrays,java,math |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        min = Math.min(min, numbers[i]);\n     \
    \   max = Math.max(max, numbers[i]);\n        result[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=arrays,java,math |>\n<code>\npublic static float[] rescale(float[] numbers)\
    \ {\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n\
    \        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,java,math |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        min = Math.min(min, numbers[i]);\n     \
    \   max = Math.max(max, numbers[i]);\n        result[i] = (numbers[i] - min) /\
    \ (max - min);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static float[] rescale(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n        min\
    \ = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n   \
    \     result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,java,math |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        min = Math.min(min, numbers[i]);\n     \
    \   max = Math.max(", "{\n    float[] result = new float[numbers.length];\n  \
    \  float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i\
    \ < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n \
    \   return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem\
    \ to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Are you sure you copied the code correctly?\n<|/\
    \ c |>\n<| c |>\nI copied it exactly as you wrote it. I even tried copying your\
    \ function and calling it with `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` and\
    \ it still returns `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works fine. Are you sure you copied the code correctly?\n<|/\
    \ c |>\n<| c |>\nI copied it exactly as you wrote it. I even tried copying your\
    \ function and calling it with `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` and\
    \ it still returns `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i]\
    \ < min) {\n            min = numbers[i];\n        }\n    }\n    float range =\
    \ max - min;\n    float scale = 1.0f / range;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are\
    \ you sure you copied the code correctly?", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float range = (max - min);\n    float scale = (1.0f / range);\n  \
    \  for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}", "{\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n   \
    \ {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; ++i)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work when you have negative numbers. For example, [-10, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5]\n<|/ c |>\n<| c |>\nThis doesn't seem to work when\
    \ you have negative numbers. For example, [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5]\n<|/ c |>\n<| c |>\nThis doesn't seem to work when you have negative numbers.\
    \ For example, [-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n<|/ c |>\n<| a |>\n\
    <code>\npublic static float[] rescale(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i) {\n\
    \        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = 1.0f / range;\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; ++i)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,rescale dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static float[] rescale(float[] numbers)\
    \ {\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i =\
    \ 1; i < numbers.length; ++i) {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    float[]\
    \ result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays,rescale |>\n<| a tags=java,arrays,rescale |>\n<code>\n\
    public static float[] rescale(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; ++i) {\n\
    \        if(numbers[i] < min)\n", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; ++i) {\n        sum += numbers[i];\n\
    \        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    float scale = (max - min) / (float) sum;\n   \
    \ for (int i = 0; i < numbers.length; ++i) {\n        result[i] = numbers[i] *\
    \ scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays |>\n\
    <| c |>\nThis doesn't work. Try it with `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. `[1.0, 2.0, 3.0, 4.0, 5.0]` returns `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt doesn't work for `[1.0, 2.0, 3.0,\
    \ 4.0, 5.0]`\n<|/ c |>\n<| c |>\nIt works fine for me. `[1.0, 2.0, 3.0, 4.0, 5.0]`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| a |>\nI believe this should work:\n\
    <code>\npublic static float[] rescale_to_unit(float[] numbers)\n{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        sum += numbers[i];\n        if (numbers[i] < min) min = numbers[i];\n\
    \        if (numbers[i] > max) max = numbers[i];\n    }\n    float scale = (max\
    \ - min) / (float) sum;\n    for (int i = 0; i < numbers.length; ++i) {\n    \
    \    result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,math,arrays dscore=1 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nIt doesn't work for `[1.0, 2.0,\
    \ 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\nIt works fine for me. `[1.0, 2.0, 3.0, 4.0,\
    \ 5.0]` returns `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `[1.0, 2.0, 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c ", "{\n    float[] result =\
    \ new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float range = max - min;\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] /= range;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n    }\n    float\
    \ range = max - min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      result[i] = numbers[i] - min;\n        result[i] /= range;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n\
    <code>\npublic static float[] rescale_to_unit(float[] numbers)\n{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n    {\n   \
    \     if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] /= range;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \        if (numbers[i] < min)\n            min = numbers[i];\n    }\n    float\
    \ range = max - min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      result[i] = numbers[i] - min;\n        result[i] /= range;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a dscore=1 |>\n<code>\n\
    public static float[] rescale_to_unit(float[] numbers)\n{\n    float[] result\
    \ = new float", "{\n    float[] result = new float[numbers.length];\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float number = numbers[i];\n        if(number < min)\n\
    \            min = number;\n        if(number > max)\n            max = number;\n\
    \    }\n    float scale = (max - min) / (float)(numbers.length - 1);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `-7.5` becomes `-0.25`\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `-7.5` becomes `-0.25`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `-7.5` becomes `-0.25`\n<|/ c |>\n\
    <| a tags=java,arrays |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if (number < min) {\n  \
    \          min = number;\n        }\n        if (number > max) {\n           \
    \ max = number;\n        }\n    }\n    float scale = (max - min) / (float) (numbers.length\
    \ - 1);\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This doesn't work for negative numbers. `-7.5` becomes `-0.25`\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `-7.5` becomes `-0.25`\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers)\
    \ {\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        float number = numbers[i];\n        if (number < min) {\n           \
    \ min = number;\n        }\n        if (number > max) {\n            max = number;\n\
    \        }\n    }\n    float scale = (max - min) / (float) (numbers.length - 1);\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| c |>\nThis doesn't work for negative numbers. `-7.5` become", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = float.MAX_VALUE;\n    float\
    \ max = float.MIN_VALUE;\n    for(int i = 0; i < numbers.length; i++)\n    {\n\
    \        float number = numbers[i];\n        if(number < min)\n            min\
    \ = number;\n        if(number > max)\n            max = number;\n        result[i]\
    \ = (number - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=math,java,arrays,algorithm |>\nI believe that this\
    \ is what you are looking for:\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if(number < min)\n     \
    \       min = number;\n        if(number > max)\n            max = number;\n \
    \       result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=math,java,arrays,algorithm |>\n<code>\n\
    public static float[] rescaleToUnit(float[] numbers) {\n    float[] result = new\
    \ float[numbers.length];\n    float min = Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n\
    \    for(int i = 0; i < numbers.length; i++) {\n        float number = numbers[i];\n\
    \        if(number < min)\n            min = number;\n        if(number > max)\n\
    \            max = number;\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,java,arrays,algorithm\
    \ |>\n<code>\npublic static float[] rescaleToUnit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = Float.MAX_VALUE;\n    float\
    \ max = Float.MIN_VALUE;\n    for(int i = 0; i < numbers.length; i++) {\n    \
    \    float number = numbers[i];\n        if(number < min)\n            min = number;\n\
    \        if(number > max)\n            max = number;\n        result[i] = (number\
    \ - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=math,java,arrays,algorithm |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if(number < min)", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float number = numbers[i];\n        min = min(number, min);\n  \
    \      max = max(number, max);\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 0; i < numbers.length; i++) {\n        float\
    \ number = numbers[i];\n        min = Math.min(number, min);\n        max = Math.max(number,\
    \ max);\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,rescale |>\n<| a tags=java,arrays,rescale\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i = 0; i < numbers.length; i++) {\n        float\
    \ number = numbers[i];\n        min = Math.min(number, min);\n        max = Math.max(number,\
    \ max);\n        result[i] = (number - min) / (max - min);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays,rescale |>\n<code>\n\
    public static float[] rescale_to_unit(float[] numbers) {\n    float[] result =\
    \ new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; i++) {\n        float number = numbers[i];\n\
    \        min = Math.min(number, min);\n        max = Math.max(number, max);\n\
    \        result[i] = (number - min) / (max - min);\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++) {\n        float number = numbers[i];\n        min\
    \ = Math.min(number, min);\n        max = Math.max(number, max);\n        result[i]\
    \ = (number - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,rescale |>\n<| a dscore=1 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] ", "{\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n        if(numbers[i] > max)\n      \
    \      max = numbers[i];\n    }\n    float scale = (max - min) / (numbers.length\
    \ - 1);\n    for(int i = 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n\
    \    return numbers;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = (max - min) / (float)(numbers.length\
    \ - 1);\n    for(int i = 0; i < numbers.length; ++i)\n        numbers[i] *= scale;\n\
    \    return numbers;\n}\n</code>\n<|/ a tags=math,c#,algorithm,arrays |>\n<| c\
    \ |>\nThis doesn't work if the array is all zeros or all ones, as it will return\
    \ an array of all zeros.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Try it with this array: `float[] numbers = { 0, 1 };`\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine. Try it with this array: `float[] numbers\
    \ = { 0, 1 };`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Try it with\
    \ this array: `float[] numbers = { 0, 1 };`\n<|/ c |>\n<| a dscore=3 |>\nI wrote\
    \ a C# version of this algorithm that works with any number of elements. I used\
    \ the fact that if all elements are zero, all elements are equal to each other.\
    \ \n<code>\npublic static double[] rescaleToUnit(double[] numbers)\n{\n    double\
    \ min = numbers[0];\n    double max = numbers[0];\n    double scale = 1.0d / (double)numbers.Length;\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        numbers[i] *= scale;\n    }\n    return new double[] { min, max\
    \ };\n}\n</code>\n<|/ a tags=math,c#,algorithm,arrays |>\n<| a tags=math,c#,algorithm,arrays\
    \ |>\nI wrote a C# version of this algorithm that works with any number of elements.\
    \ I used the fact that if all elements are zero, all elements are equal to each\
    \ other. \n<code>\npublic static double[] rescaleToUnit(double[] numbers)\n{\n\
    \    double min = numbers[0];\n    double max = numbers[0];\n    double scale\
    \ = 1.0d / (double)numbers.Length;\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        if (numbers[i] > max)\n            max = ", "{\n    float min\
    \ = float.MinValue;\n    float max = float.MaxValue;\n    float sum = 0;\n   \
    \ float rescale = 1;\n    for(int i = 0; i < numbers.Length; i++)\n    {\n   \
    \     sum += numbers[i];\n    }\n    rescale = sum / numbers.Length;\n    for(int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        numbers[i] = numbers[i] / rescale;\n\
    \    }\n    for(int i = 0; i < numbers.Length; i++)\n    {\n        if(numbers[i]\
    \ < min)\n        {\n            min = numbers[i];\n        }\n        if(numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| c |>\nThis doesn't\
    \ seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\n\
    I fixed the bug, sorry about that. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\n\
    I fixed the bug, sorry about that. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| a dscore=4\
    \ |>\nI believe that this is the simplest solution:\n<code>\npublic static float\
    \ RescaleToUnit(float value)\n{\n    return value / Mathf.Max(Mathf.Abs(value),\
    \ 1f);\n}\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| c |>\nThis doesn't seem\
    \ to work. `RescaleToUnit(2.5)` returns `0.375` instead of `0.375`\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work. `RescaleToUnit(2.5)` returns `0.375` instead\
    \ of `0.375`\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `RescaleToUnit(2.5)`\
    \ returns `0.375` instead of `0.375`\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = (float)(range / numbers.length);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = (float)(numbers[i]\
    \ - min) * scale + 0.5;\n    return numbers;\n}\n</code>\n<|/ a tags=c#,.net,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `numbers` becomes `[-0.5, -0.5, -0.5,\
    \ -0.5, -0.5]` after calling `rescale_to_unit`\n<|/ c |>\n<| c |>\nIt does work,\
    \ at least for me. Did you try it yourself? The result I get is `[-0.5, -0.5,\
    \ -0.5, -0.5, -0.5]`.\n<|/ c |>\n<| c |>\nI did try it myself and got `[-0.5,\
    \ -0.5, -0.5, -0.5, -0.5]`\n<|/ c |>\n<| c |>\nI did try it myself and got `[-0.5,\
    \ -0.5, -0.5, -0.5, -0.5]`\n<|/ c |>\n<| c |>\nI did try it myself and got `[-0.5,\
    \ -0.5, -0.5, -0.5, -0.5]`\n<|/ c |>\n<| a tags=c#,.net,arrays |>\n<code>\npublic\
    \ static float[] rescale_to_unit(float[] numbers)\n{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = max - min;\n\
    \    float scale = (float)(range / numbers.length);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] = (float)(numbers[i] - min) * scale + 0.5;\n    return\
    \ numbers;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work.\
    \ `numbers` becomes `[-0.5, -0.5, -0.5, -0.5, -0.5]` after calling `rescale_to_unit`\n\
    <|/ c |>\n<| c |>\nI did try it myself and got `[-0.5, -0.5, -0.5, -0.5, -0.5]`\n\
    <|/ c |>\n<| c |>\nI did try it myself and got ", "{\n    float[] result = new\
    \ float[numbers.length];\n    float minValue = numbers[0];\n    float maxValue\
    \ = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ > maxValue)\n            maxValue = numbers[i];\n        if(numbers[i] < minValue)\n\
    \            minValue = numbers[i];\n    }\n    float range = (maxValue - minValue);\n\
    \    float scale = (float)(range / numbers.length);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nIt does work. I've tested it before\
    \ posting. What is the problem you're having?\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it does work. I've edited my post to include the code I used.\n\
    <|/ c |>\n<| c |>\nI tested it again and it does work. I've edited my post to\
    \ include the code I used.\n<|/ c |>\n<| a dscore=1 |>\nThe function below will\
    \ take an array of numbers and return an array of numbers that have been scaled\
    \ to the range [0,1]\n<code>\nfloat[] rescale_to_unit(float[] numbers) {\n   \
    \ float minValue = numbers[0];\n    float maxValue = numbers[0];\n    for(int\
    \ i = 0; i < numbers.length; i++) {\n        if(numbers[i] > maxValue)\n     \
    \       maxValue = numbers[i];\n        if(numbers[i] < minValue)\n          \
    \  minValue = numbers[i];\n    }\n    float range = (maxValue - minValue);\n \
    \   float scale = (float)(range / numbers.length);\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=math,java,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]`\n<|/ c |>\n<| c |>\nIt ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = float.MAX_VALUE;\n    float max = float.MIN_VALUE;\n    float\
    \ sum = 0;\n    float sum2 = 0;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        sum += numbers[i];\n        sum2 += numbers[i] * numbers[i];\n\
    \        if(numbers[i] > max)\n            max = numbers[i];\n        if(numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum2 - sum * sum);\n    for(int i = 0; i < numbers.length; i++)\n       \
    \ result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a tags=c#,math,arrays,algorithm\
    \ |>\n<| c |>\nThis does not give the correct result for negative numbers. Try\
    \ `rescale_to_unit([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])`\n<|/ c |>\n<|\
    \ c |>\nI believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this answer should be updated to include a check for negative\
    \ numbers. I believe this ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++)\n      \
    \  result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale(float[] numbers)\
    \ {\n    float min = numbers[0];\n    float max = numbers[0];\n    float sum =\
    \ 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a tags=java,arrays,math\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale(float[] numbers)\
    \ {\n    float min = numbers[0];\n    float max = numbers[0];\n    float sum =\
    \ 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        float number = numbers[i];\n      \
    \  min = min(number, min);\n        max = max(number, max);\n        result[i]\
    \ = (number - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,math |>\n<| c |>\nThis doesn't work if the array is all zeroes.\
    \ Try it with `[1.0, 0.0, 1.0]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if all\
    \ numbers are zero. Try it with `[1.0, 0.0, 1.0]`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if all numbers are zero. Try it with `[1.0, 0.0, 1.0]`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if all numbers are zero. Try it with `[1.0, 0.0, 1.0]`.\n\
    <|/ c |>\n<| a tags=java,arrays,math |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        min = Math.min(number, min);\n\
    \        max = Math.max(number, max);\n        result[i] = (number - min) / (max\
    \ - min);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if the array is all zeroes. Try it with `[1.0, 0.0, 1.0]`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if all numbers are zero. Try it with `[1.0,\
    \ 0.0, 1.0]`.\n<|/ c |>\n<| c |>\nIt doesn't work if all numbers are zero. Try\
    \ it with `[1.0, 0.0, 1.0]`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static\
    \ float[] rescaleToUnit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        float number = numbers[i];\n        min\
    \ = Math.min(number, min);\n        max = Math.max(number, max);\n        result[i]\
    \ = (number - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,math |>\n<|", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        float n = numbers[i];\n        if(n\
    \ < min)\n            min = n;\n        if(n > max)\n            max = n;\n  \
    \      result[i] = (n - min) / (max - min);\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a function that does this for me:\n\
    <code>\nfunction rescale_to_unit(numbers: float[]): float[] {\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    numbers.forEach((n) => {\n        if (n < min)\
    \ min = n;\n        if (n > max) max = n;\n    });\n    var result = new Float32Array(numbers.length);\n\
    \    numbers.forEach((n, i) => {\n        result[i] = (n - min) / (max - min);\n\
    \    });\n    return result;\n}\n</code>\n<|/ a tags=math,arrays,javascript,rescale,algorithm\
    \ |>\n<| c |>\nI like this answer because it's more concise and doesn't require\
    \ a library like lodash. Thanks!\n<|/ c |>\n<| a dscore=4 |>\nThe accepted answer\
    \ doesn't work when you have negative numbers. Here's a version that does:\n<code>\n\
    function rescale_to_unit(numbers) {\n    var min = numbers[0];\n    var max =\
    \ numbers[0];\n    numbers.forEach((n) => {\n        if (n < min) min = n;\n \
    \       if (n > max) max = n;\n    });\n    var result = new Float32Array(numbers.length);\n\
    \    numbers.forEach((n, i) => {\n        result[i] = (n - min) / (max - min);\n\
    \    });\n    return result;\n}\n</code>\n<|/ a tags=math,arrays,javascript,rescale,algorithm\
    \ |>\n<| a tags=math,arrays,javascript,rescale,algorithm |>\nI wrote a function\
    \ that does this for me:\n<code>\nfunction rescale_to_unit(numbers: number[]):\
    \ number[] {\n    var min = numbers[0];\n    var max = numbers[0];\n    numbers.forEach((n)\
    \ => {\n        if (n < min) min = n;\n        if (n > max) max = n;\n    });\n\
    \    var result = new Float32Array(numbers.length);\n    numbers.forEach((n, i)\
    \ => {\n        result[i] = (n - min) / (max - min);\n    });\n    return result;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nfunction rescale_to_unit(number",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays,math |>\n<| a dscore=1 |>\n<code>\npublic static double[] Rescale(double[]\
    \ numbers, double min, double max)\n{\n    double scale = max - min;\n    double[]\
    \ result = new double[numbers.Length];\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays,math |>\n<| a tags=c#,arrays,math |>\n<code>\n\
    public static double[] Rescale(double[] numbers, double min, double max)\n{\n\
    \    double scale = max - min;\n    double[] result = new double[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static double[] Rescale(double[] numbers, double min, double\
    \ max)\n{\n    double scale = max - min;\n    double[] result = new double[numbers.Length];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,math |>\n\
    <| a dscore=1 |>\n<code>\npublic static double[] Rescale(double[] numbers, double\
    \ min, double max)\n{\n    double scale = max - min;\n    double[] result = new\
    \ double[numbers.Length];\n    for (int i = 0; i < numbers.Length; i++)\n    {\n\
    \        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,math |>\n<| a tags=c#,arrays,math |>\n<code>\npublic static\
    \ double[] Rescale(double[] numbers, double min, double max)\n{\n    double scale\
    \ = max - min;\n    double[] result = new double[numbers.Length];\n    for (int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (numbers.length - 1);\n    for(int i = 0; i < numbers.length; i++)\n     \
    \   result[i] = numbers[i] * scale;\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = float.MAX_VALUE;\n    float max\
    \ = float.MIN_VALUE;\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \         max = numbers[i];\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n    }\n    float scale = (max - min) / (float) sum;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis\
    \ code doesn't work if all elements are negative. For example, `[1.0, 2.0, 3.0,\
    \ 4.0, -5.0]` returns `[-1.0, -0.5, -0.25, 0.0, 0.25]`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine for me. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\n`[-1.0, -0.5, -0.25, 0.0, 0.25]` returns `[-1.0, -0.5,\
    \ -0.25, 0.0, 0.25]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it again and it works fine for me. Can you give an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\n`[-1.0, -0.5, -0.25, 0.0, 0.25]` returns\
    \ `[-1.0, -0.5, -0.25, 0.0, 0.25]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n    float sum = 0;\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n   \
    \     if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    \
    \    if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n\
    \    float scale = (max - min) / (float) sum;\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float[] rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n    float\
    \ sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float n = numbers[i];\n        if(n < min)\n            min = n;\n\
    \        if(n > max)\n            max = n;\n        result[i] = (n - min) / (max\
    \ - min);\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `rescale_to_unit([-10.0, -20.0, -30.0, -40.0, -50.0])`\
    \ returns `[-10.0, -10.0, -10.0, -10.0, -10.0]`\n<|/ c |>\n<| c |>\n: I believe\
    \ that is the correct behavior. `-10.0 / 10.0` gives `-1.0`, not `0.0`.\n<|/ c\
    \ |>\n<| c |>\nYes, I believe that is the correct behavior. `-10.0 / 10.0` gives\
    \ `-1.0`, not `0.0`. However, `-10.0 / 10.0` gives `0.0` not `-1.0`.\n<|/ c |>\n\
    <| c |>\n: Yes, I believe that is the correct behavior. `-10.0 / 10.0` gives `-1.0`,\
    \ not `0.0`. However, `-10.0 / 10.0` gives `0.0` not `-1.0`.\n<|/ c |>\n<| c |>\n\
    : I believe that is the correct behavior. `-10.0 / 10.0` gives `-1.0`, not `0.0`.\
    \ However, `-10.0 / 10.0` gives `0.0` not `-1.0`.\n<|/ c |>\n<| a tags=math,java,arrays\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n        float\
    \ n = numbers[i];\n        if (n < min) {\n            min = n;\n        }\n \
    \       if (n > max) {\n            max = n;\n        }\n        result[i] = (n\
    \ - min) / (max - min);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rescale_to_unit([-10.0,\
    \ -20.0, -30.0, -40.0, -50.0])` returns `[-10.0, -10.0, -10.0, -10.0, -10.0]`\n\
    <|/ c |>\n<| c |>\n: I believe that is the correct behavior. `-10.0 / 10.0` gives\
    \ `-1.0`, not `0.0`.\n<|/ c |>\n<| c |>", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for (int i\
    \ = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] <\
    \ min) {\n            min = numbers[i];\n        }\n    }\n    float scale = (max\
    \ - min) / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        if (", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float range = (max - min);\n    float scale = (float)(range\
    \ == 0 ? 1 : range / numbers.length);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a tags=math,c#,arrays\
    \ |>\n<| a |>\n<code>\npublic static float[] rescaleToUnit(float[] numbers)\n\
    {\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = (max - min);\n    float scale = (float)(range == 0 ?\
    \ 1 : range / numbers.length);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a dscore=1\
    \ tags=math,c#,arrays |>\n<| a dscore=0 |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = (max - min);\n    float scale = (float)(range == 0 ?\
    \ 1 : range / numbers.length);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a tags=math,c#,arrays\
    \ |>\n<| a tags=math,c#,arrays |>\n<code>\npublic static float[] rescaleToUnit(float[]\
    \ numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float range = (max - min);\n    float scale = (float)(range == 0 ?\
    \ 1 : range / numbers.length);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=math,c#,arrays |>\n<code>\npublic static float[] rescal", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n  \
    \  {\n        float number = numbers[i];\n        if(number < min)\n         \
    \   min = number;\n        if(number > max)\n            max = number;\n    }\n\
    \    float scale = (max - min) / (numbers.length - 1);\n    for(int i = 0; i <\
    \ numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static float[] rescale(float[] numbers) {\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float scale = (max - min) /\
    \ (numbers.length - 1);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ scale = (max - min) / (numbers.length - 1);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[]\
    \ rescale(float[] numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float scale = (max - min) / (numbers.length - 1);\n    for (int i = 0; i\
    \ < numbers.length; i++) {\n        numbers[i] = numbers[i] * scale;\n    }\n\
    \    return numbers;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static float[] rescale(float[] numbers) {\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float scale = (max - min) /\
    \ (numbers.length - 1);\n    for (int i = 0; i < numbers.length; i++) {\n    \
    \    numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale(float[]\
    \ numbers) {\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ scale = (max - min) / (numbers.length - 1);\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        numbers[i] = numbers[i] * scale;\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic\
    \ static float[] rescale(float[] numbers) {\n", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    float[] result = new float[numbers.length];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n    return\
    \ result;\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min, float max) \n{\n    float scale = 1.0f / (max - min);\n\
    \    float[] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i] * scale;\n    return result;\n}\n/*\n Given\
    \ array of numbers (of at least two elements), apply a linear transform to that\
    \ array,\n    such that the smallest number will become 0 and the largest will\
    \ become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float min,\
    \ float max, float scale) \n{\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] *\
    \ scale;\n    return result;\n}\n/*\n Given array of numbers (of at least two\
    \ elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min, float max, float scale, float offset) \n{\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = numbers[i] * scale + offset;\n    return result;\n}\n/*\n\
    \ Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float\
    \ min, float max, float scale, float offset, ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n<|/ a tags=math,c#,arrays\
    \ |>\n<| a tags=math,c#,arrays |>\n<code>\npublic static float[] Rescale(float[]\
    \ numbers)\n{\n    float min = numbers.Min();\n    float max = numbers.Max();\n\
    \    float sum = 0;\n    float scale = 1.0f / (max - min);\n    foreach (float\
    \ number in numbers)\n    {\n        sum += number;\n    }\n    float[] result\
    \ = new float[numbers.Length];\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float[] Rescale(float[]\
    \ numbers)\n{\n    float min = numbers.Min();\n    float max = numbers.Max();\n\
    \    float sum = 0;\n    float scale = 1.0f / (max - min);\n    foreach (float\
    \ number in numbers)\n    {\n        sum += number;\n    }\n    float[] result\
    \ = new float[numbers.Length];\n    for (int i = 0; i < numbers.Length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=math,c#,arrays |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ float[] Rescale(float[] numbers)\n{\n    float min = numbers.Min();\n    float\
    \ max = numbers.Max();\n    float sum = 0;\n    float scale = 1.0f / (max - min);\n\
    \    foreach (float number in numbers)\n    {\n        sum += number;\n    }\n\
    \    float[] result = new float[numbers.Length];\n    for (int i = 0; i < numbers.Length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=math,c#,arrays |>\n<| a |>\n<code>\npublic static float[]\
    \ Rescale(float[] numbers)\n{\n    float min = numbers.Min();\n    float max =\
    \ numbers.Max();\n    float sum = 0;\n    float scale = 1.0f / (max - min);\n\
    \    foreach (float number in numbers)\n    {\n", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (float)(numbers.length - 1);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (float)(numbers.length - 1);\n    for(int i = 0; i < numbers.length; i++)\n\
    \        numbers[i] = numbers[i] * scale;\n    return numbers;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if the array is of length 1. You would need\
    \ to add an additional condition to your loop to handle that case.\n<|/ c |>\n\
    <| c |>\nI added a check for length 1.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array is of length 1. You would need to add an additional condition to your\
    \ loop to handle that case.\n<|/ c |>\n<| c |>\nI added a check for length 1.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array is of length 1. You would need\
    \ to add an additional condition to your loop to handle that case.\n<|/ c |>\n\
    <| a tags=arrays,c#,math |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int\
    \ i = 1; i < numbers.Length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (float)(numbers.Length - 1);\n    for(int\
    \ i = 0; i < numbers.Length; i++)\n        numbers[i] = numbers[i] * scale;\n\
    \    return numbers;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work\
    \ if the array is of length 1. You would need to add an additional condition to\
    \ your loop to handle that case.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array is of length 1. You would need to add an additional condition to your\
    \ loop to handle that case.\n<|/ c |>\n<| a tags=arrays,c#,math |>\n<code>\npublic\
    \ static float[] rescale_to_unit(float[] numbers)\n{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.Length; i++)\n  \
    \  {\n        if(numbers[i] < min)\n            min = numbers[i];\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (float)(numbers.Length - 1);\n    for(int i = 0; i < numbers.Length; i++)\n",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \     {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    float scale =\
    \ (max - min) / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,math,arrays |>\n<| c |>\nThis doesn't seem to work when\
    \ all numbers are negative.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it out\
    \ yourself with negative numbers. I added a negative example to the answer.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me with negative numbers. Try it out yourself.\
    \ I added a negative example to the answer.\n<|/ c |>\n<| c |>\nI added a negative\
    \ example to the answer. Try it out yourself. I added a negative example to the\
    \ answer.\n<|/ c |>\n<| c |>\nIt doesn't work for me with negative numbers. Try\
    \ it out yourself. I added a negative example to the answer.\n<|/ c |>\n<| a tags=c#,math,arrays\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers)\n{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if (numbers[i] > max)\n   \
    \     {\n            max = numbers[i];\n        }\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n    }\n    float scale =\
    \ (max - min) / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,math,arrays |>\n<code>\npublic static\
    \ float[] rescale_to_unit(float[] numbers)\n{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (numbers[i] < min)\n        {\n", "{\n    float[] result =\
    \ new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float sum = 0;\n    for (int i = 0; i < numbers.length; ++i)\n    {\n   \
    \     sum += numbers[i];\n        if (numbers[i] > max)\n        {\n         \
    \   max = numbers[i];\n        }\n        if (numbers[i] < min)\n        {\n \
    \           min = numbers[i];\n        }\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; ++i)\n    {\n\
    \        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nThe simplest way is to use this formula:\n<code>\n\
    float result = numbers[0] + (numbers[1] - numbers[0]) * ((numbers[2] - numbers[0])\
    \ / (numbers[2] - numbers[1]));\n</code>\n<|/ a tags=math,c#,arrays dscore=2 |>\n\
    <| c |>\nThis doesn't work if numbers[0] is greater than numbers[1] or numbers[2]\
    \ is greater than numbers[1]\n<|/ c |>\n<| c |>\nThis formula is correct for that\
    \ case. Just add `if (numbers[0] > numbers[1] || numbers[0] > numbers[2]) numbers[0]\
    \ = numbers[1];`\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static float Rescale(float[]\
    \ numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ sum = 0;\n    for (int i = 0; i < numbers.Length; ++i)\n    {\n        sum +=\
    \ numbers[i];\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for\
    \ (int i = 0; i < numbers.Length; ++i)\n    {\n        numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return numbers[0];\n}\n</code>\n<|/ a tags=math,c#,arrays\
    \ |>\n<| a |>\n<code>\npublic static float Rescale(float[] numbers)\n{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for\
    \ (int i = 0; i < numbers.Length; ++i)\n    {\n        sum += numbers[i];\n  \
    \      if (numbers[i] > max)\n        {\n            max = numbers[i];\n     \
    \   }\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for\
    \ (int i = 0; i < numbers.Length; ++i)\n    {\n        numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return numbers[0];\n}\n</code>\n<|/", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; ++i)\n    {\n        if (numbers[i] >\
    \ max)\n            max = numbers[i];\n        if (numbers[i] < min)\n       \
    \     min = numbers[i];\n    }\n    float range = max - min;\n    for (int i =\
    \ 0; i < numbers.length; ++i)\n    {\n        result[i] = numbers[i] - min;\n\
    \        result[i] /= range;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,algorithm,.net\
    \ |>\n<| c |>\nThis doesn't seem to work. Try it on [this array](http://i.imgur.com/7Z8uX.png).\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it on [this array](http://i.imgur.com/7Z8uX.png).\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the answer to fix the problem.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the answer to fix the problem.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the answer to fix the problem.\n\
    <|/ c |>\n<| a dscore=2 |>\nI believe this should work:\n<code>\npublic static\
    \ float RescaleToUnit(float value)\n{\n    float min = float.MaxValue;\n    float\
    \ max = float.MinValue;\n    float range = max - min;\n    float newValue = value\
    \ / range;\n    return newValue * range;\n}\n</code>\n<|/ a tags=c#,math,algorithm,.net\
    \ |>\n<| c |>\nThis doesn't seem to work. Try it on [this array](http://i.imgur.com/7Z8uX.png).\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it on [this array](http://i.imgur.com/7Z8uX.png).\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated the answer to fix the problem.\n\
    <|/ c |>\n<| a tags=c#,math,algorithm,.net |>\n<code>\npublic static float RescaleToUnit(float\
    \ value)\n{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    float range = max - min;\n    float newValue = value / range;\n    return\
    \ newValue * range;\n}\n</code>\n<|/ a dscore=2 ", "{\n    float[] result = new\
    \ float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float sum = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n   \
    \     sum += numbers[i];\n        if (numbers[i] > max)\n        {\n         \
    \   max = numbers[i];\n        }\n        if (numbers[i] < min)\n        {\n \
    \           min = numbers[i];\n        }\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = numbers[i] * scale;\n    }\n    return result;\n}", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n        if(numbers[i] > max)\n    \
    \        max = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (sum - 1);\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = numbers[i] * scale;\n    }\n    return result;\n\
    }", "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 0; i < numbers.length; ++i)\n  \
    \  {\n        float n = numbers[i];\n        if(n < min)\n            min = n;\n\
    \        if(n > max)\n            max = n;\n        result[i] = (n - min) / (max\
    \ - min);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if (numbers[i] > max)\n           \
    \ max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for (int i\
    \ = 0; i < numbers.length; i++)\n        result[i] = numbers[i] - min;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n        result[i] *= scale;\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,math |>\n<code>\npublic\
    \ static float[] rescale(float[] numbers)\n{\n    float[] result = new float[numbers.Length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.Length; i++)\n    {\n        if (numbers[i] > max)\n           \
    \ max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.Length - 1);\n    for (int i\
    \ = 0; i < numbers.Length; i++)\n        result[i] = numbers[i] - min;\n    for\
    \ (int i = 0; i < numbers.Length; i++)\n        result[i] *= scale;\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ float[] rescale(float[] numbers)\n{\n    float[] result = new float[numbers.Length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.Length; i++)\n    {\n        if (numbers[i] > max)\n           \
    \ max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.Length - 1);\n    for (int i\
    \ = 0; i < numbers.Length; i++)\n        result[i] = numbers[i] - min;\n    for\
    \ (int i = 0; i < numbers.Length; i++)\n        result[i] *= scale;\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,math |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static float[] rescale(float[] numbers)\n{\n    float[] result = new float[numbers.Length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.Length; i++)\n    {\n        if (numbers[i] > max)\n           \
    \ max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.Length - 1);\n    for (int i\
    \ = 0; i < numbers.Length; i++)\n        result[i] = numbers[i] - min;\n    for\
    \ (int i = 0; i < numbers.Length; i++)\n        result[i] *= scale;\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,math |>\n<| a tags=c#,math |>\n", "{\n  \
    \  float min = float.MAX_VALUE;\n    float max = float.MIN_VALUE;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n     \
    \       min = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (float)(numbers.length - 1);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n        numbers[i] = (float)(numbers[i] - min)\
    \ / scale;\n    return numbers;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = 1.0f / (max\
    \ - min);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = numbers[i] * scale;\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float number = numbers[i];\n\
    \        if (number < min)\n            min = number;\n        if (number > max)\n\
    \            max = number;\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,algorithm,arrays |>\n\
    <| c |>\nThis doesn't work if the array is all zero. Try it with `[0.0, 1.0, 2.0,\
    \ 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `[0.0, 1.0,\
    \ 2.0, 3.0, 4.0, 5.0]`.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated\
    \ my answer to account for that.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't require the array to be sorted.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't require the array to be sorted.\n<|/ c |>\n<| a tags=c#,math,algorithm,arrays\
    \ |>\n<code>\npublic static float[] Rescale(float[] numbers)\n{\n    float[] result\
    \ = new float[numbers.Length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.Length; i++)\n    {\n        float number = numbers[i];\n\
    \        if (number < min)\n            min = number;\n        if (number > max)\n\
    \            max = number;\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work if the array is all zero. Try it with `[0.0, 1.0, 2.0, 3.0, 4.0, 5.0]`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it with `[0.0, 1.0, 2.0, 3.0, 4.0, 5.0]`.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require the array\
    \ to be sorted.\n<|/ c |>\n<| a tags=c#,math,algorithm,arrays |>\n<code>\npublic\
    \ static float[] Rescale(float[] numbers)\n{\n    float[] result = new float[numbers.Length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (int i = 0;\
    \ i < numbers.Length; i++)\n    {\n        float number = ", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = float.MAX_VALUE;\n    float max\
    \ = float.MIN_VALUE;\n    for(int i = 0; i < numbers.length; i++)\n    {\n   \
    \     float number = numbers[i];\n        min = Math.min(number, min);\n     \
    \   max = Math.max(number, max);\n        result[i] = (number - min) / (max -\
    \ min);\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays |>\n<|\
    \ c |>\nThis doesn't work if the array is all zeros or all ones. For example,\
    \ `rescale_to_unit([1.0, 0.0, 1.0, 0.0, 1.0])` returns `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n\
    <|/ c |>\n<| c |>\nYes, that's true. I've added a version that doesn't have that\
    \ problem.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is all zeros or\
    \ all ones. For example, `rescale_to_unit([1.0, 0.0, 1.0, 0.0, 1.0])` returns\
    \ `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ have that problem.\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static float[]\
    \ rescale_to_unit(float[] numbers) {\n    float[] result = new float[numbers.length];\n\
    \    float min = Float.MAX_VALUE;\n    float max = Float.MIN_VALUE;\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        float number = numbers[i];\n    \
    \    min = Math.min(number, min);\n        max = Math.max(number, max);\n    \
    \    result[i] = (number - min) / (max - min);\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work if the array is\
    \ all zeros or all ones. For example, `rescale_to_unit([1.0, 0.0, 1.0, 0.0, 1.0])`\
    \ returns `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array is all zeros or all ones. For example, `rescale_to_unit([1.0, 0.0,\
    \ 1.0, 0.0, 1.0])` returns `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array is all zeros or all ones. For example, `rescale_to_unit([1.0,\
    \ 0.0, 1.0, 0.0, 1.0])` returns `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the array is all zeros or all ones. For example, `rescale_to_unit([1.0,\
    \ 0.0, 1.0, 0.0, 1.0])` returns `[0.0, 0.0, 1.0, 0.0, 0.0]`.\n<|/ c |>\n<| c ",
  "{\n    float[] result = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < numbers.length; ++i) {\n\
    \        float n = numbers[i];\n        if (n < min) min = n;\n        if (n >\
    \ max) max = n;\n        result[i] = (n - min) / (max - min);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26859025)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, since it explains\
    \ how to rescale an array to [0,1]. As I understand it, this is what the OP was\
    \ asking for. Maybe I misunderstood the question?\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859025)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, since it explains\
    \ how to rescale an array to [0,1]. As I understand it, this is what the OP was\
    \ asking for. Maybe I misunderstood the question?\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859025)\n\
    <|/ c |>\n<| a dscore=1 |>\nThe easiest way is to divide each number by its maximum\
    \ value, then multiply by 1.0:\n<code>\nfloat rescale_to_unit(float numbers[])\
    \ {\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\
    \ {\n        max = Math.max(max, numbers[i]);\n    }\n    float rescaled[] = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n   \
    \     rescaled[i] = numbers[i] / max;\n    }\n    return rescaled;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n\
    \            max = numbers[i];\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n    }\n    float range = max - min;\n    float scale = 1.0f /\
    \ range;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = numbers[i] * scale;\n    }\n    return result;\n}", "{\n    float[] result\
    \ = new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n\
    \            max = numbers[i];\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n    }\n    float range = max - min;\n    float scale = 1.0f /\
    \ range;\n    for(int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i]\
    \ * scale;\n    return result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ seem to work if the array is all zeros or all ones. I get the following error\
    \ when trying to run this code: java.lang.ArrayIndexOutOfBoundsException: -1\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting `java.lang.ArrayIndexOutOfBoundsException:\
    \ -1` when trying to run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting `java.lang.ArrayIndexOutOfBoundsException: -1` when trying to\
    \ run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting `java.lang.ArrayIndexOutOfBoundsException:\
    \ -1` when trying to run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting java.lang.ArrayIndexOutOfBoundsException: -1 when trying to\
    \ run this code.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a function that does this\
    \ for me:\n<code>\n/**\n * Rescales an array of numbers to a range of [0,1].\n\
    \ * \n * numbers the array of numbers to rescale\n * min minimum value of the\
    \ rescaled array\n * max maximum value of the rescaled array\n * an array of floats\
    \ representing the rescaled array\n */\npublic static float[] rescaleToUnit(float[]\
    \ numbers, float min, float max) {\n    float[] result = new float[numbers.length];\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for(int i\
    \ = 0; i < numbers.length; i++)\n        result[i] = numbers[i] * scale;\n   \
    \ return result;\n}\n</code>\n<|/ a tags=java,arrays,math |>\n<| c |>\nThis doesn't\
    \ work for me. I'm getting java.lang.ArrayIndexOutOfBoundsException: -1 when trying\
    \ to run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting\
    \ java.lang.ArrayIndexOutOfBoundsException: -1 when trying to run this code.\n\
    <|/ c |>\n<| a |>\nI wrote a function that does this for me:\n<code>\npublic static\
    \ float[] rescale", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = (max - min) / (numbers.length - 1);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = numbers[i]\
    \ - min;\n    for(int i = 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n\
    \    return numbers;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\ndouble[] rescale_to_unit(double[]\
    \ numbers) \n{\n    double min = numbers[0];\n    double max = numbers[0];\n \
    \   for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    double scale = (max - min) / (numbers.length - 1);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = numbers[i]\
    \ - min;\n    for(int i = 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n\
    \    return numbers;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, int precision) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n\
    \            min = numbers[i];\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n    }\n    float scale = (max - min) / (numbers.length - 1);\n\
    \    for(int i = 0; i < numbers.length; i++)\n        numbers[i] = numbers[i]\
    \ - min;\n    for(int i = 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n\
    \    return numbers;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\ndouble[] rescale_to_unit(double[]\
    \ numbers, int precision) ", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] > max)\n            max\
    \ = numbers[i];\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float range = max - min;\n    float scale = 1.0f / range;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,math,arrays,algorithm\
    \ |>\nI wrote a C# program to solve this problem in O(n) time. \n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = float.MAX_VALUE;\n    float max = float.MIN_VALUE;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        float number = numbers[i];\n\
    \        if(number < min)\n            min = number;\n        if(number > max)\n\
    \            max = number;\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. `rescale_to_unit([-10.0, -20.0, -30.0, -40.0,\
    \ -50.0])` returns `[-10.0, -20.0, -30.0, -40.0, -50.0]`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. I just tried it again and it works.\
    \ I must have done something wrong before.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I must have done something wrong before.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I must have done something wrong before.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if (number < min) {\n  \
    \          min = number;\n        }\n        if (number > max) {\n           \
    \ max = number;\n        }\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,rescale |>\n<|\
    \ a tags=java,arrays,rescale |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    float[] result = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        float number = numbers[i];\n        if (number < min) {\n  \
    \          min = number;\n        }\n        if (number > max) {\n           \
    \ max = number;\n        }\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\npublic static float[] rescale_to_unit(float[] numbers) {\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 0; i < numbers.length; i++) {\n        float\
    \ number = numbers[i];\n", "{\n    float[] result = new float[numbers.length];\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n\
    \    for (int i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        if (numbers[i] > max)\n            max = numbers[i];\n        if (numbers[i]\
    \ < min)\n            min = numbers[i];\n    }\n    float scale = (max - min)\
    \ / (sum - numbers[0]);\n    for (int i = 0; i < numbers.length; ++i)\n      \
    \  result[i] = numbers[i] * scale;\n    return result;\n}\n</code>\n<|/ a tags=arrays,java\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `rescale_to_unit([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `[-10, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5]` instead of `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n\
    <|/ c |>\n<| c |>\nI fixed the problem by changing the condition in the for loop\
    \ to `i < numbers.length - 1`\n<|/ c |>\n<| a dscore=3 |>\n<code>\npublic static\
    \ float[] rescaleToUnit(float[] numbers) {\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        sum += numbers[i];\n        if (numbers[i] > max)\n        \
    \    max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for (int i =\
    \ 0; i < numbers.length; ++i) {\n        numbers[i] *= scale;\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a dscore=3 |>\n<code>\n\
    public static float[] rescaleToUnit(float[] numbers) {\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float sum = 0;\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        sum += numbers[i];\n        if (numbers[i] > max)\n        \
    \    max = numbers[i];\n        if (numbers[i] < min)\n            min = numbers[i];\n\
    \    }\n    float scale = (max - min) / (sum - numbers[0]);\n    for (int i =\
    \ 0; i < numbers.length; ++i) {\n        numbers[i] *= scale;\n    }\n    return\
    \ numbers;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java |>\n\
    <code>\npublic static float[] rescaleToUnit(float[] numbers) {\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float sum = 0;\n    for (int\
    \ i = 0; i < numbers.length; ++i) {\n        sum += numbers[i];\n        if (numbers[i]\
    \ > max)\n            max = numbers[i];\n        if (numbers[i] < min)", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / (numbers.length - 1);\n    for(int i =\
    \ 0; i < numbers.length; i++)\n        numbers[i] *= scale;\n    return numbers;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
