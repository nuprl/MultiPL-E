name: HumanEval_15_string_sequence
language: d
prompt: "import std.math;\n/*\n Return a string containing space-delimited numbers\
  \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n  \
  \  >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
  \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
  \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
completions: ["{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++) s\
    \ += to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; i++)\
    \ s += to_string(i, base);\n    return s;\n}", "{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i);\n    return s;\n}", "{\n    string\
    \ s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n        s += to_string(i);\n\
    \    }\n    return s;\n}", "{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\
    \t\ts += to_string(i);\n\t\n\treturn s;\n}", "{\n\tstring s = \"\";\n\tfor (long\
    \ i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\treturn s;\n}", "{\n    string\
    \ s;\n    long i;\n    for(i = 0; i <= n; ++i)\n        s += to_string(i);\n \
    \   return s;\n}", "{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i);\n    return s;\n}", "{\n\tstring s = \"\";\n\tfor\
    \ (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\treturn s;\n}", "{\n\tstring\
    \ s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\treturn\
    \ s;\n}", "{\n\tstring s;\n\t\n\ts = to_string(0);\n\twhile (n > 0)\n\t{\n\t\t\
    s += \" \";\n\t\ts += to_string(n % 10);\n\t\tn /= 10;\n\t}\n\treturn s;\n}",
  "{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}", "{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i);\n    return s;\n}", "{\n\tstring s = \"\";\n\tfor\
    \ (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\treturn s;\n}", "{\n    string\
    \ s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n   \
    \ return s;\n}", "{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n \
    \       s += to_string(i);\n    return s;\n}", "{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i);\n    return s;\n}", "{\n\tstring\
    \ s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\treturn\
    \ s;\n}", "{\n    string s = \"\";\n    for(int i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}", "{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \    {\n        s += to_string(i);\n    }\n    return s;\n}", "{\n    string s\
    \ = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n    return\
    \ s;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
