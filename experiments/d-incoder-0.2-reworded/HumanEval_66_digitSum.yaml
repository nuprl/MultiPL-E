name: HumanEval_66_digitSum
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nTask\n    Write a function that\
  \ takes a string as input and returns the sum of the upper characters only'\n  \
  \  ASCII codes.\n\n    Examples:\n    >>> digitSum(\"\")\n    0L\n    >>> digitSum(\"\
  abAB\")\n    131L\n    >>> digitSum(\"abcCd\")\n    67L\n    >>> digitSum(\"helloE\"\
  )\n    69L\n    >>> digitSum(\"woArBld\")\n    131L\n    >>> digitSum(\"aAaaaXa\"\
  )\n    153L\n    \n*/\nlong digitSum(string s) \n"
tests: "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\"\
  ) == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\"\
  ) == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\"\
  ) == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\"\
  \ How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum\
    \ += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\n`toupper` doesn't do what you think it does. `toupper` converts\
    \ *the character* to upper case. `toupper` doesn't do what you think it does.\
    \ `toupper` converts *the character* to upper case. `toupper` doesn't do what\
    \ you think it does. `toupper` converts *the character* to upper case. `toupper`\
    \ doesn't do what you think it does. `toupper` converts *the character* to upper\
    \ case. `toupper` doesn't do what you think it does. `toupper` converts *the character*\
    \ to upper case. `toupper` doesn't do what you think it does. `toupper` converts\
    \ *the character* to upper case. `toupper` doesn't do what you think it does.\
    \ `toupper` converts *the character* to upper case. `toupper` doesn't do what\
    \ you think it does. `toupper` converts *the character* to upper case. `toupper`\
    \ doesn't do what you think it does. `toupper` converts *the character* to upper\
    \ case. `toupper` doesn't do what you think it does. `toupper` converts *the character*\
    \ to upper case. `toupper` doesn't do what you think it does. `toupper` converts\
    \ *the character* to upper case. `toupper` doesn't do what you think it does.\
    \ `toupper` converts *the character* to upper case. `toupper` doesn't do what\
    \ you think it does. `toupper` converts *the character* to upper case. `toupper`\
    \ doesn't do what you think it does. `toupper` converts *the character* to upper\
    \ case. `toupper` doesn't do what you think it does. `toupper` converts *the character*\
    \ to upper case. `toupper` doesn't do what you think it does. `toupper` converts\
    \ *the character* to upper case. `toupper` doesn't do what you think it does.\
    \ `toupper` converts *the character* to upper case. `toupper` doesn't do what\
    \ you think it does. `toupper` converts *the character", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe `foreach` loop is unnecessary and inefficient.\
    \ `sum` can be initialized to `0L` and then `sum += toupper(c)`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, that would be better. I'll edit my answer.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't use `foreach`.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that doesn't use `foreach`.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't use `foreach`.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for the help. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI added some comments to my answer, hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks so much for the help. I really appreciate it. I will try this out and let\
    \ you know how it goes.\n<|/ c |>\n<| c |>\nI added some comments to my answer,\
    \ hope it helps.\n<|/ c |>\n<| c |>\nThanks so much for the help. I really appreciate\
    \ it. I will try this out and let you know how it goes.\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for your answer. Your solution works perfectly for me. I am just\
    \ wondering why my code doesn't work. Is it because of the way I used the foreach\
    \ loop?\n<|/ c |>\n<| c |>\nYes, the foreach loop doesn't work as you expect it\
    \ to. I'll add an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks again.\
    \ Your explanation is very helpful.\n<|/ c |>\n<| a |>\nThe foreach loop doesn't\
    \ work as you expect it to. Here's an explanation.\nThe foreach loop iterates\
    \ over each element in the collection and executes the given code on each element.\
    \ \nIn your case, you're iterating over each character in the string. \n<code>\n\
    foreach(char c in s)\n{\n    sum += toupper(c);\n}\n</code>\nThe foreach loop\
    \ will execute the code inside the loop once for each character in the string.\
    \ \nIn your case, you're calling toupper() on each character in the string. \n\
    <code>\nsum += toupper(c);\n</code>\nThe toupper() method returns a character\
    \ which is converted to upper case. \n<code>\nchar c = toupper(c);\n</code>\n\
    The toupper() method returns a character which is converted to upper case. \n\
    <code>\nsum += c;\n</code>\nThe toupper() method returns a character which is\
    \ converted to upper case. \n<code>\nsum += toupper(c);\n</code>\nThe toupper()\
    \ method returns a character which is converted to upper case. \n<code>\nsum +=\
    \ toupper(c);\n</code>\nThe toupper() method returns a character which is converted\
    \ to upper case. \n<code>\nsum += toupper(c);\n</code>\nThe toupper() method returns\
    \ a character which is converted to upper case. \n<code>\nsum += toupper(c);\n\
    </code>\nThe toupper() method returns a character which is converted to upper\
    \ case. \n<code>\nsum += toupper(c);\n</code>\nThe toupper() method returns a\
    \ character which is converted to upper case. \n<code>\nsum += toupper(c);\n</code>\n\
    The toupper() method returns a character which is converted to upper case. \n\
    <code>\nsum += toupper(c);\n</code>\nThe toupper() method returns a character\
    \ which is converted to upper case. \n<code>\nsum += toupper(c);\n</code>\nThe\
    \ toupper() method returns a character which is converted to upper case. \n<code>\n\
    sum += toupper(c);\n</code>\nThe toupper() method returns a character which is\
    \ converted to upper case. \n<code>\nsum += toupper(c);\n</code>\nThe ", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThe\
    \ OP wants to count the digits, not sum them.\n<|/ c |>\n<| c |>\n: I see your\
    \ point. I've updated my answer to reflect that.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain what was wrong with\
    \ OP's code. Your code doesn't even compile.\n<|/ c |>\n<| c |>\n: I added some\
    \ explanation to the answer.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Your code doesn't\
    \ even compile.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    This doesn't work if the string contains non-ASCII characters. For example, `digitSum(\"\
    aAaaaXa\")` returns `153L` instead of `153L`.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ about that. Thanks for pointing that out. I've updated my answer accordingly.\n\
    <|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThis\
    \ code doesn't compile on g++ 4.8.1 on ubuntu 14.04\n<|/ c |>\n<| c |>\nIt compiles\
    \ fine for me on g++ 4.8.1 on ubuntu 14.04. Did you try compiling it yourself?\n\
    <|/ c |>\n<| c |>\nYes, I did. I get this error `error: expected primary-expression\
    \ before 'string'`\n<|/ c |>\n<| c |>\nI guess you didn't include `<string>` header\
    \ file\n<|/ c |>\n<| c |>\nI did include <string> header file\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, however I do not understand how it works.\
    \ I understand that isUpper is a function that checks if the character is an uppercase\
    \ letter, but how does it know to only add the uppercase letters?\n<|/ c |>\n\
    <| c |>\n`isUpper` checks if the character is upper case. `toUpper` converts the\
    \ character to upper case. `sum += toUpper(c);` adds the upper case letter to\
    \ the sum.\n<|/ c |>\n<| c |>\nI see. So the toUpper function converts the character\
    \ to upper case, but how does it know to only add uppercase letters?\n<|/ c |>\n\
    <| c |>\n`toUpper` converts the character to upper case. `sum += toUpper(c);`\
    \ adds the upper case letter to the sum.\n<|/ c |>\n<| c |>\nI see. So the toUpper\
    \ function converts the character to upper case, but how does it know to only\
    \ add uppercase letters?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring digitSum(string\
    \ s)\n{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| c |>\nI do not understand how this code works. I understand\
    \ that isUpper is a function that checks if the character is an uppercase letter,\
    \ but how does it know to only add the uppercase letters?\n<|/ c |>\n<| c |>\n\
    `isUpper` checks if the character is upper case. `toUpper` converts the character\
    \ to upper case. `sum += toUpper(c);` adds the upper case letter to the sum.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(isUpper(s[i]))\n            sum += toAscii(s[i]);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead\
    \ of `153L`.\n<|/ c |>\n<| c |>\nYeah, I noticed that and fixed it before you\
    \ posted your comment. Thanks.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nlong digitSum(string s) \n{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n    \
    \        sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead\
    \ of `153L`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks, I appreciate your help. I understand\
    \ your solution and it makes sense, but I'm having trouble implementing it. I\
    \ tried using your solution and it didn't work. I'm getting an error that says\
    \ \"error: cannot find symbol\n    foreach(char c in s)\n  symbol:   variable\
    \ s\n  location: class digitSum\"\n<|/ c |>\n<| c |>\nI added the import statements\
    \ to the code above. Did you import the std library?\n<|/ c |>\n<| c |>\nYes,\
    \ I did import the std library. I tried using your solution again and it didn't\
    \ work. I get an error that says \"error: cannot find symbol\n    foreach(char\
    \ c in s)\n  symbol:   variable s\n  location: class digitSum\"\n<|/ c |>\n<|\
    \ c |>\nI added the import statements to the code above. Did you import the std\
    \ library?\n<|/ c |>\n<| c |>\nI added the import statements to the code above.\
    \ Did you import the std library?\n<|/ c |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic static void main(String[] args) {\n    String s = \"hello\";\n\
    \    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c\
    \ = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            sum +=\
    \ Character.getNumericValue(c);\n        }\n    }\n    System.out.println(sum);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String s = \"hello\";\n    long sum = 0;\n    for (int i = 0; i\
    \ < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c))\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n    }\n    System.out.println(sum);\n\
    }\n</code>\n<|/ a tags=java,string,ascii |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static void main(String[] args) {\n    String s = \"hello\";\n    long sum =\
    \ 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (Character.isUpperCase(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    System.out.println(sum);\n}\n</code>\n<|/ a tags=java,string,ascii\
    \ |>\n<| a tags=java,string,ascii ", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c\
    \ |>\nThis doesn't work. `toupper` returns a `char` not a `long`.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=string,c++,char,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,char |>\n<| c |>\nThis doesn't work if the string\
    \ contains only digits. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated my answer.\n<|/\
    \ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,char |>\n<| c |>\n`isUpper` isn't a function,\
    \ but a macro.\n<|/ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"macro\"\
    . It's a macro that expands to `isupper` if the `<ctype.h>` header is included.\n\
    <|/ c |>\n<| c |>\n: I didn't say that `isUpper` was a function. I said that `isUpper`\
    \ is a macro that expands to `isupper` if the `<ctype.h>` header is included.\
    \ That's why I wrote \"macro\".\n<|/ c |>\n<| c |>\n: I didn't say that `isUpper`\
    \ is a function. I said that `isUpper` is a macro that expands to `isupper` if\
    \ the `<ctype.h>` header is included. That's why I wrote \"macro\".\n<|/ c |>\n\
    <| c |>\n: I didn't say that `isUpper` is a function. I said that `isUpper` is\
    \ a macro that expands to `isupper` if the `<ctype.h>` header is included. That's\
    \ why I wrote \"macro\".\n<|/ c |>\n<| a tags=c++,string,char |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum = 0;\n \
    \   foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n          \
    \  sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThe OP wants to count the digits, not just sum them.\n<|/ c |>\n\
    <| c |>\nI agree with you. My answer was more to show how it could be done with\
    \ loops. I didn't want to give the OP the answer with loops since they were not\
    \ familiar with them.\n<|/ c |>\n<| c |>\nI agree with you. My answer was more\
    \ to show how it could be done with loops. I didn't want to give the OP the answer\
    \ with loops since they were not familiar with them.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. My answer was more to show how it could be done with loops. I didn't\
    \ want to give the OP the answer with loops since they were not familiar with\
    \ them.\n<|/ c |>\n<| c |>\nI agree with you. My answer was more to show how it\
    \ could be done with loops. I didn't want to give the OP the answer with loops\
    \ since they were not familiar with them.\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThis doesn't work. Try `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does work. `digitSum(\"aAaaaXa\")` returns\
    \ `153L` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work for `digitSum(\"aAaaaXa\"\
    )` because `toUpper` converts `a` to `A` and `X` to `X`. The result of `toUpper`\
    \ is `AX` which is not `aA`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for\
    \ pointing that out. I've updated the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for (char c : s.toCharArray()) {\n        if (c\
    \ >= 'A' && c <= 'Z') {\n            sum += (c - 'A' + 10);\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for (char\
    \ c : s.toCharArray()) {\n        if (c >= 'A' && c <= 'Z') {\n            sum\
    \ += (c - 'A' + 10);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n\
    \    long sum = 0;\n    for (char c : s.toCharArray()) {\n        if (c >= 'A'\
    \ && c <= 'Z') {\n            sum += (c - 'A' + 10);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=java,string,ascii |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for (char c : s.toCharArray())\
    \ {\n        if (c >= 'A' && c <= 'Z') {\n            sum += (c - 'A' + 10);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for (char c : s.toCharArray())\
    \ {\n        if (c >= 'A' && c <= 'Z') {\n            sum += (c - 'A' + 10);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for (char c : s.toCharArray()) {\n        if (c >= 'A' && c <= 'Z')\
    \ {\n            sum += (c - 'A' + 10);\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=java,", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts, but I already know how to use foreach loops. I wanted to know\
    \ if there was a way to do it without using foreach loops.\n<|/ c |>\n<| c |>\n\
    I see, I misunderstood your question. Sorry about that. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nI edited my answer. Sorry about that. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks so much! I appreciate your efforts. I appreciate your help.\n\
    <|/ c |>\n<| c |>\nNo problem. I'm glad I could help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring s = \"abc\";", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks\
    \ so much for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad I could help.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner at C#, so I didn't know\
    \ about foreach loops. I did some research and found out that foreach loops are\
    \ used to iterate through collections. I thought that foreach loops were used\
    \ to iterate through characters. I didn't know that they could iterate through\
    \ strings. I thought that they were used to iterate through arrays. I thought\
    \ that they were used to iterate through lists. I thought that they were used\
    \ to iterate through dictionaries. I thought that they were used to iterate through\
    \ stacks. I thought that they were used to iterate through queues. I thought that\
    \ they were used to iterate through stacks. I thought that they were used to iterate\
    \ through queues. I thought that they were used to iterate through stacks. I thought\
    \ that they were used to iterate through queues. I thought that they were used\
    \ to iterate through stacks. I thought that they were used to iterate through\
    \ queues. I thought that they were used to iterate through stacks. I thought that\
    \ they were used to iterate through queues. I thought that they were used to iterate\
    \ through stacks. I thought that they were used to iterate through queues. I thought\
    \ that they were used to iterate through stacks. I thought that they were used\
    \ to iterate through queues. I thought that they were used to iterate through\
    \ stacks. I thought that they were used to iterate through queues. I thought that\
    \ they were used to iterate through stacks. I thought that they were used to iterate\
    \ through queues. I thought that they were used to iterate through stacks. I thought\
    \ that they were used to iterate through queues. I thought that they were used\
    \ to iterate through stacks. I thought that they were used to iterate through\
    \ queues. I thought that they were used to iterate through stacks. I thought that\
    \ they were used to iterate through queues. I thought that they were used to iterate\
    \ through stacks. I thought that they were used to iterate through queues. I thought\
    \ that they were used to iterate through stacks. I thought that they were used\
    \ to iterate through queues. I thought that they were used to iterate through\
    \ stacks. I thought that they were used to iterate through queues. I thought that\
    \ they were used to iterate through stacks. I thought that they were used to iterate\
    \ through queues. I thought that they were used to iterate through stacks. I thought\
    \ that they were used to iterate through queues. I thought that they were used\
    \ to iterate through stacks. I thought that they were used to iterate through\
    \ queues. I thought that they were used to iterate through stacks. ", "{\n   \
    \ long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n   \
    \         sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\n`isUpper` isn't a standard function in C++.\n<|/ c |>\n<| c |>\n\
    : It is, but it's not in `<cctype>`.\n<|/ c |>\n<| c |>\n: Yes, it is. It's in\
    \ `<ctype.h>`.\n<|/ c |>\n<| c |>\n: Yes, it is. It's in `<cctype>`.\n<|/ c |>\n\
    <| c |>\n: Yes, it is. It's in `<cctype>`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't\
    \ downvote you, but I suspect it's because you didn't explain what you did. You\
    \ didn't explain what you changed, and you didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you changed it.\
    \ You didn't explain why you changed it. You didn't explain why you ", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,arrays |>\n<| c |>\nI agree with your solution, but I believe\
    \ that OP wants to learn how to do it with loops and arrays. I believe that he\
    \ is trying to learn the basics of C++.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I believe that OP wants to learn how to do it with loops and arrays. I believe\
    \ that he is trying to learn the basics of C++.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I believe that OP wants to learn how to do it with loops and arrays.\
    \ I believe that he is trying to learn the basics of C++.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I believe that OP wants to learn how to do it with loops\
    \ and arrays. I believe that he is trying to learn the basics of C++.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that OP wants to learn how to do it with\
    \ loops and arrays. I believe that he is trying to learn the basics of C++.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks for\
    \ your answer. I was wondering if there is a way to do this without using std\
    \ library. I am not allowed to use std library in my assignment.\n<|/ c |>\n<|\
    \ c |>\nI added a solution without using std library.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I was wondering if there is a way to do this without using\
    \ std library. I am not allowed to use std library in my assignment.\n<|/ c |>\n\
    <| c |>\nI added a solution without using std library.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n       \
    \ sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks\
    \ so much for the help! I appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. By\
    \ the way, I edited my answer to include a solution that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'a' && c\
    \ <= 'z')\n            sum += (c - 'a' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n   \
    \         sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for your answer. I tried your solution and\
    \ it works. However, I still don't understand why my code doesn't work. Could\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added a comment\
    \ to my answer. Hope that helps.\n<|/ c |>\n<| c |>\nThank you for your explanation.\
    \ I understand now. Your solution is much more elegant than mine.\n<|/ c |>\n\
    <| a |>\nI believe that your code is working fine. \nThe only thing that I can\
    \ think of is that your input string contains some non-printable characters. \n\
    Try printing the string before you call digitSum and see if it contains any non-printable\
    \ characters.\n<|/ a tags=string,c++,char,ascii dscore=0 |>\n<| c |>\nThank you\
    \ for your answer. I tried your solution and it works. However, I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added a comment to my answer. Hope that helps.\n\
    <|/ c |>\n<| a tags=string,c++,char,ascii |>\nYour code works fine. \nThe only\
    \ thing that I can think of is that your input string contains some non-printable\
    \ characters. \nTry printing the string before you call digitSum and see if it\
    \ contains any non-printable characters.\n<|/ a dscore=0 |>\n<| c |>\nThank you\
    \ for your answer. I tried your solution and it works. However, I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| a tags=string,c++,char,ascii |>\nYour code works fine. \n\
    The only thing that I can think of is that your input string contains some non-printable\
    \ characters. \nTry printing the string before you call digitSum and see if it\
    \ contains any non-printable characters.\n<|/ a dscore=0 |>\n<| a tags=string,c++,char,ascii\
    \ |>\nYour code works fine. \nThe only thing that I can think of is that your\
    \ input string contains some non-printable characters. \nTry printing the string\
    \ before you call digitSum and see if it contains any non-", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,java |>\n<| c |>\nPlease add some explanation\
    \ to your answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ sum += Character.getNumericValue(s.charAt(i));\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=string,c++,java |>\n<| a dscore=0 |>\n<code>\npublic long\
    \ digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,java |>\n<| a tags=string,c++,java |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,java\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,java dscore=0 |>\n<| a tags=string,c++,java\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,java\
    \ |>\n<code>\npublic long digitSum(String s) {", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A')\
    \ - 10;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead of\
    \ `131L`.\n<|/ c |>\n<| c |>\n: It returns `131L` on my machine.\n<|/ c |>\n<|\
    \ c |>\n: I see what you mean. I've updated my answer to account for that.\n<|/\
    \ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks for your answer. I am not allowed to use any libraries. I only need\
    \ to use std.string and std.math\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that does not use any libraries.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any libraries. I only need to use std.string\
    \ and std.math\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ does not use any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am\
    \ not allowed to use any libraries. I only need to use std.string and std.math\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your\
    \ answer! I understand that my code was a little bit too complicated. I'm new\
    \ to programming and I wanted to practice my skills. I appreciate your help!\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(char.IsUpper(s[i]))\n            sum += char.GetNumericValue(s[i]);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,.net,algorithm |>\n\
    <| a dscore=1 |>\n<code>\npublic long digitSum(string s)\n{\n    long sum = 0;\n\
    \    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum\
    \ += char.GetNumericValue(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,.net,algorithm\
    \ |>\n<| a tags=c#,string,.net,algorithm |>\n<code>\npublic long digitSum(string\
    \ s)\n{\n    long sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n\
    \            sum += char.GetNumericValue(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,.net,algorithm |>\n<code>\npublic long\
    \ digitSum(string s)\n{\n    long sum = 0;\n    foreach (char c in s)\n    {\n\
    \        if (char.IsUpper(c))\n            sum += char.GetNumericValue(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public long digitSum(string s)\n{\n    long sum = 0;\n    foreach (char c in s)\n\
    \    {\n        if (char.IsUpper(c))\n            sum += char.GetNumericValue(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,.net,algorithm |>\n\
    <| a dscore=1 |>\n<code>\npublic long digitSum(string s)\n{\n    long sum = 0;\n\
    \    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n            sum\
    \ += char.GetNumericValue(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,.net,algorithm\
    \ |>\n<| a tags=c#,string,.net,algorithm |>\n<code>\npublic long digitSum(string\
    \ s)\n{\n    long sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n\
    \            sum += char.GetNumericValue(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,.net,algorithm |>\n<code>\npublic ", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ efforts, but I already know how to use foreach loops. I wanted to know if there\
    \ was a way to do it without using foreach loops.\n<|/ c |>\n<| c |>\nI see. Well,\
    \ I don't think there is any way without using foreach loops. But I guess you\
    \ can try using recursion.\n<|/ c |>\n<| c |>\nI guess you mean recursion. Yes,\
    \ I meant recursion. Thanks for the help.\n<|/ c |>\n<| a tags=string,c++,loops,foreach\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't work for \"aAaaaXa\" which\
    \ should return 153L\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ I'll edit my answer.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    `toUpper` isn't a function in C++.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii,char\
    \ |>\n<| c |>\n`toUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\nIt does in\
    \ C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n<|/ c |>\n<| c\
    \ |>\nYes, but it's not in C++98.\n<|/ c |>\n<| c |>\nI know, but I thought it\
    \ was worth mentioning since OP didn't specify which version of C++ they were\
    \ using.\n<|/ c |>\n<| c |>\nI didn't know that either, thanks for pointing that\
    \ out. I've updated my answer to include a C++98 solution.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm still a beginner\
    \ at programming and I didn't know that you could use foreach like that. Thanks\
    \ for teaching me something new!\n<|/ c |>\n<| c |>\nNo problem. `foreach` loops\
    \ are a very useful tool in many languages. I find them very useful in C#, Java,\
    \ Python, Ruby, and Haskell.\n<|/ c |>\n<| c |>\nI added a more efficient version\
    \ of the `digitSum` function.\n<|/ c |>\n<| a |>\n<code>", "{\n    long sum =\
    \ 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,arrays |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\n\
    I appreciate your answer, but I'm looking for a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n\
    <|/ c |>\n<| c |>\nI appreciate your answer, but I'm looking for a solution that\
    \ doesn't use any libraries.\n<|/ c |>\n<| c |>\nI added a solution without using\
    \ any libraries.\n<|/ c |>\n<| c |>\nI appreciate your answer, but I'm looking\
    \ for a solution that doesn't use any libraries.\n<|/ c |>\n<| a tags=string,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n       \
    \ sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThe question asks for an algorithm, not an implementation. Your answer\
    \ doesn't address the question at all.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ an algorithm, not an implementation. Your answer doesn't address the question\
    \ at all.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm, not an implementation.\
    \ Your answer doesn't address the question at all.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm, not an implementation. Your answer doesn't address the\
    \ question at all.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm, not\
    \ an implementation. Your answer doesn't address the question at all.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n \
    \       if (Character.isDigit(c)) {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| c |>\nThe\
    \ question asks for an algorithm, not an implementation. Your answer doesn't address\
    \ the question at all.\n<|/ c |>\n<| c |>\nThe question asks for an algorithm,\
    \ not an implementation. Your answer doesn't address the question at all.\n<|/\
    \ c |>\n<| c |>\nThe question asks for an algorithm, not an implementation. Your\
    \ answer doesn't address the question at all.\n<|/ c |>\n<| a tags=algorithm,java\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isDigit(c))\
    \ {\n            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe question asks for an algorithm, not an implementation.\
    \ Your answer doesn't address the question at all.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for an algorithm, not an implementation. Your answer doesn't address the\
    \ question at all.\n<|/ c |>\n<| a tags=algorithm,java |>\n<code>\npublic int\
    \ digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = ", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        sum += std.math.charDigit(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `charDigit` returns `int`, not\
    \ `long`.\n<|/ c |>\n<| c |>\nI fixed the return type to `long`. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=string,c++,char |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.codePointAt(i)\
    \ > 64)\n        {\n            sum += s.codePointAt(i);\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThe `s.codePointAt(i)`\
    \ part is wrong. `s.codePointAt(i)` returns a `char` not a `long`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n\
    <| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=string,c++,char,ascii |>\n<| c |>\nI like your solution, but I believe\
    \ that `isUpper` should be `isUpperAscii` since `isUpper` only checks for ASCII\
    \ uppercase letters.\n<|/ c |>\n<| c |>\nThanks, I didn't know that `isUpper`\
    \ only checks for ASCII uppercase letters. I edited my answer to include your\
    \ suggestion.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(s.at(i) >= 'A' && s.at(i) <= 'Z')\n        {\n            sum\
    \ += s.at(i) - 'A' + 1;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s) {\n      \
    \  sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,char\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a tags=c++,string,char\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic long digitSum(String s)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27859485)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He wants to know how to use ASCII codes to get\
    \ the sum of the upper case letters. He has already written the code to get the\
    \ sum of the upper case letters. He just wants to know how to get the sum of the\
    \ ASCII codes.\n<|/ c |>\n<| c |>\nThe question was how to get the sum of the\
    \ ASCII codes. Your answer does not do that. Your answer does not explain how\
    \ to get the sum of the ASCII codes.\n<|/ c |>\n<| c |>\nThe question was how\
    \ to get the sum of the ASCII codes. Your answer does not do that. Your answer\
    \ does not explain how to get the sum of the ASCII codes.\n<|/ c |>\n<| c |>\n\
    The question was how to get the sum of the ASCII codes. Your answer does not do\
    \ that. Your answer does not explain how to get the sum of the ASCII codes.\n\
    <|/ c |>\n<| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(Character.isUpperCase(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of ", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using foreach and if. I'm thinking about using pointers but I'm not sure how\
    \ to do it.\n<|/ c |>\n<| c |>\nI added a solution without foreach, if, and pointers.\n\
    <|/ c |>\n<| c |>\nThank you very much! I really appreciate it!\n<|/ c |>\n<|\
    \ a |>\n<code>\nstring s = \"hello\";", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe OP wants to return the sum of the upper case letters, not the\
    \ sum of the ASCII codes.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any library functions. I should use only basic functions like\
    \ toupper, foreach, etc.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ without using any library functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any library functions. I should use\
    \ only basic functions like toupper, foreach, etc.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution without using any library functions. I hope\
    \ it helps.\n<|/ c |>\n<| a tags=c++,string,ascii,uppercase |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n\
    \            sum += (c - 'A');\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for your answer. Your code works perfectly\
    \ fine, but I wanted to know if there is a way to do it without using foreach\
    \ loop. I am not allowed to use foreach loop in my code.\n<|/ c |>\n<| c |>\n\
    I added a solution without foreach loop\n<|/ c |>\n<| c |>\nThank you for your\
    \ answer. Your code works perfectly fine, but I wanted to know if there is a way\
    \ to do it without using foreach loop. I am not allowed to use foreach loop in\
    \ my code.\n<|/ c |>\n<| c |>\nI added a solution without foreach loop\n<|/ c\
    \ |>\n<| c |>\nThank you for your answer. Your code works perfectly fine, but\
    \ I wanted to know if there is a way to do it without using foreach loop. I am\
    \ not allowed to use foreach loop in my code.\n<|/ c |>\n<| a tags=c++,string,ascii,char\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, although I believe that `std::accumulate`\
    \ would be a better fit for this particular problem.\n<|/ c |>\n<| c |>\nI agree,\
    \ `std::accumulate` would be a better fit for this particular problem. `std::accumulate`\
    \ will also allow you to easily add more characters to the sum.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    aAaaaXa\")` returns `153L` instead of `153L`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `digitSum(\"aAaaaXa\")` returns `153L` as expected.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `digitSum(\"aAaaaXa\")` returns `153L` as expected.\n<|/ c |>\n<| c |>\n\
    It does work. `digitSum(\"aAaaaXa\")` returns `153L` as expected.\n<|/ c |>\n\
    <| c |>\nIt does work. `digitSum(\"aAaaaXa\")` returns `153L` as expected.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    I like this solution, but I wonder why you used `isUpper` instead of `isalpha`?\n\
    <|/ c |>\n<| c |>\n`isUpper` checks if the character is upper case letter. `isalpha`\
    \ checks if the character is alphabetic character. `isalpha` is more general than\
    \ `isUpper`, so I used `isUpper` here.\n<|/ c |>\n<| c |>\nI see. Thanks for clarifying.\n\
    <|/ c |>\n<| c |>\nI like the `isUpper` solution. Why not use `std::isupper` instead\
    \ of `isUpper`?\n<|/ c |>\n<| c |>\n`std::isupper` is C++11 feature. `isupper`\
    \ is part of C standard library.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum\
    \ += std.math.charDigit(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i) - '0';\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 tags=string,c++,algorithm\
    \ |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThe\
    \ `isUpper` function should be `isUpperAscii` since it checks whether the character\
    \ is uppercase or not, not whether it is an ASCII uppercase character.\n<|/ c\
    \ |>\n<| c |>\nI believe that `isUpperAscii` is only available on Windows, not\
    \ on Linux.\n<|/ c |>\n<| c |>\nYes, I believe that `isUpperAscii` is only available\
    \ on Windows, not on Linux.\n<|/ c |>\n<| c |>\nThe `isUpper` function should\
    \ be `isUpperAscii` since it checks whether the character is uppercase or not,\
    \ not whether it is an ASCII uppercase character.\n<|/ c |>\n<| c |>\nI believe\
    \ that `isUpperAscii` is only available on Windows, not on Linux.\n<|/ c |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks for your answer. I was able to solve it using your code. Thanks again.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\
    \ {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n        }\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    The `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| c |>\n: It does in\
    \ C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n<|/ c |>\n<| c\
    \ |>\n: Yes, it does. But not in the C++03 standard.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. But not in the C++03 standard.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ But not in the C++03 standard.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI see what you're saying, but I still don't understand how I would\
    \ go about doing that. I'm new to programming, so I'm still trying to wrap my\
    \ head around everything. Could you give me an example of how I would do that?\n\
    <|/ c |>\n<| c |>\nI added some example code to the answer. Hope it helps.\n<|/\
    \ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.codePointAt(i)\
    \ > 64)\n        {\n            sum += s.codePointAt(i);\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Scanner;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Scanner;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\n`toUpper` doesn't exist in C++.\n\
    <|/ c |>\n<| c |>\nI didn't know that. Thanks.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n   \
    \         sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| c |>\nThanks for your answer. I'm still new\
    \ to programming and I didn't know about `foreach` loop. I'll definitely look\
    \ into it.\n<|/ c |>\n<| c |>\n`foreach` is an STL construct. `std::for_each`\
    \ is another alternative.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char\
    \ c = s[i];\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum += (c\
    \ - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\n`if(c >= 'A' && c <= 'Z')` can be simplified to `if(c >= 'A' &&\
    \ c <= 'Z')`\n<|/ c |>\n<| c |>\nYes, I know. Thanks for pointing it out. I've\
    \ edited the answer.\n<|/ c |>\n<| c |>\n`if(c >= 'A' && c <= 'Z')` can be simplified\
    \ to `if(c >= 'A' && c <= 'Z')`\n<|/ c |>\n<| c |>\nYes, I know. Thanks for pointing\
    \ it out. I've edited the answer.\n<|/ c |>\n<| c |>\n`if(c >= 'A' && c <= 'Z')`\
    \ can be simplified to `if(c >= 'A' && c <= 'Z')`\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\n`std::toupper` isn't guaranteed to return an ASCII code that's\
    \ a letter. `std::toupper` only guarantees that the character is upper case. `std::toupper`\
    \ doesn't guarantee that the character is ASCII.\n<|/ c |>\n<| c |>\n: Yes, that's\
    \ why I said \"upper characters only\". I didn't want to get into detail about\
    \ what `std::toupper` actually does. But I agree that `std::toupper` doesn't guarantee\
    \ that the character is ASCII.\n<|/ c |>\n<| c |>\n`std::toupper` doesn't guarantee\
    \ that the character is ASCII. `std::toupper` only guarantees that the character\
    \ is upper case. `std::toupper` doesn't guarantee that the character is ASCII.\n\
    <|/ c |>\n<| c |>\n: Yes, that's why I said \"upper characters only\". I didn't\
    \ want to get into detail about what `std::toupper` actually does. But I agree\
    \ that `std::toupper` doesn't guarantee that the character is ASCII.\n<|/ c |>\n\
    <| c |>\n`std::toupper` doesn't guarantee that the character is ASCII.\n<|/ c\
    \ |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    This doesn't answer the question as asked.\n<|/ c |>\n<| c |>\nIt does. I added\
    \ a comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ answer the question as asked, because you didn't answer the question as asked.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question asking for clarification.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question asking for clarification.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    Thanks for the answer. I'm new to programming and I didn't know about isUpper\
    \ and toUpper functions. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a\
    \ code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the\
    \ example. I will try it out and see if it works.\n<|/ c |>\n<| c |>\nI added\
    \ a code example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the\
    \ example. I will try it out and see if it works.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the string contains any non-ASCII characters. For example, `digitSum(\"\
    aAaaaXa\")` returns `153L` instead of `153L`. See [this answer](https://stackoverflow.com/a/53056444/10871073)\
    \ for a solution that works with non-ASCII characters.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner at programming and I didn't\
    \ know that there was a toUpper function. I will try your solution and see if\
    \ it works.\n<|/ c |>\n<| c |>\nI used your solution and it worked perfectly.\
    \ Thank you very much!\n<|/ c |>\n<| c |>\nYou're welcome. Don't forget to accept\
    \ the answer if it solved your problem.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    string digitSum(string s) {\n    string sum = \"\";\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isUpper(s[i])) {\n            sum += toUpper(s[i]);\n   \
    \     }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n\
    <| a dscore=2 |>\n<code>\nstring digitSum(string s) {\n    string sum = \"\";\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isUpper(s[i])) {\n    \
    \        sum += toUpper(s[i]);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| a dscore=2 |>\n<code>\nstring digitSum(string\
    \ s) {\n    string sum = \"\";\n    for(int i = 0; i < s.length(); i++) {\n  \
    \      if(isUpper(s[i])) {\n            sum += toUpper(s[i]);\n        }\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\nstring digitSum(string s) {\n    string sum = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isUpper(s[i])) {\n            sum\
    \ += toUpper(s[i]);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\nstring digitSum(string s) {\n   \
    \ string sum = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(isUpper(s[i]))\
    \ {\n            sum += toUpper(s[i]);\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring digitSum(string s)\
    \ {\n    string sum = \"\";\n    for(int i = 0; i < s.length(); i++) {\n     \
    \   if(isUpper(s[i])) {\n            sum += toUpper(s[i]);\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\nstring digitSum(string s) {\n    string sum = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isUpper(s[i])) {\n            sum\
    \ += toUpper(s[i]);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI see no reason\
    \ to downvote this answer. Maybe the OP doesn't know what he is doing, but this\
    \ answer doesn't deserve a downvote.\n<|/ c |>\n<| c |>\nI didn't downvote it,\
    \ but I do think it's not a good answer because it's using unnecessary loops and\
    \ functions. It's also not very idiomatic C++.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, it's not a good answer because it's using unnecessary loops and functions.\
    \ But I didn't want to give him a complete solution, just an idea of how to solve\
    \ the problem. Maybe he will learn something from it.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, it's not a good answer because it's using unnecessary loops and functions.\
    \ But I didn't want to give him a complete solution, just an idea of how to solve\
    \ the problem. Maybe he will learn something from it.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, it's not a good answer because it's using unnecessary loops and functions.\
    \ But I didn't want to give him a complete solution, just an idea of how to solve\
    \ the problem. Maybe he will learn something from it.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n            sum\
    \ += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't compile. `std::toUpper` doesn't exist in C++.\n\
    <|/ c |>\n<| c |>\n: It does in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n\
    <|/ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c\
    \ |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n         \
    \   sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how to do this\
    \ in Haskell, not C++.\n<|/ c |>\n<| c |>\nI added a Haskell solution. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThe question was tagged C++, so I assumed C++ was\
    \ the language the OP was most comfortable with. Haskell is also a very good language\
    \ for beginners, and I believe that my solution will help him learn Haskell as\
    \ well.\n<|/ c |>\n<| c |>\nI agree that Haskell is a good language for beginners.\
    \ However, your solution doesn't answer the question. OP wants to know how to\
    \ do this in Haskell, not C++.\n<|/ c |>\n<| c |>\nI added a Haskell solution.\
    \ Hope it helps.\n<|/ c |>\n<| a |>\n<code>\nimport Data.List", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\n\
    Thanks for the answer. I am not allowed to use any libraries. I guess I should\
    \ use recursion to solve this problem. I am new to programming, so I am not able\
    \ to understand how recursion works. Can you please help me with that?\n<|/ c\
    \ |>\n<| c |>\nI added a recursive solution to my answer.\n<|/ c |>\n<| c |>\n\
    Thanks a lot. I was able to understand recursion.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.at(i)\
    \ >= 'A' && s.at(i) <= 'Z')\n        {\n            sum += s.at(i) - 'A' + 1;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, but I believe that `digitSum(\"aAaaaXa\"\
    )` should return `153L`, not `131L`.\n<|/ c |>\n<| c |>\nI agree, my solution\
    \ was wrong. I've corrected my answer.\n<|/ c |>\n<| c |>\nThe `digitSum` function\
    \ can be simplified a little bit by using the `std::accumulate` function from\
    \ `<numeric>` header: `return std::accumulate(s.begin(), s.end(), 0L, [](auto\
    \ sum, auto c) { return sum + std::toupper(c) - 'A' + 1; });`\n<|/ c |>\n<| c\
    \ |>\n: I believe that `std::toupper` converts characters to upper case, so `'A'`\
    \ becomes `'A'` and `'a'` becomes `'A'`. So the subtraction of `'A'` from `'a'`\
    \ will give `0`.\n<|/ c |>\n<| c |>\nYes, that's true. My bad.\n<|/ c |>\n<| a\
    \ tags=string,c++,algorithm |>\nThis can be done with std::accumulate:\n<code>\n\
    #include <iostream>\n#include <string>\n#include <numeric>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += std.toInt(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\n`std::toInt`\
    \ will throw an exception if the character cannot be converted to an integer.\n\
    <|/ c |>\n<| c |>\n: Yes, but that's not what he asked for. He asked for \"the\
    \ sum of the upper characters only\", which means he doesn't care about non-numeric\
    \ characters.\n<|/ c |>\n<| c |>\n: I see what you mean. He asked for \"the sum\
    \ of the upper characters only\", which means he doesn't care about non-numeric\
    \ characters.\n<|/ c |>\n<| c |>\n: I see what you mean. He asked for \"the sum\
    \ of the upper characters only\", which means he doesn't care about non-numeric\
    \ characters.\n<|/ c |>\n<| c |>\n: I see what you mean. He asked for \"the sum\
    \ of the upper characters only\", which means he doesn't care about non-numeric\
    \ characters.\n<|/ c |>\n<| a tags=string,c++,arrays |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `toupper` returns\
    \ a `char`, not a `long`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the online compiler at http://www.tutorialspoint.com/compile_c_online.php\n\
    <|/ c |>\n<| c |>\nIt doesn't work. `toupper` returns a `char`, not a `long`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the online compiler at http://www.tutorialspoint.com/compile_c_online.php\n\
    <|/ c |>\n<| c |>\nIt doesn't work. `toupper` returns a `char`, not a `long`.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n   \
    \     sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThanks for your answer. I'm still a beginner in C++, so I didn't\
    \ know about `toupper`. I'll definitely look into it. However, I still don't understand\
    \ why my code didn't work. Could you please explain why my code didn't work?\n\
    <|/ c |>\n<| c |>\nThe reason your code didn't work is that `toupper` returns\
    \ a `char` not a `long`. So when you do `sum += toupper(c);` you are adding `char`s\
    \ to `long`s. So the result will be wrong.\n<|/ c |>\n<| c |>\nI see. So how would\
    \ I fix it? I tried casting `toupper` to `long`, but that didn't work.\n<|/ c\
    \ |>\n<| c |>\nI added a solution to my answer.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\nThe reason your code didn't work is that toupper returns a char not a long.\
    \ So when you do sum += toupper(c); you are adding chars to longs. So the result\
    \ will be wrong.\nTo fix this you can cast the result of toupper to long:\n<code>\n\
    sum += toupper(c) - 'A' + 1;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I'm still a beginner in C++, so I didn't know about `toupper`.\
    \ I'll definitely look into it. However, I still don't understand why my code\
    \ didn't work. Could you please explain why my code didn't work?\n<|/ c |>\n<|\
    \ c |>\nThe reason your code didn't work is that `toupper` returns a `char` not\
    \ a `long`. So when you do `sum += toupper(c);` you are adding `char`s to `long`s.\
    \ So the result will be wrong.\n<|/ c |>\n<| c |>\nI added a solution to my answer.\n\
    <|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks\
    \ for your answer! But I still don't understand why my code doesn't work. Could\
    \ you please explain it to me?\n<|/ c |>\n<| c |>\nI added a comment to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! But I still don't understand why my\
    \ code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI\
    \ added a comment to my answer.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries except std.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any libraries except std.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries except\
    \ std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String s) {\n\
    \    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isDigit(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any libraries except std.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries except\
    \ std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I didn't know\
    \ that there was a toUpper function in std.\n<|/ c |>\n<| a tags=c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the string contains only digits. `digitSum(\"\
    123\")` returns `123L` instead of `0L`.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my answer was more of a general solution that would work for any string. I'll\
    \ update my answer to include a more specific solution.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the string contains only digits. `digitSum(\"123\")` returns\
    \ `123L` instead of `0L`.\n<|/ c |>\n<| c |>\nI updated my answer to include a\
    \ more specific solution.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, however it would be better to use a `std::map<char,\
    \ int>` instead of an `int` for each letter, since you only need to count the\
    \ letters once.\n<|/ c |>\n<| c |>\nI agree, however I wanted to keep it simple\
    \ and only use basic c++ features. I guess I should add that to the answer.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses only basic c++ features. I hope\
    \ you find it useful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n            sum\
    \ += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm new to c++ and I haven't learned about\
    \ vectors yet. I'm just trying to understand how I can use them in this situation.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nI added a solution without vectors. I hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to c++ and I haven't\
    \ learned about vectors yet. I'm just trying to understand how I can use them\
    \ in this situation. Thanks again.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ vectors. I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks\
    \ for your answer. I was thinking about this but was wondering if there was a\
    \ more efficient way. Thanks again!\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again! I appreciate it.\n\
    <|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nI didn't downvote, but this doesn't answer the question. The OP wants to\
    \ know why his code doesn't work, not how to fix it.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, my answer was more to show how it could be done in C++. Of course\
    \ the OP can always use other languages such as Python or C#.\n<|/ c |>\n<| c\
    \ |>\nI didn't downvote, but I suspect it's because you didn't explain what was\
    \ wrong with his code. He didn't say \"why doesn't it work\", he said \"why doesn't\
    \ it work?\", and you didn't explain why.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to show how it could be done in C++. Of course the OP can always\
    \ use other languages such as Python or C#.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what was wrong with his code.\
    \ He didn't say \"why doesn't it work\", he said \"why doesn't it work?\", and\
    \ you didn't explain why.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"aAaaaXa\".\n<|/ c |>\n<| c |>\n: I added a solution that works with that\
    \ case. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThe `toupper` function\
    \ returns a `char` not a `long`\n<|/ c |>\n<| c |>\n: Thanks for pointing that\
    \ out. I've fixed the code.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out.\
    \ I've fixed the code.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char |>\n<| c |>\nThis doesn't work. `toUpper`\
    \ returns a `char`, not a `char32_t`.\n<|/ c |>\n<| c |>\nIt does work. `toUpper`\
    \ returns a `char32_t`, not a `char`.\n<|/ c |>\n<| c |>\nIt does work. `toUpper`\
    \ returns a `char32_t`, not a `char`.\n<|/ c |>\n<| c |>\nIt does work. `toUpper`\
    \ returns a `char32_t`, not a `char`.\n<|/ c |>\n<| c |>\nIt does work. `toUpper`\
    \ returns a `char32_t`, not a `char`.\n<|/ c |>\n<| a tags=string,c++,char |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,char\
    \ |>\n<| c |>\nThanks so much! I appreciate your help.\n<|/ c |>\n<| c |>\nNo\
    \ problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you for your answer. I am not allowed to use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThanks\
    \ for your answer! I understand your code, but I still don't understand why it\
    \ works. I understand that `isUpper` checks if the character is uppercase, but\
    \ why does `toUpper` convert it to uppercase? And why does `toUpper` return `int`?\
    \ I thought that `toUpper` would return `char`.\n<|/ c |>\n<| c |>\n`toUpper`\
    \ converts a `char` to an `int` because `char` is an integral type. `toUpper`\
    \ returns an `int` because `int` is an integral type. `char` is an integral type\
    \ because `char` is an integral type. `char` is an integral type because `char`\
    \ is an integral type. `char` is an integral type because `char` is an integral\
    \ type. `char` is an integral type because `char` is an integral type. `char`\
    \ is an integral type because `char` is an integral type. `char` is an integral\
    \ type because `char` is an integral type. `char` is an integral type because\
    \ `char` is an integral type. `char` is an integral type because `char` is an\
    \ integral type. `char` is an integral type because `char` is an integral type.\
    \ `char` is an integral type because `char` is an integral type. `char` is an\
    \ integral type because `char` is an integral type. `char` is an integral type\
    \ because `char` is an integral type. `char` is an integral type because `char`\
    \ is an integral type. `char` is an integral type because `char` is an integral\
    \ type. `char` is an integral type because `char` is an integral type. `char`\
    \ is an integral type because `char` is an integral type. `char` is an integral\
    \ type because `char` is an integral type. `char` is an integral type because\
    \ `char` is an integral type. `char` is an integral type because `char` is an\
    \ integral type. `char` is an integral type because `char` is an integral type.\
    \ `char` is an integral type because `char` is an integral type. `char` is an\
    \ integral type because `char` is an integral type. `char` is an integral type\
    \ because `char` is an integral type. `char` is an integral type because `char`\
    \ is an integral type. `char` is an integral type because `char", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n\
    \            sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I tried it and it works fine. However\
    \ I still don't understand why my code doesn't work. Can you please explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nThe `foreach` loop is iterating over\
    \ each character in the string, and `isUpper` checks if the character is uppercase.\
    \ `toUpper` converts the character to a capital letter. `isUpper` returns `true`\
    \ if the character is uppercase, and `false` otherwise. `toUpper` returns a capital\
    \ letter, which is then added to the sum. `foreach` iterates over each character\
    \ in the string, and `isUpper` checks if the character is uppercase. `toUpper`\
    \ converts the character to a capital letter. `isUpper` returns `true` if the\
    \ character is uppercase, and `false` otherwise. `toUpper` returns a capital letter,\
    \ which is then added to the sum.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Now I understand why my code doesn't work. However I still don't understand\
    \ why my code doesn't work. Can you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nThe `foreach` loop is iterating over each character in the\
    \ string, and `isUpper` checks if the character is uppercase. `toUpper` converts\
    \ the character to a capital letter. `isUpper` returns `true` if the character\
    \ is uppercase, and `false` otherwise. `toUpper` returns a capital letter, which\
    \ is then added to the sum. `foreach` iterates over each character in the string,\
    \ and `isUpper` checks if the character is uppercase. `toUpper` converts the character\
    \ to a capital letter. `isUpper` returns `true` if the character is uppercase,\
    \ and `false` otherwise. `toUpper` returns a capital letter, which is then added\
    \ to the sum.\n<|/ c |>\n<| c |>\nThanks for your explanation. Now I understand\
    \ why my code doesn't work. However I still don't understand why my code doesn't\
    \ work. Can you please explain why my code doesn't work?\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n \
    \   for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,algorithm dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,algorithm |>\n<| a\
    \ tags=string,java,algorithm |>\n<code>\npublic long digitSum(String s) {\n  \
    \  long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,java,algorithm\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,java,algorithm |>\n<| a |>\n<code>\npublic long\
    \ digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 tags=string,java,algorithm |>\n<| a tags=string,java,algorithm\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThanks for the answer! I appreciate it!\n<|/ c |>\n<| c |>\nI didn't\
    \ know that `isUpper` existed! Thanks for teaching me something new!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        sum += (s[i]-'A');\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you very much for your answer! I understand\
    \ your solution and it works perfectly. However I cannot use any loops or conditionals.\
    \ I only need to use recursion.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a recursive solution. Hope it helps.\n<|/ c |>\n<| c |>\nThank you very much\
    \ for your answer! I understand your solution and it works perfectly. However\
    \ I cannot use any loops or conditionals. I only need to use recursion.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a recursive solution. Hope it helps.\n\
    <|/ c |>\n<| a tags=recursion,string,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n`isUpper`\
    \ isn't a standard function in C++.\n<|/ c |>\n<| c |>\n: Yes, it is. But it's\
    \ not a standard function in C++.\n<|/ c |>\n<| c |>\n: I didn't know that. Thanks.\n\
    <|/ c |>\n<| c |>\n: I didn't know that either. Thanks.\n<|/ c |>\n<| c |>\n:\
    \ I didn't know that either. Thanks.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI didn't downvote you, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Also, you didn't explain how your solution works.\
    \ Finally, you didn't explain how it compares to the other solutions.\n<|/ c |>\n\
    <| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(Character.isUpperCase(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<|\
    \ a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<| a dscore=0 |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<| a tags=java,string\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length()",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i]\
    \ == 'A' || s[i] == 'a')\n        {\n            sum += (s[i]-'A');\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer! I appreciate it! But I still don't understand why my code doesn't work.\
    \ Could you please explain it to me?\n<|/ c |>\n<| c |>\nThe reason your code\
    \ doesn't work is because you were trying to convert a char to an int and that\
    \ doesn't work. `'A'` is an int and `'a'` is a char. `'A'-'a'` will give you the\
    \ difference between the two chars. You were trying to do `'A'-'a'` which would\
    \ give you the difference between the ASCII codes of the two chars. But ASCII\
    \ codes are between `'0'` and `'9'` so you were getting a negative number which\
    \ would cause your code to fail.\n<|/ c |>\n<| c |>\nI understand now! Thank you\
    \ so much!\n<|/ c |>\n<| a tags=c++,char,int,string |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++)\n    {\n        if(s[i] == 'A' || s[i] == 'a') \n\
    \        {\n            sum += (long)'A';\n        }\n        else if(s[i] ==\
    \ 'B' || s[i] == 'b')\n        {\n            sum += (long)'B';\n        }\n \
    \       else if(s[i] == 'C' || s[i] == 'c')\n        {\n            sum += (long)'C';\n\
    \        }\n        else if(s[i] == 'D' || s[i] == 'd')\n        {\n         \
    \   sum += (long)'D';\n        }\n        else if(s[i] == 'E' || s[i] == 'e')\n\
    \        {\n            sum += (long)'E';\n        }\n        else if(s[i] ==\
    \ 'F' || s[i] == 'f')\n        {\n            sum += (long)'F';\n        }\n \
    \       else if(s[i] == 'G' || s[i] == 'g')\n        {\n            sum += (long)'G';\n\
    \        }\n        else if(s[i] == 'H' || s[i] == 'h')\n        {\n         \
    \   sum += (long)'H';\n        }\n        else if(s[i] == 'I' || s[i] == 'i')\n\
    \        {\n            sum += (long)'I';\n        }\n        else if(s[i] ==\
    \ 'J' || s[i] == 'j')\n        {\n            sum += (long)'J';\n        }\n \
    \       else if(s[i] == 'K' || s[i] == 'k')\n        {\n            sum += (long)'K';\n\
    \        }\n        else if(s[i] == 'L' || s[i] == 'l')\n        {\n         \
    \   sum += (long)'L';\n        }\n        else if(s[i] == 'M' || s[i] == 'm')\n\
    \        {\n            sum += (long)'M';\n        }\n        else if(s[i] ==\
    \ 'N' || s[i] == 'n')\n        {\n            sum += (long)'N';\n        }\n \
    \       else if(s[i] == 'O' || s[i] == 'o')\n        {\n            sum += (long)'O';\n\
    \        }\n        else if(s[i] == 'P' || s[i] == 'p')\n        {\n         \
    \   sum += (long)'P';\n        }\n        else if(s[i] == 'Q' || s[i] == 'q')\n\
    \        {\n            sum += (long)'Q';\n        }\n        else if(s[i] ==\
    \ 'R' || s[i] == 'r')\n        {\n            sum += (long)'R';\n        }\n \
    \       else if(s[i] == 'S' || s[i] == 's')\n        {\n            sum += (long)'S';\n\
    \        }\n        else if(s[i] == 'T' || s[i] == 't')\n        {\n         \
    \   sum += (long)'T';\n        }\n        else if(s[i] == 'U' || s[i] == 'u')\n\
    \        {\n            sum += (long)'U';\n        }\n        else if(s[i] ==\
    \ 'V' || s[i] == 'v')\n        {\n            sum += (long)'V';", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner in C++, so I didn't know\
    \ about this function. I will try to understand your code and try to implement\
    \ it in my code. Thanks again!\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer, hope it helps.\n<|/ c |>\n<| c |>\nThanks again! I understand it now!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nI like\
    \ the way you did it, but I believe that `std::accumulate` would be a better fit\
    \ for this task.\n<|/ c |>\n<| c |>\nI agree that `std::accumulate` would be a\
    \ better fit for this task, but I wanted to show a more \"manual\" way of doing\
    \ it (as opposed to using `std::accumulate` which I believe is more elegant).\n\
    <|/ c |>\n<| c |>\nI agree with you that `std::accumulate` would be a better fit\
    \ for this task, but I wanted to show a more \"manual\" way of doing it (as opposed\
    \ to using `std::accumulate` which I believe is more elegant).\n<|/ c |>\n<| c\
    \ |>\nI agree with you that `std::accumulate` would be a better fit for this task,\
    \ but I wanted to show a more \"manual\" way of doing it (as opposed to using\
    \ `std::accumulate` which I believe is more elegant).\n<|/ c |>\n<| c |>\nI agree\
    \ with you that `std::accumulate` would be a better fit for this task, but I wanted\
    \ to show a more \"manual\" way of doing it (as opposed to using `std::accumulate`\
    \ which I believe is more elegant).\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c >= 'A'\
    \ && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThe `char` type is not guaranteed to have contiguous\
    \ codes. For example, `'A'` is guaranteed to have the value `65`, but `'Z'` is\
    \ guaranteed to have the value `90`.\n<|/ c |>\n<| c |>\nYes, that's why I said\
    \ \"upper characters only\". I assumed that he wanted to count the upper case\
    \ letters.\n<|/ c |>\n<| c |>\nYes, I meant upper case letters. Sorry for the\
    \ confusion.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ doesn't use any loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any loops.\n<|/ c |>\n<| a |>\n<code>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but\
    \ I believe it can be simplified even more. `foreach` can be replaced with `foreach(char&\
    \ c, s)`\n<|/ c |>\n<| c |>\nYes, it can. Thanks for the suggestion.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n        else\n\
    \            sum += c;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L`, but should\
    \ be `163L`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nThanks for the answer. I'm a beginner in C++ and I didn't know that there\
    \ was a isUpper function. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nNo\
    \ problem. C++ is very different from other languages. I recommend you read a\
    \ book on C++ and start learning from there. Good luck!\n<|/ c |>\n<| c |>\nI\
    \ did read a book about C++, but I didn't know that there was a isUpper function.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI did read a book about C++,\
    \ but I didn't know that there was a isUpper function. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < s.length(); i++)\n    {\n        if(s[i] == 'A' || s[i] == 'a')\n \
    \       {\n            sum += (long)'A';\n        }\n        if(s[i] == 'B' ||\
    \ s[i] == 'b')\n        {\n            sum += (long)'B';\n        }\n        if(s[i]\
    \ == 'C' || s[i] == 'c')\n        {\n            sum += (long)'C';\n        }\n\
    \        if(s[i] == 'D' || s[i] == 'd')\n        {\n            sum += (long)'D';\n\
    \        }\n        if(s[i] == 'E' || s[i] == 'e')\n        {\n            sum\
    \ += (long)'E';\n        }\n        if(s[i] == 'F' || s[i] == 'f')\n        {\n\
    \            sum += (long)'F';\n        }\n        if(s[i] == 'G' || s[i] == 'g')\n\
    \        {\n            sum += (long)'G';\n        }\n        if(s[i] == 'H' ||\
    \ s[i] == 'h')\n        {\n            sum += (long)'H';\n        }\n        if(s[i]\
    \ == 'I' || s[i] == 'i')\n        {\n            sum += (long)'I';\n        }\n\
    \        if(s[i] == 'J' || s[i] == 'j')\n        {\n            sum += (long)'J';\n\
    \        }\n        if(s[i] == 'K' || s[i] == 'k')\n        {\n            sum\
    \ += (long)'K';\n        }\n        if(s[i] == 'L' || s[i] == 'l')\n        {\n\
    \            sum += (long)'L';\n        }\n        if(s[i] == 'M' || s[i] == 'm')\n\
    \        {\n            sum += (long)'M';\n        }\n        if(s[i] == 'N' ||\
    \ s[i] == 'n')\n        {\n            sum += (long)'N';\n        }\n        if(s[i]\
    \ == 'O' || s[i] == 'o')\n        {\n            sum += (long)'O';\n        }\n\
    \        if(s[i] == 'P' || s[i] == 'p')\n        {\n            sum += (long)'P';\n\
    \        }\n        if(s[i] == 'Q' || s[i] == 'q')\n        {\n            sum\
    \ += (long)'Q';\n        }\n        if(s[i] == 'R' || s[i] == 'r')\n        {\n\
    \            sum += (long)'R';\n        }\n        if(s[i] == 'S' || s[i] == 's')\n\
    \        {\n            sum += (long)'S';\n        }\n        if(s[i] == 'T' ||\
    \ s[i] == 't')\n        {\n            sum += (long)'T';\n        }\n        if(s[i]\
    \ == 'U' || s[i] == 'u')\n        {\n            sum += (long)'U';\n        }\n\
    \        if(s[i] == 'V' || s[i] == 'v')\n        {\n            sum += (long)'V';\n\
    \        }\n        if(s[i] == 'W' || s[i] == 'w')\n        {\n            sum\
    \ += (long)'W';\n", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nI believe this solution\
    \ would fail for input like \"aAaaaXa\" which should return 153L but returns 131L\n\
    <|/ c |>\n<| c |>\n: Yes, you're right. I've fixed the solution. Thanks!\n<|/\
    \ c |>\n<| c |>\nI believe this solution would fail for input like \"aAaaaXa\"\
    \ which should return 153L but returns 131L\n<|/ c |>\n<| c |>\n: Yes, you're\
    \ right. I've fixed the solution. Thanks!\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks for your answer. I\
    \ was trying to avoid using loops because I thought that would be the most efficient\
    \ way. I'm still new to C++ so I appreciate your help.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without loops. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ help. I appreciate it.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    Thank you very much! I appreciate your help!\n<|/ c |>\n<| c |>\nI added a solution\
    \ using STL algorithms, hope it helps.\n<|/ c |>\n<| c |>\nThank you very much!\
    \ I appreciate your help!\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't know\
    \ that `foreach` was a thing. Thanks!\n<|/ c |>\n<| c |>\n`foreach` is an alias\
    \ for `for`, so it's basically a for loop with an extra `foreach` inside.\n<|/\
    \ c |>\n<| c |>\n: I thought it was a thing in C++, too, but I guess it's not.\n\
    <|/ c |>\n<| c |>\n: It's a thing in C#, though.\n<|/ c |>\n<| c |>\n: It's a\
    \ thing in C++, too. `foreach` is an alias for `for`, so it's basically a for\
    \ loop with an extra `foreach` inside.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ that uses only standard library functions:\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    This doesn't work. `toUpper` returns a `char`, not a `char32_t`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        sum\
    \ += s.codePointAt(i);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nThank you so much for this! I really appreciate it!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThank you so much for this.\
    \ I really appreciate it. I will try this out and let you know how it goes.\n\
    <|/ c |>\n<| c |>\nI tried to implement this into my code but I am getting an\
    \ error that says \"error: expected primary-expression before '[' token\" for\
    \ the line \"for(char c : s)\" in the digitSum function. Any ideas why this is?\n\
    <|/ c |>\n<| c |>\nI added the code I used to test the code I posted above. Can\
    \ you please let me know what I am doing wrong?\n<|/ c |>\n<| c |>\nI added the\
    \ code I used to test the code I posted above. Can you please let me know what\
    \ I am doing wrong?\n<|/ c |>\n<| c |>\nI added the code I used to test the code\
    \ I posted above. Can you please let me know what I am doing wrong?\n<|/ c |>\n\
    <| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s) {\n      \
    \  sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThe question was about how to do this in O(n) time, not how to do it\
    \ with O(n) space.\n<|/ c |>\n<| c |>\n: I misread the question. My bad.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses O(n) space.\n<|/ c |>\n<| c |>\n\
    : I added a solution that uses O(n) space.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that uses O(n) space.\n<|/ c |>\n<| a tags=string,algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<|\
    \ c |>\nYou're welcome! If this answer solved your problem, please consider accepting\
    \ it by clicking the check-mark. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't know about `isUpper`,\
    \ thanks for pointing it out. I've updated my answer accordingly.\n<|/ c |>\n\
    <| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to do this\
    \ in Haskell, not C#.\n<|/ c |>\n<| c |>\nI see your point. My answer was more\
    \ of a \"how do I do it in Haskell\" than a \"how do I do this in C#\" so I thought\
    \ it would be helpful to show both ways. I guess I should have made it more clear.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport Data.Char\nimport Data.List", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n   \
    \         sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum = 0;\n \
    \   for(int i = 0; i < s.length(); i++)\n    {\n        if(s.at(i) >= 'A' && s.at(i)\
    \ <= 'Z')\n        {\n            sum += s.at(i) - 'A' + 10;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nI believe this solution will\
    \ fail for input like \"aAaaaXa\" because it will return 153 instead of 154.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI believe this solution will fail for input like\
    \ \"aAaaaXa\" because it will return 153 instead of 154.\n<|/ c |>\n<| c |>\n\
    I believe this solution will fail for input like \"aAaaaXa\" because it will return\
    \ 153 instead of 154.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nThanks for your answer. Your solution works but it is very slow for large\
    \ strings. I guess it is because of the `toupper` function call. Do you know a\
    \ faster way?\n<|/ c |>\n<| c |>\nI added a faster solution that doesn't use toupper.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works but it is very\
    \ slow for large strings. I guess it is because of the `toupper` function call.\
    \ Do you know a faster way?\n<|/ c |>\n<| c |>\nI added a faster solution that\
    \ doesn't use toupper.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but it is very slow for large strings. I guess it is because of the `toupper`\
    \ function call. Do you know a faster way?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n\
    \        if(c >= 'A' && c <= 'Z')\n        {\n            sum += (c - 'A' + 1);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis is not the correct solution. `digitSum(\"aAaaaXa\")` returns\
    \ `153L` instead of `131L`.\n<|/ c |>\n<| c |>\nI didn't see that requirement\
    \ in the question. I've updated my answer to include it.\n<|/ c |>\n<| c |>\n\
    The question was about `digitSum(\"aAaaaXa\")` returning `131L` instead of `153L`.\
    \ Your solution returns `153L` instead of `131L`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to include a solution that returns `131L` instead\
    \ of `153L`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ include a solution that returns `131L` instead of `153L`.\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nI believe that `isUpper`\
    \ checks for both upper and lower case, so `isUpper('a')` will return `true` but\
    \ `isUpper('A')` will return `false`.\n<|/ c |>\n<| c |>\nYes, that's true. I\
    \ just wanted to show that `isUpper` checks for both upper and lower case. I'll\
    \ edit my answer to include that.\n<|/ c |>\n<| c |>\nI believe that `isUpper`\
    \ checks for both upper and lower case, so `isUpper('a')` will return `true` but\
    \ `isUpper('A')` will return `false`.\n<|/ c |>\n<| c |>\nYes, that's true. I\
    \ just wanted to show that `isUpper` checks for both upper and lower case. I'll\
    \ edit my answer to include that.\n<|/ c |>\n<| c |>\nI believe that `isUpper`\
    \ checks for both upper and lower case, so `isUpper('a')` will return `true` but\
    \ `isUpper('A')` will return `false`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum = 0;\n \
    \   foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the\
    \ help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.Scanner;", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n\
    \            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\n<code>\nimport java.util.Scanner;", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \      {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,arrays |>\n<| a tags=string,c++,arrays |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like your solution, however I believe that `toupper` should be called on `c`\
    \ instead of `s[i]`\n<|/ c |>\n<| c |>\nYes, you are right. I edited my answer.\
    \ Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlong digitSum(string s) {\n   \
    \ long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThank you for the answer! I understand that my code was\
    \ very inefficient and that I was trying to solve the problem in the wrong way.\
    \ I'm still a beginner at programming and I appreciate your help.\n<|/ c |>\n\
    <| c |>\nYou're welcome! I hope you find it helpful. By the way, I edited my answer\
    \ to include a solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nThank\
    \ you for the edit! I understand that my code was very inefficient and that I\
    \ was trying to solve the problem in the wrong way. I'm still a beginner at programming\
    \ and I appreciate your help.\n<|/ c |>\n<| a tags=c++,string,ascii |>\nThe code\
    \ below will do what you want:\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c |>\n`toUpper` isn't a function\
    \ in C++.\n<|/ c |>\n<| c |>\n`toUpper` is in `<cctype>`, not `<cstdlib>`.\n<|/\
    \ c |>\n<| c |>\n: Yes, I know. My point was that `toUpper` isn't a function in\
    \ C++.\n<|/ c |>\n<| c |>\n: Yes, I know. My point was that `toUpper` isn't a\
    \ function in C++.\n<|/ c |>\n<| c |>\n: Yes, I know. My point was that `toUpper`\
    \ isn't a function in C++.\n<|/ c |>\n<| a tags=string,c++,char,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n \
    \   for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n  \
    \      if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n \
    \       }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii dscore=0\
    \ |>\n<| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n\
    \    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c\
    \ = s.charAt(i);\n        if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (isUpper(c))\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (isUpper(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (isUpper(c))\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n<| a dscore=0 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (isUpper(c)) {\n         \
    \   sum += Character.getNumericValue(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string,ascii |>\n<| a dscore=0 |>\n<code>\n", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe `foreach` loop is unnecessary. `s.toCharArray().filter(c\
    \ => c >= 'A' && c <= 'Z').sum()` will do the same thing.\n<|/ c |>\n<| c |>\n\
    Yes, but it's more readable and easier to understand for someone who doesn't know\
    \ what `foreach` does.\n<|/ c |>\n<| c |>\nI agree, but I find it easier to understand\
    \ and more idiomatic than `foreach`.\n<|/ c |>\n<| c |>\nI agree, but I find it\
    \ easier to understand and more idiomatic than `foreach`.\n<|/ c |>\n<| c |>\n\
    I agree, but I find it easier to understand and more idiomatic than `foreach`.\n\
    <|/ c |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for(char c : s.toCharArray()) {\n        if(c >= 'A' && c <= 'Z') {\n   \
    \         sum += (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long\
    \ digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(c >= 'A' && c <= 'Z') {\n\
    \            sum += (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string,ascii |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if(c >= 'A' && c <= 'Z') {\n            sum +=\
    \ (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(c >= 'A' && c <= 'Z') {\n            sum += (c - 'A' + 1);", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but I already have this solution and\
    \ it works fine. My question is about how to do it with std.algorithm.\n<|/ c\
    \ |>\n<| c |>\nI see, I misunderstood the question. I'll edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution with std.algorithm.\n\
    <|/ c |>\n<| c |>\nThanks for your efforts, but I already have this solution and\
    \ it works fine. My question is about how to do it with std.algorithm.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution with std.algorithm.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport std.algorithm;\nimport std.conv;\n\
    import std.stdio;\nimport std.string;", "{\n    long sum = 0;\n    for(int i =\
    \ 0; i < s.length(); i++)\n    {\n        sum += toupper(s[i]);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `toupper` returns\
    \ a `char`, not a `long`.\n<|/ c |>\n<| c |>\nThis doesn't work either. `toupper`\
    \ returns a `char`, not a `long`.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ `toupper` returns a `char`, not a `long`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ either. `toupper` returns a `char`, not a `long`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. `toupper` returns a `char`, not a `long`.\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not the right solution. `digitSum(\"aAaaaXa\")` returns\
    \ `153L` instead of `131L`.\n<|/ c |>\n<| c |>\nThe OP said \"Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    \    ASCII codes.\" So the correct answer is 131.\n<|/ c |>\n<| c |>\nYes, but\
    \ `digitSum(\"aAaaaXa\")` returns `153L` instead of `131L`.\n<|/ c |>\n<| c |>\n\
    I missed that part. Thanks for pointing that out.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThis doesn't work. `toUpper` doesn't work on `char`s.\n<|/ c |>\n\
    <| c |>\nIt does work. `toUpper` converts a `char` to an `unsigned char` which\
    \ is implicitly convertible to `int`.\n<|/ c |>\n<| c |>\n: It does work. `toUpper`\
    \ converts a `char` to an `unsigned char` which is implicitly convertible to `int`.\n\
    <|/ c |>\n<| c |>\n: It does work. `toUpper` converts a `char` to an `unsigned\
    \ char` which is implicitly convertible to `int`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. `toUpper` converts a `char` to an `unsigned char` which is implicitly\
    \ convertible to `int`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    This doesn't answer the question. He wants to know if there is a way to do this\
    \ without using loops.\n<|/ c |>\n<| c |>\n: I agree with you. My answer was more\
    \ of a \"how do I do this\" than a \"how do I do this without loops\" answer.\
    \ I'll leave it up for others to decide if they want to use loops or not.\n<|/\
    \ c |>\n<| c |>\n: I added a solution without loops.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution without loops.\n<|/ c |>\n<| c |>\n: I added a solution without loops.\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char\
    \ c = s.charAt(i);\n        if(Character.isDigit(c)) {\n            sum += c -\
    \ '0';\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,int,char\
    \ |>\n<| a tags=string,c#,int,char |>\n<code>\npublic int digitSum(String s) {\n\
    \    int sum = 0;\n    foreach(char c in s) {\n        if(Character.isDigit(c))\
    \ {\n            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,c#,int,char |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    foreach(char c in s) {\n        if(Character.isDigit(c))\
    \ {\n            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,c#,int,char |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    foreach(char c in s) {\n        if(Character.isDigit(c))\
    \ {\n            sum += c - '0';\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=string,c#,int,char |>\n<code>\n\
    public int digitSum(String s) {\n    int sum = 0;\n    foreach(char c in s) {\n\
    \        if(Character.isDigit(c)) {\n            sum += c - '0';\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,int,char\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    foreach(char\
    \ c in s) {\n        if(Character.isDigit(c)) {\n            sum += c - '0';\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,int,char\
    \ |>\n<code>\npublic int digitSum(String ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it on `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. I just added the test cases. I tested\
    \ it on `aAaaaXa` and it returned `153L`.\n<|/ c |>\n<| c |>\nI tested it on `\"\
    aAaaaXa\"` and it returned `153L`.\n<|/ c |>\n<| c |>\nI tested it on `\"aAaaaXa\"\
    ` and it returned `153L`.\n<|/ c |>\n<| c |>\nI tested it on `\"aAaaaXa\"` and\
    \ it returned `153L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == 'A'\
    \ || s[i] == 'a') \n        {\n            sum += (long)'A';\n        }\n    \
    \    else if(s[i] == 'B' || s[i] == 'b')\n        {\n            sum += (long)'B';\n\
    \        }\n        else if(s[i] == 'C' || s[i] == 'c')\n        {\n         \
    \   sum += (long)'C';\n        }\n        else if(s[i] == 'D' || s[i] == 'd')\n\
    \        {\n            sum += (long)'D';\n        }\n        else if(s[i] ==\
    \ 'E' || s[i] == 'e')\n        {\n            sum += (long)'E';\n        }\n \
    \       else if(s[i] == 'F' || s[i] == 'f')\n        {\n            sum += (long)'F';\n\
    \        }\n        else if(s[i] == 'G' || s[i] == 'g')\n        {\n         \
    \   sum += (long)'G';\n        }\n        else if(s[i] == 'H' || s[i] == 'h')\n\
    \        {\n            sum += (long)'H';\n        }\n        else if(s[i] ==\
    \ 'I' || s[i] == 'i')\n        {\n            sum += (long)'I';\n        }\n \
    \       else if(s[i] == 'J' || s[i] == 'j')\n        {\n            sum += (long)'J';\n\
    \        }\n        else if(s[i] == 'K' || s[i] == 'k')\n        {\n         \
    \   sum += (long)'K';\n        }\n        else if(s[i] == 'L' || s[i] == 'l')\n\
    \        {\n            sum += (long)'L';\n        }\n        else if(s[i] ==\
    \ 'M' || s[i] == 'm')\n        {\n            sum += (long)'M';\n        }\n \
    \       else if(s[i] == 'N' || s[i] == 'n')\n        {\n            sum += (long)'N';\n\
    \        }\n        else if(s[i] == 'O' || s[i] == 'o')\n        {\n         \
    \   sum += (long)'O';\n        }\n        else if(s[i] == 'P' || s[i] == 'p')\n\
    \        {\n            sum += (long)'P';\n        }\n        else if(s[i] ==\
    \ 'Q' || s[i] == 'q')\n        {\n            sum += (long)'Q';\n        }\n \
    \       else if(s[i] == 'R' || s[i] == 'r')\n        {\n            sum += (long)'R';\n\
    \        }\n        else if(s[i] == 'S' || s[i] == 's')\n        {\n         \
    \   sum += (long)'S';\n        }\n        else if(s[i] == 'T' || s[i] == 't')\n\
    \        {\n            sum += (long)'T';\n        }\n        else if(s[i] ==\
    \ 'U' || s[i] == 'u')\n        {\n            sum += (long)'U';\n        }\n \
    \       else if(s[i] == 'V' || s[i] == 'v')\n        {\n            sum += (long)'V';",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c |>\nI appreciate your efforts,\
    \ but I believe that my question was more about how to convert a char to a string.\
    \ Your answer doesn't really help with that question.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that converts a char to a string.\n<|/ c |>\n<| c |>\nThank\
    \ you for your efforts, but I believe that my question was more about how to convert\
    \ a char to a string. Your answer doesn't really help with that question.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that converts a char to a string.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n\
    \            sum += (s[i]-'A');\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nThis solution doesn't work if you\
    \ have a string like \"aAaaaXa\".\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ a string like \"aAaaaXa\" because you forgot to subtract 'A' from the sum.\n\
    <|/ c |>\n<| c |>\nI added the subtraction.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks\
    \ so much for your help! I appreciate it!\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += std.math.charDigit(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c++,char,int\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| c |>\n`'A'` isn't guaranteed to be contiguous.\n\
    <|/ c |>\n<| c |>\n: Yes, but that doesn't matter in this case. `'A'` is guaranteed\
    \ to be contiguous, because it's guaranteed to be in the range `'A'..'Z'`.\n<|/\
    \ c |>\n<| c |>\n: I agree, but I thought it would be good to point it out in\
    \ case someone else reads this and thinks they need to worry about it.\n<|/ c\
    \ |>\n<| c |>\n: I added a note about that to my answer.\n<|/ c |>\n<| c |>\n\
    : I added a note about that to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nI like your solution, however it only works with ASCII characters.\
    \ I guess it would be better to use a `char` array and loop through it instead\
    \ of using `string`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I just wanted to give\
    \ the OP an idea of how it could be done.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with any character set.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with any character set.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum\
    \ += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you for the answer! I understand that my code was very inefficient\
    \ and that I was missing some important concepts. However, I still don't understand\
    \ why my code didn't work. Could you please explain to me why my code didn't work?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation! I understand now why my code didn't work.\
    \ Your explanation helped me a lot.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int digitSum(String s) {\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        sum += s.charAt(i) - '0';\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\n`isUpper` isn't a function in C++.\n<|/ c |>\n<| c |>\n: It is\
    \ a function in C and C++.\n<|/ c |>\n<| c |>\n: Yes, it is. But it isn't a function\
    \ in C++.\n<|/ c |>\n<| c |>\n: Yes, it is. But it isn't a function in C++.\n\
    <|/ c |>\n<| c |>\n: Yes, it is. But it isn't a function in C++.\n<|/ c |>\n<|\
    \ a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThank\
    \ you so much! I appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThe `isUpper` function should be `isUpper(c)` instead of `isUpper(toUpper(c))`\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| a tags=c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer,\
    \ but a comment.\n<|/ c |>\n<| c |>\nI believe it to be an answer, since it solves\
    \ the problem and provides an explanation as to why it works.\n<|/ c |>\n<| c\
    \ |>\nThis is not an answer, but a comment.\n<|/ c |>\n<| c |>\nI believe it to\
    \ be an answer, since it solves the problem and provides an explanation as to\
    \ why it works.\n<|/ c |>\n<| c |>\nI believe it to be an answer, since it solves\
    \ the problem and provides an explanation as to why it works.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\npublic int digitSum(String str) {\n    int sum = 0;\n \
    \   for (int i = 0; i < str.length(); i++) {\n        sum += Character.getNumericValue(str.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,c# |>\n<| c |>\nThis\
    \ is not an answer, but a comment.\n<|/ c |>\n<| c |>\nI believe it to be an answer,\
    \ since it solves the problem and provides an explanation as to why it works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String str) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < str.length(); i++) {\n        sum += Character.getNumericValue(str.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,c# |>\n<| c |>\nThis\
    \ is not an answer, but a comment.\n<|/ c |>\n<| c |>\nI believe it to be an answer,\
    \ since it solves the problem and provides an explanation as to why it works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int digitSum(String str) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < str.length(); i++) {\n        sum += Character.getNumericValue(str.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,c# |>\n<| c |>\nThis\
    \ is not an answer, but a comment.\n<|/ c |>\n<| a tags=c++,string,c# |>\n<code>\n\
    public ", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n   \
    \ {\n        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n        {\n       \
    \     sum += s.charAt(i) - 'A' + 1;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your code is working fine but i want\
    \ to know why my code is not working and why my code is not giving correct result?\n\
    <|/ c |>\n<| c |>\nI added the explanation to the answer\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your code is working fine but i want to know why my code\
    \ is not working and why my code is not giving correct result?\n<|/ c |>\n<| c\
    \ |>\nI added the explanation to the answer\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code is working fine but i want to know why my code is not working\
    \ and why my code is not giving correct result?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii\
    \ |>\n<| a tags=string,c++,char,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=c++,string,algorithm |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using any libraries. I guess it would be a good\
    \ exercise to try to implement it yourself without using any libraries.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't use any libraries.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any libraries except std.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ std.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ libraries except std.\n<|/ c |>\n<| c |>\nI added a solution without std.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (Character.isUpperCase(c)) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm\
    \ |>\n<| a tags=string,c++,java,algorithm |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n          \
    \  sum += Character.getNumericValue(c);\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n          \
    \  sum += Character.getNumericValue(c);\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=string,c++,java,algorithm |>\n<| a dscore=0 |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c))\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm |>\n<| a |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c))\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,arrays |>\n<| c |>\nThanks for the help! I appreciate it!\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThanks for your\
    \ answer! I didn't know that `toupper` existed. I will try this out and see if\
    \ it works.\n<|/ c |>\n<| c |>\nI tested this and it works. I didn't know that\
    \ `toupper` existed either. Thanks again!\n<|/ c |>\n<| c |>\nI tested this and\
    \ it works. I didn't know that `toupper` existed either. Thanks again!\n<|/ c\
    \ |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much\
    \ for the help. I really appreciate it. I will try this out and see how it goes.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI added a solution that uses `std.algorithm`\
    \ instead of `std.array`.\n<|/ c |>\n<| c |>\nThanks so much for the help. I really\
    \ appreciate it. I will try this out and see how it goes. Thanks again!\n<|/ c\
    \ |>\n<| c |>\nI added a solution that uses `std.algorithm` instead of `std.array`.\n\
    <|/ c |>\n<| a tags=string,c++,arrays,char |>\nI wrote a solution that uses std.algorithm\
    \ instead of std.array:\n<code>\n#include <algorithm>\n#include <iostream>\n#include\
    \ <string>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis code doesn't compile.\
    \ `isUpper` isn't a function, and `toUpper` isn't a function.\n<|/ c |>\n<| c\
    \ |>\n: I fixed the code. Thanks for pointing out the errors. I tested the code\
    \ and it compiles now.\n<|/ c |>\n<| c |>\nI fixed the code again. Thanks for\
    \ pointing out the errors. I tested the code and it compiles now.\n<|/ c |>\n\
    <| c |>\n: I fixed the code again. Thanks for pointing out the errors. I tested\
    \ the code and it compiles now.\n<|/ c |>\n<| c |>\n: I fixed the code again.\
    \ Thanks for pointing out the errors. I tested the code and it compiles now.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      sum += std.math.charBitOr(std.math.charBitAnd(c, std.math.charBitXor('a','A')),\
    \ std.math.charBitXor('0','9'));\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nfunction digitSum(s: string): int {\n    let sum\
    \ = 0;\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i)\
    \ - '0'.charCodeAt(0);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,sum,haskell,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.Char", "{\n    long sum = 0;\n   \
    \ foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    The `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| c |>\n`isUpper` was\
    \ introduced in C++11. [Here](http://en.cppreference.com/w/cpp/string/byte/isupper)\
    \ is the link to the documentation.\n<|/ c |>\n<| c |>\nI see, thanks. I didn't\
    \ know that. I've been using C++ for years and never knew that.\n<|/ c |>\n<|\
    \ c |>\n`isUpper` was introduced in C++11. [Here](http://en.cppreference.com/w/cpp/string/byte/isupper)\
    \ is the link to the documentation.\n<|/ c |>\n<| c |>\nI see, thanks. I didn't\
    \ know that. I've been using C++ for years and never knew that.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    You're welcome. By the way, I added a more efficient solution that doesn't require\
    \ any loops.\n<|/ c |>\n<| c |>\nI really appreciate it! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nI really appreciate it! I really appreciate it!\n<|/ c |>\n\
    <| c |>\nI really appreciate it! I really appreciate it!\n<|/ c |>\n<| a tags=string,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isUpper(s[i]))\n\
    \            sum += toUpper(s[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=c++,string |>\n<| c |>\n`toUpper` isn't a function in C++.\n<|/ c |>\n\
    <| c |>\n`toUpper` isn't a function in C++.\n<|/ c |>\n<| c |>\n`toUpper` isn't\
    \ a function in C++.\n<|/ c |>\n<| c |>\n`toUpper` isn't a function in C++.\n\
    <|/ c |>\n<| c |>\n`toUpper` isn't a function in C++.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
