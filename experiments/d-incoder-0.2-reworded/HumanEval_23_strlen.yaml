name: HumanEval_23_strlen
language: d
prompt: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\"\
  )\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
  \ \n"
tests: "unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
  \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
  ) == 9L);\n}\nvoid main(){}"
completions: ["{\n\tlong len = 0;\n\t\n\tfor (auto c : string) \n\t{\n\t\tlen++;\n\
    \t}\n\t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\twhile (string[len] != '\\\
    0')\n\t{\n\t\tlen++;\n\t}\n\t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\t\
    for (auto c : string) \n\t{\n\t\tlen++;\n\t}\n\t\n\treturn len;\n}", "{\n    long\
    \ len = 0;\n    \n    for(auto c : string) \n    {\n        len++;\n    }\n  \
    \  \n    return len;\n}", "{\n    long length = 0;\n    \n    foreach(char c,\
    \ string) {\n        length++;\n    }\n    \n    return length;\n}", "{\n\tlong\
    \ len = 0;\n\t\n\tfor(string::iterator i = string.begin(); i != string.end();\
    \ ++i)\n\t{\n\t\t++len;\n\t}\n\t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\
    \tfor(var i = 0; i < string.length; ++i)\n\t\tlen += string.charCodeAt(i);\n\t\
    \n\treturn len;\n}", "{\n    long len = 0;\n    \n    for(string::iterator i =\
    \ string.begin(); i != string.end(); ++i)\n    {\n        len++;\n    }\n    \n\
    \    return len;\n}", "{\n\tlong len = 0;\n\t\n\twhile (string[len] != '\\0')\n\
    \t\tlen++;\n\t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\tfor( int i = 0;\
    \ i < string.length; ++i )\n\t{\n\t\tif( string[i] != 0 )\n\t\t\t++len;\n\t}\n\
    \t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tlen++;\n\t}\n\t\n\treturn len;\n}", "{\n    long len = 0;\n    \n\
    \    foreach(char c, string) {\n        len++;\n    }\n    \n    return len;\n\
    }", "{\n\tlong len = 0;\n\t\n\tforeach(char c, string)\n\t{\n\t\tlen++;\n\t}\n\
    \t\n\treturn len;\n}", "{\n\tlong len = 0;\n\t\n\twhile (string[len] != '\\0')\
    \ \n\t{\n\t\tlen++;\n\t}\n\t\n\treturn len;\n}", "{\n    long len = 0;\n    \n\
    \    for(auto c : string) \n    {\n        len++;\n    }\n    \n    return len;\n\
    }", "{\n\tlong len = 0;\n\t\n\tfor (auto c : string) \n\t{\n\t\tlen++;\n\t}\n\t\
    \n\treturn len;\n}", "{\n    long len = 0;\n    \n    for(auto c : string) \n\
    \    {\n        len++;\n    }\n    \n    return len;\n}", "{\n    long len = 0;\n\
    \    \n    for(string::iterator it = string.begin(); it != string.end(); ++it)\n\
    \    {\n        len++;\n    }\n    \n    return len;\n}", "{\n    long result\
    \ = 0;\n    \n    foreach(char c, string) {\n        result += 1;\n    }\n   \
    \ \n    return result;\n}", "{\n    long len = 0;\n    \n    for(auto c : string)\n\
    \    {\n        len++;\n    }\n    \n    return len;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
