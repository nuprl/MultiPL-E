name: HumanEval_14_all_prefixes
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes\
  \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
  \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n"
tests: "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
  \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
  , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
  WWW\"]);\n}\nvoid main(){}"
completions: ["{\n    int len = string.length();\n    \n    string[] result = new\
    \ string[len];\n    \n    for (int i = 0; i < len; ++i)\n    {\n        result[i]\
    \ = string.substr(0, i);\n    }\n    \n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; ++i)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\n\
    string[] all_substrings(string string, int startIndex, int endIndex) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i++] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] ", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) ", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, bool include_end) \n{\n    string[] result = new string",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i++] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substring", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length, step);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int step, int end) \n{\n    string", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n}",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while (i <\
    \ string.Length)\n    {\n        result[i++] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int ", "{\n    string[] result = new string[string.length];\n   \
    \ int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) ",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i++;\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i+1, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(i+1, string.length-i);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(start, i-start);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < ", "{\n    string[] result = new string[string.Length];\n    for(int i = 0;\
    \ i < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n}",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}", "{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n}",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int ", "{\n    string[] result = new string[string.Length];\n    for(int i =\
    \ 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i++] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(start);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n        result[i] = string.Substring(start);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.Substring(start);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \    for(int ", "{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(start,i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string[", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n        result[i]\
    \ = string.Substring(i);\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length) \n{\n    string[] result = new string[string.length];\n  \
    \  for(int i = start; i < end; i += step)\n        result[i] = string.Substring(i,length);",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.substr(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length, step);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int step, int end) \n{\n    string[] result = new string[string.Length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] result = new string[",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int end2) \n{\n    string[] ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to lon", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 1)\n    [\"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 0, 1)\n \
    \   [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n  \
    \      result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\",\
    \ \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substring", "{\n    int len = string.length();\n\
    \    string[] result = new string[len];\n    for(int i = 0; i < len; ++i)\n  \
    \      result[i] = string.substr(0, i);\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(0, i);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(0, i);\n    }\n    return result;\n}\n/*\n Return array of\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(i + 1,\
    \ string.length - i);\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, ", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string prefix) ", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(start, i -\
    \ start);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to ", "{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int len) \n{\n    string[] result = ", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n  \
    \  return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end, int step", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    int i = 0;\n   \
    \ for(; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n  \
    \  return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] result = new string[", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i + 1, string.length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_", "{\n    string[] result = new string[string.length];\n    for(int i =\
    \ 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"ac\", \"ca\", \"cb\", \"cba\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"ac\", \"ca\", \"cb\", \"cba\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"ac\", \"ca\", \"cb\"\
    , \"cba\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    int len = string.length();\n   \
    \ string[] result = new string[len];\n    for(int i = 0; i < len; i++)\n    {\n\
    \        result[i] = string.substr(0, i);\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = startIndex; i < endIndex;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int startIndex,\
    \ int endIndex, int step, int ", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    int len = string.length();\n   \
    \ string[] result = new string[len];\n    for(int i = 0; i < len; ++i)\n     \
    \   result[i] = string.substr(0, i);\n    return result;\n}", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ length);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(start, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ 0; i < string.length; ++i)\n        result[i] = string.Substring(start, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end, int step) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n{\n    string[] result = ", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(start, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n", "{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, ", "{\n    string[] result = new string[string.length];\n    for(int i =\
    \ 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest ", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new string", "{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to ", "{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(0, i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substring", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, length);\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start", "{\n\
    \    int len = string.length();\n    string[] result = new string[len];\n    for(int\
    \ i = 0; i < len; ++i)\n        result[i] = string.substr(0, i);\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while (i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3, 1)\n    [\"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3, 0, 1)\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int end2) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(start, length);\n    return result;",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = startIndex; i < endIndex;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int startIndex,\
    \ int endIndex, int step, int ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, ",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n", "{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    int i = 0;\n   \
    \ while(i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(0, i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substring", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n", "{\n    string[] result = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] ", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.Substring(0, i);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length) \n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3)\n    [\"abc\", \"ab\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 1)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n", "{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i++;\n    }\n   \
    \ return result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i++;\n    }\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n", "{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i - start, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        result[i] = string.Substring(i - start, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, ", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, length);\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length",
  "{\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = start; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] ", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return array of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n    {\n  \
    \      result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] ", "{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i++;\n    }\n   \
    \ return result;\n}", "{\n    string[] result = new string[string.Length];\n \
    \   for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, length);\n        i += 1;\n  \
    \  }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3)\n    [\"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3, 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2, 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2, 2)\n    [\"", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n", "{\n    string[] result = new string[string.Length];\n    for(int i = 0;\
    \ i < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")", "{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i);\n    return result;\n}\n/*\n\
    \ Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(start, i);\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(start, i);\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(start,\
    \ i);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc", "{\n    string[] result = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, i);\n    return result;\n}", "{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\", 2, 1)\n    [\"a\", \"ab\"\
    , \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 1)\n    [\"a\", \"ab\", \"abc\", \"", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(start,i);\n   \
    \ }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,length,end);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length",
  "{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"a\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"a\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"a\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> ", "{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n   \
    \ }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ length);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(start, length);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int end, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = ", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n  \
    \      result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\",\
    \ \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substring", "{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    int i = 0;\n   \
    \ while(i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 3)\n    [\"abc\"]", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] ", "{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(i, string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, length, step);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(0,\
    \ i);\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, ", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int ",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return array of all\
    \ substrings from ", "{\n    string[] result = new string[string.length];\n  \
    \  for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n    {\n  \
    \      result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\",\
    \ \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> ", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string", "{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_", "{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }", "{\n    string[] result = new string[string.length];\n    int i = 0;\n   \
    \ for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, ", "{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}", "{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i - start, i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i - start,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring", "{\n    int\
    \ len = string.length();\n    string[] result = new string[len];\n    for(int\
    \ i = 0; i < len; ++i)\n        result[i] = string.substr(0, i);\n    return result;\n\
    }\n/*\n Return array of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    int len = string.length();\n    string[]\
    \ result = new string[len];\n    for(int i = len - 1; i >= 0; --i)\n        result[i]\
    \ = string.substr(i, len);\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"abc\", \"a\", \"ab\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    int len = string.length();\n    string[] result = new string[len];\n\
    \    for(int i = 0; i < len; ++i)\n        result[i] = string.substr(i, i + 1);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"abc\", \"a\", \"\
    ab\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    int len = string.length();\n    string[] result = new string[len];\n\
    \    for(int i = 0; i < len; ++i)\n        result[i] = string.substr(start, i\
    \ + 1);\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"abc\"\
    , \"a\", \"ab\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    int len = string.length();\n    string[]\
    \ result = new string[len];\n    for(int i = 0; i < len; ++i)\n        result[i]\
    \ = string.substr(start, end + 1);\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"abc\", \"a\", \"ab\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    int len\
    \ = string.length();\n    string[] result = new string[len];\n    for(int i =\
    \ 0; i < len; ++i)\n        result[i] = string.substr(start, end + step, step);\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"abc\", \"a\", \"\
    ab\", \"b\", \"bc\", \"c\"]\n", "{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(0, i);\n    }\n    return result;\n}\n/*\n Return array of all\
    \ suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"a\", \"ab\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return array of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"a\", \"ab\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n", "{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n}",
  "{\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}", "{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return array of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return array of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new string[string.length];",
  "{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return array of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) ", "{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(0, i);\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
