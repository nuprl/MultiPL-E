language: d
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new\
    \ string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"\
    cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] array = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    string sub = \"a\";\nvar result = array.Where(x => x.Contains(sub)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] array\
    \ = new string[]{\"abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\n\
    var result = array.Where(x => x.Contains(sub)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] array = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring sub = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(sub)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays\
    \ |>\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4fzzkgbz.d(15): Error: found `in` when expecting `;`\n/tmp/tmp4fzzkgbz.d(22):
    Error: declaration expected, not `<`\n/tmp/tmp4fzzkgbz.d(29): Error: declaration
    expected, not `<`\n/tmp/tmp4fzzkgbz.d(36): Error: declaration expected, not `<`\n/tmp/tmp4fzzkgbz.d(43):
    Error: declaration expected, not `<`\n/tmp/tmp4fzzkgbz.d(50): Error: declaration
    expected, not `<`\n/tmp/tmp4fzzkgbz.d(57): Error: declaration expected, not `<`\n/tmp/tmp4fzzkgbz.d(64):
    Error: declaration expected, not `<`\n/tmp/tmp4fzzkgbz.d(71): Error: declaration
    expected, not `<`\n/tmp/tmp4fzzkgbz.d(79): Error: declaration expected, not `assert`\n/tmp/tmp4fzzkgbz.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmp4fzzkgbz.d(81): Error: declaration
    expected, not `assert`\n/tmp/tmp4fzzkgbz.d(82): Error: declaration expected, not
    `assert`\n/tmp/tmp4fzzkgbz.d(83): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4fzzkgbz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"ba\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw87o27fp.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw87o27fp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17646347)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to filter\
    \ an array by substring. He doesn't want to use LINQ. He wants to write his own\
    \ filter function. He doesn't want to use LINQ. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter function. He wants to write\
    \ his own filter function. He wants to write his own filter function. He wants\
    \ to write his own filter function. He wants to write his own filter function.\
    \ He wants to write his own filter function. He wants to write his own filter\
    \ function. He wants to write his own filter function. He wants to write his own\
    \ filter function. He wants to write his own filter \nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfzj1answ.d(21): Error: declaration expected, not `<`\n/tmp/tmpfzj1answ.d(26):
    Error: declaration expected, not `for`\n/tmp/tmpfzj1answ.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmpfzj1answ.d(26): Error: declaration expected, not `<`\n/tmp/tmpfzj1answ.d(26):
    Error: declaration expected, not `++`\n/tmp/tmpfzj1answ.d(29): Error: unrecognized
    declaration\n/tmp/tmpfzj1answ.d(40): Error: unterminated character constant\n/tmp/tmpfzj1answ.d(40):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfzj1answ.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpli5q84dz.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli5q84dz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=java,string,arrays |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    String[] result\
    \ = new String[strings.length];\n    for (int i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays |>\n<| a tags=java,string,arrays |>\n\
    <code>\npublic static String[] filterBySubstring(String[] strings, String substring)\
    \ {\n    String[] result = new String[strings.length];\n    for (int i = 0; i\
    \ < strings.length; i++) {\n        if (strings[i].contains(substring)) {\n  \
    \          result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a tags=java,string,arrays\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0vcy7159.d(21): Error: declaration expected, not `<`\n/tmp/tmp0vcy7159.d(27):
    Error: declaration expected, not `for`\n/tmp/tmp0vcy7159.d(27): Error: no identifier
    for declarator `i`\n/tmp/tmp0vcy7159.d(27): Error: declaration expected, not `<`\n/tmp/tmp0vcy7159.d(27):
    Error: no identifier for declarator `i`\n/tmp/tmp0vcy7159.d(27): Error: declaration
    expected, not `++`\n/tmp/tmp0vcy7159.d(30): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vcy7159.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I've tried this but I get an error\
    \ saying \"The method contains(String) in the type String is not applicable for\
    \ the arguments (int)\"\n<|/ c |>\n<| c |>\nI edited my answer to include a version\
    \ that uses `contains` instead of `indexOf`. Hope this helps.\n<|/ c |>\n<| c\
    \ |>\nThanks again for your help. I still get an error saying \"The method contains(String)\
    \ in the type String is not applicable for the arguments (int)\"\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a version that uses `contains` instead of\
    \ `indexOf`. Hope this helps.\n<|/ c |>\n<| c |>\nThanks again for your help.\
    \ I still get an error saying \"The method contains(String) in the type String\
    \ is not applicable for the arguments (int)\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvtjn6wsd.d(21): Error: declaration expected, not `<`\n/tmp/tmpvtjn6wsd.d(24):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvtjn6wsd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nu_qes2.d(21): Error: declaration expected, not `<`\n/tmp/tmp2nu_qes2.d(26):
    Error: declaration expected, not `for`\n/tmp/tmp2nu_qes2.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmp2nu_qes2.d(26): Error: declaration expected, not `<`\n/tmp/tmp2nu_qes2.d(26):
    Error: declaration expected, not `++`\n/tmp/tmp2nu_qes2.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nu_qes2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,substring |>\n<| c |>\nThis doesn't answer\
    \ the question of how to find all substrings within a string. Your code only finds\
    \ substrings within a single string.\n<|/ c |>\n<| c |>\nI thought the question\
    \ was how to find all substrings within a string. My code does exactly that. Did\
    \ you read the question?\n<|/ c |>\n<| c |>\nYes, I read the question, but your\
    \ answer doesn't answer the question. Your code only finds substrings within a\
    \ single string. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array.\n<|/ c |>\n<| c |>\nI added\
    \ a code example to my answer. Does it answer your question?\n<|/ c |>\n<| c |>\n\
    No, your code doesn't find substrings within a string array. Your code doesn't\
    \ find substrings within a string array. Your code doesn't find substrings within\
    \ a string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your code doesn't find substrings within a\
    \ string array. Your code doesn't find substrings within a string array. Your\
    \ code doesn't find substrings within a string array. Your code doesn't find substrings\
    \ within a string array. Your code doesn't find substrings within a string array.\
    \ Your code doesn't find substrings within a string array. Your code doesn't find\
    \ substrings within a string array. Your \nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bmii6mj.d(21): Error: declaration expected, not `<`\n/tmp/tmp1bmii6mj.d(24):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(30): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(30): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(30):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36):
    Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated
    character constant\n/tmp/tmp1bmii6mj.d(36): Error: unterminated character constant\n/tmp/tmp1bmii6mj.d(36):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1bmii6mj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"abc\" in the\
    \ array and you search for \"a\" it will return \"abc\" instead of \"bacd\"\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nstring[] filter_by_substring(\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplt9ot3sx.d(21): Error: declaration expected, not `<`\n/tmp/tmplt9ot3sx.d(24):
    Error: unterminated character constant\n/tmp/tmplt9ot3sx.d(27): Error: unterminated
    character constant\n/tmp/tmplt9ot3sx.d(34): Error: declaration expected, not `for`\n/tmp/tmplt9ot3sx.d(34):
    Error: no identifier for declarator `i`\n/tmp/tmplt9ot3sx.d(34): Error: declaration
    expected, not `<`\n/tmp/tmplt9ot3sx.d(34): Error: declaration expected, not `++`\n/tmp/tmplt9ot3sx.d(38):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplt9ot3sx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;\nimport java.util.Scanner;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiml0erpm.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiml0erpm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_k1sz_w.d(15): Error: found `in` when expecting `;`\n/tmp/tmp4_k1sz_w.d(22):
    Error: declaration expected, not `<`\n/tmp/tmp4_k1sz_w.d(29): Error: declaration
    expected, not `<`\n/tmp/tmp4_k1sz_w.d(39): Error: declaration expected, not `<`\n/tmp/tmp4_k1sz_w.d(46):
    Error: declaration expected, not `<`\n/tmp/tmp4_k1sz_w.d(53): Error: declaration
    expected, not `<`\n/tmp/tmp4_k1sz_w.d(60): Error: declaration expected, not `<`\n/tmp/tmp4_k1sz_w.d(67):
    Error: declaration expected, not `<`\n/tmp/tmp4_k1sz_w.d(79): Error: unterminated
    string constant starting at /tmp/tmp4_k1sz_w.d(79)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4_k1sz_w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuejseujs.d(21): Error: declaration expected, not `<`\n/tmp/tmpuejseujs.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmpuejseujs.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuejseujs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.IO;\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5xdbxv3.d(21): Error: declaration expected, not `<`\n/tmp/tmpe5xdbxv3.d(26):
    Error: semicolon expected, not `.`\n/tmp/tmpe5xdbxv3.d(26): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpe5xdbxv3.d(27): Error: semicolon
    expected, not `.`\n/tmp/tmpe5xdbxv3.d(27): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpe5xdbxv3.d(28): Error: semicolon expected, not `.`\n/tmp/tmpe5xdbxv3.d(28):
    Error: no identifier for declarator `.Text`\n/tmp/tmpe5xdbxv3.d(29): Error: semicolon
    expected, not `.`\n/tmp/tmpe5xdbxv3.d(29): Error: no identifier for declarator
    `.IO`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5xdbxv3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays,string |>\n<code>\npublic\
    \ static String[] filterBySubstring(String[] strings, String substring) {\n  \
    \  String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,arrays,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=java,arrays,string |>\n<| a dscore=0 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkemcxp9w.d(21): Error: declaration expected, not `<`\n/tmp/tmpkemcxp9w.d(27):
    Error: declaration expected, not `for`\n/tmp/tmpkemcxp9w.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkemcxp9w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpssm5xzgs.d(21): Error: declaration expected, not `<`\n/tmp/tmpssm5xzgs.d(26):
    Error: declaration expected, not `for`\n/tmp/tmpssm5xzgs.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmpssm5xzgs.d(26): Error: declaration expected, not `<`\n/tmp/tmpssm5xzgs.d(26):
    Error: declaration expected, not `++`\n/tmp/tmpssm5xzgs.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssm5xzgs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer\
    \ the question of how to do this in C#.\n<|/ c |>\n<| c |>\nI added a C# solution\n\
    <|/ c |>\n<| c |>\nI added a C# solution\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=5 tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer\
    \ the question of how to do this in C#.\n<|/ c |>\n<| c |>\nI added a C# solution\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=5 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprvzbpno8.d(23): Error: declaration expected, not `<`\n/tmp/tmprvzbpno8.d(26):
    Error: unterminated character constant\n/tmp/tmprvzbpno8.d(39): Error: declaration
    expected, not `<`\n/tmp/tmprvzbpno8.d(42): Error: unterminated character constant\n/tmp/tmprvzbpno8.d(52):
    Error: declaration expected, not `<`\n/tmp/tmprvzbpno8.d(59): Error: declaration
    expected, not `<`\n/tmp/tmprvzbpno8.d(66): Error: declaration expected, not `<`\n/tmp/tmprvzbpno8.d(73):
    Error: declaration expected, not `<`\n/tmp/tmprvzbpno8.d(85): Error: unterminated
    string constant starting at /tmp/tmprvzbpno8.d(85)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprvzbpno8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThanks for your answer. I tried it but\
    \ I get this error \"The type or namespace name 'std' could not be found (are\
    \ you missing a using directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\n\
    I added the using directive for std.math but now I get this error \"The type or\
    \ namespace name 'std' could not be found (are you missing a using directive or\
    \ an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using directive for\
    \ std.math but now I get this error \"The type or namespace name 'std' could not\
    \ be found (are you missing a using directive or an assembly reference?)\"\n<|/\
    \ c |>\n<| c |>\nI added the using directive for std.math but now I get this error\
    \ \"The type or namespace name 'std' could not be found (are you missing a using\
    \ directive or an assembly reference?)\"\n<|/ c |>\n<| c |>\nI added the using\
    \ directive for std.math but now I get this error \"The type or namespace name\
    \ 'std' could not be found (are you missing a using directive or an assembly reference?)\"\
    \n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjx_b6xk0.d(21): Error: declaration expected, not `<`\n/tmp/tmpjx_b6xk0.d(41):
    Error: semicolon expected, not `.`\n/tmp/tmpjx_b6xk0.d(41): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpjx_b6xk0.d(42): Error: semicolon
    expected, not `.`\n/tmp/tmpjx_b6xk0.d(42): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpjx_b6xk0.d(43): Error: semicolon expected, not `.`\n/tmp/tmpjx_b6xk0.d(43):
    Error: no identifier for declarator `.Text`\n/tmp/tmpjx_b6xk0.d(44): Error: semicolon
    expected, not `.`\n/tmp/tmpjx_b6xk0.d(44): Error: no identifier for declarator
    `.Text.RegularExpressions`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjx_b6xk0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps2rz3ucv.d(15): Error: found `in` when expecting `;`\n/tmp/tmps2rz3ucv.d(22):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps2rz3ucv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0gwmb78.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0gwmb78.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ myArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\" };\nstring myString = \"a\";\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv361uang.d(15): Error: found `in` when expecting `;`\n/tmp/tmpv361uang.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv361uang.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltxh5png.d(21): Error: declaration expected, not `<`\n/tmp/tmpltxh5png.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpltxh5png.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpltxh5png.d(45): Error: declaration expected, not `<`\n/tmp/tmpltxh5png.d(52):
    Error: declaration expected, not `<`\n/tmp/tmpltxh5png.d(62): Error: declaration
    expected, not `<`\n/tmp/tmpltxh5png.d(69): Error: declaration expected, not `<`\n/tmp/tmpltxh5png.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpltxh5png.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpltxh5png.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpltxh5png.d(78): Error: declaration expected, not `assert`\n/tmp/tmpltxh5png.d(79):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltxh5png.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6jit30sb.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6jit30sb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring` returns\
    \ an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer. Maybe you forgot to copy the code from my answer?\n\
    <|/ c |>\n<| c |>\nI copied your code verbatim and ran it on my machine. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I added a test case to my answer. Maybe you forgot to copy the code from\
    \ my answer?\n<|/ c |>\n<| c |>\nI copied your code verbatim and ran it on my\
    \ machine. `filter_by_substring` returns an empty array for me.\n<|/ c |>\n<|\
    \ a tags=string,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n   \
    \ assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplkuyh_bo.d(21): Error: declaration expected, not `<`\n/tmp/tmplkuyh_bo.d(24):
    Error: unterminated character constant\n/tmp/tmplkuyh_bo.d(42): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmplkuyh_bo.d(42): Error: no identifier
    for declarator `System`\n/tmp/tmplkuyh_bo.d(42): Error: declaration expected,
    not `out`\n/tmp/tmplkuyh_bo.d(43): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplkuyh_bo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7azxj8b_.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7azxj8b_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a d\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfndj01_n.d(21): Error: declaration expected, not `<`\n/tmp/tmpfndj01_n.d(26):
    Error: declaration expected, not `for`\n/tmp/tmpfndj01_n.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmpfndj01_n.d(26): Error: declaration expected, not `<`\n/tmp/tmpfndj01_n.d(26):
    Error: declaration expected, not `++`\n/tmp/tmpfndj01_n.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfndj01_n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ?\n<|/ c |>\n<| c |>\nI added a non-LINQ\
    \ solution\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result =\
    \ new string[strings.Length];\nfor (int i = 0; i < strings.Length; i++)\n{\n \
    \   if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\nfor (int\
    \ i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"))\n  \
    \      result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<|\
    \ a tags=string,arrays,c# |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = new string[strings.Length];\n\nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp05uq6v_a.d(21): Error: declaration expected, not `<`\n/tmp/tmp05uq6v_a.d(33):
    Error: declaration expected, not `for`\n/tmp/tmp05uq6v_a.d(33): Error: no identifier
    for declarator `i`\n/tmp/tmp05uq6v_a.d(33): Error: declaration expected, not `<`\n/tmp/tmp05uq6v_a.d(33):
    Error: no identifier for declarator `i`\n/tmp/tmp05uq6v_a.d(33): Error: declaration
    expected, not `++`\n/tmp/tmp05uq6v_a.d(37): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05uq6v_a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. I am not allowed to use any library\
    \ functions. I only have to use loops, if statements, arrays, string manipulation,\
    \ etc.\n<|/ c |>\n<| c |>\nI added a solution without using any library functions.\
    \ I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp1eybz8o.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1eybz8o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm new to C#, so I didn't\
    \ know about `Contains`. However, it seems that it only works for strings. Is\
    \ there a way to make it work for arrays of strings?\n<|/ c |>\n<| c |>\nYes,\
    \ you can make it work for arrays of strings. I updated my answer to show how.\n\
    <|/ c |>\n<| c |>\nThanks for the update. I'm still getting an error though: `The\
    \ best overloaded method match for 'string.Contains(string)' has some invalid\
    \ arguments`\n<|/ c |>\n<| c |>\nI updated my answer to show how to make it work\
    \ for arrays of strings.\n<|/ c |>\n<| c |>\nThanks for the update. I'm still\
    \ getting an error though: `The best overloaded method match for 'string.Contains(string)'\
    \ has some invalid arguments`\n<|/ c |>\n<| a dscore=1 |>\nYou can use the LINQ\
    \ method Contains:\n<code>\nstring[] myStrings = new string[] { \"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar result\
    \ = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,arrays |>\n<code>\nstring[] myStrings = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\"\
    ;\nvar result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myStrings = new string[] { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring myString = \"a\";\nvar\
    \ result = myStrings.Where(s => s.Contains(myString));\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] myString\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ltl1r4l.d(21): Error: declaration expected, not `<`\n/tmp/tmp7ltl1r4l.d(24):
    Error: unterminated character constant\n/tmp/tmp7ltl1r4l.d(24): Error: unterminated
    character constant\n/tmp/tmp7ltl1r4l.d(30): Error: unterminated character constant\n/tmp/tmp7ltl1r4l.d(36):
    Error: unterminated character constant\n/tmp/tmp7ltl1r4l.d(44): Error: declaration
    expected, not `<`\n/tmp/tmp7ltl1r4l.d(51): Error: declaration expected, not `<`\n/tmp/tmp7ltl1r4l.d(58):
    Error: declaration expected, not `<`\n/tmp/tmp7ltl1r4l.d(65): Error: declaration
    expected, not `<`\n/tmp/tmp7ltl1r4l.d(74): Error: declaration expected, not `assert`\n/tmp/tmp7ltl1r4l.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmp7ltl1r4l.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmp7ltl1r4l.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmp7ltl1r4l.d(78): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7ltl1r4l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpro59w2kb.d(15): Error: found `in` when expecting `;`\n/tmp/tmpro59w2kb.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpro59w2kb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbmq46jno.d(15): Error: found `s` when expecting `;` following
    statement\n/tmp/tmpbmq46jno.d(15): Error: expression expected, not `:`\n/tmp/tmpbmq46jno.d(15):
    Error: found `strings` when expecting `;` following `for` condition\n/tmp/tmpbmq46jno.d(22):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbmq46jno.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| c |>\nI like this solution. Very\
    \ concise. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbobo7e_9.d(15): Error: found `in` when expecting `;`\n/tmp/tmpbobo7e_9.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbobo7e_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray\
    \ = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar filteredArray = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nvar filteredArray = strArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpytbw5sko.d(21): Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpytbw5sko.d(42): Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpytbw5sko.d(63): Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(70):
    Error: declaration expected, not `<`\n/tmp/tmpytbw5sko.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmpytbw5sko.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmpytbw5sko.d(79): Error: declaration expected, not `assert`\n/tmp/tmpytbw5sko.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmpytbw5sko.d(81): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpytbw5sko.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb2r1u2ev.d(21): Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpb2r1u2ev.d(42): Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpb2r1u2ev.d(63): Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(70):
    Error: declaration expected, not `<`\n/tmp/tmpb2r1u2ev.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmpb2r1u2ev.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmpb2r1u2ev.d(79): Error: declaration expected, not `assert`\n/tmp/tmpb2r1u2ev.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmpb2r1u2ev.d(81): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb2r1u2ev.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tag\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp66mwcmyl.d(21): Error: declaration expected, not `<`\n/tmp/tmp66mwcmyl.d(26):
    Error: declaration expected, not `for`\n/tmp/tmp66mwcmyl.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmp66mwcmyl.d(26): Error: declaration expected, not `<`\n/tmp/tmp66mwcmyl.d(26):
    Error: declaration expected, not `++`\n/tmp/tmp66mwcmyl.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66mwcmyl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp147d4wib.d(17): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp147d4wib.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr0qvvhkb.d(87): Error: expression expected, not `unittest`\n/tmp/tmpr0qvvhkb.d(88):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr0qvvhkb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile. `string[]\
    \ result = new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.Add(s);\n    }\n    return\
    \ result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpod5g22eu.d(21): Error: declaration expected, not `<`\n/tmp/tmpod5g22eu.d(24):
    Error: unterminated character constant\n/tmp/tmpod5g22eu.d(34): Error: declaration
    expected, not `foreach`\n/tmp/tmpod5g22eu.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpod5g22eu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to filter out all strings that don't contain \"a\".\n<|/ c |>\n<| c |>\n\
    : I misunderstood the question. I've updated my answer.\n<|/ c |>\n<| c |>\nThis\
    \ answer doesn't work. Try it with `filter_by_substring(\"ab\", \"a\")`.\n<|/\
    \ c |>\n<| c |>\n: I misunderstood the question. I've updated my answer.\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to filter out all strings that don't contain\
    \ \"a\".\n<|/ c |>\n<| c |>\n: I misunderstood the question. I've updated my answer.\n\
    <|/ c |>\n<| c |>\nThis answer doesn't work. Try it with `filter_by_substring(\"\
    ab\", \"a\")`.\n<|/ c |>\n<| c |>\n: I misunderstood the question. I've updated\
    \ my answer.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain \"a\".\n<|/ c |>\n<| c |>\nThis answer doesn't work. Try\
    \ it with `filter_by_substring(\"ab\", \"a\")`.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answ\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjh627x03.d(21): Error: declaration expected, not `<`\n/tmp/tmpjh627x03.d(24):
    Error: unterminated character constant\n/tmp/tmpjh627x03.d(24): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(27): Error: unterminated character constant\n/tmp/tmpjh627x03.d(30):
    Error: unterminated character constant\n/tmp/tmpjh627x03.d(33): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(39): Error: declaration expected, not `<`\n/tmp/tmpjh627x03.d(42):
    Error: unterminated character constant\n/tmp/tmpjh627x03.d(42): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(45): Error: unterminated character constant\n/tmp/tmpjh627x03.d(48):
    Error: unterminated character constant\n/tmp/tmpjh627x03.d(51): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(57): Error: declaration expected, not `<`\n/tmp/tmpjh627x03.d(60):
    Error: unterminated character constant\n/tmp/tmpjh627x03.d(60): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(63): Error: unterminated character constant\n/tmp/tmpjh627x03.d(69):
    Error: declaration expected, not `<`\n/tmp/tmpjh627x03.d(72): Error: unterminated
    character constant\n/tmp/tmpjh627x03.d(77): Error: declaration expected, not `assert`\n/tmp/tmpjh627x03.d(78):
    Error: declaration expected, not `assert`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjh627x03.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3jjaqxy.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3jjaqxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k3isndn.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k3isndn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThis doesn't work for me. I'm getting\
    \ an error: Error 1 The type or namespace name 'string' could not be found (are\
    \ you missing a using directive or an assembly reference?) \nError 2 The type\
    \ or namespace name 'string' could not be found (are you missing a using directive\
    \ or an assembly reference?)\n<|/ c |>\n<| c |>\nI added the using statements\
    \ I needed. Thanks!\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray\
    \ = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] filteredArray = stringArray.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl8ra_r3i.d(21): Error: declaration expected, not `<`\n/tmp/tmpl8ra_r3i.d(24):
    Error: unterminated character constant\n/tmp/tmpl8ra_r3i.d(24): Error: unterminated
    character constant\n/tmp/tmpl8ra_r3i.d(24): Error: unterminated character constant\n/tmp/tmpl8ra_r3i.d(24):
    Error: unterminated character constant\n/tmp/tmpl8ra_r3i.d(25): Error: unterminated
    character constant\n/tmp/tmpl8ra_r3i.d(25): Error: unterminated character constant\n/tmp/tmpl8ra_r3i.d(34):
    Error: declaration expected, not `<`\n/tmp/tmpl8ra_r3i.d(40): Error: declaration
    expected, not `<`\n/tmp/tmpl8ra_r3i.d(46): Error: declaration expected, not `<`\n/tmp/tmpl8ra_r3i.d(52):
    Error: declaration expected, not `<`\n/tmp/tmpl8ra_r3i.d(58): Error: declaration
    expected, not `<`\n/tmp/tmpl8ra_r3i.d(64): Error: declaration expected, not `<`\n/tmp/tmpl8ra_r3i.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpl8ra_r3i.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpl8ra_r3i.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpl8ra_r3i.d(73): Error: declaration expected, not `assert`\n/tmp/tmpl8ra_r3i.d(74):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8ra_r3i.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c#,search |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search\
    \ = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 tags=string,arrays,c#,search\
    \ |>\n<| a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\"\
    , \"array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 tags=string,arrays,c#,search |>\n<| a dscore=1 |>\n<code>\n\
    string[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=string,arrays,c#,search |>\n<| a tags=string,arrays,c#,search\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result\
    \ = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfqoywmsr.d(21): Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpfqoywmsr.d(42): Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpfqoywmsr.d(63): Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(70):
    Error: declaration expected, not `<`\n/tmp/tmpfqoywmsr.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpfqoywmsr.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpfqoywmsr.d(78): Error: declaration expected, not `assert`\n/tmp/tmpfqoywmsr.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpfqoywmsr.d(80): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqoywmsr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string[] FilterBySubstring(string[] strings, string substring)\n{\n \
    \   List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0vps_fel.d(21): Error: declaration expected, not `<`\n/tmp/tmp0vps_fel.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmp0vps_fel.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vps_fel.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an\
    \ empty array when `strings[i]` is an empty string. `strings[i].Contains(substring)`\
    \ returns `true` when `strings[i]` is an empty string.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jywa6vy.d(21): Error: declaration expected, not `<`\n/tmp/tmp2jywa6vy.d(24):
    Error: unterminated character constant\n/tmp/tmp2jywa6vy.d(34): Error: declaration
    expected, not `foreach`\n/tmp/tmp2jywa6vy.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jywa6vy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppwwkqzvt.d(21): Error: declaration expected, not `<`\n/tmp/tmppwwkqzvt.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmppwwkqzvt.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppwwkqzvt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8aa85x7l.d(21): Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(26):
    Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(31): Error: declaration
    expected, not `<`\n/tmp/tmp8aa85x7l.d(36): Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(41):
    Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(46): Error: declaration
    expected, not `<`\n/tmp/tmp8aa85x7l.d(51): Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(56):
    Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(61): Error: declaration
    expected, not `<`\n/tmp/tmp8aa85x7l.d(66): Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(71):
    Error: declaration expected, not `<`\n/tmp/tmp8aa85x7l.d(76): Error: declaration
    expected, not `<`\n/tmp/tmp8aa85x7l.d(88): Error: unterminated string constant
    starting at /tmp/tmp8aa85x7l.d(88)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8aa85x7l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThis doesn't work if you have a\
    \ string array that contains multiple strings that contain the substring you're\
    \ looking for. For example, if you have `[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]` and you search for \"a\", you'll get `[\"abc\", \"bacd\", \"array\"]` instead\
    \ of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out.\
    \ I've updated the answer to account for that.\n<|/ c |>\n<| c |>\n: Thanks for\
    \ pointing that out. I've updated the answer to account for that.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated the answer\
    \ to account for that.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[] result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string array that contains multiple\
    \ strings that contain the substring you're looking for. For example, if you have\
    \ `[\"abc\", \"bacd\", \"cde\", \"array\"]` and you search for \"a\", you'll get\
    \ `[\"abc\", \"bacd\", \"array\"]` instead of `[\"abc\", \"bacd\"]`.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string array\
    \ that contains multiple strings that contain the substring you're looking for.\
    \ For example, if you have `[\"abc\", \"bacd\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezhro_4p.d(15): Error: found `in` when expecting `;`\n/tmp/tmpezhro_4p.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpezhro_4p.d(25): Error: unterminated
    character constant\n/tmp/tmpezhro_4p.d(25): Error: unterminated character constant\n/tmp/tmpezhro_4p.d(25):
    Error: unterminated character constant\n/tmp/tmpezhro_4p.d(28): Error: unterminated
    character constant\n/tmp/tmpezhro_4p.d(31): Error: unterminated character constant\n/tmp/tmpezhro_4p.d(34):
    Error: unterminated character constant\n/tmp/tmpezhro_4p.d(37): Error: unterminated
    character constant\n/tmp/tmpezhro_4p.d(42): Error: declaration expected, not `<`\n/tmp/tmpezhro_4p.d(45):
    Error: unterminated character constant\n/tmp/tmpezhro_4p.d(45): Error: unterminated
    character constant\n/tmp/tmpezhro_4p.d(45): Error: unterminated character constant\n/tmp/tmpezhro_4p.d(62):
    Error: declaration expected, not `<`\n/tmp/tmpezhro_4p.d(65): Error: unterminated
    character constant\n/tmp/tmpezhro_4p.d(65): Error: unterminated character constant\n/tmp/tmpezhro_4p.d(65):
    Error: unterminated string constant starting at /tmp/tmpezhro_4p.d(65)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezhro_4p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that start with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not start with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that end with given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not end with given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu8qfbha9.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu8qfbha9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=arrays,c#,string dscore=2 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.Add(s);\n    }\n    return\
    \ result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa0nur4s3.d(21): Error: declaration expected, not `<`\n/tmp/tmpa0nur4s3.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmpa0nur4s3.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0nur4s3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't work. `string[] result =\
    \ new string[strings.length];` will throw an `ArgumentOutOfRangeException` because\
    \ `strings.length` is `0`.\n<|/ c |>\n<| c |>\nYes, you're right. I was thinking\
    \ about a more general solution. I'll edit my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length is 0 because you never assigned any value to strings.\
    \ You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n</code>\n\
    This line is wrong. strings.length is 0 because you never assigned any value to\
    \ strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0 because you never assigned any\
    \ value to strings. You probably meant to use strings.length instead.\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis \nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo69rqz2k.d(21): Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(24):
    Error: unterminated character constant\n/tmp/tmpo69rqz2k.d(27): Error: unterminated
    character constant\n/tmp/tmpo69rqz2k.d(27): Error: unterminated character constant\n/tmp/tmpo69rqz2k.d(32):
    Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(38): Error: declaration
    expected, not `<`\n/tmp/tmpo69rqz2k.d(44): Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(50):
    Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpo69rqz2k.d(62): Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(68):
    Error: declaration expected, not `<`\n/tmp/tmpo69rqz2k.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmpo69rqz2k.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmpo69rqz2k.d(76): Error: declaration expected, not `assert`\n/tmp/tmpo69rqz2k.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmpo69rqz2k.d(78): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo69rqz2k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0gwmb78.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0gwmb78.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\" };\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\" };\nvar\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxu2hivcy.d(23): Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(34): Error: declaration
    expected, not `<`\n/tmp/tmpxu2hivcy.d(40): Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(46):
    Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(52): Error: declaration
    expected, not `<`\n/tmp/tmpxu2hivcy.d(58): Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(64):
    Error: declaration expected, not `<`\n/tmp/tmpxu2hivcy.d(76): Error: unterminated
    string constant starting at /tmp/tmpxu2hivcy.d(76)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxu2hivcy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code doesn't compile. `string[] result = new\
    \ string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static string[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\npublic static\
    \ string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\npublic static string[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\npublic\
    \ static string[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\npublic static string[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] filter_by_substring(\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqdbl5wtb.d(21): Error: declaration expected, not `<`\n/tmp/tmpqdbl5wtb.d(24):
    Error: unterminated character constant\n/tmp/tmpqdbl5wtb.d(34): Error: declaration
    expected, not `for`\n/tmp/tmpqdbl5wtb.d(34): Error: no identifier for declarator
    `i`\n/tmp/tmpqdbl5wtb.d(34): Error: declaration expected, not `<`\n/tmp/tmpqdbl5wtb.d(34):
    Error: declaration expected, not `++`\n/tmp/tmpqdbl5wtb.d(38): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdbl5wtb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if the substring appears more than once in the\
    \ string. For example, if `strings` contains `\"abc\"` and `\"ab\"`, then `filter_by_substring`\
    \ will return `[\"abc\"]` instead of `[\"abc\", \"ab\"]`.\n<|/ c |>\n<| c |>\n\
    I fixed it now. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if the substring appears\
    \ more than once in the string. For example, if `strings` contains `\"abc\"` and\
    \ `\"ab\"`, then `filter_by_substring` will return `[\"abc\"]` instead of `[\"\
    abc\", \"ab\"]`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3892il9x.d(21): Error: declaration expected, not `<`\n/tmp/tmp3892il9x.d(24):
    Error: unterminated character constant\n/tmp/tmp3892il9x.d(34): Error: declaration
    expected, not `foreach`\n/tmp/tmp3892il9x.d(38): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3892il9x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for your answer. I've tried your\
    \ code, but I got this error \"The type or namespace name 'string' could not be\
    \ found (are you missing a using directive or an assembly reference?)\". I've\
    \ added \"using System.Collections.Generic;\" but still not working. I'm using\
    \ Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added the using statement for you.\
    \ Make sure you add it at the top of your code file.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I've tried your code, but I got this error \"The type or namespace\
    \ name 'string' could not be found (are you missing a using directive or an assembly\
    \ reference?)\". I've added \"using System.Collections.Generic;\" but still not\
    \ working. I'm using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added the using\
    \ statement for you. Make sure you add it at the top of your code file.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this error\
    \ \"The type or namespace name 'string' could not be found (are you missing a\
    \ using directive or an assembly reference?)\". I've added \"using System.Collections.Generic;\"\
    \ but still not working. I'm using Visual Studio 2012.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I've tried your code, but I got this error \"The type or namespace name 'string'\
    \ could not be found (are you missing a using directive or an assembly reference?)\"\
    . I've added \"using System.Collections.Generic;\" but still not working. I'm\
    \ using Visual Studio 2012.\n<|/ c |>\n<| c |>\nI added the using statement for\
    \ you. Make sure you add it at the top of your code file.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmputpa73o6.d(21): Error: declaration expected, not `<`\n/tmp/tmputpa73o6.d(24):
    Error: unterminated character constant\n/tmp/tmputpa73o6.d(24): Error: unterminated
    character constant\n/tmp/tmputpa73o6.d(24): Error: unterminated character constant\n/tmp/tmputpa73o6.d(30):
    Error: unterminated character constant\n/tmp/tmputpa73o6.d(30): Error: unterminated
    character constant\n/tmp/tmputpa73o6.d(30): Error: unterminated character constant\n/tmp/tmputpa73o6.d(36):
    Error: unterminated character constant\n/tmp/tmputpa73o6.d(36): Error: unterminated
    character constant\n/tmp/tmputpa73o6.d(36): Error: unterminated character constant\n/tmp/tmputpa73o6.d(41):
    Error: declaration expected, not `for`\n/tmp/tmputpa73o6.d(41): Error: no identifier
    for declarator `i`\n/tmp/tmputpa73o6.d(41): Error: declaration expected, not `<`\n/tmp/tmputpa73o6.d(41):
    Error: no identifier for declarator `i`\n/tmp/tmputpa73o6.d(41): Error: declaration
    expected, not `++`\n/tmp/tmputpa73o6.d(45): Error: unrecognized declaration\n/tmp/tmputpa73o6.d(49):
    Error: unterminated character constant\n/tmp/tmputpa73o6.d(49): Error: unterminated
    character constant\n/tmp/tmputpa73o6.d(49): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputpa73o6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"c\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp51viff2c.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp51viff2c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3gvktrcc.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gvktrcc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gqx839m.d(21): Error: declaration expected, not `<`\n/tmp/tmp_gqx839m.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp_gqx839m.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp_gqx839m.d(28): Error: declaration expected, not `<`\n/tmp/tmp_gqx839m.d(28):
    Error: declaration expected, not `++`\n/tmp/tmp_gqx839m.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gqx839m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp147d4wib.d(17): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp147d4wib.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (!s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (!s.Contains(substring)) {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input array of strings only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\nunittest\n{\n    alias candidate = filter_by_substring;\n\n   \
    \ assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc62xr7bk.d(15): Error: found `s` when expecting `;` following
    statement\n/tmp/tmpc62xr7bk.d(15): Error: expression expected, not `:`\n/tmp/tmpc62xr7bk.d(15):
    Error: found `strings` when expecting `;` following `for` condition\n/tmp/tmpc62xr7bk.d(34):
    Error: found `s` when expecting `;` following statement\n/tmp/tmpc62xr7bk.d(34):
    Error: expression expected, not `:`\n/tmp/tmpc62xr7bk.d(34): Error: found `strings`
    when expecting `;` following `for` condition\n/tmp/tmpc62xr7bk.d(53): Error: found
    `s` when expecting `;` following statement\n/tmp/tmpc62xr7bk.d(53): Error: expression
    expected, not `:`\n/tmp/tmpc62xr7bk.d(53): Error: found `strings` when expecting
    `;` following `for` condition\n/tmp/tmpc62xr7bk.d(72): Error: found `s` when expecting
    `;` following statement\n/tmp/tmpc62xr7bk.d(72): Error: expression expected, not
    `:`\n/tmp/tmpc62xr7bk.d(72): Error: found `strings` when expecting `;` following
    `for` condition\n/tmp/tmpc62xr7bk.d(91): Error: found `s` when expecting `;` following
    statement\n/tmp/tmpc62xr7bk.d(91): Error: expression expected, not `:`\n/tmp/tmpc62xr7bk.d(91):
    Error: found `strings` when expecting `;` following `for` condition\n/tmp/tmpc62xr7bk.d(98):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc62xr7bk.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (!strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (strings[i].contains(substring)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20dhnebi.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp20dhnebi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<>();\n  \
    \  for (String s : list) {\n        if (s.contains(substring)) {\n           \
    \ result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a tags=arrays,java,string |>\n<| a |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a dscore=1 tags=arrays,java,string\
    \ |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    List<String> result = new ArrayList<>();\n\
    \    for (String s : strings) {\n        if (s.contains(substring)) {\n      \
    \      result.add(s);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static String[]\
    \ filterBySubstring(String[] strings, String substring) {\n    List<String> result\
    \ = new ArrayList<>();\n    for (String s : strings) {\n        if (s.contains(substring))\
    \ {\n            result.add(s);\n        }\n    }\n    return result.toArray(new\
    \ String[result.size()]);\n}\n</code>\n<|/ a tags=arrays,java,string |>\n<| a\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    List<String> result = new ArrayList<>();\n    for (String\
    \ s : strings) {\n        if (s.contains(substring)) {\n            result.add(s);\n\
    \        }\n    }\n    return result.toArray(new String[result.size()]);\n}\n\
    </code>\n<|/ a dscore=1 tags=arrays,java,string |>\n<| a |>\n<code>\npublic static\
    \ String[] filterBySubstring(String[] strings, String substring) {\n\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7yknb_tg.d(21): Error: declaration expected, not `<`\n/tmp/tmp7yknb_tg.d(27):
    Error: declaration expected, not `for`\n/tmp/tmp7yknb_tg.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7yknb_tg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ specify that I was looking for a solution that doesn't use LINQ. I've edited\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use LINQ\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify\
    \ that I was looking for a solution that doesn't use LINQ. I've edited my question\
    \ to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=string,arrays,c# |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was looking\
    \ for a solution that doesn't use LINQ. I've edited my question to reflect this.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring search = \"a\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogpsbo1s.d(21): Error: declaration expected, not `<`\n/tmp/tmpogpsbo1s.d(24):
    Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(24): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(24): Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(24):
    Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(27): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(30): Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(30):
    Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(30): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(30): Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(37):
    Error: declaration expected, not `<`\n/tmp/tmpogpsbo1s.d(40): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(40): Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(40):
    Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(40): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(47): Error: declaration expected, not `<`\n/tmp/tmpogpsbo1s.d(50):
    Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(50): Error: unterminated
    character constant\n/tmp/tmpogpsbo1s.d(50): Error: unterminated character constant\n/tmp/tmpogpsbo1s.d(50):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpogpsbo1s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays,filter |>\n<| a tags=string,c#,arrays,filter |>\n\
    <code>\nstring[] filterBySubstring(string[] strings, string substring)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c#,arrays,filter |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,filter |>\n<| a dscore=1 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,filter\
    \ |>\n<| a tags=string,c#,arrays,filter |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5n5btf22.d(21): Error: declaration expected, not `<`\n/tmp/tmp5n5btf22.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmp5n5btf22.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5n5btf22.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't work for me. I'm getting\
    \ an \"Index was outside the bounds of the array.\" error on the line `result[i]\
    \ = strings[i];`\n<|/ c |>\n<| c |>\n: I tested it and it works for me. Are you\
    \ sure you copied it correctly? I added a screenshot of my test program to the\
    \ answer.\n<|/ c |>\n<| c |>\n: I added a screenshot of my test program to the\
    \ answer. Maybe you didn't copy it correctly?\n<|/ c |>\n<| c |>\nI copied it\
    \ exactly as you did. I'm running it on Visual Studio 2012. Maybe it's something\
    \ with that?\n<|/ c |>\n<| c |>\n: Yes, it could be a problem with Visual Studio\
    \ 2012. Try running it in a different IDE.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ I'm getting an \"Index was outside the bounds of the array.\" error on the line\
    \ `result[i] = strings[i];`\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for me. I'm getting\
    \ an \"Index was outside the bounds of the array.\" error on the line `result[i]\
    \ = strings[i];`\n<|/ c |>\n<| c |>\nCan you post the full exception message?\n\
    <|/ c |>\n<| c |>\nI added a screenshot of the full exception message to the question.\n\
    <|/ c |>\n<| c |>\n: I added a screenshot of my test program to the answer. Maybe\
    \ you didn't copy it correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as you\
    \ did. I'm running it on Visual Studio 2012. Maybe it's something with that?\n\
    <|/ c |>\n<| a tags=\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcpw2y2ph.d(21): Error: declaration expected, not `<`\n/tmp/tmpcpw2y2ph.d(24):
    Error: unterminated character constant\n/tmp/tmpcpw2y2ph.d(24): Error: unterminated
    character constant\n/tmp/tmpcpw2y2ph.d(30): Error: unterminated character constant\n/tmp/tmpcpw2y2ph.d(33):
    Error: unterminated character constant\n/tmp/tmpcpw2y2ph.d(33): Error: unterminated
    character constant\n/tmp/tmpcpw2y2ph.d(41): Error: declaration expected, not `for`\n/tmp/tmpcpw2y2ph.d(41):
    Error: no identifier for declarator `i`\n/tmp/tmpcpw2y2ph.d(41): Error: declaration
    expected, not `<`\n/tmp/tmpcpw2y2ph.d(41): Error: declaration expected, not `++`\n/tmp/tmpcpw2y2ph.d(45):
    Error: unrecognized declaration\n/tmp/tmpcpw2y2ph.d(49): Error: unterminated character
    constant\n/tmp/tmpcpw2y2ph.d(49): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpw2y2ph.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/\nunittest\n{\n    alias candidate = filter_by_substring;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt9drc8g4.d(21): Error: declaration expected, not `<`\n/tmp/tmpt9drc8g4.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmpt9drc8g4.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt9drc8g4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? !strings[i].Contains(substring) : !strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ != -1)\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input array of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeuknqq9i.d(86): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpeuknqq9i.d(95): Error: found `End of File` when expecting `}`
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuknqq9i.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n\
    \    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n   \
    \ assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcspno22s.d(15): Error: found `in` when expecting `;`\n/tmp/tmpcspno22s.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpcspno22s.d(28): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmpcspno22s.d(28): Error: no identifier
    for declarator `System`\n/tmp/tmpcspno22s.d(28): Error: declaration expected,
    not `out`\n/tmp/tmpcspno22s.d(29): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcspno22s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9p__k60.d(87): Error: found `unittest` when expecting `;` following
    `for` condition\n/tmp/tmpr9p__k60.d(96): Error: found `void` when expecting `)`\n/tmp/tmpr9p__k60.d(96):
    Error: found `{` when expecting `;` following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpr9p__k60.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string with multiple\
    \ substrings.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string with\
    \ multiple substrings.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] substringArray\
    \ = { \"a\", \"b\", \"c\" };\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_1fh8czm.d(21): Error: declaration expected, not `<`\n/tmp/tmp_1fh8czm.d(24):
    Error: unterminated character constant\n/tmp/tmp_1fh8czm.d(27): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1fh8czm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I wonder why you used `string[] result\
    \ = new string[strings.length];` instead of `string[] result = strings.ToArray();`?\n\
    <|/ c |>\n<| c |>\nI used `string[] result = strings.ToArray();` because I wanted\
    \ to avoid the overhead of copying the array and I wanted to avoid the overhead\
    \ of creating a new array and copying the contents of the old array to the new\
    \ array. `string[] result = new string[strings.length];` would have worked just\
    \ as well.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation. :)\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10xjdy_y.d(21): Error: declaration expected, not `<`\n/tmp/tmp10xjdy_y.d(35):
    Error: declaration expected, not `for`\n/tmp/tmp10xjdy_y.d(35): Error: no identifier
    for declarator `i`\n/tmp/tmp10xjdy_y.d(35): Error: declaration expected, not `<`\n/tmp/tmp10xjdy_y.d(35):
    Error: declaration expected, not `++`\n/tmp/tmp10xjdy_y.d(39): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10xjdy_y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, however it only works with strings. I\
    \ need a solution that works with any type of objects. I added a comment to my\
    \ question to clarify this.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for any type of objects. I tested it and it works.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works for any type of objects. I tested it and it works.\n<|/\
    \ c |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n    List<String>\
    \ list = new ArrayList<String>();\n    list.add(\"abc\");\n    list.add(\"bacd\"\
    );\n    list.add(\"cde\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    list.add(\"array\");\n\
    \    list.add(\"array\");\n    list.add(\"array\");\n    \nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi3y7889k.d(21): Error: declaration expected, not `<`\n/tmp/tmpi3y7889k.d(36):
    Error: unexpected `(` in declarator\n/tmp/tmpi3y7889k.d(36): Error: basic type
    expected, not `"abc"`\n/tmp/tmpi3y7889k.d(36): Error: found `"abc"` when expecting
    `)`\n/tmp/tmpi3y7889k.d(36): Error: no identifier for declarator `list.add(_error_)`\n/tmp/tmpi3y7889k.d(36):
    Error: semicolon expected following function declaration\n/tmp/tmpi3y7889k.d(36):
    Error: declaration expected, not `)`\n/tmp/tmpi3y7889k.d(37): Error: unexpected
    `(` in declarator\n/tmp/tmpi3y7889k.d(37): Error: basic type expected, not `"bacd"`\n/tmp/tmpi3y7889k.d(37):
    Error: found `"bacd"` when expecting `)`\n/tmp/tmpi3y7889k.d(37): Error: no identifier
    for declarator `list.add(_error_)`\n/tmp/tmpi3y7889k.d(37): Error: semicolon expected
    following function declaration\n/tmp/tmpi3y7889k.d(37): Error: declaration expected,
    not `)`\n/tmp/tmpi3y7889k.d(38): Error: unexpected `(` in declarator\n/tmp/tmpi3y7889k.d(38):
    Error: basic type expected, not `"cde"`\n/tmp/tmpi3y7889k.d(38): Error: found
    `"cde"` when expecting `)`\n/tmp/tmpi3y7889k.d(38): Error: no identifier for declarator
    `list.add(_error_)`\n/tmp/tmpi3y7889k.d(38): Error: semicolon expected following
    function declaration\n/tmp/tmpi3y7889k.d(38): Error: declaration expected, not
    `)`\n/tmp/tmpi3y7889k.d(39): Error: unexpected `(` in declarator\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpi3y7889k.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do it without using LINQ?\n<|/ c |>\n<| c |>\n\
    Yes, you can do it without LINQ, but it will be more complicated. I'll post a\
    \ solution without LINQ.\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n\
    <|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't work.\
    \ strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that takes a string, and returns a boolean.\n<|/ c |>\n<| c |>\n\
    I fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that takes a string, and returns a boolean.\n<|/ c |>\n<| c |>\n\
    I fixed the code. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. strings is an array of strings, and strings[i] is a string. strings[i].Contains\
    \ is a method of string that takes a string, and returns true or false. strings[i].Contains(substring)\
    \ is a method that \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2n24f_9j.d(21): Error: declaration expected, not `<`\n/tmp/tmp2n24f_9j.d(27):
    Error: unterminated character constant\n/tmp/tmp2n24f_9j.d(38): Error: declaration
    expected, not `for`\n/tmp/tmp2n24f_9j.d(38): Error: no identifier for declarator
    `i`\n/tmp/tmp2n24f_9j.d(38): Error: declaration expected, not `<`\n/tmp/tmp2n24f_9j.d(38):
    Error: declaration expected, not `++`\n/tmp/tmp2n24f_9j.d(41): Error: unrecognized
    declaration\n/tmp/tmp2n24f_9j.d(46): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2n24f_9j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search\
    \ = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring search = \"a\";\n\
    var result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" };\nstring\
    \ search = \"a\";\nvar result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\" };\nstring search = \"a\";\nvar result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj5uu9yhl.d(21): Error: declaration expected, not `<`\n/tmp/tmpj5uu9yhl.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpj5uu9yhl.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpj5uu9yhl.d(42): Error: declaration expected, not `<`\n/tmp/tmpj5uu9yhl.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpj5uu9yhl.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpj5uu9yhl.d(59): Error: unterminated character constant\n/tmp/tmpj5uu9yhl.d(66):
    Error: declaration expected, not `<`\n/tmp/tmpj5uu9yhl.d(78): Error: unterminated
    string constant starting at /tmp/tmpj5uu9yhl.d(78)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpj5uu9yhl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6rc67xz.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx6rc67xz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Can you post the code you tried?\n<|/ c |>\n<| c |>\nI added the code\
    \ I tried. I also tried it with the `string` type instead of `string[]` but that\
    \ didn't work either.\n<|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n<|/ c |>\n<| a |>\n\
    <code>\npublic static string[] filter_by_substring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring` returns\
    \ an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works for me.\
    \ Can you post the code you tried?\n<|/ c |>\n<| c |>\nI added the code I tried.\
    \ I also tried it with the `string` type instead of `string[]` but that didn't\
    \ work either.\n<|/ c |>\n<| c |>\nI added a version that doesn't use LINQ\n<|/\
    \ c |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `filter_by_substring`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Can you post the code you tried?\n\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0ea2xpyf.d(15): Error: found `in` when expecting `;`\n/tmp/tmp0ea2xpyf.d(24):
    Error: declaration expected, not `<`\n/tmp/tmp0ea2xpyf.d(27): Error: unterminated
    character constant\n/tmp/tmp0ea2xpyf.d(33): Error: unterminated character constant\n/tmp/tmp0ea2xpyf.d(36):
    Error: unterminated character constant\n/tmp/tmp0ea2xpyf.d(39): Error: unterminated
    character constant\n/tmp/tmp0ea2xpyf.d(46): Error: declaration expected, not `foreach`\n/tmp/tmp0ea2xpyf.d(51):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ea2xpyf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7c687fs.d(15): Error: found `in` when expecting `;`\n/tmp/tmpv7c687fs.d(24):
    Error: declaration expected, not `<`\n/tmp/tmpv7c687fs.d(32): Error: declaration
    expected, not `foreach`\n/tmp/tmpv7c687fs.d(37): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7c687fs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwygse4ye.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwygse4ye.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an\
    \ array of strings that don't contain the substring `substring`. `filter_by_substring`\
    \ doesn't return an array of strings that contain the substring `substring`.\n\
    <|/ c |>\n<| c |>\n: I misunderstood the question. I've updated my answer to reflect\
    \ this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy9zqvjf1.d(21): Error: declaration expected, not `<`\n/tmp/tmpy9zqvjf1.d(24):
    Error: unterminated character constant\n/tmp/tmpy9zqvjf1.d(24): Error: unterminated
    character constant\n/tmp/tmpy9zqvjf1.d(24): Error: unterminated character constant\n/tmp/tmpy9zqvjf1.d(27):
    Error: unterminated character constant\n/tmp/tmpy9zqvjf1.d(34): Error: declaration
    expected, not `for`\n/tmp/tmpy9zqvjf1.d(34): Error: no identifier for declarator
    `i`\n/tmp/tmpy9zqvjf1.d(34): Error: declaration expected, not `<`\n/tmp/tmpy9zqvjf1.d(34):
    Error: declaration expected, not `++`\n/tmp/tmpy9zqvjf1.d(38): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9zqvjf1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbpm1ndvd.d(15): Error: found `in` when expecting `;`\n/tmp/tmpbpm1ndvd.d(24):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbpm1ndvd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThanks for your answer. I'm going\
    \ to try this out and see if it works.\n<|/ c |>\n<| c |>\nI got it to work. Thanks\
    \ so much. I was able to modify it a bit to make it work for my needs.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] stringArray = { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring searchString = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a dscore=0 tags=c#,.net,string,arrays |>\n<| a tags=c#,.net,string,arrays |>\n\
    <code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring\
    \ searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq2p1vmvv.d(21): Error: declaration expected, not `<`\n/tmp/tmpq2p1vmvv.d(24):
    Error: unterminated character constant\n/tmp/tmpq2p1vmvv.d(34): Error: declaration
    expected, not `<`\n/tmp/tmpq2p1vmvv.d(41): Error: declaration expected, not `<`\n/tmp/tmpq2p1vmvv.d(48):
    Error: declaration expected, not `<`\n/tmp/tmpq2p1vmvv.d(55): Error: declaration
    expected, not `<`\n/tmp/tmpq2p1vmvv.d(62): Error: declaration expected, not `<`\n/tmp/tmpq2p1vmvv.d(69):
    Error: semicolon expected, not `unittest`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq2p1vmvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThis answer doesn't seem to work. `filter_by_substring`\
    \ returns an empty array for me. `filter_by_substring` should return `[\"abc\"\
    , \"bacd\", \"array\"]`\n<|/ c |>\n<| c |>\nI tested it and it works fine for\
    \ me. Maybe you missed something in the code?\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine for me. Maybe you missed something in the code?\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine for me. Maybe you missed something in the\
    \ code?\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Maybe you missed\
    \ something in the code?\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer\
    \ doesn't seem to work. `filter_by_substring` returns an empty array for me. `filter_by_substring`\
    \ should return `[\"abc\", \"bacd\", \"array\"]`\n<|/ c |>\n<| a tags=string,arrays,c#\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis answer doesn't seem to work. `filter_by_substring` returns an empty\
    \ array for me. `filter_by_substring` should return `[\"abc\", \"bacd\", \"array\"\
    ]`\n<|/ c |>\n<| c |>\nThis answer doesn't seem to work. `filter_by_substring`\
    \ returns an empty array for me. `filter_by_substring` should return `[\"abc\"\
    , \"bacd\", \"array\"]`\n<|/ c |>\n<| c |>\nThis answer doesn't seem to work.\
    \ `\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg4stbukv.d(21): Error: declaration expected, not `<`\n/tmp/tmpg4stbukv.d(24):
    Error: unterminated character constant\n/tmp/tmpg4stbukv.d(43): Error: declaration
    expected, not `for`\n/tmp/tmpg4stbukv.d(43): Error: no identifier for declarator
    `i`\n/tmp/tmpg4stbukv.d(43): Error: declaration expected, not `<`\n/tmp/tmpg4stbukv.d(43):
    Error: declaration expected, not `++`\n/tmp/tmpg4stbukv.d(47): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4stbukv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k3isndn.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k3isndn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"c\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiv0oivlu.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiv0oivlu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays,substring |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a tags=c#,string,arrays,substring\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays,substring |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxqx51lhf.d(21): Error: declaration expected, not `<`\n/tmp/tmpxqx51lhf.d(28):
    Error: declaration expected, not `for`\n/tmp/tmpxqx51lhf.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmpxqx51lhf.d(28): Error: declaration expected, not `<`\n/tmp/tmpxqx51lhf.d(28):
    Error: no identifier for declarator `i`\n/tmp/tmpxqx51lhf.d(28): Error: declaration
    expected, not `++`\n/tmp/tmpxqx51lhf.d(32): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqx51lhf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprlk7_e2y.d(21): Error: declaration expected, not `<`\n/tmp/tmprlk7_e2y.d(26):
    Error: declaration expected, not `for`\n/tmp/tmprlk7_e2y.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmprlk7_e2y.d(26): Error: declaration expected, not `<`\n/tmp/tmprlk7_e2y.d(26):
    Error: declaration expected, not `++`\n/tmp/tmprlk7_e2y.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprlk7_e2y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemyp3f09.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpemyp3f09.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp147d4wib.d(17): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp147d4wib.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz1gpbhhh.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz1gpbhhh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nI like this solution, but I believe it\
    \ can be made more efficient by using a `HashSet<string>` instead of a `List<string>`\
    \ for the `result` array. `HashSet` has `O(1)` lookup time, while `List` has `O(n)`\
    \ lookup time.\n<|/ c |>\n<| c |>\n: Yes, that's a good point. I've edited my\
    \ answer to include that suggestion.\n<|/ c |>\n<| c |>\nI believe that `HashSet`\
    \ will perform better than `List` because `HashSet` uses hashing internally, while\
    \ `List` uses linear search. `HashSet` also has `O(1)` lookup time, while `List`\
    \ has `O(n)` lookup time.\n<|/ c |>\n<| c |>\n: Yes, that's true. I've edited\
    \ my answer to include that as well.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcyr3n2kx.d(21): Error: declaration expected, not `<`\n/tmp/tmpcyr3n2kx.d(27):
    Error: unterminated character constant\n/tmp/tmpcyr3n2kx.d(27): Error: unterminated
    character constant\n/tmp/tmpcyr3n2kx.d(33): Error: unterminated character constant\n/tmp/tmpcyr3n2kx.d(33):
    Error: unterminated character constant\n/tmp/tmpcyr3n2kx.d(38): Error: declaration
    expected, not `for`\n/tmp/tmpcyr3n2kx.d(38): Error: no identifier for declarator
    `i`\n/tmp/tmpcyr3n2kx.d(38): Error: declaration expected, not `<`\n/tmp/tmpcyr3n2kx.d(38):
    Error: declaration expected, not `++`\n/tmp/tmpcyr3n2kx.d(42): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyr3n2kx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works fine for me,\
    \ but I still don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation to the\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. Now I understand why\
    \ my code doesn't work. Your code works fine for me, but I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value. Please read this [how-to-answer](http://stackoverflow.com/help/how-to-answer)\
    \ for providing quality answer.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9sysm64w.d(21): Error: declaration expected, not `<`\n/tmp/tmp9sysm64w.d(24):
    Error: unterminated character constant\n/tmp/tmp9sysm64w.d(24): Error: unterminated
    character constant\n/tmp/tmp9sysm64w.d(24): Error: unterminated character constant\n/tmp/tmp9sysm64w.d(30):
    Error: unterminated character constant\n/tmp/tmp9sysm64w.d(30): Error: unterminated
    character constant\n/tmp/tmp9sysm64w.d(30): Error: unterminated character constant\n/tmp/tmp9sysm64w.d(30):
    Error: unterminated character constant\n/tmp/tmp9sysm64w.d(40): Error: declaration
    expected, not `for`\n/tmp/tmp9sysm64w.d(40): Error: no identifier for declarator
    `i`\n/tmp/tmp9sysm64w.d(40): Error: declaration expected, not `<`\n/tmp/tmp9sysm64w.d(40):
    Error: declaration expected, not `++`\n/tmp/tmp9sysm64w.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sysm64w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns a\
    \ new array and doesn't modify the original array. `strings` will still contain\
    \ all the strings.\n<|/ c |>\n<| c |>\nI missed that part. Thanks for pointing\
    \ it out. I've updated my answer.\n<|/ c |>\n<| a |>\n<code>\npublic static string[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n\
    <| c |>\nThis doesn't work. `filter_by_substring` returns a new array and doesn't\
    \ modify the original array. `strings` will still contain all the strings.\n<|/\
    \ c |>\n<| a |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns a new\
    \ array and doesn't modify the original array. `strings` will still contain all\
    \ the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns\
    \ a new array and doesn't modify the original array. `strings` will still contain\
    \ all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns a new array and doesn't modify the original array. `strings` will still\
    \ contain all the strings.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string \nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoicgahse.d(21): Error: declaration expected, not `<`\n/tmp/tmpoicgahse.d(24):
    Error: unterminated character constant\n/tmp/tmpoicgahse.d(24): Error: unterminated
    character constant\n/tmp/tmpoicgahse.d(27): Error: unterminated character constant\n/tmp/tmpoicgahse.d(34):
    Error: declaration expected, not `for`\n/tmp/tmpoicgahse.d(34): Error: no identifier
    for declarator `i`\n/tmp/tmpoicgahse.d(34): Error: declaration expected, not `<`\n/tmp/tmpoicgahse.d(34):
    Error: declaration expected, not `++`\n/tmp/tmpoicgahse.d(38): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoicgahse.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. He wants to filter\
    \ out all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my code does exactly\
    \ that. I've added a test case to my answer.\n<|/ c |>\n<| c |>\nNo, it doesn't.\
    \ Your code returns `[\"abc\", \"bacd\", \"array\"]` for `filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")`, which is not what the OP asked\
    \ for.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my code does exactly\
    \ that. I've added a test case to my answer.\n<|/ c |>\n<| c |>\nI see your point,\
    \ but I believe that my code does exactly that. I've added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nfunction filter_by_substring(string[] strings,\
    \ string substring)\n{\n    var result = new List<string>();\n    foreach(var\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\n\
    This doesn't answer the question. He wants to filter out all strings that don't\
    \ contain `substring`, not just those that contain it.\n<|/ c |>\n<| c |>\nI see\
    \ your point, but I believe that my code does exactly that. I've added a test\
    \ case to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \         result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to filter out all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my code\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpife_xoa_.d(15): Error: found `in` when expecting `;`\n/tmp/tmpife_xoa_.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpife_xoa_.d(25): Error: unterminated
    character constant\n/tmp/tmpife_xoa_.d(25): Error: unterminated character constant\n/tmp/tmpife_xoa_.d(28):
    Error: unterminated character constant\n/tmp/tmpife_xoa_.d(31): Error: unterminated
    character constant\n/tmp/tmpife_xoa_.d(34): Error: unterminated character constant\n/tmp/tmpife_xoa_.d(37):
    Error: unterminated character constant\n/tmp/tmpife_xoa_.d(44): Error: declaration
    expected, not `foreach`\n/tmp/tmpife_xoa_.d(48): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpife_xoa_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7c9bxme5.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7c9bxme5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz1gpbhhh.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz1gpbhhh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,.net,linq,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,.net,linq,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,.net,linq,string |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq,string\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq,string |>\n<| a tags=c#,.net,linq,string |>\n\
    <code>\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpct_rpjtf.d(15): Error: found `in` when expecting `;`\n/tmp/tmpct_rpjtf.d(24):
    Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(29): Error: declaration
    expected, not `<`\n/tmp/tmpct_rpjtf.d(34): Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(39):
    Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(44): Error: declaration
    expected, not `<`\n/tmp/tmpct_rpjtf.d(49): Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(54):
    Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(59): Error: declaration
    expected, not `<`\n/tmp/tmpct_rpjtf.d(64): Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(69):
    Error: declaration expected, not `<`\n/tmp/tmpct_rpjtf.d(74): Error: declaration
    expected, not `<`\n/tmp/tmpct_rpjtf.d(82): Error: declaration expected, not `assert`\n/tmp/tmpct_rpjtf.d(83):
    Error: declaration expected, not `assert`\n/tmp/tmpct_rpjtf.d(84): Error: declaration
    expected, not `assert`\n/tmp/tmpct_rpjtf.d(85): Error: declaration expected, not
    `assert`\n/tmp/tmpct_rpjtf.d(86): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpct_rpjtf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4gr80f52.d(21): Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(28):
    Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(35): Error: declaration
    expected, not `<`\n/tmp/tmp4gr80f52.d(42): Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(49):
    Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(56): Error: declaration
    expected, not `<`\n/tmp/tmp4gr80f52.d(63): Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(70):
    Error: declaration expected, not `<`\n/tmp/tmp4gr80f52.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmp4gr80f52.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmp4gr80f52.d(79): Error: declaration expected, not `assert`\n/tmp/tmp4gr80f52.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmp4gr80f52.d(81): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gr80f52.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,string,arrays |>\n<| c |>\nI like your solution. Just\
    \ a small improvement: you can replace `strings[i].contains(substring)` with `strings[i].contains(substring,\
    \ 0, strings[i].length())`\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've\
    \ updated the answer to reflect that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkxvx2ls_.d(21): Error: declaration expected, not `<`\n/tmp/tmpkxvx2ls_.d(27):
    Error: unterminated character constant\n/tmp/tmpkxvx2ls_.d(27): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxvx2ls_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\npublic static string[]\
    \ FilterString(string[] stringArray, string searchString)\n{\n    List<string>\
    \ filteredStrings = new List<string>();\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppndu6jm1.d(21): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppndu6jm1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction filterBySubstring(string[]\
    \ strings, string substring)\n{\n    var result = new List<string>();\n    foreach(var\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach(var s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach(var\
    \ s in strings)\n    {\n        if(s.Contains(\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0fu9vplp.d(15): Error: found `in` when expecting `;`\n/tmp/tmp0fu9vplp.d(24):
    Error: declaration expected, not `<`\n/tmp/tmp0fu9vplp.d(31): Error: declaration
    expected, not `foreach`\n/tmp/tmp0fu9vplp.d(36): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fu9vplp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| c |>\nThis doesn't work. `string[] result =\
    \ new string[strings.length];` will throw an exception because `strings` isn't\
    \ an array.\n<|/ c |>\n<| c |>\n: Yes, I forgot to add that line. Thanks for pointing\
    \ that out. I've edited my answer.\n<|/ c |>\n<| a tags=arrays,string,c# |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line is wrong.\
    \ strings is an array, so you cannot assign it to a string array. \n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is also wrong. strings\
    \ is an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is also wrong. strings is\
    \ an array, so you cannot assign it to a string array. \n<code>\nstring[] result\
    \ = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vkg9ipo.d(21): Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(24):
    Error: unterminated character constant\n/tmp/tmp3vkg9ipo.d(24): Error: unterminated
    character constant\n/tmp/tmp3vkg9ipo.d(27): Error: unterminated character constant\n/tmp/tmp3vkg9ipo.d(32):
    Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(36): Error: declaration
    expected, not `<`\n/tmp/tmp3vkg9ipo.d(40): Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(44):
    Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(48): Error: declaration
    expected, not `<`\n/tmp/tmp3vkg9ipo.d(52): Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(56):
    Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(60): Error: declaration
    expected, not `<`\n/tmp/tmp3vkg9ipo.d(64): Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(68):
    Error: declaration expected, not `<`\n/tmp/tmp3vkg9ipo.d(72): Error: declaration
    expected, not `<`\n/tmp/tmp3vkg9ipo.d(80): Error: declaration expected, not `assert`\n/tmp/tmp3vkg9ipo.d(81):
    Error: declaration expected, not `assert`\n/tmp/tmp3vkg9ipo.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmp3vkg9ipo.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmp3vkg9ipo.d(84): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3vkg9ipo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small library for doing this in\
    \ F#:\n<code>\nopen System.Collections.Generic\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp192h0t83.d(21): Error: declaration expected, not `<`\n/tmp/tmp192h0t83.d(31):
    Error: declaration expected, not `assert`\n/tmp/tmp192h0t83.d(32): Error: declaration
    expected, not `assert`\n/tmp/tmp192h0t83.d(33): Error: declaration expected, not
    `assert`\n/tmp/tmp192h0t83.d(34): Error: declaration expected, not `assert`\n/tmp/tmp192h0t83.d(35):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp192h0t83.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    var result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x =>\
    \ x.Contains(search)).ToArray();\n</code>\n<|/ a tags=arrays,c#,string |>\n<|\
    \ a |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=arrays,c#,string dscore=1 |>\n<| a tags=arrays,c#,string |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring search = \"a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nvar result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    var result = array.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nvar result = array.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3jin0ejr.d(21): Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(28):
    Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(35): Error: declaration
    expected, not `<`\n/tmp/tmp3jin0ejr.d(42): Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(49):
    Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(56): Error: declaration
    expected, not `<`\n/tmp/tmp3jin0ejr.d(63): Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(70):
    Error: declaration expected, not `<`\n/tmp/tmp3jin0ejr.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmp3jin0ejr.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmp3jin0ejr.d(79): Error: declaration expected, not `assert`\n/tmp/tmp3jin0ejr.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmp3jin0ejr.d(81): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jin0ejr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] array = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x\
    \ => x.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nvar result = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ array = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nvar result\
    \ = array.Where(x => x.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nvar result = array.Where(x => x.Contains(\"\
    a\")).ToArray();\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp08vl1yer.d(21): Error: declaration expected, not `<`\n/tmp/tmp08vl1yer.d(27):
    Error: declaration expected, not `<`\n/tmp/tmp08vl1yer.d(33): Error: declaration
    expected, not `<`\n/tmp/tmp08vl1yer.d(39): Error: declaration expected, not `<`\n/tmp/tmp08vl1yer.d(45):
    Error: declaration expected, not `<`\n/tmp/tmp08vl1yer.d(51): Error: declaration
    expected, not `<`\n/tmp/tmp08vl1yer.d(57): Error: declaration expected, not `<`\n/tmp/tmp08vl1yer.d(63):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp08vl1yer.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nI like your solution, however\
    \ I believe that `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.length - 1];` because `strings.length` returns `string`\
    \ and not `int`.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks for pointing that\
    \ out. I've fixed it.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns int and you are trying to assign it to string[].\n<|/ a dscore=2 |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length returns int and you are trying to\
    \ assign it to string[].\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns int and you are trying to assign it to string[].\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length returns int and you are trying to\
    \ assign it to string[].\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns int and you are trying to assign it to string[].\n\
    <|/ a dscore=1 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\n</code>\nThis line is wrong. strings.length returns\
    \ int and you are trying to assign it to string[].\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length returns int and you are trying to assign it to string[].\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgihys21d.d(21): Error: declaration expected, not `<`\n/tmp/tmpgihys21d.d(27):
    Error: unterminated character constant\n/tmp/tmpgihys21d.d(32): Error: declaration
    expected, not `<`\n/tmp/tmpgihys21d.d(38): Error: declaration expected, not `<`\n/tmp/tmpgihys21d.d(44):
    Error: declaration expected, not `<`\n/tmp/tmpgihys21d.d(50): Error: declaration
    expected, not `<`\n/tmp/tmpgihys21d.d(56): Error: declaration expected, not `<`\n/tmp/tmpgihys21d.d(62):
    Error: declaration expected, not `<`\n/tmp/tmpgihys21d.d(68): Error: declaration
    expected, not `<`\n/tmp/tmpgihys21d.d(78): Error: declaration expected, not `assert`\n/tmp/tmpgihys21d.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpgihys21d.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmpgihys21d.d(81): Error: declaration expected, not
    `assert`\n/tmp/tmpgihys21d.d(82): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgihys21d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for the answer. I am not allowed\
    \ to use LINQ. I am not allowed to use any loops. I am not allowed to use any\
    \ string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to use\
    \ any string methods. I am not allowed to use any string methods. I am not allowed\
    \ to use any string methods. I am not allowed to use any string methods. I am\
    \ not allowed to use any string methods. I am not allowed to use any string methods.\
    \ I am not allowed to use any string methods. I am not allowed to use any string\
    \ methods. I am not allowed to use any string methods. I am not allowed to \n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpygopfgt1.d(21): Error: declaration expected, not `<`\n/tmp/tmpygopfgt1.d(29):
    Error: declaration expected, not `assert`\n/tmp/tmpygopfgt1.d(30): Error: declaration
    expected, not `assert`\n/tmp/tmpygopfgt1.d(31): Error: declaration expected, not
    `assert`\n/tmp/tmpygopfgt1.d(32): Error: declaration expected, not `assert`\n/tmp/tmpygopfgt1.d(33):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygopfgt1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k3isndn.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k3isndn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=arrays,c#,string\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=arrays,\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8p4rtg79.d(21): Error: declaration expected, not `<`\n/tmp/tmp8p4rtg79.d(26):
    Error: declaration expected, not `for`\n/tmp/tmp8p4rtg79.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmp8p4rtg79.d(26): Error: declaration expected, not `<`\n/tmp/tmp8p4rtg79.d(26):
    Error: declaration expected, not `++`\n/tmp/tmp8p4rtg79.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8p4rtg79.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ list, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String s : list) {\n        if (s.contains(substring)) {\n         \
    \   result.add(s);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static String[] filterBySubstring(String[] strings, String substring) {\n  \
    \  String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a |>\n<code>\npublic static String[] filterBySubstring(String[] strings,\
    \ String substring) {\n    String[] result = new String[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static String[] filterBySubstring(String[] strings, String substring) {\n\
    \    String[] result = new String[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,string |>\n<| a tags=java,arrays,string |>\n\
    <code>\npublic static String[] filterBySubstring(String[] strings, String substring)\
    \ {\n    String[] result = new String[strings.length];\n    for (int i = 0; i\
    \ < \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnztin7q.d(21): Error: declaration expected, not `<`\n/tmp/tmpfnztin7q.d(27):
    Error: declaration expected, not `for`\n/tmp/tmpfnztin7q.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnztin7q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,arrays,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyebf385b.d(21): Error: declaration expected, not `<`\n/tmp/tmpyebf385b.d(26):
    Error: semicolon expected, not `.`\n/tmp/tmpyebf385b.d(26): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpyebf385b.d(27): Error: semicolon
    expected, not `.`\n/tmp/tmpyebf385b.d(27): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpyebf385b.d(28): Error: semicolon expected, not `.`\n/tmp/tmpyebf385b.d(28):
    Error: no identifier for declarator `.Text`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyebf385b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk92xus_0.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk92xus_0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcabc\" and the substring \"ab\"\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcabc\" and the substring \"ab\"\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ yourself. It returns `[\"abc\", \"bacd\", \"cde\", \"array\"]` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `[\"abc\", \"bacd\"\
    , \"cde\", \"array\"]` as expected.\n<|/ c |>\n<| a tags=string,arrays,c# |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjyuku8vx.d(21): Error: declaration expected, not `<`\n/tmp/tmpjyuku8vx.d(24):
    Error: unterminated character constant\n/tmp/tmpjyuku8vx.d(41): Error: declaration
    expected, not `for`\n/tmp/tmpjyuku8vx.d(41): Error: no identifier for declarator
    `i`\n/tmp/tmpjyuku8vx.d(41): Error: declaration expected, not `<`\n/tmp/tmpjyuku8vx.d(41):
    Error: declaration expected, not `++`\n/tmp/tmpjyuku8vx.d(45): Error: unrecognized
    declaration\n/tmp/tmpjyuku8vx.d(49): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyuku8vx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString = \"\
    a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] stringArray = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring searchString = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring searchString\
    \ = \"a\";\nstring[] result = stringArray.Where(\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqudqwbsb.d(21): Error: declaration expected, not `<`\n/tmp/tmpqudqwbsb.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpqudqwbsb.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpqudqwbsb.d(42): Error: declaration expected, not `<`\n/tmp/tmpqudqwbsb.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpqudqwbsb.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpqudqwbsb.d(63): Error: declaration expected, not `<`\n/tmp/tmpqudqwbsb.d(70):
    Error: expression expected, not `unittest`\n/tmp/tmpqudqwbsb.d(71): Error: found
    `{` when expecting `,`\n/tmp/tmpqudqwbsb.d(72): Error: expression expected, not
    `alias`\n/tmp/tmpqudqwbsb.d(72): Error: found `candidate` when expecting `,`\n/tmp/tmpqudqwbsb.d(72):
    Error: expression expected, not `=`\n/tmp/tmpqudqwbsb.d(72): Error: found `filter_by_substring`
    when expecting `,`\n/tmp/tmpqudqwbsb.d(72): Error: expression expected, not `;`\n/tmp/tmpqudqwbsb.d(74):
    Error: found `assert` when expecting `,`\n/tmp/tmpqudqwbsb.d(74): Error: found
    `;` when expecting `,`\n/tmp/tmpqudqwbsb.d(75): Error: found `;` when expecting
    `,`\n/tmp/tmpqudqwbsb.d(76): Error: found `;` when expecting `,`\n/tmp/tmpqudqwbsb.d(77):
    Error: found `;` when expecting `,`\n/tmp/tmpqudqwbsb.d(78): Error: expression
    expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqudqwbsb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an array of\
    \ strings that don't contain the substring anywhere in them. `filter_by_substring`\
    \ should return an array of strings that do contain the substring anywhere in\
    \ them.\n<|/ c |>\n<| c |>\nI fixed the code so it works as intended. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI fixed the code so it works as intended.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed the code so it works\
    \ as intended. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public static List<String> filterBySubstring(List<String> list, String substring)\
    \ {\n    List<String> result = new ArrayList<>();\n    for (String s : list) {\n\
    \        if (s.contains(substring)) {\n            result.add(s);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java,string |>\n<| c\
    \ |>\nThis doesn't work. `filter_by_substring` returns an array of strings that\
    \ don't contain the substring anywhere in them. `filter_by_substring` should return\
    \ an array of strings that do contain the substring anywhere in them.\n<|/ c |>\n\
    <| c |>\nI fixed the code so it works as intended. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=arrays,java,string |>\n<code>\npublic static String[] filterBySubstring(String[]\
    \ strings, String substring) {\n    String[] result = new String[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain the substring anywhere in them.\
    \ `filter_by_substring` should return an array of strings that do contain the\
    \ substring anywhere in them.\n<|/ c |>\n<| c |>\nI fixed the code so it works\
    \ as intended. Thanks for pointing it out.\n<|/ c |>\n<| a tags=arrays,java,string\
    \ |>\n<code>\npublic static String[] filterBySubstring(String[] strings, String\
    \ substring) {\n    String[] result = new String[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++) {\n        if (strings[i].\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpphes92qg.d(21): Error: declaration expected, not `<`\n/tmp/tmpphes92qg.d(24):
    Error: unterminated character constant\n/tmp/tmpphes92qg.d(24): Error: unterminated
    character constant\n/tmp/tmpphes92qg.d(39): Error: declaration expected, not `for`\n/tmp/tmpphes92qg.d(42):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphes92qg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = new List<string>();\n\
    foreach (var item in strings)\n{\n    if (item.Contains(\"a\"))\n    {\n     \
    \   result.Add(item);\n    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to filter out all strings that don't contain\
    \ \"a\", not just those that contain \"a\".\n<|/ c |>\n<| c |>\n: I believe he\
    \ wants to filter out all strings that don't contain \"a\" not just those that\
    \ contain \"a\"\n<|/ c |>\n<| c |>\n: Yes, I believe so. He wants to filter out\
    \ all strings that don't contain \"a\" not just those that contain \"a\".\n<|/\
    \ c |>\n<| c |>\n: Yes, I believe so. He wants to filter out all strings that\
    \ don't contain \"a\" not just those that contain \"a\".\n<|/ c |>\n<| c |>\n\
    : Yes, I believe so. He wants to filter out all strings that don't contain \"\
    a\" not just those that contain \"a\".\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain \"a\", not just those that contain \"a\".\n<|/ c |>\n<| c\
    \ |>\n: I believe he wants to filter out all strings that don't contain \"a\"\
    \ not just those that contain \"a\"\n<|/ c |>\n<| c |>\n: Yes, I believe so. He\
    \ wants to filter out all strings that don't contain \"a\" not just those that\
    \ contain \"a\".\n<|/ c |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq dscore=1 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to filter out all strings that don't contain \n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd2bzsgot.d(21): Error: declaration expected, not `<`\n/tmp/tmpd2bzsgot.d(26):
    Error: declaration expected, not `foreach`\n/tmp/tmpd2bzsgot.d(31): Error: unrecognized
    declaration\n/tmp/tmpd2bzsgot.d(36): Error: unterminated character constant\n/tmp/tmpd2bzsgot.d(36):
    Error: unterminated character constant\n/tmp/tmpd2bzsgot.d(39): Error: unterminated
    character constant\n/tmp/tmpd2bzsgot.d(42): Error: unterminated character constant\n/tmp/tmpd2bzsgot.d(45):
    Error: unterminated character constant\n/tmp/tmpd2bzsgot.d(48): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2bzsgot.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,arrays,string |>\n<| a |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> strings, String substring) {\n    List<String>\
    \ result = new ArrayList<String>();\n    for (String string : strings) {\n   \
    \     if (string.contains(substring)) {\n            result.add(string);\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 tags=java,arrays,string\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,arrays,string |>\n<| a |>\n<code>\npublic static List<String>\
    \ filterBySubstring(List<String> strings, String substring) {\n    List<String>\
    \ result = new ArrayList<String>();\n    for (String string : strings) {\n   \
    \     if (string.contains(substring)) {\n            result.add(string);\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 tags=java,arrays,string\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static List<String> filterBySubstring(List<String>\
    \ strings, String substring) {\n    List<String> result = new ArrayList<String>();\n\
    \    for (String string : strings) {\n        if (string.contains(substring))\
    \ {\n            result.add(string);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,arrays,string |>\n<| a tags=java,arrays,string |>\n<code>\n\
    public static List<String> filterBySubstring(List<String> strings, String substring)\
    \ {\n    List<String> result = new ArrayList<String>();\n    for (String string\
    \ : strings) {\n        if (string.contains(substring)) {\n            result.add(string);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=java,arrays,string\
    \ |>\n<code>\npublic static List<String> filterBySubstring(List<String> strings,\
    \ String substring) {\n    List<String> result = new ArrayList<String>();\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph5rts59i.d(21): Error: declaration expected, not `<`\n/tmp/tmph5rts59i.d(27):
    Error: declaration expected, not `for`\n/tmp/tmph5rts59i.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5rts59i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,filter |>\n<| c |>\nThis doesn't work if you have\
    \ multiple substrings in the same string. For example, if you have \"abc def ghi\"\
    \ and you search for \"abc\" and \"def\", it will return \"abc def ghi\" instead\
    \ of \"abc def\".\n<|/ c |>\n<| c |>\nIt will also return \"abc def ghi\" if you\
    \ search for \"abc\" and \"def\" in the same string. Try it out and see.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used the example you gave in your\
    \ question. Maybe you missed something in your question or you didn't test it\
    \ properly.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example you\
    \ gave in your question. Maybe you missed something in your question or you didn't\
    \ test it properly.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example\
    \ you gave in your question. Maybe you missed something in your question or you\
    \ didn't test it properly.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,filter |>\n<| c |>\nThis doesn't work if you have\
    \ multiple substrings in the same string. For example, if you have \"abc def ghi\"\
    \ and you search for \"abc\" and \"def\", it will return \"abc def ghi\" instead\
    \ of \"abc def\".\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple substrings\
    \ in the same string. For example, if you have \"abc def ghi\" and you search\
    \ for \"abc\" and \"def\", it will return \"abc def ghi\" instead of \"abc def\"\
    .\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple substrings in the\
    \ same string. For example, if you have \"abc def ghi\" and you search for \"\
    abc\" and \"def\", it will return \"abc def ghi\" instead of \"abc def\".\n<|/\
    \ c |>\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp483q5fu2.d(21): Error: declaration expected, not `<`\n/tmp/tmp483q5fu2.d(24):
    Error: unterminated character constant\n/tmp/tmp483q5fu2.d(30): Error: unterminated
    character constant\n/tmp/tmp483q5fu2.d(33): Error: unterminated character constant\n/tmp/tmp483q5fu2.d(36):
    Error: unterminated character constant\n/tmp/tmp483q5fu2.d(43): Error: declaration
    expected, not `foreach`\n/tmp/tmp483q5fu2.d(47): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp483q5fu2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe OP wants to filter out all strings that do not\
    \ contain `substring`, not just those that contain `substring`.\n<|/ c |>\n<|\
    \ c |>\nI see what you mean. I'll update my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it works. But I still don't understand why\
    \ my code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\n\
    I added an explanation to the answer.\n<|/ c |>\n<| c |>\nThank you very much!\
    \ Now I understand why my code doesn't work. :)\n<|/ c |>\n<| a |>\n<code>\nfunction\
    \ filter_by_substring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 tags=arrays,c# |>\n<| c\
    \ |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a tags=arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c\
    \ |>\n<| a \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9wp2h5w.d(21): Error: declaration expected, not `<`\n/tmp/tmpf9wp2h5w.d(27):
    Error: unterminated character constant\n/tmp/tmpf9wp2h5w.d(30): Error: unterminated
    character constant\n/tmp/tmpf9wp2h5w.d(30): Error: unterminated character constant\n/tmp/tmpf9wp2h5w.d(30):
    Error: unterminated character constant\n/tmp/tmpf9wp2h5w.d(36): Error: unterminated
    character constant\n/tmp/tmpf9wp2h5w.d(43): Error: declaration expected, not `for`\n/tmp/tmpf9wp2h5w.d(43):
    Error: no identifier for declarator `i`\n/tmp/tmpf9wp2h5w.d(43): Error: declaration
    expected, not `<`\n/tmp/tmpf9wp2h5w.d(43): Error: declaration expected, not `++`\n/tmp/tmpf9wp2h5w.d(47):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9wp2h5w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an\
    \ array of strings that don't contain `substring`, not an array of strings that\
    \ do contain `substring`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns an array of strings that\
    \ don't contain `substring`, not an array of strings that do contain `substring`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an array of strings that don't contain `substring`, not an array of\
    \ strings that do contain `substring`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I added a test case to my answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sii4r6c.d(22): Error: declaration expected, not `<`\n/tmp/tmp7sii4r6c.d(25):
    Error: unterminated character constant\n/tmp/tmp7sii4r6c.d(25): Error: unterminated
    character constant\n/tmp/tmp7sii4r6c.d(45): Error: declaration expected, not `for`\n/tmp/tmp7sii4r6c.d(45):
    Error: no identifier for declarator `i`\n/tmp/tmp7sii4r6c.d(45): Error: declaration
    expected, not `<`\n/tmp/tmp7sii4r6c.d(45): Error: declaration expected, not `++`\n/tmp/tmp7sii4r6c.d(49):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sii4r6c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe OP wants to filter out all strings that do not\
    \ contain \"a\". Your code returns all strings that contain \"a\".\n<|/ c |>\n\
    <| c |>\nYes, I missed that part. Thanks for pointing it out. I've updated the\
    \ answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport std.array;\n\
    import std.conv;\nimport std.string;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_7fi9zn.d(21): Error: declaration expected, not `<`\n/tmp/tmpj_7fi9zn.d(27):
    Error: unterminated character constant\n/tmp/tmpj_7fi9zn.d(96): Error: identifier
    expected following `package`\n/tmp/tmpj_7fi9zn.d(96): Error: `;` expected\n/tmp/tmpj_7fi9zn.d(97):
    Error: declaration expected, not `{`\n/tmp/tmpj_7fi9zn.d(100): Error: declaration
    expected, not `assert`\n/tmp/tmpj_7fi9zn.d(101): Error: declaration expected,
    not `assert`\n/tmp/tmpj_7fi9zn.d(102): Error: declaration expected, not `assert`\n/tmp/tmpj_7fi9zn.d(103):
    Error: declaration expected, not `assert`\n/tmp/tmpj_7fi9zn.d(104): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_7fi9zn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcde\" in the array and you search for \"a\" it will return \"abcde\"\
    \ instead of \"abc\".\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't\
    \ require a nested loop.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require a nested loop.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8dbmyj8q.d(21): Error: declaration expected, not `<`\n/tmp/tmp8dbmyj8q.d(24):
    Error: unterminated character constant\n/tmp/tmp8dbmyj8q.d(30): Error: unterminated
    character constant\n/tmp/tmp8dbmyj8q.d(33): Error: unterminated character constant\n/tmp/tmp8dbmyj8q.d(38):
    Error: declaration expected, not `for`\n/tmp/tmp8dbmyj8q.d(38): Error: no identifier
    for declarator `i`\n/tmp/tmp8dbmyj8q.d(38): Error: declaration expected, not `<`\n/tmp/tmp8dbmyj8q.d(38):
    Error: declaration expected, not `++`\n/tmp/tmp8dbmyj8q.d(42): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dbmyj8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphxikbh_t.d(15): Error: found `in` when expecting `;`\n/tmp/tmphxikbh_t.d(22):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmphxikbh_t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=0 |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a\
    \ tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = \n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjoxar6va.d(15): Error: found `in` when expecting `;`\n/tmp/tmpjoxar6va.d(24):
    Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(29): Error: declaration
    expected, not `<`\n/tmp/tmpjoxar6va.d(34): Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(39):
    Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(44): Error: declaration
    expected, not `<`\n/tmp/tmpjoxar6va.d(49): Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(54):
    Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(59): Error: declaration
    expected, not `<`\n/tmp/tmpjoxar6va.d(64): Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(69):
    Error: declaration expected, not `<`\n/tmp/tmpjoxar6va.d(74): Error: declaration
    expected, not `<`\n/tmp/tmpjoxar6va.d(83): Error: declaration expected, not `assert`\n/tmp/tmpjoxar6va.d(84):
    Error: declaration expected, not `assert`\n/tmp/tmpjoxar6va.d(85): Error: declaration
    expected, not `assert`\n/tmp/tmpjoxar6va.d(86): Error: declaration expected, not
    `assert`\n/tmp/tmpjoxar6va.d(87): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjoxar6va.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0e_a2z4m.d(21): Error: declaration expected, not `<`\n/tmp/tmp0e_a2z4m.d(26):
    Error: semicolon expected, not `.`\n/tmp/tmp0e_a2z4m.d(26): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmp0e_a2z4m.d(27): Error: semicolon
    expected, not `.`\n/tmp/tmp0e_a2z4m.d(27): Error: no identifier for declarator
    `.Linq`\n/tmp/tmp0e_a2z4m.d(28): Error: semicolon expected, not `.`\n/tmp/tmp0e_a2z4m.d(28):
    Error: no identifier for declarator `.Text`\n/tmp/tmp0e_a2z4m.d(29): Error: semicolon
    expected, not `.`\n/tmp/tmp0e_a2z4m.d(29): Error: no identifier for declarator
    `.Text.RegularExpressions`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0e_a2z4m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c# dscore=0 |>\n\
    <| a tags=string,arrays,c# |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\npublic static string[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic static string[] filterBySubstring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_0_770xl.d(21): Error: declaration expected, not `<`\n/tmp/tmp_0_770xl.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp_0_770xl.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp_0_770xl.d(28): Error: declaration expected, not `<`\n/tmp/tmp_0_770xl.d(28):
    Error: declaration expected, not `++`\n/tmp/tmp_0_770xl.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0_770xl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[]\
    \ result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.Contains(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\"\
    \ };\nstring[] result = strings.Where(s => s.Contains(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.Contains(\"a\")).ToArray();\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptmfjkybd.d(21): Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(27):
    Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(33): Error: declaration
    expected, not `<`\n/tmp/tmptmfjkybd.d(39): Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(45):
    Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(51): Error: declaration
    expected, not `<`\n/tmp/tmptmfjkybd.d(57): Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(63):
    Error: declaration expected, not `<`\n/tmp/tmptmfjkybd.d(69): Error: identifier
    expected following `.`, not `unittest`\n/tmp/tmptmfjkybd.d(70): Error: found `{`
    when expecting `,`\n/tmp/tmptmfjkybd.d(71): Error: expression expected, not `alias`\n/tmp/tmptmfjkybd.d(71):
    Error: found `candidate` when expecting `,`\n/tmp/tmptmfjkybd.d(71): Error: expression
    expected, not `=`\n/tmp/tmptmfjkybd.d(71): Error: found `filter_by_substring`
    when expecting `,`\n/tmp/tmptmfjkybd.d(71): Error: expression expected, not `;`\n/tmp/tmptmfjkybd.d(73):
    Error: found `assert` when expecting `,`\n/tmp/tmptmfjkybd.d(73): Error: found
    `;` when expecting `,`\n/tmp/tmptmfjkybd.d(74): Error: found `;` when expecting
    `,`\n/tmp/tmptmfjkybd.d(75): Error: found `;` when expecting `,`\n/tmp/tmptmfjkybd.d(76):
    Error: found `;` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptmfjkybd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2d8ummrf.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2d8ummrf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI really like this solution, however it only works\
    \ with strings. I need a solution that works with any type that implements IEnumerable.\
    \ I've updated the question to reflect this.\n<|/ c |>\n<| c |>\n: I updated my\
    \ answer with a solution that works with any type that implements IEnumerable.\n\
    <|/ c |>\n<| c |>\nThanks, I really like this solution. I was hoping for a solution\
    \ that didn't require me to write an extension method for each type that implements\
    \ IEnumerable, but I guess that's not possible.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\npublic static IEnumerable<T> Filter<T>(this IEnumerable<T> source, Func<T,\
    \ bool> predicate)\n{\n    foreach (T item in source)\n    {\n        if (predicate(item))\n\
    \            yield return item;\n    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<|\
    \ c |>\nThis doesn't work if you have a `List<T>` as source (which `List<T>` implements\
    \ `IEnumerable<T>`).\n<|/ c |>\n<| c |>\n: It works with any type that implements\
    \ IEnumerable<T>. List<T> implements IEnumerable<T>.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer with a solution that works with any type that implements IEnumerable.\n\
    <|/ c |>\n<| c |>\n: I updated my answer with a solution that works with any type\
    \ that implements IEnumerable.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ IEnumerable<T> Filter<T>(this IEnumerable<T> source, Func<T, bool> predicate)\n\
    {\n    foreach (T item in source)\n    {\n        if (predicate(item))\n     \
    \       yield return item;\n    }\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\npublic static IEnumerable<T> Filter<T>(this IEnumerable<T> source,\
    \ Func<T, bool> predicate)\n{\n    foreach (T item in source)\n    {\n       \
    \ if (predicate(item))\n            yield return item;\n    }\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\npublic static IEnumerable<T> \n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuk8jgdno.d(21): Error: declaration expected, not `<`\n/tmp/tmpuk8jgdno.d(24):
    Error: unterminated character constant\n/tmp/tmpuk8jgdno.d(30): Error: unterminated
    character constant\n/tmp/tmpuk8jgdno.d(30): Error: unterminated character constant\n/tmp/tmpuk8jgdno.d(40):
    Error: unrecognized declaration\n/tmp/tmpuk8jgdno.d(45): Error: unterminated character
    constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk8jgdno.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq1pyef7p.d(21): Error: declaration expected, not `<`\n/tmp/tmpq1pyef7p.d(26):
    Error: semicolon expected, not `.`\n/tmp/tmpq1pyef7p.d(26): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpq1pyef7p.d(27): Error: semicolon
    expected, not `.`\n/tmp/tmpq1pyef7p.d(27): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpq1pyef7p.d(28): Error: semicolon expected, not `.`\n/tmp/tmpq1pyef7p.d(28):
    Error: no identifier for declarator `.Text`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq1pyef7p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \       {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = string\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nctq5l3.d(21): Error: declaration expected, not `<`\n/tmp/tmp3nctq5l3.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp3nctq5l3.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp3nctq5l3.d(28): Error: declaration expected, not `<`\n/tmp/tmp3nctq5l3.d(28):
    Error: declaration expected, not `++`\n/tmp/tmp3nctq5l3.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nctq5l3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but\
    \ this doesn't really answer the question. I'm looking for a way to do this without\
    \ using LINQ. I'm also looking for a way to do this without using any external\
    \ libraries.\n<|/ c |>\n<| c |>\nI appreciate your answer, but this doesn't really\
    \ answer the question. I'm looking for a way to do this without using LINQ. I'm\
    \ also looking for a way to do this without using any external libraries.\n<|/\
    \ c |>\n<| c |>\nI appreciate your answer, but this doesn't really answer the\
    \ question. I'm looking for a way to do this without using LINQ. I'm also looking\
    \ for a way to do this without using any external libraries.\n<|/ c |>\n<| c |>\n\
    I appreciate your answer, but this doesn't really answer the question. I'm looking\
    \ for a way to do this without using LINQ. I'm also looking for a way to do this\
    \ without using any external libraries.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't really answer the question. I'm looking for a way to\
    \ do this without using LINQ. I'm also looking for a way to do this without using\
    \ any external libraries.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa8yuus3d.d(23): Error: declaration expected, not `<`\n/tmp/tmpa8yuus3d.d(26):
    Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(26): Error: unterminated
    character constant\n/tmp/tmpa8yuus3d.d(26): Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(29):
    Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(29): Error: unterminated
    character constant\n/tmp/tmpa8yuus3d.d(29): Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(32):
    Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(32): Error: unterminated
    character constant\n/tmp/tmpa8yuus3d.d(32): Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(35):
    Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(35): Error: unterminated
    character constant\n/tmp/tmpa8yuus3d.d(35): Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(38):
    Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(38): Error: unterminated
    character constant\n/tmp/tmpa8yuus3d.d(38): Error: unterminated character constant\n/tmp/tmpa8yuus3d.d(43):
    Error: semicolon expected, not `.`\n/tmp/tmpa8yuus3d.d(43): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpa8yuus3d.d(44): Error: semicolon
    expected, not `.`\n/tmp/tmpa8yuus3d.d(44): Error: no identifier for declarator
    `.Linq`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8yuus3d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,substring |>\n<| a tags=string,arrays,c#,substring\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis code will throw an exception if `substring` is\
    \ an empty string. `Contains` will throw an exception if `substring` is null.\n\
    <|/ c |>\n<| c |>\nGood catch. Fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=string,arrays,c#,substring |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,arrays,c#,substring |>\n<| a tags=string,arrays,c#,substring\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n        {\n            result.Add(s);\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0rbegqqg.d(21): Error: declaration expected, not `<`\n/tmp/tmp0rbegqqg.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmp0rbegqqg.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rbegqqg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for your answer, but this doesn't\
    \ work. \nThe result should be [\"abc\", \"bacd\", \"array\"]\n<|/ c |>\n<| c\
    \ |>\n: I updated my answer. Now it works as you want.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tag\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpydbk9b18.d(21): Error: declaration expected, not `<`\n/tmp/tmpydbk9b18.d(24):
    Error: unterminated character constant\n/tmp/tmpydbk9b18.d(33): Error: declaration
    expected, not `for`\n/tmp/tmpydbk9b18.d(33): Error: no identifier for declarator
    `i`\n/tmp/tmpydbk9b18.d(33): Error: declaration expected, not `<`\n/tmp/tmpydbk9b18.d(33):
    Error: declaration expected, not `++`\n/tmp/tmpydbk9b18.d(37): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydbk9b18.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic static string[]\
    \ FilterString(string[] input, string search)\n{\n    List<string> result = new\
    \ List<string>();\n    foreach (string s in input)\n    {\n        if (s.Contains(search))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static string[] FilterString(string[] input, string search)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in input)\n    {\n     \
    \   if (s.Contains(search))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmqfbql2e.d(23): Error: declaration expected, not `<`\n/tmp/tmpmqfbql2e.d(30):
    Error: declaration expected, not `foreach`\n/tmp/tmpmqfbql2e.d(35): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqfbql2e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n        {\n      \
    \      result.Add(\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpptgj_bzp.d(15): Error: found `in` when expecting `;`\n/tmp/tmpptgj_bzp.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpptgj_bzp.d(29): Error: declaration
    expected, not `foreach`\n/tmp/tmpptgj_bzp.d(34): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptgj_bzp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring[] filter_by_substring(string[] strings, string substring)\n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,arrays,c# |>\n<| a tags=string,arrays,c# |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring)\n{\n    \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3l_j4wp_.d(21): Error: declaration expected, not `<`\n/tmp/tmp3l_j4wp_.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp3l_j4wp_.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp3l_j4wp_.d(28): Error: declaration expected, not `<`\n/tmp/tmp3l_j4wp_.d(28):
    Error: declaration expected, not `++`\n/tmp/tmp3l_j4wp_.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3l_j4wp_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c#,arrays,string,substring |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,arrays,string,substring\
    \ |>\n<| a tags=c#,arrays,string,substring |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,arrays,string,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,arrays,string,substring\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring substring = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,arrays,string,substring\
    \ |>\n<| a tags=c#,arrays,string,substring |>\n<code>\nstring[] stringArray =\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf2d6uwc3.d(21): Error: declaration expected, not `<`\n/tmp/tmpf2d6uwc3.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpf2d6uwc3.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpf2d6uwc3.d(42): Error: declaration expected, not `<`\n/tmp/tmpf2d6uwc3.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpf2d6uwc3.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpf2d6uwc3.d(63): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2d6uwc3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile. `string[]\
    \ filterBySubstring(string[] strings, string substring)` should be `string[] filterBySubstring(string[]\
    \ strings, string substring)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1mcj3xvl.d(21): Error: declaration expected, not `<`\n/tmp/tmp1mcj3xvl.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmp1mcj3xvl.d(32): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mcj3xvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays dscore=2\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n \
    \   if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tag\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0effzv6.d(21): Error: declaration expected, not `<`\n/tmp/tmpd0effzv6.d(26):
    Error: declaration expected, not `for`\n/tmp/tmpd0effzv6.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmpd0effzv6.d(26): Error: declaration expected, not `<`\n/tmp/tmpd0effzv6.d(26):
    Error: declaration expected, not `++`\n/tmp/tmpd0effzv6.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0effzv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input array of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n\
    \    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6qibd1y.d(104): Error: found `unittest` instead of statement\n/tmp/tmpd6qibd1y.d(113):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd6qibd1y.d(113):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6qibd1y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=0 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=arrays,c#,string |>\n<| a tags=arrays,c#,string |>\n<code>\n\
    public static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic static string[] FilterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n<|\
    \ a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=arrays,c#,string\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.To\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3apzbwja.d(20): Error: declaration expected, not `<`\n/tmp/tmp3apzbwja.d(27):
    Error: declaration expected, not `foreach`\n/tmp/tmp3apzbwja.d(31): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3apzbwja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I didn't know that I can use\
    \ string[] as an argument in methods. But I still don't understand how I can use\
    \ that method with my own string[]. Can you give me an example of how to use it?\n\
    <|/ c |>\n<| c |>\nI added an example to the answer.\n<|/ c |>\n<| c |>\nThank\
    \ you very much! I understand it now!\n<|/ c |>\n<| a tags=java,arrays,string\
    \ |>\n<code>\npublic static void main(String[] args) {\n    String[] strings =\
    \ new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n    String[] result =\
    \ filterBySubstring(strings, \"a\");\n    System.out.println(Arrays.toString(result));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe32w1edx.d(21): Error: declaration expected, not `<`\n/tmp/tmpe32w1edx.d(24):
    Error: unterminated character constant\n/tmp/tmpe32w1edx.d(24): Error: unterminated
    character constant\n/tmp/tmpe32w1edx.d(37): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmpe32w1edx.d(37): Error: no identifier for declarator
    `System`\n/tmp/tmpe32w1edx.d(37): Error: declaration expected, not `out`\n/tmp/tmpe32w1edx.d(38):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe32w1edx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1kmn2wez.d(23): Error: declaration expected, not `<`\n/tmp/tmp1kmn2wez.d(30):
    Error: declaration expected, not `for`\n/tmp/tmp1kmn2wez.d(30): Error: no identifier
    for declarator `i`\n/tmp/tmp1kmn2wez.d(30): Error: declaration expected, not `<`\n/tmp/tmp1kmn2wez.d(30):
    Error: no identifier for declarator `i`\n/tmp/tmp1kmn2wez.d(30): Error: declaration
    expected, not `++`\n/tmp/tmp1kmn2wez.d(35): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1kmn2wez.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwygse4ye.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwygse4ye.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0c4xu_wy.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0c4xu_wy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like the idea of using LINQ, but this\
    \ doesn't work if you have a string array that contains strings that don't contain\
    \ the substring.\n<|/ c |>\n<| c |>\nI added a version that works with strings\
    \ that don't contain the substring.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with strings that don't contain the substring.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyia3czgs.d(21): Error: declaration expected, not `<`\n/tmp/tmpyia3czgs.d(24):
    Error: unterminated character constant\n/tmp/tmpyia3czgs.d(24): Error: unterminated
    character constant\n/tmp/tmpyia3czgs.d(27): Error: unterminated character constant\n/tmp/tmpyia3czgs.d(30):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyia3czgs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k3isndn.d(15): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_k3isndn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,arrays,c#,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,c#,substring |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer. Code-only answers are discouraged\
    \ on Stack Overflow.\n<|/ c |>\n<| a tags=string,arrays,c#,substring |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,arrays,c#,substring |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 tags=string,arrays,c#,substring |>\n<| c |>\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfg5wcilu.d(21): Error: declaration expected, not `<`\n/tmp/tmpfg5wcilu.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmpfg5wcilu.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfg5wcilu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nI like the idea of using LINQ, but this\
    \ doesn't work for me. I get an error that says \"The type arguments for method\
    \ 'System.Linq.Enumerable.SelectMany<TSource,TResult>(System.Collections.Generic.IEnumerable<TSource>,\
    \ System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>)' cannot\
    \ be inferred from the usage. Try specifying the type arguments explicitly.\"\
    \ I'm new to LINQ, so I'm not sure how to fix this.\n<|/ c |>\n<| c |>\nI fixed\
    \ the error, but now I'm getting a new error: \"Cannot implicitly convert type\
    \ 'string[]' to 'string'\" on the line \"return string[] result;\"\n<|/ c |>\n\
    <| c |>\nI fixed the error by changing \"string[] result;\" to \"string result;\"\
    \ but now I'm getting a new error: \"Cannot implicitly convert type 'string[]'\
    \ to 'string'\" on the line \"return result;\"\n<|/ c |>\n<| c |>\nI fixed the\
    \ error by changing \"string[] result;\" to \"string result;\" but now I'm getting\
    \ a new error: \"Cannot implicitly convert type 'string[]' to 'string'\" on the\
    \ line \"return result;\"\n<|/ c |>\n<| c |>\nI fixed the error by changing \"\
    string[] result;\" to \"string result;\" but now I'm getting a new error: \"Cannot\
    \ implicitly convert type 'string[]' to 'string'\" on the line \"return result;\"\
    \n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7g51fl09.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7g51fl09.d(22):
    Error: declaration expected, not `<`\n/tmp/tmp7g51fl09.d(25): Error: unterminated
    character constant\n/tmp/tmp7g51fl09.d(25): Error: unterminated character constant\n/tmp/tmp7g51fl09.d(25):
    Error: unterminated character constant\n/tmp/tmp7g51fl09.d(28): Error: unterminated
    character constant\n/tmp/tmp7g51fl09.d(31): Error: unterminated character constant\n/tmp/tmp7g51fl09.d(34):
    Error: unterminated character constant\n/tmp/tmp7g51fl09.d(37): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7g51fl09.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if you have multiple\
    \ occurrences of the substring in the string. For example, if you have \"abcabc\"\
    \ and \"abc\", it will return \"abcabc\" instead of \"abc\".\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. I will update my answer to include a\
    \ solution that does that.\n<|/ c |>\n<| c |>\nI tested it again and it does work.\
    \ My apologies. I must have had a typo when I first tested it.\n<|/ c |>\n<| c\
    \ |>\nNo problem. Thanks for testing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n \
    \   if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ i++)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd7i8f7zs.d(21): Error: declaration expected, not `<`\n/tmp/tmpd7i8f7zs.d(24):
    Error: unterminated character constant\n/tmp/tmpd7i8f7zs.d(38): Error: declaration
    expected, not `for`\n/tmp/tmpd7i8f7zs.d(38): Error: no identifier for declarator
    `i`\n/tmp/tmpd7i8f7zs.d(38): Error: declaration expected, not `<`\n/tmp/tmpd7i8f7zs.d(38):
    Error: no identifier for declarator `i`\n/tmp/tmpd7i8f7zs.d(38): Error: declaration
    expected, not `++`\n/tmp/tmpd7i8f7zs.d(42): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7i8f7zs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a tags=string,arrays,c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n        {\n            result.Add(s);\n        }\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string[] FilterBySubstring(string[] strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n        {\n            result.Add(s);\n    \
    \    }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao0v9knj.d(21): Error: declaration expected, not `<`\n/tmp/tmpao0v9knj.d(28):
    Error: declaration expected, not `foreach`\n/tmp/tmpao0v9knj.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpao0v9knj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    String[]\
    \ result = filter_by_substring(arr, \"a\");\n    System.out.println(Arrays.toString(result));\n\
    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvz_s00o.d(15): Error: found `in` when expecting `;`\n/tmp/tmpwvz_s00o.d(24):
    Error: declaration expected, not `<`\n/tmp/tmpwvz_s00o.d(31): Error: identifier
    expected following `.` instead of `out`\n/tmp/tmpwvz_s00o.d(31): Error: no identifier
    for declarator `System`\n/tmp/tmpwvz_s00o.d(31): Error: declaration expected,
    not `out`\n/tmp/tmpwvz_s00o.d(32): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwvz_s00o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzmwljclw.d(21): Error: declaration expected, not `<`\n/tmp/tmpzmwljclw.d(26):
    Error: semicolon expected, not `.`\n/tmp/tmpzmwljclw.d(26): Error: no identifier
    for declarator `.Collections.Generic`\n/tmp/tmpzmwljclw.d(27): Error: semicolon
    expected, not `.`\n/tmp/tmpzmwljclw.d(27): Error: no identifier for declarator
    `.Linq`\n/tmp/tmpzmwljclw.d(28): Error: semicolon expected, not `.`\n/tmp/tmpzmwljclw.d(28):
    Error: no identifier for declarator `.Text`\n/tmp/tmpzmwljclw.d(29): Error: semicolon
    expected, not `.`\n/tmp/tmpzmwljclw.d(29): Error: no identifier for declarator
    `.Text.RegularExpressions`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmwljclw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] strArray = new string[] { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = strArray.Where(x\
    \ => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\n\
    string[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nstring[] strArray = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[]\
    \ result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strArray\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = strArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpajzew0wh.d(21): Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(28):
    Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(35): Error: declaration
    expected, not `<`\n/tmp/tmpajzew0wh.d(42): Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(49):
    Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(56): Error: declaration
    expected, not `<`\n/tmp/tmpajzew0wh.d(63): Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(70):
    Error: declaration expected, not `<`\n/tmp/tmpajzew0wh.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpajzew0wh.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpajzew0wh.d(78): Error: declaration expected, not `assert`\n/tmp/tmpajzew0wh.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpajzew0wh.d(80): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpajzew0wh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"\
    a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,string,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"\
    cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\"\
    , \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result\
    \ = stringArray.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = { \"abc\"\
    , \"bacd\", \"cde\", \"array\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tag\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5w_d83j9.d(21): Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(28):
    Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(35): Error: declaration
    expected, not `<`\n/tmp/tmp5w_d83j9.d(42): Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(49):
    Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(56): Error: declaration
    expected, not `<`\n/tmp/tmp5w_d83j9.d(63): Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(70):
    Error: declaration expected, not `<`\n/tmp/tmp5w_d83j9.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmp5w_d83j9.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmp5w_d83j9.d(79): Error: declaration expected, not `assert`\n/tmp/tmp5w_d83j9.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmp5w_d83j9.d(81): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5w_d83j9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I actually want to filter\
    \ out all strings that do not contain given substring. Your code returns all strings\
    \ that contain given substring.\n<|/ c |>\n<| c |>\nOh, I see. I've updated my\
    \ answer with a new function which does exactly what you want.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer! I actually want to filter out all strings that do\
    \ not contain given substring. Your code returns all strings that contain given\
    \ substring. My code returns all strings that do not contain given substring.\
    \ Your code returns all strings that contain given substring.\n<|/ c |>\n<| c\
    \ |>\nOh, I see. I've updated my answer with a new function which does exactly\
    \ what you want.\n<|/ c |>\n<| c |>\nThanks for your answer! I actually want to\
    \ filter out all strings that do not contain given substring. Your code returns\
    \ all strings that contain given substring. My code returns all strings that do\
    \ not contain given substring. Your code returns all strings that contain given\
    \ substring.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring [] strings = new string[]{\"\
    abc\", \"bacd\", \"cde\", \"array\"};\nstring substring = \"a\";\nstring[] result\
    \ = new string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7y0pjhbh.d(22): Error: declaration expected, not `<`\n/tmp/tmp7y0pjhbh.d(28):
    Error: unterminated character constant\n/tmp/tmp7y0pjhbh.d(34): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y0pjhbh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/\
    \ c |>\n<| c |>\nI added a more efficient version that uses `StringBuilder` instead\
    \ of `StringBuffer`.\n<|/ c |>\n<| c |>\nThanks so much for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/\
    \ c |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| c |>\nThanks so much for the help! I appreciate it!\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much\
    \ for the help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much for the help!\
    \ I appreciate it!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplsbdwy7l.d(21): Error: declaration expected, not `<`\n/tmp/tmplsbdwy7l.d(35):
    Error: declaration expected, not `for`\n/tmp/tmplsbdwy7l.d(35): Error: no identifier
    for declarator `i`\n/tmp/tmplsbdwy7l.d(35): Error: declaration expected, not `<`\n/tmp/tmplsbdwy7l.d(35):
    Error: no identifier for declarator `i`\n/tmp/tmplsbdwy7l.d(35): Error: declaration
    expected, not `++`\n/tmp/tmplsbdwy7l.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplsbdwy7l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays |>\n<| c |>\nThis doesn't work if you have a\
    \ string array containing \"abc\" and \"abd\" for example. You'll get \"abc\"\
    \ twice in the result array.\n<|/ c |>\n<| c |>\n: Yes, I see what you mean. I've\
    \ edited my answer to fix this.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfuwdh4yg.d(22): Error: declaration expected, not `<`\n/tmp/tmpfuwdh4yg.d(25):
    Error: unterminated character constant\n/tmp/tmpfuwdh4yg.d(25): Error: unterminated
    character constant\n/tmp/tmpfuwdh4yg.d(28): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuwdh4yg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring =\
    \ \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 tags=c#,string,arrays |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp78379o82.d(21): Error: declaration expected, not `<`\n/tmp/tmp78379o82.d(28):
    Error: declaration expected, not `<`\n/tmp/tmp78379o82.d(35): Error: declaration
    expected, not `<`\n/tmp/tmp78379o82.d(45): Error: declaration expected, not `<`\n/tmp/tmp78379o82.d(52):
    Error: declaration expected, not `<`\n/tmp/tmp78379o82.d(62): Error: declaration
    expected, not `<`\n/tmp/tmp78379o82.d(74): Error: declaration expected, not `assert`\n/tmp/tmp78379o82.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmp78379o82.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmp78379o82.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmp78379o82.d(78): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp78379o82.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n     \
    \   result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,c#,string dscore=1\
    \ |>\n<| a tags=arrays,c#,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,c#,string\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; i++)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a d\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp441bsav5.d(21): Error: declaration expected, not `<`\n/tmp/tmp441bsav5.d(26):
    Error: declaration expected, not `for`\n/tmp/tmp441bsav5.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmp441bsav5.d(26): Error: declaration expected, not `<`\n/tmp/tmp441bsav5.d(26):
    Error: no identifier for declarator `i`\n/tmp/tmp441bsav5.d(26): Error: declaration
    expected, not `++`\n/tmp/tmp441bsav5.d(30): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp441bsav5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadriv4b9.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpadriv4b9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution. Very clean and easy to understand.\
    \ Thanks!\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result =\
    \ new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n \
    \   if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvvhftw1i.d(21): Error: declaration expected, not `<`\n/tmp/tmpvvhftw1i.d(29):
    Error: declaration expected, not `for`\n/tmp/tmpvvhftw1i.d(29): Error: no identifier
    for declarator `i`\n/tmp/tmpvvhftw1i.d(29): Error: declaration expected, not `<`\n/tmp/tmpvvhftw1i.d(29):
    Error: declaration expected, not `++`\n/tmp/tmpvvhftw1i.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvhftw1i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c# |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c\
    \ |>\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ml0kv3x.d(21): Error: declaration expected, not `<`\n/tmp/tmp5ml0kv3x.d(28):
    Error: declaration expected, not `for`\n/tmp/tmp5ml0kv3x.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmp5ml0kv3x.d(28): Error: declaration expected, not `<`\n/tmp/tmp5ml0kv3x.d(28):
    Error: no identifier for declarator `i`\n/tmp/tmp5ml0kv3x.d(28): Error: declaration
    expected, not `++`\n/tmp/tmp5ml0kv3x.d(32): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ml0kv3x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqekzptd.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsqekzptd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ifuvbv6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ifuvbv6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder why you didn't\
    \ use std.algorithm.filter? It would be more efficient and easier to read.\n<|/\
    \ c |>\n<| c |>\nI didn't know about std.algorithm.filter. Thanks for pointing\
    \ it out. I'll update my answer with your suggestion.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI like Andrey's answer, but here's another one that uses std.algorithm.filter:\n\
    <code>\nimport std.algorithm;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7igtp26f.d(21): Error: declaration expected, not `<`\n/tmp/tmp7igtp26f.d(24):
    Error: unterminated character constant\n/tmp/tmp7igtp26f.d(27): Error: unterminated
    character constant\n/tmp/tmp7igtp26f.d(27): Error: unterminated character constant\n/tmp/tmp7igtp26f.d(30):
    Error: unterminated character constant\n/tmp/tmp7igtp26f.d(30): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7igtp26f.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray = {\
    \ \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a dscore=3 |>\n<code>\nstring[] stringArray\
    \ = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays,substring |>\n<| a tags=string,c#,arrays,substring\
    \ |>\n<code>\nstring[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\n\
    string substring = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=string,c#,arrays,substring |>\n<code>\n\
    string[] stringArray = { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = stringArray.Where(s => \nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbfl62ku.d(21): Error: declaration expected, not `<`\n/tmp/tmphbfl62ku.d(28):
    Error: declaration expected, not `<`\n/tmp/tmphbfl62ku.d(35): Error: declaration
    expected, not `<`\n/tmp/tmphbfl62ku.d(42): Error: declaration expected, not `<`\n/tmp/tmphbfl62ku.d(49):
    Error: declaration expected, not `<`\n/tmp/tmphbfl62ku.d(56): Error: declaration
    expected, not `<`\n/tmp/tmphbfl62ku.d(63): Error: declaration expected, not `<`\n/tmp/tmphbfl62ku.d(70):
    Error: expression expected, not `unittest`\n/tmp/tmphbfl62ku.d(71): Error: found
    `{` when expecting `,`\n/tmp/tmphbfl62ku.d(72): Error: expression expected, not
    `alias`\n/tmp/tmphbfl62ku.d(72): Error: found `candidate` when expecting `,`\n/tmp/tmphbfl62ku.d(72):
    Error: expression expected, not `=`\n/tmp/tmphbfl62ku.d(72): Error: found `filter_by_substring`
    when expecting `,`\n/tmp/tmphbfl62ku.d(72): Error: expression expected, not `;`\n/tmp/tmphbfl62ku.d(74):
    Error: found `assert` when expecting `,`\n/tmp/tmphbfl62ku.d(74): Error: found
    `;` when expecting `,`\n/tmp/tmphbfl62ku.d(75): Error: found `;` when expecting
    `,`\n/tmp/tmphbfl62ku.d(76): Error: found `;` when expecting `,`\n/tmp/tmphbfl62ku.d(77):
    Error: found `;` when expecting `,`\n/tmp/tmphbfl62ku.d(78): Error: expression
    expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbfl62ku.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question, which is about a\
    \ specific string being in a list of strings. Your answer doesn't even attempt\
    \ to do that.\n<|/ c |>\n<| c |>\nI see your point, but I believe that my answer\
    \ does answer the question. He wants to filter out strings that contain given\
    \ substring. He also stated that he is using C#, so I believe that my answer does\
    \ exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what he wants.\
    \ I believe that my answer does exactly what he wants. I believe that my answer\
    \ does exactly what he wants. I believe that my answer does exactly what \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpblx7n_a2.d(15): Error: found `in` when expecting `;`\n/tmp/tmpblx7n_a2.d(22):
    Error: declaration expected, not `<`\n/tmp/tmpblx7n_a2.d(25): Error: unterminated
    character constant\n/tmp/tmpblx7n_a2.d(25): Error: unterminated character constant\n/tmp/tmpblx7n_a2.d(33):
    Error: declaration expected, not `assert`\n/tmp/tmpblx7n_a2.d(34): Error: declaration
    expected, not `assert`\n/tmp/tmpblx7n_a2.d(35): Error: declaration expected, not
    `assert`\n/tmp/tmpblx7n_a2.d(36): Error: declaration expected, not `assert`\n/tmp/tmpblx7n_a2.d(37):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblx7n_a2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI like this solution, but I believe it\
    \ would be better to use a `HashSet<string>` instead of a `List<string>` for the\
    \ `result` array. `HashSet` has better performance characteristics than `List`.\n\
    <|/ c |>\n<| c |>\nI agree with you, HashSet is better than List in this case.\
    \ Thanks for pointing out.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8n4phhb.d(15): Error: found `in` when expecting `;`\n/tmp/tmpm8n4phhb.d(22):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpm8n4phhb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] arr = {\"abc\", \"bacd\", \"cde\", \"array\"};\n    System.out.println(filterBySubstring(arr,\
    \ \"a\"));\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n   \
    \ assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcx9ybby.d(21): Error: declaration expected, not `<`\n/tmp/tmppcx9ybby.d(27):
    Error: identifier expected following `.` instead of `out`\n/tmp/tmppcx9ybby.d(27):
    Error: no identifier for declarator `System`\n/tmp/tmppcx9ybby.d(27): Error: declaration
    expected, not `out`\n/tmp/tmppcx9ybby.d(28): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppcx9ybby.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input array of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input array of strings only for\
    \ ones that contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiaizbupx.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiaizbupx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c# |>\n<| c |>\nThis doesn't answer the question. OP wants to\
    \ know if there is a way to do this without looping through the array twice.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll leave this here\
    \ for future reference, but I guess I'll delete it after OP clarifies their question.\n\
    <|/ c |>\n<| c |>\nI agree with you. OP should clarify their question before answering.\n\
    <|/ c |>\n<| c |>\nI agree with you too. OP should clarify their question before\
    \ answering.\n<|/ c |>\n<| c |>\nI agree with you too. OP should clarify their\
    \ question before answering.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] arr\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring[] arr2 = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprst09nf2.d(21): Error: declaration expected, not `<`\n/tmp/tmprst09nf2.d(24):
    Error: unterminated character constant\n/tmp/tmprst09nf2.d(27): Error: unterminated
    character constant\n/tmp/tmprst09nf2.d(27): Error: unterminated character constant\n/tmp/tmprst09nf2.d(41):
    Error: semicolon expected, not `{`\n/tmp/tmprst09nf2.d(41): Error: declaration
    expected, not `{`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprst09nf2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=2\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a \nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpni9su13a.d(21): Error: declaration expected, not `<`\n/tmp/tmpni9su13a.d(26):
    Error: declaration expected, not `for`\n/tmp/tmpni9su13a.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmpni9su13a.d(26): Error: declaration expected, not `<`\n/tmp/tmpni9su13a.d(26):
    Error: declaration expected, not `++`\n/tmp/tmpni9su13a.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni9su13a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3jjaqxy.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3jjaqxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n    {\n \
    \       result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n    {\n \
    \       result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n    {\n \
    \       result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk0920o7_.d(23): Error: declaration expected, not `<`\n/tmp/tmpk0920o7_.d(28):
    Error: declaration expected, not `for`\n/tmp/tmpk0920o7_.d(28): Error: no identifier
    for declarator `i`\n/tmp/tmpk0920o7_.d(28): Error: declaration expected, not `<`\n/tmp/tmpk0920o7_.d(28):
    Error: no identifier for declarator `i`\n/tmp/tmpk0920o7_.d(28): Error: declaration
    expected, not `++`\n/tmp/tmpk0920o7_.d(33): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0920o7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].contains(substring))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I\
    \ am not allowed to use any libraries other than System.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries other than System.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ System.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries other\
    \ than System.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n\
    \    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any libraries other than System.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries other than System.\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ System.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] result =\
    \ new string[\nunittest\n{\n    alias candidate = filter_by_substring;\n\n   \
    \ assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcubvg75g.d(21): Error: declaration expected, not `<`\n/tmp/tmpcubvg75g.d(27):
    Error: unterminated character constant\n/tmp/tmpcubvg75g.d(33): Error: unterminated
    character constant\n/tmp/tmpcubvg75g.d(41): Error: declaration expected, not `for`\n/tmp/tmpcubvg75g.d(41):
    Error: no identifier for declarator `i`\n/tmp/tmpcubvg75g.d(41): Error: declaration
    expected, not `<`\n/tmp/tmpcubvg75g.d(41): Error: declaration expected, not `++`\n/tmp/tmpcubvg75g.d(44):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcubvg75g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n       \
    \ result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp52g8jphl.d(21): Error: declaration expected, not `<`\n/tmp/tmp52g8jphl.d(26):
    Error: declaration expected, not `for`\n/tmp/tmp52g8jphl.d(26): Error: no identifier
    for declarator `i`\n/tmp/tmp52g8jphl.d(26): Error: declaration expected, not `<`\n/tmp/tmp52g8jphl.d(26):
    Error: declaration expected, not `++`\n/tmp/tmp52g8jphl.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52g8jphl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring = \"a\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays,linq |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,linq |>\n<| a tags=c#,string,arrays,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bacd\", \"cde\", \"\
    array\" };\nstring substring = \"a\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays,linq |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bacd\", \"cde\", \"array\" };\nstring substring\
    \ = \"a\";\nstring[] result = strings.Where(s => s.\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5uzwpbt9.d(15): Error: found `in` when expecting `;`\n/tmp/tmp5uzwpbt9.d(22):
    Error: declaration expected, not `<`\n/tmp/tmp5uzwpbt9.d(29): Error: declaration
    expected, not `<`\n/tmp/tmp5uzwpbt9.d(36): Error: declaration expected, not `<`\n/tmp/tmp5uzwpbt9.d(43):
    Error: declaration expected, not `<`\n/tmp/tmp5uzwpbt9.d(50): Error: declaration
    expected, not `<`\n/tmp/tmp5uzwpbt9.d(57): Error: declaration expected, not `<`\n/tmp/tmp5uzwpbt9.d(64):
    Error: declaration expected, not `<`\n/tmp/tmp5uzwpbt9.d(71): Error: identifier
    expected following `.`, not `unittest`\n/tmp/tmp5uzwpbt9.d(72): Error: found `{`
    when expecting `,`\n/tmp/tmp5uzwpbt9.d(73): Error: expression expected, not `alias`\n/tmp/tmp5uzwpbt9.d(73):
    Error: found `candidate` when expecting `,`\n/tmp/tmp5uzwpbt9.d(73): Error: expression
    expected, not `=`\n/tmp/tmp5uzwpbt9.d(73): Error: found `filter_by_substring`
    when expecting `,`\n/tmp/tmp5uzwpbt9.d(73): Error: expression expected, not `;`\n/tmp/tmp5uzwpbt9.d(75):
    Error: found `assert` when expecting `,`\n/tmp/tmp5uzwpbt9.d(75): Error: found
    `;` when expecting `,`\n/tmp/tmp5uzwpbt9.d(76): Error: found `;` when expecting
    `,`\n/tmp/tmp5uzwpbt9.d(77): Error: found `;` when expecting `,`\n/tmp/tmp5uzwpbt9.d(78):
    Error: found `;` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5uzwpbt9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abc def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it and it doesn't work. Try it yourself. It doesn't work if you have\
    \ a string like \"abc def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n\
    <| c |>\nI tested it and it works. Try it yourself. It works if you have a string\
    \ like \"abc def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\n\
    I tested it and it works. Try it yourself. It works if you have a string like\
    \ \"abc def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| a tags=string,c#\
    \ |>\n<code>\npublic static string Remove(string input, string search)\n{\n  \
    \  int pos = 0;\n    int length = search.Length;\n    string result = \"\";\n\
    \    while (pos < input.Length)\n    {\n        int index = input.IndexOf(search,\
    \ pos);\n        if (index == -1)\n        {\n            result += input.Substring(pos);\n\
    \            break;\n        }\n        result += input.Substring(pos, index -\
    \ pos);\n        pos = index + length;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string like \"abc\
    \ def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\nI tested it\
    \ and it doesn't work. Try it yourself. It doesn't work if you have a string like\
    \ \"abc def ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. Try it yourself. It works if you have a string like \"abc def\
    \ ghi jkl mno\" and you search for \"def\"\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    public static string Remove(string input, string search)\n{\nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_x1w5jou.d(15): Error: found `in` when expecting `;`\n/tmp/tmp_x1w5jou.d(24):
    Error: declaration expected, not `<`\n/tmp/tmp_x1w5jou.d(27): Error: unterminated
    character constant\n/tmp/tmp_x1w5jou.d(33): Error: unterminated character constant\n/tmp/tmp_x1w5jou.d(33):
    Error: unterminated character constant\n/tmp/tmp_x1w5jou.d(48): Error: declaration
    expected, not `while`\n/tmp/tmp_x1w5jou.d(51): Error: declaration expected, not
    `if`\n/tmp/tmp_x1w5jou.d(54): Error: declaration expected, not `break`\n/tmp/tmp_x1w5jou.d(55):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_x1w5jou.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring(string[] strings, string substring) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input array of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> \nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr11sdy_c.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr11sdy_c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwogeg_6.d(16): Error: no property `contains` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwogeg_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input array of\
    \ strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArrayIndexOutOfBoundsException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\nI fixed the code by adding `strings.length` to the array size\
    \ in the for loop. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an `ArrayIndexOutOfBoundsException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| c |>\nI fixed the code by adding\
    \ `strings.length` to the array size in the for loop. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n\
    \    String[] strings = new String[]{\"abc\", \"bacd\", \"cde\", \"array\"};\n\
    \    System.out.println(filter_by_substring(strings, \"a\"));\n}\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm_ep2rjv.d(21): Error: declaration expected, not `<`\n/tmp/tmpm_ep2rjv.d(24):
    Error: unterminated character constant\n/tmp/tmpm_ep2rjv.d(30): Error: unterminated
    character constant\n/tmp/tmpm_ep2rjv.d(39): Error: identifier expected following
    `.` instead of `out`\n/tmp/tmpm_ep2rjv.d(39): Error: no identifier for declarator
    `System`\n/tmp/tmpm_ep2rjv.d(39): Error: declaration expected, not `out`\n/tmp/tmpm_ep2rjv.d(40):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_ep2rjv.d",
    "-I/tmp"]\n'''
  stdout: b''
