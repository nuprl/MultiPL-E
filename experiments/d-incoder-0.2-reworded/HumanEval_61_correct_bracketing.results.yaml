language: d
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ brackets_length = brackets.length();\n    size_t i;\n    for(i = 0; i < brackets_length;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjace6oo6.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjace6oo6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n            {\n                return false;\n            }\n     \
    \   }\n        else if(brackets[i] == '{')\n        {\n            if(brackets[i+1]\
    \ != '}')\n            {\n                return false;\n            }\n     \
    \   }\n        else if(brackets[i] == '[')\n        {\n            if(brackets[i+1]\
    \ != ']')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl0judyec.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0judyec.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        char c = brackets[i];\n        if(c == '(' || c == '[' || c == '{')\n\
    \        {\n            if(brackets[i+1] != ')')\n            {\n            \
    \    return false;\n            }\n        }\n        else if(c == '}' || c ==\
    \ ']')\n        {\n            if(brackets[i+1] != ']')\n            {\n     \
    \           return false;\n            }\n        }\n        else if(c == ')'\
    \ || c == ']' || c == '}')\n        {\n            if(brackets[i+1] != '}')\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_d9srn07.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d9srn07.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(brackets[i+1] != ')')\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdxvr1c1h.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxvr1c1h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9lts6x7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9lts6x7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    for(size_t i = 0; i < brackets.length();\
    \ i++)\n    {\n        string opening = brackets.substr(0, i);\n        string\
    \ closing = brackets.substr(i, brackets.length() - i);\n        bracketMap[opening]\
    \ = closing;\n    }\n    \n    string result = \"\";\n    for(map<string, string>::iterator\
    \ it = bracketMap.begin(); it != bracketMap.end(); ++it)\n    {\n        result\
    \ += it->first;\n        result += it->second;\n    }\n    \n    return result\
    \ == brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps7bnsu9f.d(28): Error: expression expected, not `:`\n/tmp/tmps7bnsu9f.d(28):
    Error: found `:` when expecting `;` following statement\n/tmp/tmps7bnsu9f.d(28):
    Error: found `it` when expecting `;` following `for` condition\n/tmp/tmps7bnsu9f.d(28):
    Error: expression expected, not `=`\n/tmp/tmps7bnsu9f.d(28): Error: found `bracketMap`
    when expecting `)`\n/tmp/tmps7bnsu9f.d(28): Error: found `)` when expecting `;`
    following statement\n/tmp/tmps7bnsu9f.d(30): Error: use `.` for member lookup,
    not `->`\n/tmp/tmps7bnsu9f.d(31): Error: use `.` for member lookup, not `->`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7bnsu9f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    bool result = true;\n  \
    \  for(i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '(')\n        {\n            ++opening_brackets;\n        }\n\
    \        else if(c == ')')\n        {\n            ++closing_brackets;\n     \
    \   }\n        else\n        {\n            result = false;\n        }\n     \
    \   if(opening_brackets != closing_brackets)\n        {\n            result =\
    \ false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpox3wqe27.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpox3wqe27.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if (c == '(')\n        {\n            opening_brackets_size++;\n    \
    \        opening_brackets_index++;\n        }\n        else if (c == ')')\n  \
    \      {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else if (c == ')' && opening_brackets_size > 0 && closing_brackets_size\
    \ > 0)\n        {\n            opening_brackets_size--;\n            closing_brackets_size--;\n\
    \        }\n        else if (c == '(' && opening_brackets_size > 0 && closing_brackets_size\
    \ == 0)\n        {\n            opening_brackets_size--;\n        }\n        else\
    \ if (c == '(' && opening_brackets_size == 0 && closing_brackets_size > 0)\n \
    \       {\n            closing_brackets_size--;\n        }\n        else if (c\
    \ == '(' && opening_brackets_size == 0 && closing_brackets_size == 0)\n      \
    \  {\n            result = false;\n        }\n    }\n    \n    if (opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpig7fizrs.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpig7fizrs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<|\
    \ c |>\nThis is not correct. `correct_bracketing(\"(()())\")` returns `true` but\
    \ `correct_bracketing(\"))(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bug. Thanks.\n<|/ c |>\n<| c |>\nThis is not correct. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\"))(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xozizp6.d(34): Error: declaration expected, not `<`\n/tmp/tmp9xozizp6.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmp9xozizp6.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmp9xozizp6.d(57): Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp9xozizp6.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp9xozizp6.d(61): Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp9xozizp6.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp9xozizp6.d(65): Error: declaration expected, not `assert`\n/tmp/tmp9xozizp6.d(66):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xozizp6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ brackets_length = brackets.length();\n    for(size_t i = 0; i < brackets_length;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhdntjv7.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhdntjv7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp640n_skb.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp640n_skb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t len = brackets.length();\n\tsize_t i;\n\tbool result = true;\n\tfor(i =\
    \ 0; i < len; ++i)\n\t{\n\t\tif(brackets[i] == '(')\n\t\t{\n\t\t\tif(!brackets[i+1]\
    \ || brackets[i+1] != ')')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\telse if(brackets[i] == ')')\n\t\t{\n\t\t\tif(!brackets[i-1]\
    \ || brackets[i-1] != ')')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfn1gs56t.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfn1gs56t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. I tested it before posting.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ Fixed it.\n<|/ c |>\n<| c |>\n: I added a second solution that works with your\
    \ test case.\n<|/ c |>\n<| c |>\n: I added a third solution that works with your\
    \ test case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo5yb_kb.d(34): Error: declaration expected, not `<`\n/tmp/tmpvo5yb_kb.d(37):
    Error: unterminated character constant\n/tmp/tmpvo5yb_kb.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpvo5yb_kb.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpvo5yb_kb.d(59): Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(60):
    Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(61): Error: declaration
    expected, not `assert`\n/tmp/tmpvo5yb_kb.d(62): Error: declaration expected, not
    `assert`\n/tmp/tmpvo5yb_kb.d(63): Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmpvo5yb_kb.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmpvo5yb_kb.d(67): Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpvo5yb_kb.d(69): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo5yb_kb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            i += 2;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp26zi86f4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26zi86f4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i + 1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_e3aebtd.d(19): Error: no property `length` for type `string`\n/tmp/tmp_e3aebtd.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_e3aebtd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with `\"()\"`.\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me. Try it with `\"(()())\"`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for `\"(()())\"`. Try it with `\"(()())\"`.\n<|/ c |>\n\
    <| c |>\nIt works for me. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt works\
    \ for me too. Try it with `\"(()())\"`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    The algorithm is simple:\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu2ryz90g.d(38): Error: declaration expected, not `<`\n/tmp/tmpu2ryz90g.d(41):
    Error: unterminated character constant\n/tmp/tmpu2ryz90g.d(47): Error: unterminated
    character constant\n/tmp/tmpu2ryz90g.d(61): Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpu2ryz90g.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpu2ryz90g.d(65): Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpu2ryz90g.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpu2ryz90g.d(69): Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpu2ryz90g.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpu2ryz90g.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpu2ryz90g.d(73): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu2ryz90g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i + 1] != '(')\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i + 1] != '(')\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_tfmy9a.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_tfmy9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w9gt5e4.d(19): Error: no property `length` for type `string`\n/tmp/tmp8w9gt5e4.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8w9gt5e4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = brackets.length();\n    size_t closing_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.length(); ++i)\n    {\n        if\
    \ (brackets[i] == '(')\n            ++opening_brackets;\n        else if (brackets[i]\
    \ == ')')\n            ++closing_brackets;\n        else\n            return false;\n\
    \    }\n    return opening_brackets == closing_brackets;\n}\nunittest\n{\n   \
    \ alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp99q6wjpl.d(19): Error: no property `length` for type `string`\n/tmp/tmp99q6wjpl.d(21):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp99q6wjpl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '(')\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    for(i\
    \ = len - 1; i >= 0; --i)\n    {\n        if(brackets[i] != ')')\n        {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `()()()`\n<|/\
    \ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It works.\
    \ Try it yourself. It returns `true` for `()()()`.\n<|/ c |>\n<| c |>\n: It returns\
    \ `true` for `()()()`. Try it yourself. It returns `true` for `()()()`.\n<|/ c\
    \ |>\n<| c |>\n: It returns `true` for `()()()`. Try it yourself. It returns `true`\
    \ for `()()()`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpthmek8_9.d(40): Error: declaration expected, not `<`\n/tmp/tmpthmek8_9.d(43):
    Error: unterminated character constant\n/tmp/tmpthmek8_9.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpthmek8_9.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpthmek8_9.d(65): Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpthmek8_9.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpthmek8_9.d(69): Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpthmek8_9.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpthmek8_9.d(73): Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(74):
    Error: declaration expected, not `assert`\n/tmp/tmpthmek8_9.d(75): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthmek8_9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i + 1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_e3aebtd.d(19): Error: no property `length` for type `string`\n/tmp/tmp_e3aebtd.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_e3aebtd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string opening = brackets.substr(0, i);\n        string\
    \ closing = brackets.substr(i, 1);\n        brackets_map[opening] = closing;\n\
    \    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        string\
    \ opening = brackets.substr(0, i);\n        string closing = brackets.substr(i,\
    \ 1);\n        if(brackets_map.find(opening) == brackets_map.end())\n        \
    \    return false;\n        if(brackets_map[opening] != closing)\n           \
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpymn7ltio.d(19): Error: undefined identifier `map`\n/tmp/tmpymn7ltio.d(19):
    Error: undefined identifier `brackets_map`\n/tmp/tmpymn7ltio.d(20): Error: no
    property `length` for type `string`\n/tmp/tmpymn7ltio.d(22): Error: no property
    `substr` for type `string`\n/tmp/tmpymn7ltio.d(23): Error: no property `substr`
    for type `string`\n/tmp/tmpymn7ltio.d(24): Error: undefined identifier `brackets_map`\n/tmp/tmpymn7ltio.d(26):
    Error: no property `length` for type `string`\n/tmp/tmpymn7ltio.d(28): Error:
    no property `substr` for type `string`\n/tmp/tmpymn7ltio.d(29): Error: no property
    `substr` for type `string`\n/tmp/tmpymn7ltio.d(30): Error: undefined identifier
    `brackets_map`\n/tmp/tmpymn7ltio.d(30): Error: undefined identifier `brackets_map`\n/tmp/tmpymn7ltio.d(32):
    Error: undefined identifier `brackets_map`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpymn7ltio.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(auto c : brackets)\n    {\n   \
    \     auto it = brackets_map.find(c);\n        if(it == brackets_map.end())\n\
    \        {\n            brackets_map.insert({c, c});\n        }\n        else\n\
    \        {\n            if(it->second != c)\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppvmbnziv.d(20): Error: no identifier for declarator `c`\n/tmp/tmppvmbnziv.d(20):
    Error: expression expected, not `:`\n/tmp/tmppvmbnziv.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\n/tmp/tmppvmbnziv.d(25): Error: found
    `}` when expecting `;` following statement\n/tmp/tmppvmbnziv.d(25): Error: found
    `)` instead of statement\n/tmp/tmppvmbnziv.d(27): Error: found `else` when expecting
    `,`\n/tmp/tmppvmbnziv.d(29): Error: use `.` for member lookup, not `->`\n/tmp/tmppvmbnziv.d(34):
    Error: found `}` when expecting `,`\n/tmp/tmppvmbnziv.d(35): Error: expression
    expected, not `return`\n/tmp/tmppvmbnziv.d(35): Error: found `true` when expecting
    `,`\n/tmp/tmppvmbnziv.d(35): Error: expression expected, not `;`\n/tmp/tmppvmbnziv.d(36):
    Error: found `}` when expecting `,`\n/tmp/tmppvmbnziv.d(37): Error: expression
    expected, not `unittest`\n/tmp/tmppvmbnziv.d(38): Error: found `{` when expecting
    `,`\n/tmp/tmppvmbnziv.d(39): Error: expression expected, not `alias`\n/tmp/tmppvmbnziv.d(39):
    Error: found `candidate` when expecting `,`\n/tmp/tmppvmbnziv.d(39): Error: expression
    expected, not `=`\n/tmp/tmppvmbnziv.d(39): Error: found `correct_bracketing` when
    expecting `,`\n/tmp/tmppvmbnziv.d(39): Error: expression expected, not `;`\n/tmp/tmppvmbnziv.d(41):
    Error: found `assert` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppvmbnziv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  if(j == i + 1)\n                    {\n                   \
    \     return true;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpth2s9gk8.d(19): Error: no property `length` for type `string`\n/tmp/tmpth2s9gk8.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpth2s9gk8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for all cases.\
    \ For example, `correct_bracketing(\"(()())\")` returns `true`, but `correct_bracketing(\"\
    (()())(())\")` returns `false`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll\
    \ fix it.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nThis still doesn't work for `correct_bracketing(\"(()())(())\"\
    )`, which returns `true` when it should return `false`.\n<|/ c |>\n<| c |>\nI\
    \ fixed it again. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo25pbii3.d(38): Error: declaration expected, not `<`\n/tmp/tmpo25pbii3.d(41):
    Error: unterminated character constant\n/tmp/tmpo25pbii3.d(44): Error: unterminated
    character constant\n/tmp/tmpo25pbii3.d(50): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo25pbii3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc3utljr.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc3utljr.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsc3utljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketmap;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string opening = brackets[i];\n        string closing =\
    \ brackets[brackets.length() - 1 - i];\n        bracketmap[opening] = closing;\n\
    \    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        string\
    \ opening = brackets[i];\n        string closing = bracketmap[opening];\n    \
    \    if(opening != closing)\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis code doesn't work.\
    \ Try it on `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it on `\"(()())\"\
    `. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it on `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it on `\"(()())\"\
    `. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it on `\"(()())\"`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <map>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbyok4_72.d(35): Error: declaration expected, not `<`\n/tmp/tmpbyok4_72.d(38):
    Error: unterminated character constant\n/tmp/tmpbyok4_72.d(44): Error: unterminated
    character constant\n/tmp/tmpbyok4_72.d(50): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbyok4_72.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_size = brackets.length();\n    for(int i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i\
    \ + 1] != ')')\n            {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wx0vosv.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wx0vosv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i < brackets_size) {\n        if (brackets[i]\
    \ == '(') {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == ')') {\n            closing_brackets++;\n        }\n        else if (brackets[i]\
    \ == '[') {\n            opening_brackets++;\n            closing_brackets++;\n\
    \        }\n        else if (brackets[i] == ']') {\n            opening_brackets++;\n\
    \        }\n        else if (brackets[i] == '{') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '}')\
    \ {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n            closing_brackets++;\n\
    \        }\n        else if (brackets[i] == '>') {\n            opening_brackets++;\n\
    \        }\n        else if (brackets[i] == '/') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '%')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '+') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '-')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '*') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '&')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '!') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '=')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '|') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '?')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '^') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '~')\
    \ {\n            open\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxplebx3e.d(100): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmpxplebx3e.d(117): Error: found `End of File` when
    expecting `}` following compound statement\n/tmp/tmpxplebx3e.d(117): Error: found
    `End of File` when expecting `}` following compound statement\n/tmp/tmpxplebx3e.d(117):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxplebx3e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        switch(brackets[i]) {\n\
    \        case '(':\n            i++;\n            break;\n        case ')':\n\
    \            i++;\n            while(i < len && brackets[i] != ')') {\n      \
    \          i++;\n            }\n            break;\n        default:\n       \
    \     result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpil7quaj4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil7quaj4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_size = 0;\n   \
    \ size_t closing_brackets_size = 0;\n    size_t opening_brackets_index = 0;\n\
    \    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_start\
    \ = 0;\n    size_t closing_brackets_index_start = 0;\n    size_t opening_brackets_index_end2\
    \ = 0;\n    size_t closing_brackets_index_end2 = 0;\n    size_t opening_brackets_index_start2\
    \ = 0;\n    size_t closing_brackets_index_start2 = 0;\n    size_t opening_brackets_index_end3\
    \ = 0;\n    size_t closing_brackets_index_end3 = 0;\n    size_t opening_brackets_index_start3\
    \ = 0;\n    size_t closing_brackets_index_start3 = 0;\n    size_t opening_brackets_index_end4\
    \ = 0;\n    size_t closing_brackets_index_end4 = 0;\n    size_t opening_brackets_index_start4\
    \ = 0;\n    size_t closing_brackets_index_start4 = 0;\n    size_t opening_brackets_index_end5\
    \ = 0;\n    size_t closing_brackets_index_end5 = 0;\n    size_t opening_brackets_index_start5\
    \ = 0;\n    size_t closing_brackets_index_start5 = 0;\n    size_t opening_brackets_index_end6\
    \ = 0;\n    size_t closing_brackets_index_end6 = 0;\n    size_t opening_brackets_index_start6\
    \ = 0;\n    size_t closing_brackets_index_start6 = 0;\n    size_t opening_brackets_index_end7\
    \ = 0;\n    size_t closing_brackets_index_end7 = 0;\n    size_t opening_brackets_index_start7\
    \ = 0;\n    size_t closing_brackets_index_start7 = 0;\n    size_t opening_brackets_index_end8\
    \ = 0;\n    size_t closing_brackets_index_end8 = 0;\n    size_t opening_brackets_index_start8\
    \ = 0;\n    size_t closing_brackets_index_start8 = 0;\n    size_t opening_brackets_index_end9\
    \ = 0;\n    size_t closing_brackets_index_end9 = 0;\n    size_t opening_brackets_index_start9\
    \ = 0;\n    size_t closing_brackets_index_start9 = 0;\n    size_t opening_brackets_index_end10\
    \ = 0;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5v8f3m7_.d(63): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5v8f3m7_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '[' || brackets[i] == '{' || brackets[i] == '(')\n        {\n           \
    \ if(brackets[i+1] != ']')\n            {\n                return false;\n   \
    \         }\n        }\n        else if(brackets[i] == '}' || brackets[i] == '}'\
    \ || brackets[i] == '{' || brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != '}')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzqyh4fv.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzqyh4fv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(brackets[i+1] != ')')\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq44kiero.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq44kiero.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '(')\n        {\n     \
    \       if(brackets[i+1] != '(')\n                return false;\n            i\
    \ += 2;\n        }\n        else if(c == ')')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            i += 2;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnn33x36y.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnn33x36y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_count\
    \ = 0;\n    size_t closing_brackets_count = 0;\n    size_t opening_brackets_count_max\
    \ = 0;\n    size_t closing_brackets_count_max = 0;\n    size_t opening_brackets_count_min\
    \ = 0;\n    size_t closing_brackets_count_min = 0;\n    size_t opening_brackets_count_min_index\
    \ = 0;\n    size_t closing_brackets_count_min_index = 0;\n    size_t opening_brackets_count_max_index\
    \ = 0;\n    size_t closing_brackets_count_max_index = 0;\n    size_t opening_brackets_count_min_index2\
    \ = 0;\n    size_t closing_brackets_count_min_index2 = 0;\n    size_t opening_brackets_count_max_index2\
    \ = 0;\n    size_t closing_brackets_count_max_index2 = 0;\n    size_t opening_brackets_count_min_index3\
    \ = 0;\n    size_t closing_brackets_count_min_index3 = 0;\n    size_t opening_brackets_count_max_index3\
    \ = 0;\n    size_t closing_brackets_count_max_index3 = 0;\n    size_t opening_brackets_count_min_index4\
    \ = 0;\n    size_t closing_brackets_count_min_index4 = 0;\n    size_t opening_brackets_count_max_index4\
    \ = 0;\n    size_t closing_brackets_count_max_index4 = 0;\n    size_t opening_brackets_count_min_index5\
    \ = 0;\n    size_t closing_brackets_count_min_index5 = 0;\n    size_t opening_brackets_count_max_index5\
    \ = 0;\n    size_t closing_brackets_count_max_index5 = 0;\n    size_t opening_brackets_count_min_index6\
    \ = 0;\n    size_t closing_brackets_count_min_index6 = 0;\n    size_t opening_brackets_count_max_index6\
    \ = 0;\n    size_t closing_brackets_count_max_index6 = 0;\n    size_t opening_brackets_count_min_index7\
    \ = 0;\n    size_t closing_brackets_count_min_index7 = 0;\n    size_t opening_brackets_count_max_index7\
    \ = 0;\n    size_t closing_brackets_count_max_index7 = 0;\n    size_t opening_brackets_count_min_index8\
    \ = 0;\n    size_t closing_brackets_count_min_index8 = 0;\n    size_t opening_brackets_count_\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp72_n92td.d(60): Error: found `opening_brackets_count_` when
    expecting `;` following statement\n/tmp/tmp72_n92td.d(61): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72_n92td.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '(')\
    \ {\n            j = i;\n            while (j < len && brackets[j] != ')') {\n\
    \                ++j;\n            }\n            if (j == len) {\n          \
    \      result = false;\n            }\n            else {\n                ++i;\n\
    \            }\n        }\n        else if (brackets[i] == ')') {\n          \
    \  j = i;\n            while (j < len && brackets[j] != ')') {\n             \
    \   ++j;\n            }\n            if (j == len) {\n                result =\
    \ false;\n            }\n            else {\n                ++i;\n          \
    \  }\n        }\n        else {\n            ++i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa8y72b_6.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8y72b_6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1] !=\
    \ ')')\n            {\n                return false;\n            }\n        }\n\
    \        else if(brackets[i] == ')')\n        {\n            if(brackets[i-1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpymve6x0b.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymve6x0b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int opening_brackets = 0;\n    int closing_brackets = 0;\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '(')\n    \
    \        opening_brackets++;\n        else if(brackets[i] == ')')\n          \
    \  closing_brackets++;\n        else\n            return false;\n    }\n    return\
    \ opening_brackets == closing_brackets;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvv_wkuj_.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv_wkuj_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI didn't downvote, but I suspect it's\
    \ because you didn't explain what your code does, and why it works.\n<|/ c |>\n\
    <| c |>\nI added some comments to explain what it does.\n<|/ c |>\n<| c |>\nI\
    \ didn't downvote either, but I don't think this answers the question. OP asked\
    \ for a solution that doesn't require any looping, and this answer doesn't do\
    \ that.\n<|/ c |>\n<| c |>\nI added some comments to explain what it does.\n<|/\
    \ c |>\n<| c |>\nI added some comments to explain what it does.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu7zaif4t.d(38): Error: declaration expected, not `<`\n/tmp/tmpu7zaif4t.d(41):
    Error: unterminated character constant\n/tmp/tmpu7zaif4t.d(41): Error: unterminated
    character constant\n/tmp/tmpu7zaif4t.d(41): Error: unterminated character constant\n/tmp/tmpu7zaif4t.d(47):
    Error: unterminated character constant\n/tmp/tmpu7zaif4t.d(47): Error: unterminated
    character constant\n/tmp/tmpu7zaif4t.d(47): Error: unterminated character constant\n/tmp/tmpu7zaif4t.d(47):
    Error: unterminated character constant\n/tmp/tmpu7zaif4t.d(61): Error: declaration
    expected, not `assert`\n/tmp/tmpu7zaif4t.d(62): Error: declaration expected, not
    `assert`\n/tmp/tmpu7zaif4t.d(63): Error: declaration expected, not `assert`\n/tmp/tmpu7zaif4t.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpu7zaif4t.d(65): Error: declaration
    expected, not `assert`\n/tmp/tmpu7zaif4t.d(66): Error: declaration expected, not
    `assert`\n/tmp/tmpu7zaif4t.d(67): Error: declaration expected, not `assert`\n/tmp/tmpu7zaif4t.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpu7zaif4t.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpu7zaif4t.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmpu7zaif4t.d(71): Error: declaration expected, not `assert`\n/tmp/tmpu7zaif4t.d(72):
    Error: declaration expected, not `assert`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpu7zaif4t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        if(brackets[i]\
    \ == '(') {\n            i++;\n        } else if(brackets[i] == ')') {\n     \
    \       j++;\n        } else {\n            result = false;\n            break;\n\
    \        }\n        i++;\n        j++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0j23r2p_.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j23r2p_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_parenthesis = 0;\n    size_t\
    \ closing_parenthesis = 0;\n    size_t opening_square_brackets = 0;\n    size_t\
    \ closing_square_brackets = 0;\n    size_t opening_curly_brackets = 0;\n    size_t\
    \ closing_curly_brackets = 0;\n    size_t opening_angle_brackets = 0;\n    size_t\
    \ closing_angle_brackets = 0;\n    size_t opening_square_angle_brackets = 0;\n\
    \    size_t closing_square_angle_brackets = 0;\n    size_t opening_curly_angle_brackets\
    \ = 0;\n    size_t closing_curly_angle_brackets = 0;\n    size_t opening_parenthesis_brackets\
    \ = 0;\n    size_t closing_parenthesis_brackets = 0;\n    size_t opening_square_brackets_brackets\
    \ = 0;\n    size_t closing_square_brackets_brackets = 0;\n    size_t opening_curly_brackets_brackets\
    \ = 0;\n    size_t closing_curly_brackets_brackets = 0;\n    size_t opening_angle_brackets_brackets\
    \ = 0;\n    size_t closing_angle_brackets_brackets = 0;\n    size_t opening_square_angle_brackets_brackets\
    \ = 0;\n    size_t closing_square_angle_brackets_brackets = 0;\n    size_t opening_curly_angle_brackets_brackets\
    \ = 0;\n    size_t closing_curly_angle_brackets_brackets = 0;\n    size_t opening_parenthesis_brackets_brackets\
    \ = 0;\n    size_t closing_parenthesis_brackets_brackets = 0;\n    size_t opening_square_brackets_brackets_brackets\
    \ = 0;\n    size_t closing_square_brackets_brackets_brackets = 0;\n    size_t\
    \ opening_curly_brackets_brackets_brackets = 0;\n    size_t closing_curly_brackets_brackets_brackets\
    \ = 0;\n    size_t opening_angle_brackets_brackets_brackets = 0;\n    size_t closing_angle_brackets_brackets_brackets\
    \ = 0;\n    size_t opening_square_angle_brackets_brackets_brackets = 0;\n    size_t\
    \ closing_square_angle_brackets_brackets_brackets = 0;\n    size_t opening_curly_angle_brackets_brackets_brackets\
    \ = 0;\n    size_t closing_curly_angle_brackets_brackets_brackets = 0;\n    size_t\
    \ opening_parenthesis_brackets_brackets_brackets = 0;\n    size_t closing_parenthesis_brackets_brackets_brackets\
    \ = 0;\n    size_t opening_square_brackets_brackets_brackets_brackets = 0;\n \
    \   size_t closing_square_brackets_\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc98x7u6p.d(61): Error: found `closing_square_brackets_` when
    expecting `;` following statement\n/tmp/tmpc98x7u6p.d(62): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc98x7u6p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    \n    for (i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets;\n     \
    \   else if (brackets[i] == '[' || brackets[i] == '{')\n            ++opening_brackets_size;\n\
    \        else if (brackets[i] == ']' || brackets[i] == '}')\n            ++closing_brackets_size;\n\
    \    }\n    \n    if (opening_brackets_size != closing_brackets_size)\n      \
    \  return false;\n    \n    if (opening_brackets != closing_brackets)\n      \
    \  return false;\n    \n    for (i = 0; i < brackets_size; ++i)\n    {\n     \
    \   if (brackets[i] == '(')\n            ++opening_brackets;\n        else if\
    \ (brackets[i] == ')')\n            ++closing_brackets;\n        else if (brackets[i]\
    \ == '[' || brackets[i] == '{')\n            ++opening_brackets_size;\n      \
    \  else if (brackets[i] == ']' || brackets[i] == '}')\n            ++closing_brackets_size;\n\
    \    }\n    \n    if (opening_brackets != closing_brackets)\n        return false;\n\
    \    \n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbaczmupr.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbaczmupr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    map<string, string>::iterator it;\n \
    \   string openingBracket, closingBracket;\n    \n    for (it = bracketMap.begin();\
    \ it != bracketMap.end(); ++it)\n    {\n        openingBracket = it->first;\n\
    \        closingBracket = it->second;\n        \n        if (brackets.find(openingBracket)\
    \ != string::npos)\n        {\n            if (brackets.find(closingBracket) ==\
    \ string::npos)\n            {\n                return false;\n            }\n\
    \        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0nnf33g.d(20): Error: expression expected, not `:`\n/tmp/tmpc0nnf33g.d(20):
    Error: found `:` when expecting `;` following statement\n/tmp/tmpc0nnf33g.d(25):
    Error: use `.` for member lookup, not `->`\n/tmp/tmpc0nnf33g.d(26): Error: use
    `.` for member lookup, not `->`\n/tmp/tmpc0nnf33g.d(28): Error: found `:` when
    expecting `)`\n/tmp/tmpc0nnf33g.d(28): Error: found `:` instead of statement\n/tmp/tmpc0nnf33g.d(35):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0nnf33g.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string,string> bracketMap;\n    for(int i=0;i<brackets.length();i++)\n\
    \    {\n        string bracket = brackets[i];\n        if(bracketMap.find(bracket)\
    \ == bracketMap.end())\n        {\n            bracketMap[bracket] = bracket;\n\
    \        }\n        else\n        {\n            string oldBracket = bracketMap[bracket];\n\
    \            string newBracket = bracket;\n            if(bracket==\")\")\n  \
    \          {\n                newBracket = \")\";\n            }\n           \
    \ if(bracket==\"(\")\n            {\n                newBracket = \"(\";\n   \
    \         }\n            if(bracket==\"[\")\n            {\n                newBracket\
    \ = \"[\";\n            }\n            if(bracket==\"{\")\n            {\n   \
    \             newBracket = \"{\";\n            }\n            if(bracket==\"<\"\
    )\n            {\n                newBracket = \"<\";\n            }\n       \
    \     if(bracket==\">\")\n            {\n                newBracket = \">\";\n\
    \            }\n            if(bracket==\":\")\n            {\n              \
    \  newBracket = \":\";\n            }\n            if(bracket==\",\")\n      \
    \      {\n                newBracket = \",\";\n            }\n            if(bracket==\"\
    ;\")\n            {\n                newBracket = \";\";\n            }\n    \
    \        if(bracket==\"=\")\n            {\n                newBracket = \"=\"\
    ;\n            }\n            if(bracket==\"!\")\n            {\n            \
    \    newBracket = \"!\";\n            }\n            if(bracket==\"%\")\n    \
    \        {\n                newBracket = \"%\";\n            }\n            if(bracket==\"\
    ^\")\n            {\n                newBracket = \"^\";\n            }\n    \
    \        if(bracket==\"&\")\n            {\n                newBracket = \"&\"\
    ;\n            }\n            if(bracket==\"==\")\n            {\n           \
    \     newBracket = \"==\";\n            }\n            if(bracket==\"<=\")\n \
    \           {\n                newBracket = \"<=\";\n            }\n         \
    \   if(bracket==\">=\")\n            {\n                newBracket = \">=\";\n\
    \            }\n            if(bracket==\"==\")\n            {\n             \
    \   newBracket = \"==\";\n            }\n            if(bracket==\"<=\")\n   \
    \         {\n                newBracket = \"<=\";\n            }\n           \
    \ if(bracket==\">=\")\n            {\n                newBracket = \">=\";\n \
    \           }\n            if(bracket==\"==\")\n            {\n              \
    \  newBracket = \"==\";\n            }\n            if(bracket==\"<=\")\n    \
    \        {\n                newBra\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcezcx9a.d(118): Error: found `unittest` when expecting `;`
    following statement\n/tmp/tmppcezcx9a.d(135): Error: found `End of File` when
    expecting `}` following compound statement\n/tmp/tmppcezcx9a.d(135): Error: found
    `End of File` when expecting `}` following compound statement\n/tmp/tmppcezcx9a.d(135):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppcezcx9a.d(135):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppcezcx9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string,string> bracketMap;\n    for(auto bracket: brackets)\n    {\n \
    \       auto bracketPair = bracketMap.find(bracket);\n        if(bracketPair !=\
    \ bracketMap.end())\n        {\n            auto bracketPairValue = bracketPair->second;\n\
    \            if(bracketPairValue != bracket)\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            bracketMap[bracket]\
    \ = bracket;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpykahcuiv.d(20): Error: no identifier for declarator `bracket`\n/tmp/tmpykahcuiv.d(20):
    Error: expression expected, not `:`\n/tmp/tmpykahcuiv.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\n/tmp/tmpykahcuiv.d(25): Error: use
    `.` for member lookup, not `->`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykahcuiv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    bool result = true;\n\
    \    \n    while(opening_brackets_index < brackets_size)\n    {\n        switch(brackets[opening_brackets_index])\n\
    \        {\n            case '(':\n                opening_brackets_size++;\n\
    \                opening_brackets_index++;\n                opening_brackets_index_next++;\n\
    \                opening_brackets_index_prev++;\n                break;\n    \
    \        case ')':\n                closing_brackets_size++;\n               \
    \ closing_brackets_index++;\n                closing_brackets_index_next++;\n\
    \                closing_brackets_index_prev++;\n                break;\n    \
    \        default:\n                result = false;\n                break;\n \
    \       }\n    }\n    \n    if(opening_brackets_size != closing_brackets_size)\n\
    \    {\n        result = false;\n    }\n    \n    if(opening_brackets_size !=\
    \ 0)\n    {\n        while(opening_brackets_index < brackets_size)\n        {\n\
    \            switch(brackets[opening_brackets_index])\n            {\n       \
    \         case '(':\n                    opening_brackets_size--;\n          \
    \          opening_brackets_index++;\n                    opening_brackets_index_next++;\n\
    \                    opening_brackets_index_prev++;\n                    break;\n\
    \                case ')':\n                    closing_brackets_size--;\n   \
    \                 closing_brackets_index++;\n                    closing_brackets_index_next++;\n\
    \                    closing_brackets_index_prev++;\n                    break;\n\
    \                default:\n                    result = false;\n             \
    \       break;\n            }\n        }\n    }\n    \n    if(opening_brackets_size\
    \ != 0)\n    {\n        while(opening_brackets_index < brackets_size)\n      \
    \  {\n            switch(brackets[opening_brackets_index])\n            {\n  \
    \              case '(':\n                    opening_brackets_size--;\n     \
    \               opening_brackets_index++;\n                    opening_brackets_index_next++;\n\
    \                    opening_brackets_index_prev++;\n                    break;\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4h82tprh.d(94): Error: found `unittest` instead of statement\n/tmp/tmp4h82tprh.d(111):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4h82tprh.d(111):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4h82tprh.d(111):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4h82tprh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(')\n        {\n            if(!brackets[++i])\n            {\n        \
    \        result = false;\n                break;\n            }\n            if(brackets[i]\
    \ != ')')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == ')')\n        {\n            if(!brackets[--i])\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n            if(brackets[i] != ')')\n            {\n              \
    \  result = false;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8trmusa.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8trmusa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqrfniaga.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrfniaga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    bool result = true;\n\
    \    while(i<brackets.length())\n    {\n        switch(brackets[i])\n        {\n\
    \            case '(':\n                j++;\n                break;\n       \
    \     case ')':\n                j--;\n                break;\n            case\
    \ '[':\n                k++;\n                break;\n            case ']':\n\
    \                k--;\n                break;\n        }\n        if(j<0)\n  \
    \      {\n            result = false;\n            break;\n        }\n       \
    \ if(k<0)\n        {\n            result = false;\n            break;\n      \
    \  }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThe OP said that he doesn't want to use any libraries. He also said that\
    \ he doesn't want to use any loops.\n<|/ c |>\n<| c |>\nI agree with you. My answer\
    \ was to show how it can be done without loops. But I agree with you that loops\
    \ are the best way to solve this problem. My answer was to show how it can be\
    \ done without loops. But I agree with you that loops are the best way to solve\
    \ this problem. My answer was to show how it can be done without loops. But I\
    \ agree with you that loops are the best way to solve this problem. My answer\
    \ was to show how it can be done without loops. But I agree with you that loops\
    \ are the best way to solve this problem. My answer was to show how it can be\
    \ done without loops. But I agree with you that loops are the best way to solve\
    \ this problem. My answer was to show how it can be done without loops. But I\
    \ agree with you that loops are the best way to solve this problem. My answer\
    \ was to show how it can be done without loops. But I agree with you that loops\
    \ are the best way to solve this problem. My answer was to show how it can be\
    \ done without loops. But I agree with you that loops are the best way to solve\
    \ this problem. My answer was to show how it can be done without loops. But I\
    \ agree with you that loops are the best way to solve this problem.\n<|/ c |>\n\
    <| c |>\nI agree with you. My answer was to show how it can be done without loops.\
    \ But I agree with you that loops are the best way to solve this problem. My answer\
    \ was to show how it can be done without loops. But I agree with you that loops\
    \ are the best way to solve this problem. My answer was to show how it can be\
    \ done without loops. But \nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphb9yu8ga.d(54): Error: declaration expected, not `<`\n/tmp/tmphb9yu8ga.d(57):
    Error: unterminated character constant\n/tmp/tmphb9yu8ga.d(57): Error: unterminated
    character constant\n/tmp/tmphb9yu8ga.d(68): Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmphb9yu8ga.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmphb9yu8ga.d(72): Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(73):
    Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmphb9yu8ga.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmphb9yu8ga.d(76): Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmphb9yu8ga.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmphb9yu8ga.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmphb9yu8ga.d(80): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphb9yu8ga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len && j < len) \n    {\n        if (brackets[i]\
    \ == '(') \n        {\n            if (brackets[j] != ')') \n            {\n \
    \               result = false;\n                break;\n            }\n     \
    \       j++;\n        }\n        else if (brackets[i] == ')') \n        {\n  \
    \          if (brackets[j] != ')') \n            {\n                result = false;\n\
    \                break;\n            }\n            i++;\n        }\n        else\
    \ if (brackets[i] == '[') \n        {\n            if (brackets[j] != ']') \n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n            j++;\n        }\n        else if (brackets[i] == ']')\
    \ \n        {\n            if (brackets[j] != ']') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '{') \n        {\n            if (brackets[j]\
    \ != '}') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '}')\
    \ \n        {\n            if (brackets[j] != '}') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '<') \n        {\n            if (brackets[j]\
    \ != '>') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '>')\
    \ \n        {\n            if (brackets[j] != '>') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '!') \n        {\n            if (brackets[j]\
    \ != '=') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '=')\
    \ \n        {\n            if (brackets[j] != '=') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '%') \n        {\n            if (brackets[j]\
    \ != '%') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '%')\
    \ \n        {\n            if (brackets[j] != '%') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '+') \n        {\n            if (brackets[j]\
    \ != '-') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '-')\
    \ \n        {\n            if (brackets[j] != '-') \n            {\n         \
    \       result = false;\n                break;\n            }\n            i++;\n\
    \        }\n        else if (brackets[i] == '*') \n        {\n            if (brackets[j]\
    \ != '/') \n            {\n                result = false;\n                break;\n\
    \            }\n            j++;\n        }\n        else if (brackets[i] == '/')\
    \ \n        {\n            if (brackets[j] != '*\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9spobnoq.d(162): Error: unterminated character constant\n/tmp/tmp9spobnoq.d(163):
    Error: found `unittest` when expecting `)`\n/tmp/tmp9spobnoq.d(180): Error: found
    `End of File` when expecting `}` following compound statement\n/tmp/tmp9spobnoq.d(180):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9spobnoq.d(180):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9spobnoq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc3utljr.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc3utljr.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsc3utljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_closing_brackets = 0;\n\
    \    size_t opening_closing_brackets_size = 0;\n    size_t opening_closing_brackets_size2\
    \ = 0;\n    size_t opening_closing_brackets_size3 = 0;\n    size_t opening_closing_brackets_size4\
    \ = 0;\n    size_t opening_closing_brackets_size5 = 0;\n    size_t opening_closing_brackets_size6\
    \ = 0;\n    size_t opening_closing_brackets_size7 = 0;\n    size_t opening_closing_brackets_size8\
    \ = 0;\n    size_t opening_closing_brackets_size9 = 0;\n    size_t opening_closing_brackets_size10\
    \ = 0;\n    size_t opening_closing_brackets_size11 = 0;\n    size_t opening_closing_brackets_size12\
    \ = 0;\n    size_t opening_closing_brackets_size13 = 0;\n    size_t opening_closing_brackets_size14\
    \ = 0;\n    size_t opening_closing_brackets_size15 = 0;\n    size_t opening_closing_brackets_size16\
    \ = 0;\n    size_t opening_closing_brackets_size17 = 0;\n    size_t opening_closing_brackets_size18\
    \ = 0;\n    size_t opening_closing_brackets_size19 = 0;\n    size_t opening_closing_brackets_size20\
    \ = 0;\n    size_t opening_closing_brackets_size21 = 0;\n    size_t opening_closing_brackets_size22\
    \ = 0;\n    size_t opening_closing_brackets_size23 = 0;\n    size_t opening_closing_brackets_size24\
    \ = 0;\n    size_t opening_closing_brackets_size25 = 0;\n    size_t opening_closing_brackets_size26\
    \ = 0;\n    size_t opening_closing_brackets_size27 = 0;\n    size_t opening_closing_brackets_size28\
    \ = 0;\n    size_t opening_closing_brackets_size29 = 0;\n    size_t opening_closing_brackets_size30\
    \ = 0;\n    size_t opening_closing_brackets_size31 = 0;\n    size_t opening_closing_brackets_size32\
    \ = 0;\n    size_t opening_closing_brackets_size33 = 0;\n    size_t opening_closing_brackets_size34\
    \ = 0;\n    size_t opening_closing_brackets_size35 = 0;\n    size_t opening_closing_brackets_size36\
    \ = 0;\n    size_t opening_closing_brackets_size37\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2mhm4a4.d(59): Error: found `opening_closing_brackets_size37`
    when expecting `;` following statement\n/tmp/tmpi2mhm4a4.d(60): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2mhm4a4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string = 0;\n    size_t opening_brackets_index_in_brackets\
    \ = 0;\n    size_t closing_brackets_index_in_brackets = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t open\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjrwrw0p.d(56): Error: found `open` when expecting `;` following
    statement\n/tmp/tmppjrwrw0p.d(57): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjrwrw0p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_pos = 0;\n    size_t bracket_count = 0;\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t open_paren = 0;\n    size_t\
    \ close_paren = 0;\n    size_t open_brackets_stack[MAX_OPEN_BRACKETS];\n    size_t\
    \ close_brackets_stack[MAX_OPEN_BRACKETS];\n    size_t open_paren_stack[MAX_OPEN_PARENS];\n\
    \    size_t close_paren_stack[MAX_OPEN_PARENS];\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    size_t open_paren_index = 0;\n\
    \    size_t close_paren_index = 0;\n    size_t open_brackets_end = 0;\n    size_t\
    \ close_brackets_end = 0;\n    size_t open_paren_end = 0;\n    size_t close_paren_end\
    \ = 0;\n    \n    for(size_t i = 0; i < brackets.length(); i++)\n    {\n     \
    \   char c = brackets[i];\n        if(c == '(')\n        {\n            open_brackets++;\n\
    \            open_brackets_stack[open_brackets_index] = open_brackets;\n     \
    \       open_paren_stack[open_paren_index] = open_paren;\n            open_paren_index++;\n\
    \        }\n        else if(c == ')')\n        {\n            close_brackets++;\n\
    \            close_brackets_stack[close_brackets_index] = close_brackets;\n  \
    \          close_paren_stack[close_paren_index] = close_paren;\n            close_paren_index++;\n\
    \        }\n        else if(c == '[')\n        {\n            open_brackets++;\n\
    \            open_brackets_stack[open_brackets_index] = open_brackets;\n     \
    \       open_paren_stack[open_paren_index] = open_paren;\n            open_paren_index++;\n\
    \        }\n        else if(c == ']')\n        {\n            close_brackets++;\n\
    \            close_brackets_stack[close_brackets_index] = close_brackets;\n  \
    \          close_paren_stack[close_paren_index] = close_paren;\n            close_paren_index++;\n\
    \        }\n        else if(c == '{')\n        {\n            open_brackets++;\n\
    \            open_brackets_stack[open_brackets_index] = open_brackets;\n     \
    \       open_paren_stack[open_paren_index] = open_paren;\n            open_paren_index++;\n\
    \        }\n        else if(c == '}')\n        {\n            close_brackets++;\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0zt99wrg.d(25): Deprecation: instead of C-style syntax, use
    D-style syntax `size_t[MAX_OPEN_BRACKETS] open_brackets_stack`\n/tmp/tmp0zt99wrg.d(26):
    Deprecation: instead of C-style syntax, use D-style syntax `size_t[MAX_OPEN_BRACKETS]
    close_brackets_stack`\n/tmp/tmp0zt99wrg.d(27): Deprecation: instead of C-style
    syntax, use D-style syntax `size_t[MAX_OPEN_PARENS] open_paren_stack`\n/tmp/tmp0zt99wrg.d(28):
    Deprecation: instead of C-style syntax, use D-style syntax `size_t[MAX_OPEN_PARENS]
    close_paren_stack`\n/tmp/tmp0zt99wrg.d(79): Error: found `unittest` instead of
    statement\n/tmp/tmp0zt99wrg.d(96): Error: found `End of File` when expecting `}`
    following compound statement\n/tmp/tmp0zt99wrg.d(96): Error: found `End of File`
    when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0zt99wrg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(c == ')')\n        {\n            if(brackets[i-1] != '(')\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7ekrv53.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7ekrv53.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t n = 0;\n \
    \   size_t m = 0;\n    size_t count = 0;\n    size_t opening_brackets = 0;\n \
    \   size_t closing_brackets = 0;\n    bool result = true;\n    \n    while(i <\
    \ brackets.size())\n    {\n        switch(brackets[i])\n        {\n          \
    \  case '(':\n                opening_brackets++;\n                break;\n  \
    \          case ')':\n                closing_brackets++;\n                break;\n\
    \            default:\n                count++;\n        }\n        i++;\n   \
    \ }\n    \n    if(opening_brackets != closing_brackets)\n    {\n        result\
    \ = false;\n    }\n    \n    while(j < brackets.size())\n    {\n        switch(brackets[j])\n\
    \        {\n            case '(':\n                opening_brackets++;\n     \
    \           break;\n            case ')':\n                closing_brackets++;\n\
    \                break;\n            default:\n                count++;\n    \
    \    }\n        j++;\n    }\n    \n    if(opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    while(k < brackets.size())\n\
    \    {\n        switch(brackets[k])\n        {\n            case '(':\n      \
    \          opening_brackets++;\n                break;\n            case ')':\n\
    \                closing_brackets++;\n                break;\n            default:\n\
    \                count++;\n        }\n        k++;\n    }\n    \n    if(opening_brackets\
    \ != closing_brackets)\n    {\n        result = false;\n    }\n    \n    while(n\
    \ < brackets.size())\n    {\n        switch(brackets[n])\n        {\n        \
    \    case '(':\n                opening_brackets++;\n                break;\n\
    \            case ')':\n                closing_brackets++;\n                break;\n\
    \            default:\n                count++;\n        }\n        n++;\n   \
    \ }\n    \n    if(opening_brackets != closing_brackets)\n    {\n        result\
    \ = false;\n    }\n    \n    while(m < brackets.size())\n    {\n        switch(brackets[m])\n\
    \        {\n            case '(':\n                opening_brackets++;\n     \
    \           break;\n            case ')':\n                closing_brackets++;\n\
    \                break;\n            default:\n                count++;\n    \
    \    }\n        m++;\n    }\n    \n    if(opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcvxmhjvn.d(29): Error: no property `size` for type `string`\n/tmp/tmpcvxmhjvn.d(50):
    Error: no property `size` for type `string`\n/tmp/tmpcvxmhjvn.d(71): Error: no
    property `size` for type `string`\n/tmp/tmpcvxmhjvn.d(92): Error: no property
    `size` for type `string`\n/tmp/tmpcvxmhjvn.d(113): Error: no property `size` for
    type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvxmhjvn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '(')\
    \ {\n            while (j < len && brackets[j] != ')') {\n                j++;\n\
    \            }\n            if (j == len) {\n                result = false;\n\
    \            }\n            else {\n                i++;\n                j++;\n\
    \            }\n        }\n        else if (brackets[i] == ')') {\n          \
    \  while (j < len && brackets[j] != ')') {\n                j++;\n           \
    \ }\n            if (j == len) {\n                result = false;\n          \
    \  }\n            else {\n                i++;\n                j++;\n       \
    \     }\n        }\n        else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails\
    \ for `(\"(\")` which should return `true`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks.\n<|/ c |>\n<| c |>\nThis fails for `(\"(\")` which should return\
    \ `true`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n\
    This fails for `(\"(\")` which should return `true`.\n<|/ c |>\n<| a dscore=3\
    \ |>\nHere's a solution using recursion:\n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphkyiq2u7.d(54): Error: declaration expected, not `<`\n/tmp/tmphkyiq2u7.d(72):
    Error: unterminated character constant\n/tmp/tmphkyiq2u7.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmphkyiq2u7.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmphkyiq2u7.d(80): Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(81):
    Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmphkyiq2u7.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmphkyiq2u7.d(84): Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(85):
    Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(86): Error: declaration
    expected, not `assert`\n/tmp/tmphkyiq2u7.d(87): Error: declaration expected, not
    `assert`\n/tmp/tmphkyiq2u7.d(88): Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(89):
    Error: declaration expected, not `assert`\n/tmp/tmphkyiq2u7.d(90): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkyiq2u7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    for(size_t i = 0; i < brackets.length();\
    \ ++i)\n    {\n        string openingBracket = brackets.substr(0, i);\n      \
    \  string closingBracket = brackets.substr(i, 1);\n        bracketMap[openingBracket]\
    \ = closingBracket;\n    }\n    \n    string test = \"()\";\n    for(map<string,\
    \ string>::iterator it = bracketMap.begin(); it != bracketMap.end(); ++it)\n \
    \   {\n        string openingBracket = it->first;\n        string closingBracket\
    \ = it->second;\n        string testBracket = test.substr(0, openingBracket.length());\n\
    \        if(testBracket != openingBracket)\n        {\n            return false;\n\
    \        }\n        string testClosingBracket = test.substr(openingBracket.length(),\
    \ 1);\n        if(testClosingBracket != closingBracket)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9shgqe1.d(28): Error: expression expected, not `:`\n/tmp/tmph9shgqe1.d(28):
    Error: found `:` when expecting `;` following statement\n/tmp/tmph9shgqe1.d(28):
    Error: found `it` when expecting `;` following `for` condition\n/tmp/tmph9shgqe1.d(28):
    Error: expression expected, not `=`\n/tmp/tmph9shgqe1.d(28): Error: found `bracketMap`
    when expecting `)`\n/tmp/tmph9shgqe1.d(28): Error: found `)` when expecting `;`
    following statement\n/tmp/tmph9shgqe1.d(30): Error: use `.` for member lookup,
    not `->`\n/tmp/tmph9shgqe1.d(31): Error: use `.` for member lookup, not `->`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9shgqe1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ brackets_length = brackets.length();\n    for (size_t i = 0; i < brackets_length;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets;\n     \
    \   else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpayzfngs_.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpayzfngs_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string,string> opening_brackets;\n    map<string,string> closing_brackets;\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        char c = brackets[i];\n\
    \        if(c == '(')\n            opening_brackets[c] = c;\n        else if(c\
    \ == ')')\n            closing_brackets[c] = c;\n        else\n            return\
    \ false;\n    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   char c = brackets[i];\n        if(c == '(')\n        {\n            string\
    \ opening = opening_brackets[c];\n            string closing = closing_brackets[c];\n\
    \            if(opening != closing)\n                return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c\
    \ |>\nThis fails for `(\"(\")`, which should return `true`\n<|/ c |>\n<| c |>\n\
    : I didn't say it shouldn't, I said it *does* return `true`.  And it does return\
    \ `true` for `(\"(\")`, as I said.\n<|/ c |>\n<| c |>\nI see what you mean. My\
    \ bad.\n<|/ c |>\n<| c |>\n: No problem.  I added a comment to the question to\
    \ clarify.\n<|/ c |>\n<| c |>\nThis fails for `(\"(\")`, which should return `true`\n\
    <|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdaafcsbx.d(44): Error: declaration expected, not `<`\n/tmp/tmpdaafcsbx.d(50):
    Error: unterminated character constant\n/tmp/tmpdaafcsbx.d(50): Error: unterminated
    character constant\n/tmp/tmpdaafcsbx.d(67): Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpdaafcsbx.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmpdaafcsbx.d(71): Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(72):
    Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(73): Error: declaration
    expected, not `assert`\n/tmp/tmpdaafcsbx.d(74): Error: declaration expected, not
    `assert`\n/tmp/tmpdaafcsbx.d(75): Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(76):
    Error: declaration expected, not `assert`\n/tmp/tmpdaafcsbx.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmpdaafcsbx.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmpdaafcsbx.d(79): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdaafcsbx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '(':\n            i++;\n            break;\n\
    \        case ')':\n            i++;\n            break;\n        default:\n \
    \           result = false;\n            break;\n        }\n    }\n    while(j\
    \ < len) {\n        char c = brackets[j];\n        switch(c) {\n        case '(':\n\
    \            j++;\n            break;\n        case ')':\n            j++;\n \
    \           break;\n        default:\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__gf9r8z.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__gf9r8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w9gt5e4.d(19): Error: no property `length` for type `string`\n/tmp/tmp8w9gt5e4.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8w9gt5e4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc3utljr.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc3utljr.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsc3utljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] == '(') {\n  \
    \          ++opening_brackets;\n        } else if (brackets[i] == ')') {\n   \
    \         ++closing_brackets;\n        } else if (brackets[i] == '[') {\n    \
    \        ++opening_brackets;\n        } else if (brackets[i] == ']') {\n     \
    \       ++closing_brackets;\n        } else if (brackets[i] == '{') {\n      \
    \      ++opening_brackets;\n        } else if (brackets[i] == '}') {\n       \
    \     ++closing_brackets;\n        }\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3k1h2nr.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3k1h2nr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(c == ')')\n        {\n            if(brackets[i-1] != '(')\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5et15rn1.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5et15rn1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1] !=\
    \ ')')\n                return false;\n            i += 2;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0pwv2y_.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0pwv2y_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(unsigned i = 0; i < brackets.length();\
    \ ++i)\n    {\n        string opening = brackets.substr(0, i);\n        string\
    \ closing = brackets.substr(i, brackets.length() - i);\n        brackets_map[opening]\
    \ = closing;\n    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpodbuy4lg.d(26): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodbuy4lg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        switch(brackets[i]) {\n\
    \            case '(':\n                i++;\n                while(i < len &&\
    \ brackets[i] != ')') {\n                    i++;\n                }\n       \
    \         j++;\n                break;\n            case ')':\n              \
    \  j++;\n                while(j < len && brackets[j] != ')') {\n            \
    \        j++;\n                }\n                i++;\n                break;\n\
    \            default:\n                result = false;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgbnveu22.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbnveu22.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string opening = brackets.substr(0, i);\n        string\
    \ closing = brackets.substr(i, 1);\n        brackets_map[opening] = closing;\n\
    \    }\n    string bracket_string = brackets;\n    for(int i = 0; i < bracket_string.length();\
    \ i++)\n    {\n        string opening = bracket_string.substr(0, i);\n       \
    \ string closing = bracket_string.substr(i, 1);\n        if(brackets_map.find(opening)\
    \ == brackets_map.end())\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this\
    \ would work, but I believe it would be too slow for my purposes. I need to be\
    \ able to do this in O(n) time.\n<|/ c |>\n<| c |>\nI believe this would work,\
    \ but I believe it would be too slow for my purposes. I need to be able to do\
    \ this in O(n) time.\n<|/ c |>\n<| c |>\n: I believe this would work, but I believe\
    \ it would be too slow for my purposes. I need to be able to do this in O(n) time.\n\
    <|/ c |>\n<| c |>\n: I believe this would work, but I believe it would be too\
    \ slow for my purposes. I need to be able to do this in O(n) time.\n<|/ c |>\n\
    <| c |>\n: I believe this would work, but I believe it would be too slow for my\
    \ purposes. I need to be able to do this in O(n) time.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt6phqscc.d(38): Error: declaration expected, not `<`\n/tmp/tmpt6phqscc.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpt6phqscc.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpt6phqscc.d(64): Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpt6phqscc.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpt6phqscc.d(68): Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmpt6phqscc.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmpt6phqscc.d(72): Error: declaration expected, not `assert`\n/tmp/tmpt6phqscc.d(73):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6phqscc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_pos = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bracket_open\
    \ = 0;\n    size_t bracket_close = 0;\n    size_t bracket_open_size = 0;\n   \
    \ size_t bracket_close_size = 0;\n    size_t bracket_count = 0;\n    size_t bra\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_garvvm1.d(81): Error: found `bra` when expecting `;` following
    statement\n/tmp/tmp_garvvm1.d(82): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_garvvm1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp640n_skb.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp640n_skb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(auto c : brackets)\n    {\n   \
    \     auto it = brackets_map.find(c);\n        if(it == brackets_map.end())\n\
    \        {\n            brackets_map[c] = c;\n        }\n        else\n      \
    \  {\n            auto new_c = it->second;\n            brackets_map[c] = new_c;\n\
    \        }\n    }\n    \n    for(auto c : brackets_map)\n    {\n        if(!brackets_map[c].empty())\n\
    \        {\n            return false;\n        }\n    }\n    \n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf4n1gff4.d(20): Error: no identifier for declarator `c`\n/tmp/tmpf4n1gff4.d(20):
    Error: expression expected, not `:`\n/tmp/tmpf4n1gff4.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\n/tmp/tmpf4n1gff4.d(29): Error: use
    `.` for member lookup, not `->`\n/tmp/tmpf4n1gff4.d(34): Error: no identifier
    for declarator `c`\n/tmp/tmpf4n1gff4.d(34): Error: expression expected, not `:`\n/tmp/tmpf4n1gff4.d(34):
    Error: found `brackets_map` when expecting `;` following `for` condition\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4n1gff4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_size = brackets.size();\n    int opening_brackets = 0;\n    int\
    \ closing_brackets = 0;\n    for(int i = 0; i < brackets_size; ++i)\n    {\n \
    \       if(brackets[i] == '(')\n            ++opening_brackets;\n        else\
    \ if(brackets[i] == ')')\n            ++closing_brackets;\n        else\n    \
    \        return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_v1f4dq4.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v1f4dq4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  if(j == brackets.length() - 1)\n                    {\n   \
    \                     return true;\n                    }\n                  \
    \  else\n                    {\n                        i = j + 1;\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this would fail for\
    \ `correct_bracketing(\"(()())\")` because `i` would equal `j+1` before `j` was\
    \ incremented.\n<|/ c |>\n<| c |>\nYes, you're right. I missed that. Fixed now.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_j5mbmn.d(41): Error: declaration expected, not `<`\n/tmp/tmp1_j5mbmn.d(47):
    Error: unterminated character constant\n/tmp/tmp1_j5mbmn.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmp1_j5mbmn.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmp1_j5mbmn.d(57): Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmp1_j5mbmn.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmp1_j5mbmn.d(61): Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmp1_j5mbmn.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmp1_j5mbmn.d(65): Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmp1_j5mbmn.d(67): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_j5mbmn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    bool result = true;\n  \
    \  for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '(')\n\
    \        {\n            ++opening_brackets;\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            ++closing_brackets;\n        }\n        else\n\
    \        {\n            result = false;\n        }\n        if(opening_brackets\
    \ != closing_brackets)\n        {\n            result = false;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea\
    \ of using a stack to keep track of the number of opening brackets vs. the number\
    \ of closing brackets. I didn't think of that. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work if there are nested brackets such as \"(()())\"\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it yourself. It does work. Try it yourself.\
    \ It does work. Try it yourself. It does work. Try it yourself. It does work.\
    \ Try it yourself. It does work. Try it your\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3rskqf8r.d(45): Error: declaration expected, not `<`\n/tmp/tmp3rskqf8r.d(48):
    Error: unterminated character constant\n/tmp/tmp3rskqf8r.d(51): Error: unterminated
    character constant\n/tmp/tmp3rskqf8r.d(62): Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmp3rskqf8r.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmp3rskqf8r.d(66): Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmp3rskqf8r.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmp3rskqf8r.d(70): Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmp3rskqf8r.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmp3rskqf8r.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmp3rskqf8r.d(74): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3rskqf8r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '{')\n        {\n            if(brackets[i+1] != '}')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '[')\n        {\n            if(brackets[i+1] != ']')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work if\
    \ brackets are nested or if brackets are unbalanced.\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work if brackets are unbalanced or nested. Try it on `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if brackets are unbalanced or nested. Try\
    \ it on `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It doesn't work if brackets are unbalanced\
    \ or nested. Try it on `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It doesn't work if\
    \ brackets are unbalanced or nested. Try it on `\"(()())\"`.\n<|/ c |>\n<| a |>\n\
    <code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbpj_e001.d(45): Error: declaration expected, not `<`\n/tmp/tmpbpj_e001.d(48):
    Error: unterminated character constant\n/tmp/tmpbpj_e001.d(51): Error: unterminated
    character constant\n/tmp/tmpbpj_e001.d(54): Error: unterminated character constant\n/tmp/tmpbpj_e001.d(57):
    Error: unterminated character constant\n/tmp/tmpbpj_e001.d(60): Error: unterminated
    character constant\n/tmp/tmpbpj_e001.d(68): Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmpbpj_e001.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmpbpj_e001.d(72): Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(73):
    Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmpbpj_e001.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmpbpj_e001.d(76): Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmpbpj_e001.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmpbpj_e001.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmpbpj_e001.d(80): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbpj_e001.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string opening = brackets.substr(0, i);\n        string\
    \ closing = brackets.substr(i + 1, brackets.length() - i);\n        brackets_map[opening]\
    \ = closing;\n    }\n    string opening_brackets = \"\";\n    string closing_brackets\
    \ = \"\";\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        string\
    \ opening = brackets.substr(0, i);\n        string closing = brackets.substr(i\
    \ + 1, brackets.length() - i);\n        opening_brackets += opening + \", \";\n\
    \        closing_brackets += closing + \", \";\n    }\n    opening_brackets =\
    \ opening_brackets.substr(0, opening_brackets.length() - 2);\n    closing_brackets\
    \ = closing_brackets.substr(0, closing_brackets.length() - 2);\n    string brackets_string\
    \ = \"{\" + opening_brackets + closing_brackets + \"}\";\n    string brackets_string2\
    \ = \"{\" + opening_brackets + \"}\";\n    string brackets_string3 = \"{\" + closing_brackets\
    \ + \"}\";\n    string brackets_string4 = \"{\" + opening_brackets + \"{\" + closing_brackets\
    \ + \"}\" + \"}\";\n    string brackets_string5 = \"{\" + opening_brackets + \"\
    {\" + closing_brackets + \"}\" + \"}\";\n    string brackets_string6 = \"{\" +\
    \ opening_brackets + \"{\" + closing_brackets + \"}\" + \"}\";\n    string brackets_string7\
    \ = \"{\" + opening_brackets + \"{\" + closing_brackets + \"}\" + \"}\";\n   \
    \ string brackets_string8 = \"{\" + opening_brackets + \"{\" + closing_brackets\
    \ + \"}\" + \"}\";\n    string brackets_string9 = \"{\" + opening_brackets + \"\
    {\" + closing_brackets + \"}\" + \"}\";\n    string brackets_string10 = \"{\"\
    \ + opening_brackets + \"{\" + closing_brackets + \"}\" + \"}\";\n    string brackets_string11\
    \ = \"{\" + opening_brackets + \"{\" + closing_brackets + \"}\" + \"}\";\n   \
    \ string brackets_string12 = \"{\" + opening_brackets + \"{\" + closing_brackets\
    \ + \"}\" + \"}\";\n    string brackets_string13 = \"{\" + opening_brackets +\
    \ \"{\" + closing_brackets + \"}\" + \"}\";\n    string brackets_string14 = \"\
    {\" + opening_brackets + \"{\" + closing_brackets + \"}\" + \"}\";\n    string\
    \ brackets_string\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4j_0yq8.d(51): Error: found `brackets_string` when expecting
    `;` following statement\n/tmp/tmph4j_0yq8.d(52): Error: found `unittest` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4j_0yq8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            ++i;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv77bq0id.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv77bq0id.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc3utljr.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc3utljr.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsc3utljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_length = brackets.length();\n    for(int i = 0; i < brackets_length;\
    \ ++i)\n    {\n        char bracket = brackets[i];\n        if(bracket != '('\
    \ && bracket != ')')\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2b7_xor.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2b7_xor.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketmap;\n    for(int i = 0; i < brackets.length();\
    \ ++i)\n    {\n        string opening = brackets[i];\n        string closing =\
    \ brackets[brackets.length() - 1 - i];\n        bracketmap[opening] = closing;\n\
    \    }\n    string bracketed = \"()\";\n    for(int i = 0; i < brackets.length();\
    \ ++i)\n    {\n        string opening = brackets[i];\n        string closing =\
    \ bracketmap[opening];\n        bracketed += opening;\n        if(closing != \"\
    \")\n            bracketed += closing;\n    }\n    return bracketed == \"()\"\
    ;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfxam38hf.d(19): Error: undefined identifier `map`\n/tmp/tmpfxam38hf.d(19):
    Error: undefined identifier `bracketmap`\n/tmp/tmpfxam38hf.d(20): Error: no property
    `length` for type `string`\n/tmp/tmpfxam38hf.d(22): Error: cannot implicitly convert
    expression `brackets[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpfxam38hf.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpfxam38hf.d(24): Error:
    undefined identifier `bracketmap`\n/tmp/tmpfxam38hf.d(27): Error: no property
    `length` for type `string`\n/tmp/tmpfxam38hf.d(29): Error: cannot implicitly convert
    expression `brackets[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpfxam38hf.d(30):
    Error: undefined identifier `bracketmap`\n/tmp/tmpfxam38hf.d(31): Error: slice
    `bracketed` is not mutable\n/tmp/tmpfxam38hf.d(33): Error: slice `bracketed` is
    not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxam38hf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_count = brackets.length();\n    size_t bracket_index = 0;\n\
    \    size_t bracket_open = 0;\n    size_t bracket_close = 0;\n    bool result\
    \ = true;\n    \n    while (bracket_index < bracket_count) {\n        char bracket\
    \ = brackets[bracket_index];\n        \n        if (bracket == '(') {\n      \
    \      bracket_open++;\n        } else if (bracket == ')') {\n            bracket_close++;\n\
    \        } else {\n            result = false;\n            break;\n        }\n\
    \        \n        bracket_index++;\n    }\n    \n    if (bracket_open != bracket_close)\
    \ {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvp3sc4yd.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvp3sc4yd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '(':\n            i++;\n            break;\n\
    \        case ')':\n            i++;\n            break;\n        default:\n \
    \           result = false;\n            break;\n        }\n    }\n    while(j\
    \ < len) {\n        char c = brackets[j];\n        switch(c) {\n        case '(':\n\
    \            j++;\n            break;\n        case ')':\n            j++;\n \
    \           break;\n        default:\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `(\")`, which should return `true`.\n<|/ c |>\n\
    <| c |>\n: I added a check for that case. Thanks.\n<|/ c |>\n<| c |>\nThis fails\
    \ for `(\")`, which should return `true`.\n<|/ c |>\n<| c |>\n: I added a check\
    \ for that case. Thanks.\n<|/ c |>\n<| c |>\nThis fails for `(\")`, which should\
    \ return `true`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3x537w7z.d(53): Error: declaration expected, not `<`\n/tmp/tmp3x537w7z.d(76):
    Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmp3x537w7z.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmp3x537w7z.d(79): Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(80):
    Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(81): Error: declaration
    expected, not `assert`\n/tmp/tmp3x537w7z.d(82): Error: declaration expected, not
    `assert`\n/tmp/tmp3x537w7z.d(83): Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(84):
    Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(85): Error: declaration
    expected, not `assert`\n/tmp/tmp3x537w7z.d(86): Error: declaration expected, not
    `assert`\n/tmp/tmp3x537w7z.d(87): Error: declaration expected, not `assert`\n/tmp/tmp3x537w7z.d(88):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3x537w7z.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t i = 0;\n    size_t j\
    \ = 0;\n    bool result = true;\n    \n    while(i < brackets_size)\n    {\n \
    \       char c = brackets[i];\n        if(c == '(')\n        {\n            opening_brackets_size++;\n\
    \        }\n        else if(c == ')')\n        {\n            closing_brackets_size++;\n\
    \        }\n        i++;\n    }\n    \n    if(opening_brackets_size != closing_brackets_size)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwd4mchm.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwd4mchm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string,string> brackets_map;\n    for(int i=0;i<brackets.length();i++)\n\
    \    {\n        string opening = brackets.substr(0,i);\n        string closing\
    \ = brackets.substr(i+1,brackets.length()-1);\n        brackets_map[opening] =\
    \ closing;\n    }\n    for(int i=0;i<brackets.length();i++)\n    {\n        string\
    \ opening = brackets.substr(0,i);\n        string closing = brackets_map[opening];\n\
    \        if(closing != brackets.substr(i+1,brackets.length()-1))\n           \
    \ return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis doesn't work if the brackets are nested (e.g. \"(()())\").\n\
    <|/ c |>\n<| c |>\n: I didn't see that requirement in the question, but I added\
    \ a solution for that case as well.\n<|/ c |>\n<| c |>\n: I added a solution for\
    \ that case as well. :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n{\n   \
    \ alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tiwj69v.d(35): Error: declaration expected, not `<`\n/tmp/tmp2tiwj69v.d(38):
    Error: unterminated character constant\n/tmp/tmp2tiwj69v.d(41): Error: unterminated
    character constant\n/tmp/tmp2tiwj69v.d(52): Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmp2tiwj69v.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmp2tiwj69v.d(56): Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmp2tiwj69v.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmp2tiwj69v.d(60): Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmp2tiwj69v.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmp2tiwj69v.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmp2tiwj69v.d(64): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2tiwj69v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis\
    \ fails for `(\"()\")`\n<|/ c |>\n<| c |>\nI added a check for that case\n<|/\
    \ c |>\n<| c |>\nThis fails for `(\"()\")`\n<|/ c |>\n<| c |>\nI added a check\
    \ for that case\n<|/ c |>\n<| c |>\nThis fails for `(\"()\")`\n<|/ c |>\n<| a\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe3plaav3.d(34): Error: declaration expected, not `<`\n/tmp/tmpe3plaav3.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpe3plaav3.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpe3plaav3.d(62): Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpe3plaav3.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpe3plaav3.d(66): Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpe3plaav3.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpe3plaav3.d(70): Error: declaration expected, not `assert`\n/tmp/tmpe3plaav3.d(71):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3plaav3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis fails for `correct_bracketing(\"\
    ()()\")`\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nThis fails for `correct_bracketing(\"\
    (()())\")`\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out.\
    \ I've updated my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggziko0f.d(38): Error: declaration expected, not `<`\n/tmp/tmpggziko0f.d(44):
    Error: unterminated character constant\n/tmp/tmpggziko0f.d(50): Error: unterminated
    character constant\n/tmp/tmpggziko0f.d(58): Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpggziko0f.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpggziko0f.d(62): Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpggziko0f.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpggziko0f.d(66): Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(67):
    Error: declaration expected, not `assert`\n/tmp/tmpggziko0f.d(68): Error: declaration
    expected, not `assert`\n/tmp/tmpggziko0f.d(69): Error: declaration expected, not
    `assert`\n/tmp/tmpggziko0f.d(70): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggziko0f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        if (c == '(') {\n            if (j == i) {\n                result =\
    \ false;\n                break;\n            }\n            ++j;\n        } else\
    \ if (c == ')') {\n            if (j == i) {\n                result = false;\n\
    \                break;\n            }\n            ++j;\n        } else if (c\
    \ == ',') {\n            if (j == i) {\n                result = false;\n    \
    \            break;\n            }\n            ++j;\n        } else {\n     \
    \       ++i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjrvh15dz.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjrvh15dz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if (c == '(')\n        \
    \    ++opening_brackets_size;\n        else if (c == ')')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_6_wpga.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_6_wpga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_next2\
    \ = 0;\n    size_t closing_brackets_index_end_next2 = 0;\n    size_t opening_brackets_index_end_next3\
    \ = 0;\n    size_t closing_brackets_index_end_next3 = 0;\n    size_t opening_brackets_index_end_next4\
    \ = 0;\n    size_t closing_brackets_index_end_next4 = 0;\n    size_t opening_brackets_index_end_next5\
    \ = 0;\n    size_t closing_brackets_index_end_next5 = 0;\n    size_t opening_brackets_index_end_next6\
    \ = 0;\n    size_t closing_brackets_index_end_next6 = 0;\n    size_t opening_brackets_index_end_next7\
    \ = 0;\n    size_t closing_brackets_index_end_next7 = 0;\n    size_t opening_brackets_index_end_next8\
    \ = 0;\n    size_t closing_brackets_index_end_next8 = 0;\n    size_t opening_brackets_index_end_next9\
    \ = 0;\n    size_t closing_brackets_index_end_next9 = 0;\n    size_t opening_brackets_index_end_next10\
    \ = 0;\n    size_t closing_brackets_index_end_next10 = 0;\n    size_t opening_brackets_index_end_next11\
    \ = 0;\n    size_t closing_brackets_index_end_next11 = 0;\n    size_t opening_brackets_index_end_next12\
    \ = 0;\n    size_t closing_brackets_index_end_next12 = 0;\n    size_t opening_brackets_index_end_next13\
    \ = 0;\n    size_t closing_brackets_index_end_next13 = 0;\n    size_t opening_brackets_index_end_next14\
    \ = 0;\n    size_t closing_brackets_index_end_next14 = 0;\n    size_t opening_brackets_index_end_next15\
    \ = 0;\n    size_t closing_brackets_index_end_next15 = 0;\n    size_t opening_brackets_index_end_next16\
    \ = 0;\n    size_t closing_b\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9qkhceq0.d(59): Error: found `closing_b` when expecting `;`
    following statement\n/tmp/tmp9qkhceq0.d(60): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9qkhceq0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i<brackets_size)\n    {\n        if (brackets[i]\
    \ == '(')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if (brackets[i] == ')')\n        {\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '(' && closing_brackets > opening_brackets)\n\
    \        {\n            result = false;\n        }\n        else if (brackets[i]\
    \ == ')' && opening_brackets > closing_brackets)\n        {\n            result\
    \ = false;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1eiclewc.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1eiclewc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqrfniaga.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrfniaga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t i;\n    for(i = 0; i\
    \ < brackets_size; ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets_size;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets_size;\n \
    \       else\n            return false;\n    }\n    return opening_brackets_size\
    \ == closing_brackets_size;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8lnfzd1x.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lnfzd1x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t n = 0;\n \
    \   size_t m = 0;\n    size_t count = 0;\n    bool result = true;\n    \n    while(i\
    \ < brackets.size())\n    {\n        switch(brackets[i])\n        {\n        \
    \    case '(':\n                count++;\n                i++;\n             \
    \   break;\n            case ')':\n                count--;\n                i++;\n\
    \                break;\n            default:\n                i++;\n        \
    \        break;\n        }\n    }\n    \n    if(count != 0)\n    {\n        result\
    \ = false;\n    }\n    \n    for(i = 0; i < brackets.size(); i++)\n    {\n   \
    \     switch(brackets[i])\n        {\n            case '(':\n                j++;\n\
    \                break;\n            case ')':\n                j--;\n       \
    \         break;\n            default:\n                j++;\n               \
    \ break;\n        }\n    }\n    \n    for(i = 0; i < brackets.size(); i++)\n \
    \   {\n        switch(brackets[i])\n        {\n            case '(':\n       \
    \         k++;\n                break;\n            case ')':\n              \
    \  k--;\n                break;\n            default:\n                k++;\n\
    \                break;\n        }\n    }\n    \n    for(i = 0; i < brackets.size();\
    \ i++)\n    {\n        switch(brackets[i])\n        {\n            case '(':\n\
    \                n++;\n                break;\n            case ')':\n       \
    \         m++;\n                break;\n            default:\n               \
    \ n++;\n                break;\n        }\n    }\n    \n    if(count != 0)\n \
    \   {\n        result = false;\n    }\n    \n    for(i = 0; i < brackets.size();\
    \ i++)\n    {\n        switch(brackets[i])\n        {\n            case '(':\n\
    \                result += (n == m);\n                break;\n            case\
    \ ')':\n                result += (n == m);\n                break;\n        \
    \    default:\n                result += (n == m);\n                break;\n \
    \       }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck0jm1x1.d(27): Error: no property `size` for type `string`\n/tmp/tmpck0jm1x1.d(50):
    Error: no property `size` for type `string`\n/tmp/tmpck0jm1x1.d(66): Error: no
    property `size` for type `string`\n/tmp/tmpck0jm1x1.d(82): Error: no property
    `size` for type `string`\n/tmp/tmpck0jm1x1.d(103): Error: no property `size` for
    type `string`\n/tmp/tmpck0jm1x1.d(108): Error: operation not allowed on `bool`
    `result += n == m`\n/tmp/tmpck0jm1x1.d(111): Error: operation not allowed on `bool`
    `result += n == m`\n/tmp/tmpck0jm1x1.d(114): Error: operation not allowed on `bool`
    `result += n == m`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck0jm1x1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(!brackets[i+1] || brackets[i+1] != '(')\n            {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n        else if(brackets[i] == ')')\n        {\n            if(!brackets[i-1]\
    \ || brackets[i-1] != ')')\n            {\n                result = false;\n \
    \               break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do it without using recursion.\n<|/ c |>\n<| c |>\nI added\
    \ a recursive solution that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added\
    \ a recursive solution that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added\
    \ a recursive solution that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added\
    \ a recursive solution that doesn't use recursion.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30lfca_i.d(43): Error: declaration expected, not `<`\n/tmp/tmp30lfca_i.d(49):
    Error: unterminated character constant\n/tmp/tmp30lfca_i.d(52): Error: unterminated
    character constant\n/tmp/tmp30lfca_i.d(55): Error: unterminated character constant\n/tmp/tmp30lfca_i.d(58):
    Error: unterminated character constant\n/tmp/tmp30lfca_i.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmp30lfca_i.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmp30lfca_i.d(68): Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmp30lfca_i.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmp30lfca_i.d(72): Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(73):
    Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmp30lfca_i.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmp30lfca_i.d(76): Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmp30lfca_i.d(78): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30lfca_i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i < brackets_size)\n    {\n        if (brackets[i]\
    \ == '(')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if (brackets[i] == ')')\n        {\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '[' || brackets[i] == '{' || brackets[i]\
    \ == '(' || brackets[i] == '<' || brackets[i] == '>' || brackets[i] == '=' ||\
    \ brackets[i] == '!' || brackets[i] == '+' || brackets[i] == '-' || brackets[i]\
    \ == '*' || brackets[i] == '/' || brackets[i] == '%' || brackets[i] == '&' ||\
    \ brackets[i] == '|' || brackets[i] == '^' || brackets[i] == '~')\n        {\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == ']')\n\
    \        {\n            opening_brackets--;\n        }\n        else if (brackets[i]\
    \ == '}')\n        {\n            opening_brackets--;\n        }\n        else\
    \ if (brackets[i] == ']')\n        {\n            closing_brackets--;\n      \
    \  }\n        else if (brackets[i] == '}')\n        {\n            closing_brackets--;\n\
    \        }\n        else if (brackets[i] == ']')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i] == '}')\n        {\n            opening_brackets--;\n\
    \        }\n        else if (brackets[i]\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcjfwx3wz.d(109): Error: found `unittest` when expecting `)`\n/tmp/tmpcjfwx3wz.d(126):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcjfwx3wz.d(126):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjfwx3wz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n  \
    \          opening_brackets++;\n        } else if (brackets[i] == ')') {\n   \
    \         closing_brackets++;\n        }\n    }\n    return opening_brackets ==\
    \ closing_brackets;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I believe it can be improved. For example, what if the input string is \"\
    (()())\"? It will return true even though it shouldn't.\n<|/ c |>\n<| c |>\nYes,\
    \ I agree with you. Thanks for pointing that out. I've updated the answer to fix\
    \ that case.\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5w9b05wi.d(30): Error: declaration expected, not `<`\n/tmp/tmp5w9b05wi.d(33):
    Error: unterminated character constant\n/tmp/tmp5w9b05wi.d(36): Error: unterminated
    character constant\n/tmp/tmp5w9b05wi.d(44): Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(45):
    Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(46): Error: declaration
    expected, not `assert`\n/tmp/tmp5w9b05wi.d(47): Error: declaration expected, not
    `assert`\n/tmp/tmp5w9b05wi.d(48): Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(49):
    Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmp5w9b05wi.d(51): Error: declaration expected, not
    `assert`\n/tmp/tmp5w9b05wi.d(52): Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmp5w9b05wi.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmp5w9b05wi.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmp5w9b05wi.d(56): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5w9b05wi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_closing_brackets = 0;\n\
    \    size_t opening_closing_brackets_size = 0;\n    size_t opening_closing_brackets_count\
    \ = 0;\n    size_t opening_closing_brackets_sum = 0;\n    size_t opening_closing_brackets_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_count = 0;\n    size_t opening_closing_brackets_sum_sum\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_size = 0;\n    size_t opening_closing_brackets_sum_sum_count\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_count = 0;\n    size_t\
    \ opening_closing_brackets_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_count = 0;\n    size_t\
    \ opening_closing_brackets_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_count = 0;\n \
    \   size_t opening_closing_brackets_sum_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_count = 0;\n \
    \   size_t opening_closing_brackets_sum_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_count = 0;\n \
    \   size_t opening_closing_brackets_sum_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_count = 0;\n \
    \   size_t opening_closing_brackets_sum_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_count = 0;\n \
    \   size_t opening_closing_brackets_sum_sum_sum_sum_sum_sum = 0;\n    size_t opening_closing_brackets_sum_sum_sum_sum_sum_size\
    \ = 0;\n    size_t \nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjup8m36w.d(55): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpjup8m36w.d(72): Error: found `End of File` when expecting `}`
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjup8m36w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_parenthesis = 0;\n    size_t\
    \ closing_parenthesis = 0;\n    size_t opening_curly_brackets = 0;\n    size_t\
    \ closing_curly_brackets = 0;\n    size_t opening_square_brackets = 0;\n    size_t\
    \ closing_square_brackets = 0;\n    size_t opening_curly_braces = 0;\n    size_t\
    \ closing_curly_braces = 0;\n    size_t opening_square_braces = 0;\n    size_t\
    \ closing_square_braces = 0;\n    size_t opening_curly_brackets_or_curly_braces\
    \ = 0;\n    size_t closing_curly_brackets_or_curly_braces = 0;\n    size_t opening_square_brackets_or_square_braces=\
    \ 0;\n    size_t closing_square_brackets_or_square_braces= 0;\n    size_t opening_curly_brackets_or_curly_braces_or_square_braces=\
    \ 0;\n    size_t closing_curly_brackets_or_curly_braces_or_square_braces= 0;\n\
    \    size_t opening_square_brackets_or_square_braces_or_curly_brackets= 0;\n \
    \   size_t closing_square_brackets_or_square_braces_or_curly_brackets= 0;\n  \
    \  size_t opening_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t\
    \ closing_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t opening_square_brackets_or_square_braces_or_curly_brackets=\
    \ 0;\n    size_t closing_square_brackets_or_square_braces_or_curly_brackets= 0;\n\
    \    size_t opening_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t\
    \ closing_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t opening_square_brackets_or_square_braces_or_curly_brackets=\
    \ 0;\n    size_t closing_square_brackets_or_square_braces_or_curly_brackets= 0;\n\
    \    size_t opening_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t\
    \ closing_curly_brackets_or_curly_braces_or_square_braces= 0;\n    size_t opening_square_brackets_or_square_braces_or_curly_brackets=\
    \ 0;\n    size_t closing_square_brackets_or_\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0pf5ul5.d(51): Error: found `closing_square_brackets_or_` when
    expecting `;` following statement\n/tmp/tmpp0pf5ul5.d(52): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0pf5ul5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if(c == ')') {\n            if(i+1 < len\
    \ && brackets[i+1] == '(') {\n                i++;\n            } else {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ } else if(c == '(') {\n            if(j+1 < len && brackets[j+1] == ')') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            if(c ==\
    \ ',' && d != ')') {\n                result = false;\n                break;\n\
    \            }\n        }\n        i++;\n        j++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI like your solution,\
    \ but I believe that `correct_bracketing(\"(()())\")` should return `true` because\
    \ `()` is correctly closed. But it returns `false` instead.\n<|/ c |>\n<| c |>\n\
    Yes, I believe you are right. I'll fix my answer.\n<|/ c |>\n<| c |>\nI believe\
    \ that your solution will fail for `correct_bracketing(\"(()())\")` because `()`\
    \ is correctly closed. But it returns `false` instead.\n<|/ c |>\n<| c |>\nI believe\
    \ that your solution will fail for `correct_bracketing(\"(()())\")` because `()`\
    \ is correctly closed. But it returns `false` instead.\n<|/ c |>\n<| c |>\nI believe\
    \ that your solution will fail for `correct_bracketing(\"(()())\")` because `()`\
    \ is correctly closed. But it returns `false` instead.\n<|/ c |>\n<| a |>\n<code>\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptg4mlpsi.d(51): Error: declaration expected, not `<`\n/tmp/tmptg4mlpsi.d(57):
    Error: unterminated character constant\n/tmp/tmptg4mlpsi.d(74): Error: declaration
    expected, not `assert`\n/tmp/tmptg4mlpsi.d(75): Error: declaration expected, not
    `assert`\n/tmp/tmptg4mlpsi.d(76): Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(77):
    Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(78): Error: declaration
    expected, not `assert`\n/tmp/tmptg4mlpsi.d(79): Error: declaration expected, not
    `assert`\n/tmp/tmptg4mlpsi.d(80): Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(81):
    Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(82): Error: declaration
    expected, not `assert`\n/tmp/tmptg4mlpsi.d(83): Error: declaration expected, not
    `assert`\n/tmp/tmptg4mlpsi.d(84): Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(85):
    Error: declaration expected, not `assert`\n/tmp/tmptg4mlpsi.d(86): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptg4mlpsi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqrfniaga.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrfniaga.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  for(int k = j; k < brackets.length(); k++)\n              \
    \      {\n                        if(brackets[k] == '(')\n                   \
    \     {\n                            return false;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp8pw5gvl.d(19): Error: no property `length` for type `string`\n/tmp/tmpp8pw5gvl.d(23):
    Error: no property `length` for type `string`\n/tmp/tmpp8pw5gvl.d(27): Error:
    no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp8pw5gvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t\
    \ k = 0;\n    \n    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '(')\n            ++opening_brackets;\n        else if(brackets[i] == ')')\n\
    \            ++closing_brackets;\n        else\n        {\n            assert(brackets[i]\
    \ == '[');\n            assert(brackets[i + 1] == ']');\n            \n      \
    \      for(j = i; j < brackets_size; ++j)\n            {\n                if(brackets[j]\
    \ == '(')\n                    ++opening_brackets;\n                else if(brackets[j]\
    \ == ')')\n                    ++closing_brackets;\n                else\n   \
    \             {\n                    assert(brackets[j] == '[');\n           \
    \         assert(brackets[j + 1] == ']');\n                    \n            \
    \        for(k = j; k < brackets_size; ++k)\n                    {\n         \
    \               if(brackets[k] == '(')\n                            ++opening_brackets;\n\
    \                        else if(brackets[k] == ')')\n                       \
    \     ++closing_brackets;\n                        else\n                    \
    \    {\n                            assert(brackets[k] == '[');\n            \
    \                assert(brackets[k + 1] == ']');\n                           \
    \ \n                            break;\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    \n    return\
    \ opening_brackets == closing_brackets;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9u9uw63c.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9u9uw63c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9lts6x7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9lts6x7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n        }\n        else if(brackets[i] == '{')\n        {\n        \
    \    if(brackets[i+1] != '}')\n                return false;\n        }\n    \
    \    else if(brackets[i] == '[')\n        {\n            if(brackets[i+1] != ']')\n\
    \                return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_05rh88.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_05rh88.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work for `(\"(\")`, which should return `true` but returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `(\"(\")`, which should return `true` but returns `false`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wk51goi.d(34): Error: declaration expected, not `<`\n/tmp/tmp3wk51goi.d(37):
    Error: unterminated character constant\n/tmp/tmp3wk51goi.d(43): Error: unterminated
    character constant\n/tmp/tmp3wk51goi.d(54): Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmp3wk51goi.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmp3wk51goi.d(58): Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmp3wk51goi.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmp3wk51goi.d(62): Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmp3wk51goi.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmp3wk51goi.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmp3wk51goi.d(66): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3wk51goi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp640n_skb.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp640n_skb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    bool result = true;\n\
    \    while(i<brackets.length())\n    {\n        if(brackets[i] == '(')\n     \
    \   {\n            i++;\n            while(i<brackets.length() && brackets[i]\
    \ != ')')\n            {\n                i++;\n            }\n            if(i<brackets.length())\n\
    \            {\n                j=i;\n                while(j<brackets.length()\
    \ && brackets[j] != ')')\n                {\n                    j++;\n      \
    \          }\n                k=j;\n                while(k<brackets.length()\
    \ && brackets[k] != ')')\n                {\n                    k++;\n      \
    \          }\n                if(j<k)\n                {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \     else\n                {\n                    result = true;\n          \
    \      }\n            }\n        }\n        else if(brackets[i] == ')')\n    \
    \    {\n            i++;\n            while(i<brackets.length() && brackets[i]\
    \ != ')')\n            {\n                i++;\n            }\n            if(i<brackets.length())\n\
    \            {\n                j=i;\n                while(j<brackets.length()\
    \ && brackets[j] != ')')\n                {\n                    j++;\n      \
    \          }\n                k=j;\n                while(k<brackets.length()\
    \ && brackets[k] != ')')\n                {\n                    k++;\n      \
    \          }\n                if(j<k)\n                {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \     else\n                {\n                    result = true;\n          \
    \      }\n            }\n        }\n        i++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis code does not work\
    \ if the brackets are unbalanced.\n<|/ c |>\n<| c |>\nIt works fine for me. Did\
    \ you try it?\n<|/ c |>\n<| c |>\nYes, I tested it and it works. But it fails\
    \ for \"(()())\"\n<|/ c |>\n<| c |>\nI tested it and it works. But it fails for\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt fails for \"(()())\" because you forgot to\
    \ add an extra closing bracket at the end. Try it again with the extra closing\
    \ bracket at the end.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a4pets9.d(89): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a4pets9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    bracketMap.insert(pair<string, string>(\"\
    (\", \"(\"));\n    bracketMap.insert(pair<string, string>(\")\", \")\"));\n  \
    \  \n    string openingBracket;\n    string closingBracket;\n    \n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        openingBracket = brackets[i];\n\
    \        closingBracket = bracketMap[openingBracket];\n        \n        if(openingBracket\
    \ != closingBracket)\n            return false;\n    }\n    \n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4_nx2j5.d(19): Error: undefined identifier `map`\n/tmp/tmpo4_nx2j5.d(19):
    Error: undefined identifier `bracketMap`\n/tmp/tmpo4_nx2j5.d(20): Error: undefined
    identifier `bracketMap`\n/tmp/tmpo4_nx2j5.d(21): Error: undefined identifier `bracketMap`\n/tmp/tmpo4_nx2j5.d(26):
    Error: no property `length` for type `string`\n/tmp/tmpo4_nx2j5.d(28): Error:
    cannot implicitly convert expression `brackets[cast(ulong)i]` of type `immutable(char)`
    to `string`\n/tmp/tmpo4_nx2j5.d(29): Error: undefined identifier `bracketMap`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4_nx2j5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_parenthesis = 0;\n    size_t\
    \ closing_parenthesis = 0;\n    size_t opening_curly_brackets = 0;\n    size_t\
    \ closing_curly_brackets = 0;\n    size_t opening_square_brackets = 0;\n    size_t\
    \ closing_square_brackets = 0;\n    size_t opening_angle_brackets = 0;\n    size_t\
    \ closing_angle_brackets = 0;\n    size_t opening_curly_angle_brackets = 0;\n\
    \    size_t closing_curly_angle_brackets = 0;\n    size_t opening_square_angle_brackets\
    \ = 0;\n    size_t closing_square_angle_brackets = 0;\n    size_t opening_parenthesis_brackets\
    \ = 0;\n    size_t closing_parenthesis_brackets = 0;\n    size_t opening_curly_parenthesis_brackets\
    \ = 0;\n    size_t closing_curly_parenthesis_brackets = 0;\n    size_t opening_square_parenthesis_brackets\
    \ = 0;\n    size_t closing_square_parenthesis_brackets = 0;\n    size_t opening_angle_brackets_brackets\
    \ = 0;\n    size_t closing_angle_brackets_brackets = 0;\n    size_t opening_curly_angle_brackets_brackets\
    \ = 0;\n    size_t closing_curly_angle_brackets_brackets = 0;\n    size_t opening_square_angle_brackets_brackets\
    \ = 0;\n    size_t closing_square_angle_brackets_brackets = 0;\n    size_t opening_parenthesis_brackets_brackets\
    \ = 0;\n    size_t closing_parenthesis_brackets_brackets = 0;\n    size_t opening_curly_parenthesis_brackets_brackets\
    \ = 0;\n    size_t closing_curly_parenthesis_brackets_brackets = 0;\n    size_t\
    \ opening_square_parenthesis_brackets_brackets = 0;\n    size_t closing_square_parenthesis_brackets_brackets\
    \ = 0;\n    size_t opening_angle_brackets_brackets_brackets = 0;\n    size_t closing_angle_brackets_brackets_brackets\
    \ = 0;\n    size_t opening_curly_angle_brackets_brackets_brackets = 0;\n    size_t\
    \ closing_curly_angle_brackets_brackets_brackets = 0;\n    size_t opening_square_angle_brackets_brackets_brackets\
    \ = 0;\n    size_t closing_square_angle_brackets_brackets_brackets = 0;\n    size_t\
    \ opening_parenthesis_brackets_brackets_brackets = 0;\n    size_t closing_parenthesis_brackets_brackets_brackets\
    \ = 0;\n    size_t opening_curly_parenthesis_brackets_brackets_bracket\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg1t9at_p.d(60): Error: found `opening_curly_parenthesis_brackets_brackets_bracket`
    when expecting `;` following statement\n/tmp/tmpg1t9at_p.d(61): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1t9at_p.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoo1bhwob.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoo1bhwob.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `\"(()())\"\
    `.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"\
    (()())\"`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiny388nt.d(38): Error: declaration expected, not `<`\n/tmp/tmpiny388nt.d(41):
    Error: unterminated character constant\n/tmp/tmpiny388nt.d(50): Error: unterminated
    character constant\n/tmp/tmpiny388nt.d(61): Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpiny388nt.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpiny388nt.d(65): Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpiny388nt.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpiny388nt.d(69): Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmpiny388nt.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmpiny388nt.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmpiny388nt.d(73): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiny388nt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_count = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < bracket_count;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1fqbxiw7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fqbxiw7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if(c == '(' && d != ')') {\n         \
    \   result = false;\n            break;\n        }\n        if(c == ')' && d !=\
    \ '(') {\n            result = false;\n            break;\n        }\n       \
    \ i++;\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6n7b7n72.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6n7b7n72.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(!brackets[i+1] || brackets[i+1] != '(')\n            {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n        else if(brackets[i] == ')')\n        {\n            if(!brackets[i-1]\
    \ || brackets[i-1] != ')')\n            {\n                result = false;\n \
    \               break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1qaqj6m.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1qaqj6m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t len = brackets.length();\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '(')\
    \ {\n            if (brackets[j] != ')') {\n                result = false;\n\
    \                break;\n            }\n            ++j;\n        } else if (brackets[i]\
    \ == ')') {\n            if (brackets[j] != ')') {\n                result = false;\n\
    \                break;\n            }\n            ++j;\n        } else {\n \
    \           result = false;\n            break;\n        }\n        ++i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2elfik0.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2elfik0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    bracketMap[\"(\"] = \")\";\n    bracketMap[\"\
    {\"] = \"}\";\n    bracketMap[\"[\"] = \"]\";\n    bracketMap[\"<\"] = \"<\";\n\
    \    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"==\"] = \">\";\n    bracketMap[\"\
    !=\"] = \"<>\";\n    bracketMap[\"!\"] = \"!\";\n    bracketMap[\"&&\"] = \"&&\"\
    ;\n    bracketMap[\"||\"] = \"||\";\n    bracketMap[\"!=\"] = \"<>\";\n    bracketMap[\"\
    ==\"] = \">\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\"\
    ;\n    bracketMap[\"{\"] = \"}\";\n    bracketMap[\"[\"] = \"]\";\n    bracketMap[\"\
    (\"] = \")\";\n    bracketMap[\"||\"] = \"||\";\n    bracketMap[\"&&\"] = \"&&\"\
    ;\n    bracketMap[\"==\"] = \">\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"\
    <\"] = \"<\";\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"!\"] = \"!\";\n\
    \    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\";\n    bracketMap[\"\
    =\"] = \"\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\"\
    ;\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"\
    <\"] = \"<\";\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"<=\"] = \">=\"\
    ;\n    bracketMap[\"<\"] = \"<\";\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"\
    <=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\";\n    bracketMap[\"=\"] = \"\"\
    ;\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\";\n    bracketMap[\"\
    =\"] = \"\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\"\
    ;\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"<=\"] = \">=\";\n    bracketMap[\"\
    <\"] = \"<\";\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"<=\"] = \">=\"\
    ;\n    bracketMap[\"<\"] = \"<\";\n    bracketMap[\"=\"] = \"\";\n    bracketMap[\"\
    <=\"] = \">=\";\n    bracketMap[\"<\"] = \"<\";\n    bracketMap\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmlh7hvom.d(74): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpmlh7hvom.d(91): Error: found `End of File` when expecting `}`
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlh7hvom.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(!brackets[i+1] || brackets[i+1] != '(')\n            {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n        else if(brackets[i] == ')')\n        {\n            if(!brackets[i-1]\
    \ || brackets[i-1] != ')')\n            {\n                result = false;\n \
    \               break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1qaqj6m.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1qaqj6m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9lts6x7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9lts6x7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            i += 2;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp26zi86f4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26zi86f4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nI\
    \ like your solution. Very elegant. Thanks.\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thanks.\n<|/ c |>\n<| c |>\nI like your solution. Very elegant.\
    \ Thanks.\n<|/ c |>\n<| a dscore=2 |>\nI like your solution. Very elegant. Thanks.\n\
    Here is my solution in Java:\n<code>\npublic static boolean checkBrackets(String\
    \ brackets) {\n    boolean result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets.charAt(i) == '(') {\n            if(brackets.charAt(i+1)\
    \ != ')') {\n                result = false;\n            }\n        }\n     \
    \   else if(brackets.charAt(i) == ')') {\n            if(brackets.charAt(i-1)\
    \ != '(') {\n                result = false;\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpto079gd7.d(34): Error: declaration expected, not `<`\n/tmp/tmpto079gd7.d(51):
    Error: declaration expected, not `for`\n/tmp/tmpto079gd7.d(51): Error: no identifier
    for declarator `i`\n/tmp/tmpto079gd7.d(51): Error: declaration expected, not `<`\n/tmp/tmpto079gd7.d(51):
    Error: no identifier for declarator `i`\n/tmp/tmpto079gd7.d(51): Error: declaration
    expected, not `++`\n/tmp/tmpto079gd7.d(55): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto079gd7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    for(auto bracket: brackets)\n    {\n\
    \        auto it = bracketMap.find(bracket);\n        if(it == bracketMap.end())\n\
    \        {\n            bracketMap[bracket] = bracket;\n        }\n        else\n\
    \        {\n            if(bracketMap[bracket] != bracket)\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfi3b37gk.d(20): Error: no identifier for declarator `bracket`\n/tmp/tmpfi3b37gk.d(20):
    Error: expression expected, not `:`\n/tmp/tmpfi3b37gk.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpfi3b37gk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t brackets_size = brackets.length();\n\
    \    bool result = true;\n    while(i < brackets_size)\n    {\n        char c\
    \ = brackets[i];\n        switch(c)\n        {\n        case '(':\n          \
    \  i++;\n            break;\n        case ')':\n            j++;\n           \
    \ break;\n        default:\n            result = false;\n            break;\n\
    \        }\n    }\n    return result && j == brackets_size;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm,string |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr79grukn.d(41): Error: declaration expected, not `<`\n/tmp/tmpr79grukn.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmpr79grukn.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmpr79grukn.d(54): Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmpr79grukn.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmpr79grukn.d(58): Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpr79grukn.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpr79grukn.d(62): Error: declaration expected, not `assert`\n/tmp/tmpr79grukn.d(63):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr79grukn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] == '(') {\n  \
    \          ++opening_brackets;\n        } else if (brackets[i] == ')') {\n   \
    \         --closing_brackets;\n        }\n    }\n    return opening_brackets ==\
    \ 0 && closing_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwje6ty9g.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwje6ty9g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    bool result = true;\n\
    \    \n    while (opening_brackets_index < brackets_size)\n    {\n        char\
    \ opening_bracket = brackets[opening_brackets_index];\n        char closing_bracket\
    \ = brackets[closing_brackets_index];\n        \n        if (opening_bracket ==\
    \ '(')\n        {\n            opening_brackets_size++;\n            opening_brackets_index++;\n\
    \        }\n        else if (opening_bracket == ')')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else if (opening_bracket\
    \ == '[' || opening_bracket == '{')\n        {\n            opening_brackets_size++;\n\
    \            opening_brackets_index++;\n        }\n        else if (opening_bracket\
    \ == ']' || opening_bracket == '}')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else\n        {\n \
    \           result = false;\n        }\n    }\n    \n    if (opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    \n   \
    \ while (opening_brackets_index < brackets_size)\n    {\n        char opening_bracket\
    \ = brackets[opening_brackets_index];\n        char closing_bracket = brackets[closing_brackets_index];\n\
    \        \n        if (opening_bracket == '(')\n        {\n            opening_brackets_size--;\n\
    \            opening_brackets_index++;\n        }\n        else if (opening_bracket\
    \ == ')')\n        {\n            closing_brackets_size--;\n            closing_brackets_index++;\n\
    \        }\n        else if (opening_bracket == '[' || opening_bracket == '{')\n\
    \        {\n            opening_brackets_size--;\n            opening_brackets_index++;\n\
    \        }\n        else if (opening_bracket == ']' || \nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm98j2pn_.d(87): Error: expression expected, not `unittest`\n/tmp/tmpm98j2pn_.d(88):
    Error: found `{` when expecting `)`\n/tmp/tmpm98j2pn_.d(104): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpm98j2pn_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketmap;\n    for(auto c : brackets)\n    {\n     \
    \   bracketmap[c] = c;\n    }\n    for(auto c : brackets)\n    {\n        if(!bracketmap.contains(c))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpai68t0gi.d(20): Error: no identifier for declarator `c`\n/tmp/tmpai68t0gi.d(20):
    Error: expression expected, not `:`\n/tmp/tmpai68t0gi.d(20): Error: found `brackets`
    when expecting `;` following `for` condition\n/tmp/tmpai68t0gi.d(24): Error: no
    identifier for declarator `c`\n/tmp/tmpai68t0gi.d(24): Error: expression expected,
    not `:`\n/tmp/tmpai68t0gi.d(24): Error: found `brackets` when expecting `;` following
    `for` condition\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpai68t0gi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i = 0; i\
    \ < brackets.length(); i++)\n    {\n        if(brackets[i] == '(')\n         \
    \   open_brackets++;\n        else if(brackets[i] == ')')\n            close_brackets++;\n\
    \        else\n            return false;\n    }\n    if(open_brackets != close_brackets)\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_64oy5x.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_64oy5x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '(')\
    \ {\n            while (j < len && brackets[j] != ')') {\n                j++;\n\
    \            }\n            if (j == len) {\n                result = false;\n\
    \                break;\n            }\n            i++;\n            while (j\
    \ < len && brackets[j] != ')') {\n                j++;\n            }\n      \
    \      if (j == len) {\n                result = false;\n                break;\n\
    \            }\n            i++;\n            while (j < len && brackets[j] !=\
    \ ')') {\n                j++;\n            }\n            if (j == len) {\n \
    \               result = false;\n                break;\n            }\n     \
    \       i++;\n            while (j < len && brackets[j] != ')') {\n          \
    \      j++;\n            }\n            if (j == len) {\n                result\
    \ = false;\n                break;\n            }\n            i++;\n        \
    \    while (j < len && brackets[j] != ')') {\n                j++;\n         \
    \   }\n            if (j == len) {\n                result = false;\n        \
    \        break;\n            }\n            i++;\n            while (j < len &&\
    \ brackets[j] != ')') {\n                j++;\n            }\n            if (j\
    \ == len) {\n                result = false;\n                break;\n       \
    \     }\n            i++;\n            while (j < len && brackets[j] != ')') {\n\
    \                j++;\n            }\n            if (j == len) {\n          \
    \      result = false;\n                break;\n            }\n            i++;\n\
    \            while (j < len && brackets[j] != ')') {\n                j++;\n \
    \           }\n            if (j == len) {\n                result = false;\n\
    \                break;\n            }\n            i++;\n            while (j\
    \ < len && brackets[j] != ')') {\n                j++;\n            }\n      \
    \      if (j == len) {\n                result = false;\n                break;\n\
    \            }\n            i++;\n            while (j < len && brackets[j] !=\
    \ ')') {\n                j++;\n            }\n            if (j == len) {\n \
    \               result = false;\n                break;\n            }\n     \
    \       i++;\n            while (j < len && brackets[j] != ')') {\n          \
    \      j++;\n            }\n            if (j == len) {\n                result\
    \ = false;\n                break;\n            }\n            i++;\n        \
    \    while (j < len && brackets[j] != ')') {\n                j++;\n         \
    \   }\n            if (j == len) {\n                result = false;\n        \
    \        break;\n            }\n            i++;\n            while (j < len &&\
    \ brackets[j] != ')') {\n                j++;\n            }\n            if (j\
    \ == len) {\n                result = false;\n                break;\n       \
    \     }\n            i++;\n            while (j < len && brackets[j] != ')') {\n\
    \                j++;\n            }\n            if (j == len) {\n          \
    \      result = false;\n                break;\n            }\n            i++;\n\
    \            \nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphgielzzg.d(138): Error: found `unittest` instead of statement\n/tmp/tmphgielzzg.d(155):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphgielzzg.d(155):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgielzzg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while (i < len) {\n        if (brackets[i] == '(')\
    \ {\n            while (j < len && brackets[j] != ')') {\n                j++;\n\
    \            }\n            if (j == len) {\n                result = false;\n\
    \                break;\n            }\n            i++;\n            j++;\n \
    \       } else if (brackets[i] == ')') {\n            while (j < len && brackets[j]\
    \ != ')') {\n                j++;\n            }\n            if (j == len) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        i++;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa1f2b6f4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1f2b6f4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); ++i)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n            i += 2;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzc17sc2q.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc17sc2q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets_size;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb3jicv5b.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3jicv5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_closing_brackets = 0;\n\
    \    size_t opening_closing_brackets_size = 0;\n    size_t opening_closing_brackets_size2\
    \ = 0;\n    size_t opening_closing_brackets_size3 = 0;\n    size_t opening_closing_brackets_size4\
    \ = 0;\n    size_t opening_closing_brackets_size5 = 0;\n    size_t opening_closing_brackets_size6\
    \ = 0;\n    size_t opening_closing_brackets_size7 = 0;\n    size_t opening_closing_brackets_size8\
    \ = 0;\n    size_t opening_closing_brackets_size9 = 0;\n    size_t opening_closing_brackets_size10\
    \ = 0;\n    size_t opening_closing_brackets_size11 = 0;\n    size_t opening_closing_brackets_size12\
    \ = 0;\n    size_t opening_closing_brackets_size13 = 0;\n    size_t opening_closing_brackets_size14\
    \ = 0;\n    size_t opening_closing_brackets_size15 = 0;\n    size_t opening_closing_brackets_size16\
    \ = 0;\n    size_t opening_closing_brackets_size17 = 0;\n    size_t opening_closing_brackets_size18\
    \ = 0;\n    size_t opening_closing_brackets_size19 = 0;\n    size_t opening_closing_brackets_size20\
    \ = 0;\n    size_t opening_closing_brackets_size21 = 0;\n    size_t opening_closing_brackets_size22\
    \ = 0;\n    size_t opening_closing_brackets_size23 = 0;\n    size_t opening_closing_brackets_size24\
    \ = 0;\n    size_t opening_closing_brackets_size25 = 0;\n    size_t opening_closing_brackets_size26\
    \ = 0;\n    size_t opening_closing_brackets_size27 = 0;\n    size_t opening_closing_brackets_size28\
    \ = 0;\n    size_t opening_closing_brackets_size29 = 0;\n    size_t opening_closing_brackets_size30\
    \ = 0;\n    size_t opening_closing_brackets_size31 = 0;\n    size_t opening_closing_brackets_size32\
    \ = 0;\n    size_t opening_closing_brackets_size33 = 0;\n    size_t opening_closing_brackets_size34\
    \ = 0;\n    size_t opening_closing_brackets_size35 = 0;\n    size_t open\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptt1jd21q.d(60): Error: found `open` when expecting `;` following
    statement\n/tmp/tmptt1jd21q.d(61): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptt1jd21q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_size = brackets.length();\n    for(int i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp72p8fkw2.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72p8fkw2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_count = brackets.length();\n    size_t opening_bracket = 0;\n\
    \    size_t closing_bracket = 0;\n    bool result = true;\n    for(size_t i =\
    \ 0; i < bracket_count; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(')\n        {\n            ++opening_bracket;\n        }\n        else\
    \ if(c == ')')\n        {\n            ++closing_bracket;\n        }\n       \
    \ else\n        {\n            assert(false);\n            result = false;\n \
    \       }\n        if(opening_bracket == closing_bracket)\n        {\n       \
    \     result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzuyxg2za.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuyxg2za.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w9gt5e4.d(19): Error: no property `length` for type `string`\n/tmp/tmp8w9gt5e4.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8w9gt5e4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(' || c == ')')\n        {\n            if(brackets[i+1] != '(')\n     \
    \       {\n                result = false;\n                break;\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9c06sac4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c06sac4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '{')\n        {\n            if(brackets[i+1] != '}')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == '[')\n        {\n            if(brackets[i+1] != ']')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxjxd7gms.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjxd7gms.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len = brackets.length();\n    for(int i = 0; i < len; ++i)\n    {\n  \
    \      if(brackets[i] == '(')\n        {\n            if(brackets[i+1] != '(')\n\
    \                return false;\n            i += 2;\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n            i += 2;\n        }\n        else\n            return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c\
    \ |>\nThis fails for `n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2tl0mptf.d(39): Error: declaration expected, not `<`\n/tmp/tmp2tl0mptf.d(42):
    Error: unterminated string constant starting at /tmp/tmp2tl0mptf.d(42)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tl0mptf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i)\n\
    \    {\n        if (brackets[i] == '(')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if (brackets[i] == ')')\n        {\n            ++closing_brackets;\n\
    \        }\n        else if (brackets[i] == '(' && closing_brackets > opening_brackets)\n\
    \        {\n            return false;\n        }\n        else if (brackets[i]\
    \ == ')' && opening_brackets > closing_brackets)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0fcg4921.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fcg4921.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int opening_brackets = brackets.length();\n    int closing_brackets = 0;\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n            opening_brackets++;\n        else if(brackets[i] == ')')\n\
    \            closing_brackets++;\n        else\n            return false;\n  \
    \  }\n    return opening_brackets == closing_brackets;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp540mk_sr.d(19): Error: no property `length` for type `string`\n/tmp/tmp540mk_sr.d(21):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp540mk_sr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if(brackets[i] == ')')\n            ++closing_brackets;\n      \
    \  else\n            return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3euxr7oq.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euxr7oq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l = 0;\n \
    \   size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p = 0;\n \
    \   size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t = 0;\n \
    \   size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x = 0;\n \
    \   size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t B = 0;\n \
    \   size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t F = 0;\n \
    \   size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t J = 0;\n \
    \   size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t N = 0;\n \
    \   size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t R = 0;\n \
    \   size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t V = 0;\n \
    \   size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t Z = 0;\n \
    \   size_t _ = 0;\n    size_t _1 = 0;\n    size_t _2 = 0;\n    size_t _3 = 0;\n\
    \    size_t _4 = 0;\n    size_t _5 = 0;\n    size_t _6 = 0;\n    size_t _7 = 0;\n\
    \    size_t _8 = 0;\n    size_t _9 = 0;\n    size_t _10 = 0;\n    size_t _11 =\
    \ 0;\n    size_t _12 = 0;\n    size_t _13 = 0;\n    size_t _14 = 0;\n    size_t\
    \ _15 = 0;\n    size_t _16 = 0;\n    size_t _17 = 0;\n    size_t _18 = 0;\n  \
    \  size_t _19 = 0;\n    size_t _20 = 0;\n    size_t _21 = 0;\n    size_t _22 =\
    \ 0;\n    size_t _23 = 0;\n    size_t _24 = 0;\n    size_t _25 = 0;\n    size_t\
    \ _26 = 0;\n    size_t _27 = 0;\n    size_t _28 = 0;\n    size_t _29 = 0;\n  \
    \  size_t _30 = 0;\n    size_t _31 = 0;\n    size_t _32 = 0;\n    size_t _33 =\
    \ 0;\n    size_t _34 = 0;\n    size_t _35 = 0;\n    size_t _36 = 0;\n    size_t\
    \ _37 = 0;\n    size_t _38 = 0;\n    size_t _39 = 0;\n    size_t _40 = 0;\n  \
    \  size_t _41 = 0;\n    size_t _42 = 0;\n    size_t _43 = 0;\n    size_t _44 =\
    \ 0;\n    size_t _45 = 0;\n    size_t _46 = 0;\n    size_t _47 = 0;\n    size_t\
    \ _48 = 0;\n    size_t _49 = 0;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfcmeb7ul.d(113): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcmeb7ul.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_count = 0;\n    for (size_t i = 0; i < brackets.length(); i++)\
    \ {\n        if (brackets[i] == '(') {\n            bracket_count++;\n       \
    \ } else if (brackets[i] == ')') {\n            bracket_count--;\n        }\n\
    \        if (bracket_count < 0) {\n            return false;\n        }\n    }\n\
    \    return bracket_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo0n1czwl.d(20): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0n1czwl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string openBracket = brackets[i];\n        string closeBracket\
    \ = brackets[brackets.length() - 1 - i];\n        bracketMap[openBracket] = closeBracket;\n\
    \    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        string\
    \ openBracket = brackets[i];\n        string closeBracket = bracketMap[openBracket];\n\
    \        if(openBracket != closeBracket)\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7a795kkk.d(19): Error: undefined identifier `map`\n/tmp/tmp7a795kkk.d(19):
    Error: undefined identifier `bracketMap`\n/tmp/tmp7a795kkk.d(20): Error: no property
    `length` for type `string`\n/tmp/tmp7a795kkk.d(22): Error: cannot implicitly convert
    expression `brackets[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmp7a795kkk.d(23):
    Error: no property `length` for type `string`\n/tmp/tmp7a795kkk.d(24): Error:
    undefined identifier `bracketMap`\n/tmp/tmp7a795kkk.d(26): Error: no property
    `length` for type `string`\n/tmp/tmp7a795kkk.d(28): Error: cannot implicitly convert
    expression `brackets[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmp7a795kkk.d(29):
    Error: undefined identifier `bracketMap`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7a795kkk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next2\
    \ = 0;\n    size_t closing_brackets_index_next2 = 0;\n    size_t opening_brackets_index_prev2\
    \ = 0;\n    size_t closing_brackets_index_prev2 = 0;\n    size_t opening_brackets_index_next3\
    \ = 0;\n    size_t closing_brackets_index_next3 = 0;\n    size_t opening_brackets_index_prev3\
    \ = 0;\n    size_t closing_brackets_index_prev3 = 0;\n    size_t opening_brackets_index_next4\
    \ = 0;\n    size_t closing_brackets_index_next4 = 0;\n    size_t opening_brackets_index_prev4\
    \ = 0;\n    size_t closing_brackets_index_prev4 = 0;\n    size_t opening_brackets_index_next5\
    \ = 0;\n    size_t closing_brackets_index_next5 = 0;\n    size_t opening_brackets_index_prev5\
    \ = 0;\n    size_t closing_brackets_index_prev5 = 0;\n    size_t opening_brackets_index_next6\
    \ = 0;\n    size_t closing_brackets_index_next6 = 0;\n    size_t opening_brackets_index_prev6\
    \ = 0;\n    size_t closing_brackets_index_prev6 = 0;\n    size_t opening_brackets_index_next7\
    \ = 0;\n    size_t closing_brackets_index_next7 = 0;\n    size_t opening_brackets_index_prev7\
    \ = 0;\n    size_t closing_brackets_index_prev7 = 0;\n    size_t opening_brackets_index_next8\
    \ = 0;\n    size_t closing_brackets_index_next8 = 0;\n    size_t opening_brackets_index_prev8\
    \ = 0;\n    size_t closing_brackets_index_prev8 = 0;\n    size_t opening_brackets_index_next9\
    \ = 0;\n    size_t closing_brackets_index_next9 = 0;\n    size_t opening_brackets_index_prev9\
    \ = 0;\n    size_t closing_brackets_index_prev9 = 0;\n    size_t opening_brackets_index_next10\
    \ = 0;\n    size_t closing_brackets_index_next10 = 0;\n    size_t opening\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpot4f2km7.d(62): Error: found `opening` when expecting `;` following
    statement\n/tmp/tmpot4f2km7.d(63): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpot4f2km7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i + 1] != '(')\n            {\n\
    \                return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i + 1] != '(')\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_tfmy9a.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_tfmy9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i;\n    \n    for (i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets;\n    }\n\
    \    \n    return opening_brackets == closing_brackets;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2fo05ihx.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fo05ihx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int bracketCount = 0;\n    for(int i = 0; i < brackets.length(); i++)\n  \
    \  {\n        if(brackets[i] == '(')\n            bracketCount++;\n        else\
    \ if(brackets[i] == ')')\n        {\n            if(bracketCount > 0)\n      \
    \      {\n                bracketCount--;\n            }\n            else\n \
    \           {\n                return false;\n            }\n        }\n    }\n\
    \    return bracketCount == 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ the idea of using stacks to solve this problem. Thanks!\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4fyvd7b.d(38): Error: declaration expected, not `<`\n/tmp/tmpt4fyvd7b.d(49):
    Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(50): Error: declaration
    expected, not `assert`\n/tmp/tmpt4fyvd7b.d(51): Error: declaration expected, not
    `assert`\n/tmp/tmpt4fyvd7b.d(52): Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmpt4fyvd7b.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmpt4fyvd7b.d(56): Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpt4fyvd7b.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmpt4fyvd7b.d(60): Error: declaration expected, not `assert`\n/tmp/tmpt4fyvd7b.d(61):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4fyvd7b.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i)\n\
    \    {\n        char c = brackets[i];\n        if (c == '(')\n            ++opening_brackets;\n\
    \        else if (c == ')')\n            ++closing_brackets;\n        else if\
    \ (c != brackets[i])\n            return false;\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3b7vt1i.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3b7vt1i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t\
    \ k = 0;\n    bool result = true;\n    \n    while (i<brackets_size) {\n     \
    \   if (brackets[i] == '(') {\n            opening_brackets++;\n        }\n  \
    \      else if (brackets[i] == ')') {\n            closing_brackets++;\n     \
    \   }\n        else if (brackets[i] == '[') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == ']')\
    \ {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '{') {\n            opening_brackets++;\n            closing_brackets++;\n\
    \        }\n        else if (brackets[i] == '}') {\n            opening_brackets++;\n\
    \        }\n        else if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '>')\
    \ {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '!') {\n            opening_brackets++;\n            closing_brackets++;\n\
    \        }\n        else if (brackets[i] == '=') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '+')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '-') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '*')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '/') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '%')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '^') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '&')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i] == '|') {\n            opening_brackets++;\n\
    \            closing_brackets++;\n        }\n        else if (brackets[i] == '!')\
    \ {\n            opening_brackets++;\n            closing_brackets++;\n      \
    \  }\n        else if (brackets[i]\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhp014wc.d(100): Error: found `unittest` when expecting `)`\n/tmp/tmpjhp014wc.d(117):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpjhp014wc.d(117):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhp014wc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n   \
    \ {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1] !=\
    \ ')')\n                return false;\n            i += 2;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0pwv2y_.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0pwv2y_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_closing_brackets = 0;\n\
    \    size_t opening_closing_brackets_size = 0;\n    size_t opening_closing_brackets_size2\
    \ = 0;\n    size_t opening_closing_brackets_size3 = 0;\n    size_t opening_closing_brackets_size4\
    \ = 0;\n    size_t opening_closing_brackets_size5 = 0;\n    size_t opening_closing_brackets_size6\
    \ = 0;\n    size_t opening_closing_brackets_size7 = 0;\n    size_t opening_closing_brackets_size8\
    \ = 0;\n    size_t opening_closing_brackets_size9 = 0;\n    size_t opening_closing_brackets_size10\
    \ = 0;\n    size_t opening_closing_brackets_size11 = 0;\n    size_t opening_closing_brackets_size12\
    \ = 0;\n    size_t opening_closing_brackets_size13 = 0;\n    size_t opening_closing_brackets_size14\
    \ = 0;\n    size_t opening_closing_brackets_size15 = 0;\n    size_t opening_closing_brackets_size16\
    \ = 0;\n    size_t opening_closing_brackets_size17 = 0;\n    size_t opening_closing_brackets_size18\
    \ = 0;\n    size_t opening_closing_brackets_size19 = 0;\n    size_t opening_closing_brackets_size20\
    \ = 0;\n    size_t opening_closing_brackets_size21 = 0;\n    size_t opening_closing_brackets_size22\
    \ = 0;\n    size_t opening_closing_brackets_size23 = 0;\n    size_t opening_closing_brackets_size24\
    \ = 0;\n    size_t opening_closing_brackets_size25 = 0;\n    size_t opening_closing_brackets_size26\
    \ = 0;\n    size_t opening_closing_brackets_size27 = 0;\n    size_t opening_closing_brackets_size28\
    \ = 0;\n    size_t opening_closing_brackets_size29 = 0;\n    size_t opening_closing_brackets_size30\
    \ = 0;\n    size_t opening_closing_brackets_size31 = 0;\n    size_t opening_closing_brackets_size32\
    \ = 0;\n    size_t opening_closing_brackets_size33 = 0;\n    size_t opening_closing_brackets_size34\
    \ = 0;\n    size_t opening_closing_brackets_size35 = 0;\n    size_t opening_closing_brackets_size36\
    \ = 0;\n    size_t opening_closing_brackets_size37\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2mhm4a4.d(59): Error: found `opening_closing_brackets_size37`
    when expecting `;` following statement\n/tmp/tmpi2mhm4a4.d(60): Error: found `unittest`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2mhm4a4.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len) {\n        switch(brackets[i]) {\n\
    \            case '(':\n                j++;\n                break;\n       \
    \     case ')':\n                j--;\n                break;\n        }\n   \
    \     if(j < 0) {\n            result = false;\n            break;\n        }\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqroavsk2.d(19): Error: no property `length` for type `string`\n/tmp/tmpqroavsk2.d(24):
    Error: `switch` statement without a `default`; use `final switch` or add `default:
    assert(0);` or add `default: break;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqroavsk2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++) {\n\t\tchar c = brackets[i];\n\t\t\
    if (c != '(' && c != ')') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptgbgl6bi.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgbgl6bi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++opening_brackets_size;\n\
    \        else if (brackets[i] == ')')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6_njpk5.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6_njpk5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code doesn't work for me. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied the\
    \ code correctly? It works for me. Did you copy the code exactly as it is in my\
    \ answer?\n<|/ c |>\n<| c |>\nYes, I copied exactly as you did. I'm using Visual\
    \ Studio 2013.\n<|/ c |>\n<| c |>\nI tested it on Visual Studio 2010 and it works\
    \ fine. Are you sure you copied the code correctly? It works for me. Did you copy\
    \ the code exactly as it is in my answer?\n<|/ c |>\n<| c |>\nYes, I copied exactly\
    \ as you did. I'm using Visual Studio 2013.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmjtjyw2p.d(38): Error: declaration expected, not `<`\n/tmp/tmpmjtjyw2p.d(41):
    Error: unterminated character constant\n/tmp/tmpmjtjyw2p.d(47): Error: unterminated
    character constant\n/tmp/tmpmjtjyw2p.d(53): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjtjyw2p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like this solution. One thing\
    \ though, why not just `return brackets[i+1] == '(' && brackets[i-1] == ')'`?\n\
    <|/ c |>\n<| c |>\nBecause that would return true for something like `()()()`.\
    \ That is why I added the second `if` statement.\n<|/ c |>\n<| c |>\nAh I see.\
    \ Thanks for the explanation!\n<|/ c |>\n<| c |>\nI like this solution, too. One\
    \ thing though, why not just `return brackets[i+1] == '(' && brackets[i-1] ==\
    \ ')'`?\n<|/ c |>\n<| c |>\nBecause that would return true for something like\
    \ `()()()`. That is why I added the second `if` statement.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe algorithm is simple:\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt_gsaqm6.d(38): Error: declaration expected, not `<`\n/tmp/tmpt_gsaqm6.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpt_gsaqm6.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpt_gsaqm6.d(64): Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpt_gsaqm6.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpt_gsaqm6.d(68): Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(69):
    Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(70): Error: declaration
    expected, not `assert`\n/tmp/tmpt_gsaqm6.d(71): Error: declaration expected, not
    `assert`\n/tmp/tmpt_gsaqm6.d(72): Error: declaration expected, not `assert`\n/tmp/tmpt_gsaqm6.d(73):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_gsaqm6.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        if(c == '(') {\n            i++;\n        } else if(c == ')') {\n   \
    \         j++;\n        } else {\n            result = false;\n        }\n   \
    \ }\n    return result && i == len;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvbbnvuqk.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbbnvuqk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ opening_brackets_end = 0;\n    size_t closing_brackets_end = 0;\n    size_t\
    \ opening_brackets_end_minus_one = 0;\n    size_t closing_brackets_end_minus_one\
    \ = 0;\n    size_t opening_brackets_end_minus_two = 0;\n    size_t closing_brackets_end_minus_two\
    \ = 0;\n    size_t opening_brackets_end_minus_three = 0;\n    size_t closing_brackets_end_minus_three\
    \ = 0;\n    size_t opening_brackets_end_minus_four = 0;\n    size_t closing_brackets_end_minus_four\
    \ = 0;\n    size_t opening_brackets_end_minus_five = 0;\n    size_t closing_brackets_end_minus_five\
    \ = 0;\n    size_t opening_brackets_end_minus_six = 0;\n    size_t closing_brackets_end_minus_six\
    \ = 0;\n    size_t opening_brackets_end_minus_seven = 0;\n    size_t closing_brackets_end_minus_seven\
    \ = 0;\n    size_t opening_brackets_end_minus_eight = 0;\n    size_t closing_brackets_end_minus_eight\
    \ = 0;\n    size_t opening_brackets_end_minus_nine = 0;\n    size_t closing_brackets_end_minus_nine\
    \ = 0;\n    size_t opening_brackets_end_minus_ten = 0;\n    size_t closing_brackets_end_minus_ten\
    \ = 0;\n    size_t opening_brackets_end_minus_eleven = 0;\n    size_t closing_brackets_end_minus_eleven\
    \ = 0;\n    size_t opening_brackets_end_minus_twelve = 0;\n    size_t closing_brackets_end_minus_twelve\
    \ = 0;\n    size_t opening_brackets_end_minus_thirteen = 0;\n    size_t closing_brackets_end_minus_thirteen\
    \ = 0;\n    size_t opening_brackets_end_minus_fourteen = 0;\n    size_t closing_brackets_end_minus_fourteen\
    \ = 0;\n    size_t opening_brackets_end_minus_fifteen = 0;\n    size_t closing_brackets_end_minus_fifteen\
    \ = 0;\n    size_t opening_brackets_end_minus_sixteen = 0;\n    size_t closing_brackets_end_minus_sixteen\
    \ = 0;\n    size_t opening_brackets_end_minus_seventeen = 0;\n    size_t \nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx2rxpf8k.d(57): Error: found `unittest` when expecting `;` following
    statement\n/tmp/tmpx2rxpf8k.d(74): Error: found `End of File` when expecting `}`
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2rxpf8k.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            i += 2;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp26zi86f4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26zi86f4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9lts6x7.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9lts6x7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            i += 2;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp26zi86f4.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26zi86f4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i+1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsc3utljr.d(19): Error: no property `length` for type `string`\n/tmp/tmpsc3utljr.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsc3utljr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    size_t j = 0;\n    size_t len = brackets.length();\n  \
    \  bool result = true;\n    while(i < len && j < len) {\n        if(brackets[i]\
    \ == '(') {\n            i++;\n            if(brackets[j] != ')') {\n        \
    \        result = false;\n                break;\n            }\n            j++;\n\
    \        }\n        else if(brackets[i] == ')') {\n            i++;\n        \
    \    if(brackets[j] != ')') {\n                result = false;\n             \
    \   break;\n            }\n            j++;\n        }\n        else {\n     \
    \       i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiix1etwb.d(21): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiix1etwb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> bracketMap;\n    for(auto &bracket : brackets)\n    {\n\
    \        auto it = bracketMap.find(bracket);\n        if(it == bracketMap.end())\n\
    \        {\n            bracketMap[bracket] = bracket;\n        }\n        else\n\
    \        {\n            auto &currentBracket = it->second;\n            if(currentBracket\
    \ != bracket)\n            {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr2xzjvq_.d(20): Error: basic type expected, not `&`\n/tmp/tmpr2xzjvq_.d(20):
    Error: no identifier for declarator `_error_`\n/tmp/tmpr2xzjvq_.d(20): Error:
    found `:` when expecting `;` following `for` condition\n/tmp/tmpr2xzjvq_.d(29):
    Error: basic type expected, not `&`\n/tmp/tmpr2xzjvq_.d(29): Error: no identifier
    for declarator `_error_`\n/tmp/tmpr2xzjvq_.d(29): Error: found `&` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2xzjvq_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t\
    \ k = 0;\n    size_t brackets_size2 = brackets_size;\n    bool result = true;\n\
    \    \n    while (brackets_size2 > 0) {\n        opening_brackets_size = 0;\n\
    \        closing_brackets_size = 0;\n        opening_brackets = 0;\n        closing_brackets\
    \ = 0;\n        \n        for (j = 0; j < brackets_size2; j++) {\n           \
    \ if (brackets[j] == '(') {\n                opening_brackets++;\n           \
    \     opening_brackets_size++;\n            }\n            else if (brackets[j]\
    \ == ')') {\n                closing_brackets++;\n                closing_brackets_size++;\n\
    \            }\n        }\n        \n        if (opening_brackets_size != closing_brackets_size)\
    \ {\n            result = false;\n        }\n        \n        brackets_size2\
    \ = brackets_size2 - opening_brackets_size - closing_brackets_size;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuvnnftla.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvnnftla.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    \n    for (auto c : brackets)\n   \
    \ {\n        auto it = brackets_map.find(c);\n        if (it == brackets_map.end())\n\
    \        {\n            brackets_map[c] = c;\n        }\n        else\n      \
    \  {\n            if (brackets_map[c] != c)\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph5bawu5a.d(21): Error: no identifier for declarator `c`\n/tmp/tmph5bawu5a.d(21):
    Error: expression expected, not `:`\n/tmp/tmph5bawu5a.d(21): Error: found `brackets`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmph5bawu5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i + 1] != '(')\n               \
    \ return false;\n            i += 1;\n        }\n        else if(brackets[i] ==\
    \ ')')\n        {\n            if(brackets[i + 1] != '(')\n                return\
    \ false;\n            i += 1;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyh7o4nwo.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyh7o4nwo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp640n_skb.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp640n_skb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_in_brackets\
    \ = -1;\n    size_t closing_brackets_index_in_brackets = -1;\n    bool result\
    \ = true;\n    \n    for (size_t i = 0; i < brackets_size; ++i)\n    {\n     \
    \   char c = brackets[i];\n        if (c == '(')\n        {\n            ++opening_brackets_size;\n\
    \            opening_brackets_index++;\n        }\n        else if (c == ')')\n\
    \        {\n            ++closing_brackets_size;\n            closing_brackets_index++;\n\
    \        }\n        else if (c == ')' && opening_brackets_index > 0)\n       \
    \ {\n            opening_brackets_index--;\n        }\n        else if (c == '('\
    \ && closing_brackets_index > 0)\n        {\n            closing_brackets_index--;\n\
    \        }\n        else if (c == '(' && opening_brackets_index == 0 && closing_brackets_index\
    \ == 0)\n        {\n            opening_brackets_index_in_brackets = i;\n    \
    \        closing_brackets_index_in_brackets = i;\n        }\n        else if (c\
    \ == ')' && opening_brackets_index == 0 && closing_brackets_index == 0)\n    \
    \    {\n            opening_brackets_index_in_brackets = i;\n            closing_brackets_index_in_brackets\
    \ = i;\n        }\n        else if (c == '(' && opening_brackets_index > 0 &&\
    \ closing_brackets_index > 0)\n        {\n            opening_brackets_index_in_brackets\
    \ = i;\n            closing_brackets_index_in_brackets = i;\n        }\n     \
    \   else if (c == ')' && opening_brackets_index > 0 && closing_brackets_index\
    \ > 0)\n        {\n            opening_brackets_index_in_brackets = i;\n     \
    \       closing_brackets_index_in_brackets = i;\n        }\n        else if (c\
    \ == '(' && opening_brackets_index == 0 && closing_brackets_index > 0)\n     \
    \   {\n            opening_brackets_index_in_brackets = i;\n            closing_brackets_index_in_brackets\
    \ = i;\n        }\n        else if (c == ')' && opening_brackets_index == 0 &&\
    \ closing_brackets_index > 0)\n        {\n            opening_brackets_index_in_brackets\
    \ = i;\n            \nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpahmzah6f.d(78): Error: found `unittest` instead of statement\n/tmp/tmpahmzah6f.d(95):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpahmzah6f.d(95):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpahmzah6f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, int> bracketCount;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        string bracket = brackets[i];\n        if(bracket.length()\
    \ == 0)\n            continue;\n        if(bracketCount.find(bracket) == bracketCount.end())\n\
    \            bracketCount[bracket] = 0;\n        bracketCount[bracket]++;\n  \
    \  }\n    for(map<string, int>::iterator it = bracketCount.begin(); it != bracketCount.end();\
    \ ++it)\n    {\n        if(it->second != brackets.length())\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplniziao8.d(19): Error: found `>` when expecting `.` following
    int\n/tmp/tmplniziao8.d(29): Error: found `>` when expecting `.` following int\n/tmp/tmplniziao8.d(29):
    Error: found `:` when expecting identifier following `int`.\n/tmp/tmplniziao8.d(29):
    Error: found `:` when expecting `;` following statement\n/tmp/tmplniziao8.d(29):
    Error: found `it` when expecting `;` following `for` condition\n/tmp/tmplniziao8.d(29):
    Error: expression expected, not `=`\n/tmp/tmplniziao8.d(29): Error: found `bracketCount`
    when expecting `)`\n/tmp/tmplniziao8.d(29): Error: found `)` when expecting `;`
    following statement\n/tmp/tmplniziao8.d(31): Error: use `.` for member lookup,
    not `->`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplniziao8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != ')')\n                return false;\n            ++i;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv77bq0id.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv77bq0id.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto brackets_array = brackets.toCharArray();\n\tauto brackets_array_size = brackets_array.size();\n\
    \t\n\tfor (int i = 0; i < brackets_array_size; ++i)\n\t{\n\t\tauto current_bracket\
    \ = brackets_array[i];\n\t\t\n\t\tif (current_bracket == '(')\n\t\t{\n\t\t\tauto\
    \ next_bracket = brackets_array[i+1];\n\t\t\tif (next_bracket != ')')\n\t\t\t\t\
    return false;\n\t\t}\n\t\telse if (current_bracket == ')')\n\t\t{\n\t\t\tauto\
    \ next_bracket = brackets_array[i+1];\n\t\t\tif (next_bracket != '(')\n\t\t\t\t\
    return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb15jh9e5.d(19): Error: no property `toCharArray` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb15jh9e5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '(')\n       \
    \ {\n            if(brackets[i+1] != ')')\n            {\n                result\
    \ = false;\n                break;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdxvr1c1h.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxvr1c1h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_size = brackets.size();\n    for(int i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != '(')\n                return false;\n            i += 2;\n        }\n   \
    \     else if(brackets[i] == ')')\n        {\n            if(brackets[i+1] !=\
    \ '(')\n                return false;\n            i += 2;\n        }\n      \
    \  else\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsgrdafb.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsgrdafb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_size = brackets_size\
    \ - 1;\n    size_t closing_brackets_size = brackets_size - 1;\n    bool result\
    \ = true;\n    for(size_t i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if(brackets[i] == ')')\n        {\n            closing_brackets++;\n       \
    \ }\n        else if(brackets[i] == '(' && opening_brackets > closing_brackets)\n\
    \        {\n            result = false;\n        }\n        else if(brackets[i]\
    \ == ')' && opening_brackets > closing_brackets)\n        {\n            result\
    \ = false;\n        }\n    }\n    if(opening_brackets != closing_brackets)\n \
    \   {\n        result = false;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdtenqnd.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdtenqnd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, string> brackets_map;\n    \n    for (auto &bracket : brackets)\n\
    \    {\n        auto it = brackets_map.find(bracket);\n        if (it == brackets_map.end())\n\
    \        {\n            brackets_map.insert({bracket, bracket});\n        }\n\
    \        else\n        {\n            if (brackets_map[bracket] != bracket)\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    \n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4n8mevqi.d(21): Error: basic type expected, not `&`\n/tmp/tmp4n8mevqi.d(21):
    Error: no identifier for declarator `_error_`\n/tmp/tmp4n8mevqi.d(21): Error:
    found `:` when expecting `;` following `for` condition\n/tmp/tmp4n8mevqi.d(26):
    Error: found `}` when expecting `;` following statement\n/tmp/tmp4n8mevqi.d(26):
    Error: found `)` instead of statement\n/tmp/tmp4n8mevqi.d(28): Error: found `else`
    when expecting `,`\n/tmp/tmp4n8mevqi.d(35): Error: found `}` when expecting `,`\n/tmp/tmp4n8mevqi.d(37):
    Error: expression expected, not `return`\n/tmp/tmp4n8mevqi.d(37): Error: found
    `true` when expecting `,`\n/tmp/tmp4n8mevqi.d(37): Error: expression expected,
    not `;`\n/tmp/tmp4n8mevqi.d(38): Error: found `}` when expecting `,`\n/tmp/tmp4n8mevqi.d(39):
    Error: expression expected, not `unittest`\n/tmp/tmp4n8mevqi.d(40): Error: found
    `{` when expecting `,`\n/tmp/tmp4n8mevqi.d(41): Error: expression expected, not
    `alias`\n/tmp/tmp4n8mevqi.d(41): Error: found `candidate` when expecting `,`\n/tmp/tmp4n8mevqi.d(41):
    Error: expression expected, not `=`\n/tmp/tmp4n8mevqi.d(41): Error: found `correct_bracketing`
    when expecting `,`\n/tmp/tmp4n8mevqi.d(41): Error: expression expected, not `;`\n/tmp/tmp4n8mevqi.d(43):
    Error: found `assert` when expecting `,`\n/tmp/tmp4n8mevqi.d(43): Error: found
    `;` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4n8mevqi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n        else if(brackets[i]\
    \ == ')')\n        {\n            if(brackets[i-1] != '(')\n            {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3iuu5ozt.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3iuu5ozt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t\
    \ k = 0;\n    bool result = true;\n    \n    while (i<brackets_size)\n    {\n\
    \        if (brackets[i] == '(')\n        {\n            opening_brackets++;\n\
    \        }\n        else if (brackets[i] == ')')\n        {\n            closing_brackets++;\n\
    \        }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uusm3m1.d(19): Error: no property `size` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uusm3m1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '(')\n        {\n            if(!(i+1 < len && brackets[i+1] == ')'))\n \
    \           {\n                result = false;\n                break;\n     \
    \       }\n        }\n        else if(c == ')')\n        {\n            if(!(i+1\
    \ < len && brackets[i+1] == '('))\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv59u9jsv.d(19): Error: no property `length` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv59u9jsv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = brackets.find_first_of(\"()\");\n    size_t closing_brackets\
    \ = brackets.find_last_of(\"()\");\n    size_t length = brackets.length();\n \
    \   \n    if (opening_brackets == string::npos || closing_brackets == string::npos)\n\
    \        return false;\n    \n    for (size_t i = 0; i < length; i++)\n    {\n\
    \        if (brackets[i] == '(' && brackets[i + 1] != ')')\n            return\
    \ false;\n        if (brackets[i] == ')' && brackets[i + 1] != '(')\n        \
    \    return false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd1jzjwjf.d(23): Error: found `:` when expecting `)`\n/tmp/tmpd1jzjwjf.d(23):
    Error: found `:` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd1jzjwjf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = brackets.length();\n    size_t closing_brackets\
    \ = 0;\n    for(size_t i = 0; i < brackets.length(); ++i)\n    {\n        char\
    \ c = brackets[i];\n        if(c == '(')\n            ++opening_brackets;\n  \
    \      else if(c == ')')\n            ++closing_brackets;\n        else\n    \
    \        return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nnhm65l.d(19): Error: no property `length` for type `string`\n/tmp/tmp2nnhm65l.d(21):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2nnhm65l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8w9gt5e4.d(19): Error: no property `length` for type `string`\n/tmp/tmp8w9gt5e4.d(23):
    Error: no property `length` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8w9gt5e4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_end\
    \ = 0;\n    size_t closing_brackets_end = 0;\n    size_t opening_brackets_index2\
    \ = 0;\n    size_t closing_brackets_index2 = 0;\n    size_t opening_brackets_end2\
    \ = 0;\n    size_t closing_brackets_end2 = 0;\n    size_t opening_brackets_index3\
    \ = 0;\n    size_t closing_brackets_index3 = 0;\n    size_t opening_brackets_end3\
    \ = 0;\n    size_t closing_brackets_end3 = 0;\n    size_t opening_brackets_index4\
    \ = 0;\n    size_t closing_brackets_index4 = 0;\n    size_t opening_brackets_end4\
    \ = 0;\n    size_t closing_brackets_end4 = 0;\n    size_t opening_brackets_index5\
    \ = 0;\n    size_t closing_brackets_index5 = 0;\n    size_t opening_brackets_end5\
    \ = 0;\n    size_t closing_brackets_end5 = 0;\n    size_t opening_brackets_index6\
    \ = 0;\n    size_t closing_brackets_index6 = 0;\n    size_t opening_brackets_end6\
    \ = 0;\n    size_t closing_brackets_end6 = 0;\n    size_t opening_brackets_index7\
    \ = 0;\n    size_t closing_brackets_index7 = 0;\n    size_t opening_brackets_end7\
    \ = 0;\n    size_t closing_brackets_end7 = 0;\n    size_t opening_brackets_index8\
    \ = 0;\n    size_t closing_brackets_index8 = 0;\n    size_t opening_brackets_end8\
    \ = 0;\n    size_t closing_brackets_end8 = 0;\n    size_t opening_brackets_index9\
    \ = 0;\n    size_t closing_brackets_index9 = 0;\n    size_t opening_brackets_end9\
    \ = 0;\n    size_t closing_brackets_end9 = 0;\n    size_t opening_brackets_index10\
    \ = 0;\n    size_t closing_brackets_index10 = 0;\n    size_t opening_brackets_end10\
    \ = 0;\n    size_t closing_brackets_end10 = 0;\n    size_t opening_brackets_index11\
    \ = 0;\n    size_t closing_brackets_index11 = 0;\n    size_t opening_brackets_end11\
    \ = 0;\n    size_t closing_bra\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqoki1zr7.d(65): Error: found `closing_bra` when expecting `;`
    following statement\n/tmp/tmpqoki1zr7.d(66): Error: found `unittest` instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoki1zr7.d", "-I/tmp"]\n'''
  stdout: b''
