name: HumanEval_92_any_int
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of\
  \ the other two, and all numbers are integers.\n    Returns false in any other cases.\n\
  \    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L,\
  \ 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6,\
  \ -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float\
  \ z) \n"
tests: "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
  \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
  \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
  \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
  \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
  \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
completions: ["{\n    return std.math.isInfinite(x) && std.math.isInfinite(y) && std.math.isInfinite(z)\
    \ && std.math.isFinite(x+y+z);\n}", "{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n}", "{\n    return std.math.isInside(x, y, z);\n\
    }", "{\n    return ((std.int(x) == std.int(y)) || (std.int(y) == std.int(z)) ||\
    \ (std.int(z) == std.int(x)));\n}", "{\n    bool result = false;\n    \n    if\
    \ (x == y || x == z || y == z) \n    {\n        result = true;\n    }\n    \n\
    \    return result;\n}", "{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isnan(x) && !std.math.isnan(y)\
    \ && !std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && !std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && !", "{\n\
    \    bool result = false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) {\n        return result;\n    }\n    \n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isnan(x) && std.math.isnan(y) && std.math.isnan(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z)) {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) {\n        return result;\n    }\n\
    \    \n    if (std.math.isnan(x) || std.math.isnan(y) || std.math.isnan(z)) {\n\
    \        return result;\n    }\n    \n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) {\n        return result;\n    }\n    \n    if (std.math.is",
  "{\n    if ( x == y )\n    {\n        if ( x == z )\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n    return\
    \ ((std.math._abs(x) + std.math._abs(y) + std.math._abs(z)) <= std.math._max(std.math._abs(x),\
    \ std.math._abs(y), std.math._abs(z)));\n}", "{\n    bool result = false;\n  \
    \  \n    if (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z)) {\n\
    \        result = std.math.isEqual(x + y, z);\n    }\n    \n    return result;\n\
    }", "{\n    return ((std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z))\
    \ || (std.math.isInt(x) && std.math.isInt(y) && !std.math.isInt(z)) || (!std.math.isInt(x)\
    \ && std.math.isInt(y) && std.math.isInt(z)));\n}", "{\n    return ((std.math.isIntegral(x)\
    \ && std.math.isIntegral(y) && std.math.isIntegral(z)) || (std.math.isIntegral(x)\
    \ && std.math.isIntegral(y) && std.math.isIntegral(z) && std.math.isIntegral(x+y)\
    \ && std.math.isIntegral(x+z) && std.math.isIntegral(y+z)));\n}", "{\n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isinf(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y", "{\n    return ((x == x + y) && (x == x + z) && (x ==\
    \ y + z));\n}", "{\n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z);\n}", "{\n    return std.int(x) == std.int(y) +\
    \ std.int(z);\n}", "{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}", "{\n    return std.int(x) == std.int(y) +\
    \ std.int(z);\n}", "{\n    return ((std.math._abs(x) + std.math._abs(y) + std.math._abs(z))\
    \ >= std.math._abs(x + y + z));\n}", "{\n    bool result = false;\n    \n    if\
    \ ( x == y )\n    {\n        if ( x == z )\n        {\n            result = true;\n\
    \        }\n    }\n    else\n    {\n        if ( y == z )\n        {\n       \
    \     result = true;\n        }\n    }\n    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
