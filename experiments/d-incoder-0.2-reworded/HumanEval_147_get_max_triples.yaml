name: HumanEval_147_get_max_triples
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n        For each\
  \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the\
  \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j]\
  \ + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n   \
  \ 1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid\
  \ triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n"
tests: "unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L)\
  \ == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n\
  \    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
completions: ["{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0;\
    \ i<n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n\
    \    for(int i = 0; i<n; i++)\n    {\n        for(int j = 0; j<n; j++)\n     \
    \   {\n            for(int k = 0; k<n; k++)\n            {\n                if(i<j\
    \ && j<k && a[i] + a[j] + a[k] == sum)\n                {\n                  \
    \  return 1L;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic int getMaxTriples(int\
    \ n) {\n    int[] a = new int[n];\n    Arrays.fill(a, 0);\n    Arrays.fill(a,\
    \ 1);\n    Arrays.fill(a, 2);\n    Arrays.fill(a, 3);\n    int count = 0;\n  \
    \  for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            for (int k = j + 1; k < n; k++) {\n                if (a[i] == a[j]\
    \ + a[k]) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,java,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int getMaxTriples(int n) {\n \
    \   int[] a = new int[n];\n    Arrays.fill(a, 0);\n    Arrays.fill(a, 1);\n  \
    \  Arrays.fill(a, 2);\n    Arrays.fill(a, 3);\n    int count = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          \
    \  for (int k = j + 1; k < n; k++) {\n                if (a[i] == a[j] + a[k])\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,java,arrays |>\n<|\
    \ a |>\n<code>\npublic int getMaxTriples(int n) {\n    int[] a = new int[n];\n\
    \    Arrays.fill(a, 0);\n    Arrays.fill(a, 1);\n    Arrays.fill(a, 2);\n    Arrays.fill(a,\
    \ 3);\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n  \
    \              if (a[i] == a[j] + a[k]) {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 tags=algorithm,java,arrays |>\n<| c |>\nPlease don't post only\
    \ code as an answ", "{\n    long long a[n];\n    long long sum = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    sort(a, a + n);\n    long long ans = 0;\n    for(long i = 0; i < n;\
    \ i++){\n        for(long j = i + 1; j < n; j++){\n            for(long k = j\
    \ + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n        \
    \            ans++;\n                    break;\n                }\n         \
    \   }\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis solution does not work. Consider `get_max_triples(5L)` which\
    \ returns `1L`. Your solution returns `2L` which is wrong.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the explanation to the answer.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added the explanation to the answer.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added the explanation to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the explanation to the answer.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long i, j, k;\n    long long sum = 0;\n    for(i = 0; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n    \
    \    for(j = i+1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    sum += 1;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| c |>\nIt works fine for me. Can you give an example where it fails?\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `get_max_triples(5L)`. It returns `1L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(5L)` and it returns\
    \ `2L`. Can you give an example where it fails?\n<|/ c |>\n<| c |>\nIt returns\
    \ `1L` for `get_max_triples(5L)`.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < n; j++)\n        {\n            for(int k = 0; k <\
    \ n; k++)\n            {\n                if(a[i] < a[j] && a[i] < a[k])\n   \
    \             {\n                    if(a[j] < a[k])\n                    {\n\
    \                        if(a[j] + a[k] == 0)\n                        {\n   \
    \                         triples++;\n                        }\n            \
    \            else\n                        {\n                            triples++;\n\
    \                        }\n                    }\n                    else\n\
    \                    {\n                        if(a[j] + a[k] == 0)\n       \
    \                 {\n                            triples++;\n                \
    \        }\n                        else\n                        {\n        \
    \                    triples++;\n                        }\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis code is not correct. `a[i]\
    \ = i * i - i + 1;` should be `a[i] = i * i - 1;`\n<|/ c |>\n<| c |>\nThis code\
    \ is not correct. `a[i] = i * i - 1;` should be `a[i] = i * i;`\n<|/ c |>\n<|\
    \ c |>\nThis code is not correct. `a[i] = i * i - 1;` should be `a[i] = i * i;`\n\
    <|/ c |>\n<| c |>\nThis code is not correct. `a[i] = i * i - 1;` should be `a[i]\
    \ = i * i;`\n<|/ c |>\n<| c |>\nThis code is not correct. `a[i] = i * i - 1;`\
    \ should be `a[i] = i * i;`\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long long i,\
    \ j, k;\n    long long sum = 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ i + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n        \
    \    {\n                if(a[i] < a[j] && a[i] < a[k])\n                {\n  \
    \                  if(a[j] < a[k])\n                    {\n                  \
    \      sum += a[i];\n                        break;\n                    }\n \
    \                   else\n                    {\n                        sum +=\
    \ a[j];\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++,c,arrays\
    \ |>\n<| c |>\nI believe that `a[i] = i * i - i + 1;` should be `a[i] = i * i\
    \ - 1;`\n<|/ c |>\n<| c |>\n: No, that would give the wrong answer. `i * i - 1`\
    \ would be `i * i` when `i` is odd. `i * i - 1` would be `i` when `i` is even.\n\
    <|/ c |>\n<| c |>\n: I believe that `a[i] = i * i - 1;` should be `a[i] = i *\
    \ i + 1;`\n<|/ c |>\n<| c |>\n: No, that would give the wrong answer. `i * i +\
    \ 1` would be `i * i` when `i` is odd. `i * i + 1` would be `i` when `i` is even.\n\
    <|/ c |>\n<| c |>\n: I believe that `a[i] = i * i + 1;` should be `a[i] = i *\
    \ i - 1;`\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triple = 0;\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long sum = 0;\n   \
    \ for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n   \
    \         for(k = 0; k < n; k++)\n            {\n                if(a[i] < a[j]\
    \ && a[j] < a[k])\n                {\n                    triple++;\n        \
    \            sum += a[i] + a[j] + a[k];\n                }\n            }\n  \
    \      }\n    }\n    return sum % 3;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ the answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added\
    \ some explanation.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c\
    \ |>\n<| c |>\nThanks for the explanation. Can you please explain how this works?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long long a[n];\n    long long triples\
    \ = 0;\n    long long i, j, k;\n    for(i = 0; i < n; i++) {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for(i = 0; i < n; i++) {\n        for(j = i + 1; j\
    \ < n; j++) {\n            for(k = 0; k < n; k++) {\n                if(a[i] +\
    \ a[j] + a[k] == 3) {\n                    triples++;\n                }\n   \
    \         }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI guess you meant `long long a[n];` instead of `int a[n];`\n<|/\
    \ c |>\n<| c |>\nYes, I meant long long a[n];\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; ++i)\n    {\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        for(int j = i + 1; j < n; ++j)\n        {\n            for(int k = j\
    \ + 1; k < n; ++k)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n\
    \                {\n                    ++triples;\n                }\n      \
    \      }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis solution is O(n^3) which is very inefficient.\n<|/ c |>\n\
    <| c |>\nYes, I know, but I didn't want to give the OP the answer he was looking\
    \ for. He wanted an efficient solution and I gave him an efficient solution. He\
    \ didn't want to give him a solution that was O(n^3). He wanted an efficient solution\
    \ and I gave him an efficient solution.\n<|/ c |>\n<| c |>\nI didn't say you gave\
    \ him a solution that was O(n^3). I said you gave him an efficient solution. He\
    \ didn't want to give him a solution that was O(n^3). He wanted an efficient solution\
    \ and I gave him an efficient solution.\n<|/ c |>\n<| c |>\nI didn't say you gave\
    \ him a solution that was O(n^3). I said you gave him an efficient solution. He\
    \ didn't want to give him a solution that was O(n^3). He wanted an efficient solution\
    \ and I gave him an efficient solution.\n<|/ c |>\n<| c |>\nI didn't say you gave\
    \ him a solution that was O(n^3). I said you gave him an efficient solution. He\
    \ didn't want to give him a solution that was O(n^3). He wanted an efficient solution\
    \ and I gave him an efficient solution.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long a[n];\n    long\
    \ triples = 0;\n    long i;\n    for(i = 0; i < n; ++i)\n    {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for(i = 0; i < n; ++i)\n    {\n        for(long j\
    \ = i + 1; j < n; ++j)\n        {\n            for(long k = j + 1; k < n; ++k)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    ++triples;\n                }\n            }\n        }\n\
    \    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ an answer to the question. He is asking for a solution in O(n) time.\n<|/ c\
    \ |>\n<| c |>\nThe question was \"How to find number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3\" and the answer\
    \ was \"O(n)\". He didn't ask for a solution in O(n) time. He asked for a solution\
    \ in O(n) time.\n<|/ c |>\n<| c |>\nThe question was \"How to find number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple\
    \ of 3\" and the answer was \"O(n)\". He didn't ask for a solution in O(n) time.\
    \ He asked for a solution in O(n) time.\n<|/ c |>\n<| c |>\nThe question was \"\
    How to find number of triples (a[i], a[j], a[k]) of a where i < j < k and a[i]\
    \ + a[j] + a[k] is a multiple of 3\" and the answer was \"O(n)\". He didn't ask\
    \ for a solution in O(n) time. He asked for a solution in O(n) time.\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3\" and the answer\
    \ was \"O(n)\". He didn't ask for a solution in O(n) time. He asked for a solution\
    \ in O(n) time.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long long a[n];\n\
    \    long long triples = 0;\n    long long i;\n    for(i = 0; i < n; i++){\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++){\n        for(long\
    \ long j = i+1; j < n; j++){\n            for(long long k = j+1; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == 3){\n                    triples++;\n\
    \                }\n            }\n        }\n    }\n    return triples;\n}\n\
    </code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis is not an answer to the question.\
    \ OP wants to know if there is a faster algorithm than O(n^3)\n<|/ c |>\n<| c\
    \ |>\nThe question was \"Is there a faster algorithm than O(n^3)\", not \"Is there\
    \ a faster algorithm than O(n^2)\"\n<|/ c |>\n<| c |>\nThe question was \"Is there\
    \ a faster algorithm than O(n^3)\", not \"Is there a faster algorithm than O(n^2)\"\
    \n<|/ c |>\n<| c |>\nThe question was \"Is there a faster algorithm than O(n^3)\"\
    , not \"Is there a faster algorithm than O(n^2)\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Is there a faster algorithm than O(n^3)\", not \"Is there a faster algorithm\
    \ than O(n^2)\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    long long count = 0;\n    for(int i = 0; i < n; i++)\n    {\n    \
    \    for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nI guess you meant `long long` instead of\
    \ `long`\n<|/ c |>\n<| c |>\nYes, I meant long long. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI guess you meant `long long` instead of `long`\n<|/ c |>\n\
    <| c |>\nI guess you meant `long long` instead of `long`\n<|/ c |>\n<| c |>\n\
    I guess you meant `long long` instead of `long`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int k =\
    \ j+1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n        \
    \            count++;\n                }\n            }\n        }\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis\
    \ solution is O(n^3). There exist O(n^2) solutions.\n<|/ c |>\n<| c |>\nYes, I\
    \ know. That's why I said \"there exist O(n^2) solutions\". There exist O(n^2)\
    \ solutions.\n<|/ c |>\n<| c |>\nThe complexity is O(n^3) because of the nested\
    \ loops. But I agree that there are O(n^2) solutions.\n<|/ c |>\n<| c |>\nYes,\
    \ but you said \"there exist O(n^2) solutions\". That's why I said \"there exist\
    \ O(n^2) solutions\". There exist O(n^2) solutions.\n<|/ c |>\n<| c |>\nI didn't\
    \ say there exist O(n^2) solutions. I said there exist O(n^3) solutions. I said\
    \ there exist O(n^2) solutions. I said there exist O(n^3) solutions. I said there\
    \ exist O(n^4) solutions. I said there exist O(n^5) solutions. I said there exist\
    \ O(n^6) solutions. I said there exist O(n^7) solutions. I said there exist O(n^8)\
    \ solutions. I said there exist O(n^9) solutions. I said there exist O(n^10) solutions.\
    \ I said there exist O(n^11) solutions. I said there exist O(n^12) solutions.\
    \ I said there exist O(n^13) solutions. I said there exist O(n^14) solutions.\
    \ I said there exist O(n^15) solutions. I said there exist O(n^16) solutions.\
    \ I said there exist O(n^17) solutions. I said there exist O(n^18) solutions.\
    \ I said there exist O(n^19) solutions. I said there exist O(n^20) solutions.\n\
    <|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    long long count = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int\
    \ k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n  \
    \                  count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\n\
    This solution is O(n^3) which is very inefficient.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I thought that OP was looking for a solution with O(n^2) complexity.\
    \ Anyway, I added a solution with O(n^2) complexity to the answer.\n<|/ c |>\n\
    <| c |>\nThe O(n^2) solution is still O(n^3). You're still looping over all triples\
    \ instead of just counting them.\n<|/ c |>\n<| c |>\nYes, you are right. I added\
    \ a solution with O(n^2) complexity to the answer.\n<|/ c |>\n<| c |>\nThe O(n^2)\
    \ solution is still O(n^3). You're still looping over all triples instead of just\
    \ counting them.\n<|/ c |>\n<| a tags=algorithm,c++ |>\nI wrote a solution in\
    \ Python. Hope it helps.\n<code>\ndef max_triples(n):\n    arr = [i for i in range(1,\
    \ n+1)]\n    arr.sort()\n    count = 0\n    triples = []\n    for i in range(0,\
    \ len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1,\
    \ len(arr)):\n                if arr[i] + arr[j] + arr[k] == n*n:\n          \
    \          count += 1\n                    triples.append((arr[i], arr[j], arr[k]))\n\
    \    return count\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++)\n    {\n    \
    \    a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n      \
    \      for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nI believe this solution is O(n^3). Not sure\
    \ if that's what the OP was looking for.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My mistake. Thanks for pointing out.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is O(n^3). Not sure if that's what the OP was looking for.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. My mistake. Thanks for pointing out.\n<|/ c |>\n<| c |>\n\
    I believe this solution is O(n^3). Not sure if that's what the OP was looking\
    \ for.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j <\
    \ n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n           \
    \ {\n                if(a[i] + a[j] + a[k] == sum)\n                {\n      \
    \              return 1L;\n                }\n            }\n        }\n    }\n\
    \    return 0L;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long int a[n];\n    long\
    \ long int i;\n    long long int j;\n    long long int k;\n    long long int sum\
    \ = 0;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n  \
    \  for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k\
    \ = 0; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n          \
    \          break;\n                }\n                else{\n                \
    \    if(a[i] + a[j] + a[k] == 3){\n                        sum += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long\
    \ long int a[n];\n    long long int i, j, k;\n    long long int sum = 0;\n   \
    \ for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0;\
    \ i < n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k = 0; k\
    \ < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n                 \
    \   sum++;\n                    break;\n                }\n            }\n   \
    \     }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++,c,arrays\
    \ |>\n<| c |>\nThis is not correct. `a[i] = i * i - i + 1;` will give `a[i] =\
    \ i * i - i - 1;` when `i` is `0`.\n<|/ c |>\n<| c |>\nYes, you are right. I missed\
    \ that part. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis is not correct.\
    \ `a[i] = i * i - i + 1;` will give `a[i] = i * i - i - 1;` when `i` is `0`.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I missed that part. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nThis is not correct. `a[i] = i * i - i + 1;` will\
    \ give `a[i] = i * i - i - 1;` when `i` is `0`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n   \
    \             if(i+j+k == n){\n                    sum += a[i] + a[j] + a[k];\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ the best solution. Try with n = 10^9 and you will see that your solution will\
    \ take forever to compute.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ that he was just trying to solve the problem and I didn't want to give him a\
    \ complete solution. Anyway, I edited my answer to give him a better solution.\
    \ Thanks for your comment.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ that he was just trying to solve the problem and I didn't want to give him a\
    \ complete solution. Anyway, I edited my answer to give him a better solution.\
    \ Thanks for your comment.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ that he was just trying to solve the problem and I didn't want to give him a\
    \ complete solution. Anyway, I edited my answer to give him a better solution.\
    \ Thanks for your comment.\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ that he was just trying to solve the problem and I didn't want to give him a\
    \ complete solution. Anyway, I edited my answer to give him a better solution.\
    \ Thanks for your comment.\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    long long count = 0;\n    for(int i = 0; i<n; i++)\n    {\n      \
    \  a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i<n;\
    \ i++)\n    {\n        for(int j = 0; j<n; j++)\n        {\n            for(int\
    \ k = 0; k<n; k++)\n            {\n                if(i<j && j<k && a[i] + a[j]\
    \ + a[k] == sum)\n                {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/18497394)\n<|/ c |>\n<| c |>\n\
    The question was \"How to find number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k and a[i] + a[j] + a[k] is a multiple of 3?\" The answer was \"The\
    \ only valid triple is (1, 7, 13).\" The code was written by someone else and\
    \ I wanted to share the solution with him. He was able to solve the problem in\
    \ less than a minute and I wanted to share the solution with him. He was able\
    \ to solve the problem in less than a minute and I wanted to share the solution\
    \ with him. He was able to solve the problem in less than a minute and I wanted\
    \ to share the solution with him. He was able to solve the problem in less than\
    \ a minute and I wanted to share the solution with him. He was able to solve the\
    \ problem in less than a minute and I wanted to share the solution with him. He\
    \ was able to solve the problem in less than a minute and I wanted to share the\
    \ solution with him. He was able to solve the problem in less than a minute and\
    \ I wanted to share the solution with him.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/18497394)\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a code example and explanation\
    \ of why this works.\n<|/ c |>\n<| c |>\nI edited my answer to include a code\
    \ example and explanation of why this ", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    long long max_triple = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    max_triple++;\n\
    \                }\n            }\n        }\n    }\n    return max_triple;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution will take O(n^3) time complexity.\
    \ Can you please suggest a better solution?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that is O(n^2)\n<|/ c |>\n<| c |>\nThis solution will take O(n^3) time complexity.\
    \ Can you please suggest a better solution?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that is O(n^2)\n<|/ c |>\n<| c |>\nThis solution will take O(n^3) time complexity.\
    \ Can you please suggest a better solution?\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j <\
    \ n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n           \
    \ {\n                if(a[i] + a[j] + a[k] == sum)\n                {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nThis code\
    \ doesn't work. `a` is uninitialized and `sum` isn't initialized.\n<|/ c |>\n\
    <| c |>\nI didn't test it, but I believe it works. I tested it on ideone.com and\
    \ it worked.\n<|/ c |>\n<| c |>\nIt doesn't work. `a` is uninitialized and `sum`\
    \ isn't initialized.\n<|/ c |>\n<| c |>\nI tested it on ideone.com and it worked.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. `a` is uninitialized and `sum` isn't initialized.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long int a[n];\n    long long int i, j, k;\n    long long int sum =\
    \ 0;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i\
    \ = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k =\
    \ 0; k < n; k++){\n                if(a[i] < a[j] && a[i] < a[k]){\n         \
    \           if(a[j] < a[k]){\n                        sum++;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question asks for a *triplet* not\
    \ a *triple*\n<|/ c |>\n<| c |>\nI edited the answer to include a solution for\
    \ triples.\n<|/ c |>\n<| c |>\nThe question asks for a *triplet* not a *triple*\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                    return 1L;\n            }\n     \
    \   }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\n\
    I believe this solution is O(n^3). There might be a better solution that is O(n^2)\
    \ but I am not able to think of it.\n<|/ c |>\n<| c |>\nYes, you are right. There\
    \ might be a better solution that is O(n^2) but I am not able to think of it.\n\
    <|/ c |>\n<| c |>\nI believe this solution is O(n^3). There might be a better\
    \ solution that is O(n^2) but I am not able to think of it.\n<|/ c |>\n<| c |>\n\
    I believe this solution is O(n^3). There might be a better solution that is O(n^2)\
    \ but I am not able to think of it.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is O(n^3). There might be a better solution that is O(n^2) but I am not able\
    \ to think of it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long long int\
    \ a[n];\n    long long int i,j,k;\n    for(i=0;i<n;i++){\n        a[i]=i*i-i+1;\n\
    \    }\n    for(i=0;i<n;i++){\n        for(j=i+1;j<n;j++){\n            for(k=j+1;k<n;k++){\n\
    \                if(a[i]+a[j]+a[k]==3){\n                    return 1L;\n    \
    \            }\n            }\n        }\n    }\n    return 0L;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not an answer to the question. He asked for a *solution*,\
    \ not an explanation of why his solution doesn't work.\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to find all triples of length 3 that sum up to a multiple\
    \ of 3?\" The answer is \"You can't\". The OP asked for help with his solution,\
    \ not an explanation of why his solution doesn't work.\n<|/ c |>\n<| c |>\nThe\
    \ OP asked for help with his solution, not an explanation of why his solution\
    \ doesn't work. He asked for help with his solution, not an explanation of why\
    \ his solution doesn't work. He asked for help with his solution, not an explanation\
    \ of why his solution doesn't work. He asked for help with his solution, not an\
    \ explanation of why his solution doesn't work. He asked for help with his solution,\
    \ not an explanation of why his solution doesn't work. He asked for help with\
    \ his solution, not an explanation of why his solution doesn't work. He asked\
    \ for help with his solution, not an explanation of why his solution doesn't work.\
    \ He asked for help with his solution, not an explanation of why his solution\
    \ doesn't work. He asked for help with his solution, not an explanation of why\
    \ his solution doesn't work. He asked for help with his solution, not an explanation\
    \ of why his solution doesn't work. He asked for help with his solution, not an\
    \ explanation of why his solution doesn't work. He asked for help with his solution,\
    \ not an explanation of why his solution doesn't work. He asked for help with\
    \ his solution, not an explanation of why his solution doesn't work. He asked\
    \ for help with his solution, not an explanation of why his solution doesn't work.\
    \ He asked for help with his solution, not an explanation of why his solution\
    \ doesn't work. He asked for help with his solution, not an explanation of why\
    \ his solution doesn't work. H", "{\n    long long a[n];\n    long long i, j,\
    \ k;\n    long long sum = 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ i + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n        \
    \    {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n     \
    \               sum++;\n                }\n            }\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                    return 1L;\n            }\n        }\n    }\n    return 0L;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work. Try it with\
    \ `get_max_triples(10L)`\n<|/ c |>\n<| c |>\nIt works fine for me. Try it with\
    \ `get_max_triples(10L)`\n<|/ c |>\n<| c |>\nIt doesn't work for `get_max_triples(10L)`\n\
    <|/ c |>\n<| c |>\nIt works for me. Try it with `get_max_triples(10L)`\n<|/ c\
    \ |>\n<| c |>\nIt works for me too. Try it with `get_max_triples(10L)`\n<|/ c\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long int a[n];\n    long long int i, j, k;\n    long long\
    \ int sum = 0;\n    for(i = 0; i < n; ++i)\n    {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    for(i = 0; i < n; ++i)\n    {\n        for(j = i + 1; j < n;\
    \ ++j)\n        {\n            for(k = 0; k < n; ++k)\n            {\n       \
    \         if(a[i] + a[j] + a[k] == 0)\n                {\n                   \
    \ sum++;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\n\
    This solution does not work if the array is sorted in descending order.\n<|/ c\
    \ |>\n<| c |>\nIt does work, just not as efficiently as other solutions. I tested\
    \ it on [this](https://ideone.com/XyYN2R) set of inputs and it worked fine.\n\
    <|/ c |>\n<| c |>\nI tested it on [this](https://ideone.com/XyYN2R) set of inputs\
    \ and it worked fine.\n<|/ c |>\n<| c |>\nI tested it on [this](https://ideone.com/XyYN2R)\
    \ set of inputs and it worked fine.\n<|/ c |>\n<| c |>\nI tested it on [this](https://ideone.com/XyYN2R)\
    \ set of inputs and it worked fine.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>",
  "{\n    long long a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n   \
    \             if(i<j && i<k && j<k){\n                    if(a[i] + a[j] + a[k]\
    \ == 0){\n                        triples++;\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,c++ |>\n<| c |>\nThis doesn't work. `a` is uninitialized.\n\
    <|/ c |>\n<| c |>\nI didn't know that c++ has variable length arrays. I thought\
    \ it was a C thing. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nYes, C++\
    \ has variable length arrays, but they have to be declared outside of the function\
    \ and initialized in the function body.\n<|/ c |>\n<| c |>\nI thought that too,\
    \ but I didn't know that c++ had variable length arrays. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nI thought that too, but I didn't know that c++ had\
    \ variable length arrays. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    long long a[n];\n    long long triples = 0;\n    long long i, j;\n    for(i\
    \ = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n        \
    \    for(k = 0; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k]\
    \ == 0)\n                {\n                    a[i] = 0;\n                  \
    \  a[j] = 0;\n                    a[k] = 0;\n                }\n            }\n\
    \        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j\
    \ < n; j++)\n        {\n            for(k = 0; k < n; k++)\n            {\n  \
    \              if(a[i] + a[j] + a[k] == 0)\n                {\n              \
    \      a[i] = 0;\n                    a[j] = 0;\n                    a[k] = 0;\n\
    \                }\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = 0;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n  \
    \              {\n                    a[i] = 0;\n                    a[j] = 0;\n\
    \                    a[k] = 0;\n                }\n            }\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n\
    \        {\n            for(k = 0; k < n; k++)\n            {\n              \
    \  if(a[i] + a[j] + a[k] == 0)\n                {\n                    a[i] =\
    \ 0;\n                    a[j] = 0;\n                    a[k] = 0;\n         \
    \       }\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n\
    \        for(j = i + 1; j < n; j++)\n        {\n            for(k = 0; k < n;\
    \ k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n         \
    \       {\n                    a[i] = 0;\n                    a[j] = 0;\n    \
    \                a[k] = 0;\n                }\n            }\n        }\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n     \
    \   {\n            for(k = 0; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    a[i] = 0;\n    \
    \                a[j] = 0;\n                    a[k] = 0;\n                }\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n      \
    \      {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n   \
    \                 a[i] = 0;\n                    a[j] = 0;\n                 \
    \   a[k] = 0;", "{\n    long long a[n];\n    long long triples = 0;\n    long\
    \ long i, j;\n    for(i = 0; i < n; ++i)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; ++i)\n    {\n        for(j = i + 1; j < n; ++j)\n\
    \        {\n            for(k = 0; k < n; ++k)\n            {\n              \
    \  if(a[i] + a[j] + a[k] == 0)\n                {\n                    ++triples;\n\
    \                }\n            }\n        }\n    }\n    return triples;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. What is the problem you\
    \ are facing?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. What is the problem you\
    \ are facing?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\
    #include <stdbool.h>", "{\n    long a[n];\n    long triples = 0;\n    for(int\
    \ i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        for(int j\
    \ = i; j < n; j++)\n        {\n            for(int k = j; k < n; k++)\n      \
    \      {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n   \
    \                 a[i] = a[j];\n                    a[j] = a[k];\n           \
    \         a[k] = a[i];\n                    triples += 1;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI didn't downvote, but this solution doesn't work. Try it with\
    \ `get_max_triples(5L)`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ updated the code accordingly.\n<|/ c |>\n<| c |>\nI didn't downvote, but this\
    \ solution doesn't work. Try it with `get_max_triples(5L)`\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've updated the code accordingly.\n<|/ c |>\n<|\
    \ a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long a[n];\n    long long sum = 0;\n    long long count = 0;\n    for(int\
    \ i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    for(int i = 1; i < n; i++)\n    {\n        for(int j = 1; j < i; j++)\n\
    \        {\n            for(int k = 1; k < j; k++)\n            {\n          \
    \      if(a[i] + a[j] + a[k] == sum)\n                {\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ solution doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n\
    It works. I tested it on `get_max_triples(5L)` which returns `1L`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `get_max_triples(5L)`. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| c |>\nIt works for me on `get_max_triples(5L)` which returns `1L`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `get_max_triples(5L)`. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triples = 0;\n    long long i,\
    \ j;\n    for(i = 0; i < n; i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(i = 0; i < n; i++) \n    {\n        for(j = i + 1; j < n; j++) \n   \
    \     {\n            for(k = 0; k < n; k++) \n            {\n                if(a[i]\
    \ + a[j] + a[k] == 3 * i * i + 3 * j * j + 3 * k * k) \n                {\n  \
    \                  if(i < j && j < k) \n                    {\n              \
    \          triples += 1;\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,dynamic-programming\
    \ |>\n<| c |>\nI believe this solution would fail for large values of `n`.\n<|/\
    \ c |>\n<| c |>\nYes, it would. But I believe that OP wants to solve this problem\
    \ using dynamic programming.\n<|/ c |>\n<| c |>\nYes, I believe OP wants to solve\
    \ this problem using dynamic programming.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ would fail for large values of `n`.\n<|/ c |>\n<| c |>\nYes, I believe OP wants\
    \ to solve this problem using dynamic programming.\n<|/ c |>\n<| a tags=algorithm,c++,dynamic-programming\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long long int a[n];\n    long long int i, j, k;\n \
    \   long long int sum = 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i\
    \ + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n          \
    \  {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n       \
    \             sum++;\n                }\n            }\n        }\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,c++,c |>\n<code>\n\
    #include <stdio.h>\n#include <stdlib.h>", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    for(long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i] + a[j] + a[k];\n    }\n    return sum % 3;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nI believe this solution will fail\
    \ for large `n`\n<|/ c |>\n<| c |>\nYes, it will. That's why I said \"for large\
    \ `n`\". It's not an efficient solution, but it's an efficient one for small `n`.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for large `n`\n<|/ c |>\n\
    <| c |>\nYes, it will. That's why I said \"for large `n`\". It's not an efficient\
    \ solution, but it's an efficient one for small `n`.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution will fail for large `n`\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\nThe solution using dynamic programming is very simple:\n<code>", "{\n  \
    \  long a[n];\n    long triples = 0;\n    long i;\n    for(i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(long j = i+1; j < n; j++)\n        {\n            for(long k\
    \ = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 0)\n                {\n                    triples += 1;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThe question was to find out how many triples there are, not to\
    \ find out how many triples satisfy the condition. Your code doesn't do that.\n\
    <|/ c |>\n<| c |>\nI see your point. My code doesn't do that, but I thought it\
    \ would be helpful to show how to solve the problem in general. I'll edit my answer\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nThe question was to find out how\
    \ many triples there are, not to find out how many triples satisfy the condition.\
    \ Your code doesn't do that.\n<|/ c |>\n<| c |>\nI see your point. My code doesn't\
    \ do that, but I thought it would be helpful to show how to solve the problem\
    \ in general. I'll edit my answer to make it more clear.\n<|/ c |>\n<| c |>\n\
    I see your point. My code doesn't do that, but I thought it would be helpful to\
    \ show how to solve the problem in general. I'll edit my answer to make it more\
    \ clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triples = 0;\n    for(int i =\
    \ 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i\
    \ < n; i++) {\n        for(int j = 0; j < n; j++) {\n            for(int k = 0;\
    \ k < n; k++) {\n                if(i + j + k == a[i]) {\n                   \
    \ triples++;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution doesn't work for\
    \ large values of `n`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it for n = 10^9\
    \ and it worked.\n<|/ c |>\n<| c |>\nIt works for me too. Can you please explain\
    \ how you got this solution?\n<|/ c |>\n<| c |>\nI used a brute force approach\
    \ to solve this problem. Since there are only three possible triples, I used three\
    \ nested loops to check all possible combinations. I used a long long int to store\
    \ the value of a[i] and a[j] and a[k] since they can go up to 10^9. Since there\
    \ are only three possible combinations, I used a long long int to store the value\
    \ of triples. I used a long long int to store the value of a[i] and a[j] since\
    \ they can go up to 10^9. Since there are only three possible combinations, I\
    \ used a long long int to store the value of triples. I used a long long int to\
    \ store the value of a[i] and a[j] since they can go up to 10^9. Since there are\
    \ only three possible combinations, I used a long long int to store the value\
    \ of triples.\n<|/ c |>\n<| c |>\nI used a long long int to store the value of\
    \ a[i] and a[j] and a[k] since they can go up to 10^9. Since there are only three\
    \ possible combinations, I used a long long int to store the value of triples.\
    \ I used a long long int to store the value of a[i] and a[j] since they can go\
    \ up to 10^9. Since there are only three possible combinations, I used a long\
    \ long int to store the value of triples. I used a long long int to store the\
    \ value of a[i] and a[j] since they can go up to 10^9. Since there are only three\
    \ possible combinations, I used a long long int to store the value of triples.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; ++i)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        for(int j = i + 1; j < n; ++j)\n\
    \        {\n            for(int k = j + 1; k < n; ++k)\n            {\n      \
    \          if(a[i] + a[j] + a[k] == sum)\n                    return 1L;\n   \
    \         }\n        }\n    }\n    return 0L;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c\
    \ |>\nIt works. I tested it on `get_max_triples(5L)` which returns `1L`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it on `get_max_triples(5L)` which returns `1L`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;",
  "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long res\
    \ = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n\
    \            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] +\
    \ a[k] == sum){\n                    res++;\n                }\n            }\n\
    \        }\n    }\n    return res;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ the best solution. Try `get_max_triples(10L)` with your solution and mine.\n\
    <|/ c |>\n<| c |>\nI agree, my solution is only a proof of concept, not a good\
    \ solution. I'll edit my answer with your solution. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI edited my answer with my solution, thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI edited my answer with my solution, thanks for pointing out.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \  {\n                    count++;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis code doesn't work. `get_max_triples(5L)` returns `0L` instead\
    \ of `1L`.\n<|/ c |>\n<| c |>\nThanks for pointing out. Fixed the code.\n<|/ c\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long a[n];\n    long triples = 0;\n    for(int i = 0; i < n;\
    \ i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n\
    \                if(i<j && j<k && a[i] + a[j] + a[k] == 3){\n                \
    \    triples++;\n                }\n            }\n        }\n    }\n    return\
    \ triples;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThe complexity\
    \ is O(n^3). Not sure if that's what the OP wants.\n<|/ c |>\n<| c |>\nYes, I\
    \ agree. But the OP said he was interested in an O(n) solution.\n<|/ c |>\n<|\
    \ c |>\nYes, I agree. But the OP said he was interested in an O(n) solution.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the OP said he was interested in an O(n)\
    \ solution.\n<|/ c |>\n<| c |>\nI agree with you. But the OP said he was interested\
    \ in an O(n) solution.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long int a[n];\n    long\
    \ long int i, j, k;\n    long long int count = 0;\n    for(i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(j = i+1; j < n; j++)\n        {\n            for(k = 0; k < n;\
    \ k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n         \
    \       {\n                    count++;\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm,dynamic-programming |>\n<| c |>\nI like your solution.\
    \ Can you please explain how you came up with this? I understand that you are\
    \ trying to find all triples where the sum is 0, but I don't understand how you\
    \ came up with that solution.\n<|/ c |>\n<| c |>\nI used the fact that `a[i] +\
    \ a[j] + a[k]` is always `0` when `i < j < k`\n<|/ c |>\n<| c |>\nI see. So you\
    \ basically just added up all the numbers and then checked if they were all 0?\n\
    <|/ c |>\n<| c |>\nYes, exactly. That's why I used `break` statement in the inner\
    \ loop. Otherwise it would count all triples where the sum is `0`.\n<|/ c |>\n\
    <| c |>\nI see. So you basically just added up all the numbers and then checked\
    \ if they were all 0?\n<|/ c |>\n<| a dscore=1 |>\nI believe this can be solved\
    \ using dynamic programming.\nLet dp[i] be the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k.\nThen dp[i] = dp[j] + dp[k] where j < k and a[j]\
    \ + a[k] == 0.\nSo the answer is dp[n].\n<|/ a tags=c++,algorithm,dynamic-programming\
    \ |>\n<| c |>\nI believe this can be solved using dynamic programming. Let dp[i]\
    \ be the number of triples (a[i], a[j], a[k]) of a where i < j < k. Then dp[i]\
    \ = dp[j] + dp[k] where j < k and a[j] + a[k] == 0. So the answer is dp[n].\n\
    <|/ c |>\n<| c |>\nI believe this can be solved using dynamic programming. Let\
    \ dp[i] be the number of triples (a[i], a[j], a[k]) of a where i < j < k. Then\
    \ dp[i] = dp[j] + dp[k] where j < k and a[j", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    long long i;\n    for(i = 0; i < n; i++)\n    {\n   \
    \     a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n      \
    \  for(long long j = i+1; j < n; j++)\n        {\n            for(long long k\
    \ = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 0)\n                {\n                    triples += 1;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. For example, `get_max_triples(-5)`\
    \ returns `0`.\n<|/ c |>\n<| c |>\nYes, it does. `get_max_triples(-5)` returns\
    \ `1`.\n<|/ c |>\n<| c |>\nYes, it does. `get_max_triples(-5)` returns `1`.\n\
    <|/ c |>\n<| c |>\nYes, it does. `get_max_triples(-5)` returns `1`.\n<|/ c |>\n\
    <| c |>\nYes, it does. `get_max_triples(-5)` returns `1`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i\
    \ = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n   \
    \ }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n\
    \            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] +\
    \ a[k] == sum){\n                    return 1L;\n                }\n         \
    \   }\n        }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    long long count = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n\
    \            for(int k = 0; k < n; k++){\n                if(i+j+k == sum){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    long a[n];\n    long triples = 0;\n    for(int i = 1; i < n; i++)\n    {\n\
    \        a[i] = i * i - i + 1;\n        for(int j = i; j < n; j++)\n        {\n\
    \            for(int k = j; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    a[i] = a[j];\n \
    \                   a[j] = a[k];\n                    a[k] = a[i];\n         \
    \           triples += 1;\n                }\n            }\n        }\n    }\n\
    \    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nI believe\
    \ this solution will take O(n^3) time. There might be a better solution using\
    \ dynamic programming.\n<|/ c |>\n<| c |>\nYes, it does take O(n^3) time. There\
    \ might be a better solution using dynamic programming.\n<|/ c |>\n<| c |>\nThis\
    \ solution will take O(n^3) time. There might be a better solution using dynamic\
    \ programming.\n<|/ c |>\n<| c |>\nThis solution will take O(n^3) time. There\
    \ might be a better solution using dynamic programming.\n<|/ c |>\n<| c |>\nThis\
    \ solution will take O(n^3) time. There might be a better solution using dynamic\
    \ programming.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < n; j++)\n        {\n            for(int k = 0; k <\
    \ n; k++)\n            {\n                if(i+j+k == a[i])\n                {\n\
    \                    triples += 1;\n                }\n            }\n       \
    \ }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `get_max_triples(5L)`. It returns `0L`, not `1L`.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone, it returns 1L. Can you please give me\
    \ the link to ideone where you tested it?\n<|/ c |>\n<| c |>\nI tested it on ideone,\
    \ it returns 1L. Can you please give me the link to ideone where you tested it?\n\
    <|/ c |>\n<| c |>\nI tested it on ideone, it returns 1L. Can you please give me\
    \ the link to ideone where you tested it?\n<|/ c |>\n<| c |>\nI tested it on ideone,\
    \ it returns 1L. Can you please give me the link to ideone where you tested it?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++)\n    {\n    \
    \    a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n      \
    \      for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    count++;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it out with 5L and you'll see that it's wrong.\n<|/ c |>\n<| c |>\nI tested\
    \ it with 5L and it returned 1L. Can you please explain why it returns 1L?\n<|/\
    \ c |>\n<| c |>\nI tested it with 5L and it returned 1L. Can you please explain\
    \ why it returns 1L?\n<|/ c |>\n<| c |>\nI tested it with 5L and it returned 1L.\
    \ Can you please explain why it returns 1L?\n<|/ c |>\n<| c |>\nI tested it with\
    \ 5L and it returned 1L. Can you please explain why it returns 1L?\n<|/ c |>\n\
    <| a tags=algorithm,c++ |>\n<code>\n#include<bits/stdc++.h>\nusing namespace std;\n\
    #define ll long long\n#define mod 1000000007\n#define pb push_back\n#define mp\
    \ make_pair\n#define ff first\n#define ss second\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define endl \"\\n\"\n#define dotl \"\\n\"\n#define all(x) x.begin(),x.end()\n\
    #define ", "{\n    long long a[n];\n    long long triple = 0;\n    for(int i =\
    \ 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i\
    \ < n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int k = j+1;\
    \ k < n; k++){\n                if(a[i] + a[j] + a[k] == 3){\n               \
    \     triple++;\n                }\n            }\n        }\n    }\n    return\
    \ triple;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26825814)\n\
    <|/ c |>\n<| c |>\nI believe it does. He asked how to find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n<|/ c |>\n<| c |>\nI believe it does. He asked how to find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n<|/ c |>\n<| c |>\nI believe it does. He asked how to find\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n<|/ c |>\n<| c |>\nI believe it does. He asked how\
    \ to find the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.math.*;\n\
    import java.security.*;\nimport java.text.*;\nimport java.util.concurrent.*;\n\
    import java.util.regex.*;", "{\n    long long a[n];\n    long long triples = 0;\n\
    \    for(int i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(int i = 1; i < n; i++)\n    {\n        for(int j = 1; j < n; j++)\n \
    \       {\n            for(int k = 1; k < n; k++)\n            {\n           \
    \     if(a[i] < a[j] && a[i] < a[k])\n                {\n                    if(a[j]\
    \ < a[k])\n                    {\n                        if(a[j] + a[k] == 0)\n\
    \                        {\n                            triples += 1;\n      \
    \                  }\n                        else if(a[j] + a[k] > 0)\n     \
    \                   {\n                            if(a[j] + a[k] % 3 == 0)\n\
    \                            {\n                                triples += 1;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a solution that\
    \ uses only `int`s, not `long long`s.\n<|/ c |>\n<| c |>\nI agree with you. My\
    \ solution was based on ints. But I thought it would be interesting to see how\
    \ it could be done with ints.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triple = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j\
    \ = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triple++;\n                }\n            }\n        }\n\
    \    }\n    return triple;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution\
    \ does not work. Try it for n = 10 and you will see that it will return 0 instead\
    \ of 1.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you please give me an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nI tested it for n = 10 and it returned 1\
    \ instead of 0.\n<|/ c |>\n<| c |>\nI tested it for n = 10 and it returned 1 instead\
    \ of 0. Can you please give me an example where it fails?\n<|/ c |>\n<| c |>\n\
    I tested it for n = 10 and it returned 1 instead of 0. Can you please give me\
    \ an example where it fails?\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 1; i < n; i++)\n    {\n        for(int\
    \ j = 1; j < i; j++)\n        {\n            if(a[j] + a[i] > sum)\n         \
    \   {\n                long long temp = a[i];\n                a[i] = a[j];\n\
    \                a[j] = temp;\n                sum += a[i];\n            }\n \
    \       }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<|\
    \ c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long i, j, k;\n    long long sum = 0;\n    for(i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = 0; k <\
    \ n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n      \
    \          {\n                    sum += 1;\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,c |>\n<| c |>\nThis doesn't work. Try it for n = 5 and\
    \ you'll see that your algorithm returns 1.\n<|/ c |>\n<| c |>\n: It works. I\
    \ tested it for n = 5 and it returned 1. I edited the answer to include a test\
    \ case.\n<|/ c |>\n<| c |>\n: I edited the answer to include a test case and to\
    \ include a better algorithm.\n<|/ c |>\n<| c |>\n: I edited the answer to include\
    \ a better algorithm.\n<|/ c |>\n<| c |>\n: I edited the answer to include a better\
    \ algorithm.\n<|/ c |>\n<| a tags=algorithm,c++,c |>\nThe problem is that the\
    \ algorithm is O(n^3). \nThe best solution would be to sort the array and find\
    \ the first element that is divisible by 3.\n<|/ a dscore=2 |>\n<| c |>\nSorting\
    \ the array is O(nlogn), not O(n^3).\n<|/ c |>\n<| c |>\n: O(nlogn) is the best\
    \ solution. Sorting is not O(n^3).\n<|/ c |>\n<| c |>\n: Sorting is not O(n^3)\
    \ but O(nlogn).\n<|/ c |>\n<| c |>\n: Sorting is not O(n^3) but O(nlogn).\n<|/\
    \ c |>\n<| c |>\n: Sorting is not O(n^3) but O(nlogn).\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe algorithm is O(n^3). \nThe best solution would be to sort the array\
    \ and find the first element that is divisible by 3.\n<|/ a tags=algorithm,c++,c\
    \ |>\n<| a tags=algorithm,c++,c |>\n<code>", "{\n    long long a[n];\n    long\
    \ long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    long long count = 0;\n    for(int i = 0; i <\
    \ n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int k = j+1;\
    \ k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n             \
    \       count += 1;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include<bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    for(int i = 0; i < n; i++) \n    {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for(int i = 0; i < n; i++) \n    {\n        for(int\
    \ j = i + 1; j < n; j++) \n        {\n            for(int k = j + 1; k < n; k++)\
    \ \n            {\n                if(a[i] + a[j] + a[k] == 3) \n            \
    \    {\n                    if(i < j && j < k) \n                    {\n     \
    \                   triples += 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;", "{\n    long long a[n];\n    long long triple = 0;\n    long long\
    \ i;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(long long j = i + 1; j < n; j++)\n\
    \        {\n            for(long long k = j + 1; k < n; k++)\n            {\n\
    \                if(a[i] + a[j] + a[k] == 0)\n                {\n            \
    \        triple++;\n                }\n            }\n        }\n    }\n    return\
    \ triple;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    long long ans = 0;\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n    \
    \        for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    ans += 1;\n  \
    \              }\n            }\n        }\n    }\n    return ans;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThanks for your answer. Can you please\
    \ explain how you came up with this solution? I mean how did you come up with\
    \ this? I understand that it is O(n^3) but how did you come up with this? I mean\
    \ how did you come up with this? I understand that it is O(n^3) but how did you\
    \ come up with this? I mean how did you come up with this? I understand that it\
    \ is O(n^3) but how did you come up with this? I mean how did you come up with\
    \ this? I understand that it is O(n^3) but how did you come up with this? I mean\
    \ how did you come up with this? I understand that it is O(n^3) but how did you\
    \ come up with this? I mean how did you come up with this? I understand that it\
    \ is O(n^3) but how did you come up with this? I mean how did you come up with\
    \ this? I understand that it is O(n^3) but how did you come up with this? I mean\
    \ how did you come up with this? I understand that it is O(n^3) but how did you\
    \ come up with this? I mean how did you come up with this? I understand that it\
    \ is O(n^3) but how did you come up with this? I mean how did you come up with\
    \ this? I understand that it is O(n^3) but how did you come up with this? I mean\
    \ how did you come up with this? I understand that it is O(n^3) but how did you\
    \ come up with this? I mean how did you come up with this? I understand that it\
    \ is O(n^3) but how did you come up with this? I mean how did you come up with\
    \ this? I understand that it is O(n^3) but how did you come up with this? I mean\
    \ how did you come up with this? I understand that it is ", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n       \
    \ a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   if(i<j && i<k && j<k){\n                    if(a[i] + a[j] + a[k] == 0){\n\
    \                        triples++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. What is the problem you are facing?\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c\
    \ |>\n<| c |>\nIt works. I tested it before posting. What is the problem you are\
    \ facing?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n   \
    \ long long count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1;\
    \ j < n; j++){\n            for(int k = j+1; k < n; k++){\n                if(a[i]\
    \ + a[j] + a[k] == sum){\n                    count++;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27815845)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked how to find the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\
    \ He also provided an example and explained why this works.\n<|/ c |>\n<| c |>\n\
    The question was how to find the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, and a[i] + a[j] + a[k] is a multiple of 3. He also provided an example\
    \ and explained why this works.\n<|/ c |>\n<| c |>\nThe question was how to find\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3. He also provided an example and explained why this\
    \ works.\n<|/ c |>\n<| c |>\nThe question was how to find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple\
    \ of 3. He also provided an example and explained why this works.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;",
  "{\n    long long int a[n];\n    long long int i, j, k;\n    long long int sum =\
    \ 0;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i\
    \ = 0; i < n; i++){\n        for(j = i+1; j < n; j++){\n            for(k = 0;\
    \ k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n               \
    \     sum++;\n                    break;\n                }\n            }\n \
    \       }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++,dynamic-programming\
    \ |>\n<| c |>\nThis solution doesn't work. Try it for n = 10 and you'll see that\
    \ your solution returns 3 instead of 1.\n<|/ c |>\n<| c |>\nI tested it with n\
    \ = 10 and it returns 1 as expected. Did you try it yourself?\n<|/ c |>\n<| c\
    \ |>\nYes, I did. Your solution returns 3 instead of 1. I tested it for n = 10\
    \ and it returns 1 as expected. Did you test it yourself?\n<|/ c |>\n<| c |>\n\
    I tested it for n = 10 and it returns 1 as expected. Did you test it yourself?\n\
    <|/ c |>\n<| c |>\nI tested it for n = 10 and it returns 1 as expected. Did you\
    \ test it yourself?\n<|/ c |>\n<| a dscore=2 |>\nThe problem is that the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k is equal to the number of\
    \ triples (a[i], a[j], a[k]) of a where i < k and j < k. \nSo the problem can\
    \ be solved using dynamic programming.\nThe idea is to store the number of triples\
    \ (a[i], a[j], a[k]) of a where i < k and j < k in the array dp[i][j], where dp[i][j]\
    \ denotes the number of triples (a[i], a[j], a[k]) of a where i < j and j < k.\
    \ \nThe base case is dp[0][0] = 0, the other cases are dp[i][j] = dp[i-1][j] +\
    \ dp[i][j-1].\n<code>\nlong long get_max_triples(long long n) {\n    long long\
    \ dp[n][n];\n    long long i, j, k;\n    long long sum = 0;\n    for(i = 0; i\
    \ < n; i++){\n        dp[i][0] = 0;\n    }\n    for(i = 0; i < n; i++){\n    \
    \    for(j = i+1; j < n; j++){\n            for(k = 0; k < n; k++){\n        \
    \        dp[i][j] = dp[i-1][j] + dp[i][j-1]", "{\n    long long int a[n];\n  \
    \  long long int i, j, k;\n    long long int sum = 0;\n    for(i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++){\n        for(j\
    \ = i+1; j < n; j++){\n            for(k = 0; k < n; k++){\n                if(a[i]\
    \ < a[j] && a[i] < a[k]){\n                    sum++;\n                }\n   \
    \         }\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it for n = 5 and you'll see that your algorithm\
    \ returns 1.\n<|/ c |>\n<| c |>\nI tested it on online compiler it works. I guess\
    \ you missed something in code. Can you please post your code?\n<|/ c |>\n<| c\
    \ |>\nI added my code to the question. Can you please check it again?\n<|/ c |>\n\
    <| c |>\nI added my code to the question. Can you please check it again?\n<|/\
    \ c |>\n<| c |>\nI added my code to the question. Can you please check it again?\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triple = 0;\n    for(int i = 0;\
    \ i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n;\
    \ i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j +\
    \ 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n            \
    \        triple++;\n                }\n            }\n        }\n    }\n    return\
    \ triple;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long long int a[n];\n\
    \    long long int i, j, k;\n    for(i = 0; i < n; ++i)\n        a[i] = i * i\
    \ - i + 1;\n    for(i = 0; i < n; ++i) {\n        for(j = i + 1; j < n; ++j) {\n\
    \            for(k = 0; k < n; ++k) {\n                if(a[i] + a[j] + a[k] ==\
    \ (3 * i + 3 * j + 3 * k) % 3) {\n                    return 1L;\n           \
    \     }\n            }\n        }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n#include<bits/stdc++.h>\nusing namespace std;", "{\n  \
    \  long long a[n];\n    long long sum = 0;\n    for(int i = 0; i<n; i++)\n   \
    \ {\n        a[i] = i*(i+1)-1;\n        sum += a[i] + a[i] + a[i];\n    }\n  \
    \  for(int i = 0; i<n; i++)\n    {\n        for(int j = 0; j<n; j++)\n       \
    \ {\n            for(int k = 0; k<n; k++)\n            {\n                if(i<j\
    \ && j<k && k<i && sum%3 != 0)\n                {\n                    return\
    \ sum;\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n \
    \       sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   if(a[i] < a[j] && a[i] < a[k] && a[j] < a[k]){\n                    if(a[i]\
    \ + a[j] + a[k] == sum){\n                        return 1L;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return 0L;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution will take O(n^3)\
    \ time, which is very inefficient.\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ But the OP said \"The time limit is 1 second\", so I thought that he can use\
    \ O(n^2) to solve this problem.\n<|/ c |>\n<| c |>\nI agree with you that O(n^2)\
    \ is too much, but O(n^3) is not too much. O(n^2) is O(n^3), but O(n^2) is O(n^3),\
    \ and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2)\
    \ is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3),\
    \ and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2)\
    \ is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3),\
    \ and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2)\
    \ is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3),\
    \ and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2) is O(n^3), and O(n^2)\
    \ is O(n^3), and O(n^2) is O(n^3), and ", "{\n    long long int a[n];\n    long\
    \ long int i, j, k;\n    long long int count = 0;\n    for(i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++){\n        for(j\
    \ = i + 1; j < n; j++){\n            for(k = 0; k < n; k++){\n               \
    \ if(a[i] + a[j] + a[k] == 0){\n                    count++;\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27899475)\n<|/ c\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27899475)\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought that my answer was clear enough and it could be helpful for\
    \ someone who wants to solve this problem in some time. Anyway, thanks for your\
    \ comment!\n<|/ c |>\n<| c |>\nI agree with you, but I thought that my answer\
    \ was clear enough and it could be helpful for someone who wants to solve this\
    \ problem in some time. Anyway, thanks for your comment!\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27899475)\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n    long\
    \ long i, j;\n    for(i = 0; i < n; ++i)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; ++i)\n    {\n        for(j = i + 1; j < n; ++j)\n\
    \        {\n            if(a[i] + a[j] + a[k] == 0)\n            {\n         \
    \       ++triples;\n                break;\n            }\n        }\n    }\n\
    \    return triples;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your\
    \ answer. Your solution works perfectly for small numbers, but for large numbers\
    \ it takes too long to compute. Do you know any way to make it faster?\n<|/ c\
    \ |>\n<| c |>\nI updated my answer with a faster solution. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThank you very much! It works perfectly!\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j <\
    \ n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n           \
    \ {\n                if(a[i] + a[j] + a[k] == sum)\n                    return\
    \ 1L;\n            }\n        }\n    }\n    return 0L;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your solution works fine for small inputs,\
    \ but for large inputs it takes too long to finish. Do you know any faster solution?\n\
    <|/ c |>\n<| c |>\nI added a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your solution works fine for small inputs, but for large\
    \ inputs it takes too long to finish. Do you know any faster solution?\n<|/ c\
    \ |>\n<| c |>\nI added a faster solution. Hope it helps.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = 0; j < n; j++){\n            for(int k = 0;\
    \ k < n; k++){\n                if(i+j+k == sum){\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n\
    \            for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis solution has a time complexity of O(n^3). There might be a\
    \ better solution with O(n^2) complexity.\n<|/ c |>\n<| c |>\nYes, I agree with\
    \ you. There might be a better solution with O(n^2) complexity. My solution was\
    \ based on this assumption.\n<|/ c |>\n<| c |>\nThis solution has a time complexity\
    \ of O(n^3). There might be a better solution with O(n^2) complexity.\n<|/ c |>\n\
    <| c |>\nYes, I agree with you. There might be a better solution with O(n^2) complexity.\
    \ My solution was based on this assumption.\n<|/ c |>\n<| c |>\nThis solution\
    \ has a time complexity of O(n^3). There might be a better solution with O(n^2)\
    \ complexity.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include<iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n   \
    \ for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n     \
    \       for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThanks so much for your answer! I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nI tried to run your code, but I got this error: `error: invalid\
    \ conversion from 'long long int*' to 'long long int' [-fpermissive]\n     long\
    \ long a[n];`\n<|/ c |>\n<| c |>\nI fixed the error, but I got this error: `error:\
    \ invalid conversion from 'long long int*' to 'long long int' [-fpermissive]\n\
    \     long long a[n];`\n<|/ c |>\n<| c |>\nI fixed the error, but I got this error:\
    \ `error: invalid conversion from 'long long int*' to 'long long int' [-fpermissive]\n\
    \     long long a[n];`\n<|/ c |>\n<| c |>\nI fixed the error, but I got this error:\
    \ `error: invalid conversion from 'long long int*' to 'long long int' [-fpermissive]\n\
    \     long long a[n];`\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long sum = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        a[i] = i * i -\
    \ i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        for(int j = i + 1; j < n; ++j)\n        {\n            for(int k = j\
    \ + 1; k < n; ++k)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                    return 1L;\n            }\n        }\n    }\n    return 0L;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nI believe this solution will\
    \ fail for large values of n. Consider n = 1000000000, the array will take up\
    \ 1000000000 bytes of memory. Even if your machine has enough memory to store\
    \ 1000000000 integers, it will take up 1000000000 x 1000000000 x 1000000000 bytes\
    \ = 10000000000000 bytes. That is more than the available memory on your machine.\n\
    <|/ c |>\n<| c |>\n: You are right. My solution was based on the assumption that\
    \ `n` is small. I'll update my answer with a more efficient solution.\n<|/ c |>\n\
    <| c |>\n: I updated my answer with a more efficient solution. Hope it helps.\n\
    <|/ c |>\n<| c |>\n: I updated my answer with a more efficient solution. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\n: I updated my answer with a more efficient solution.\
    \ Hope it helps.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n \
    \   for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = i+1; j < n; j++)\n\
    \        {\n            for(int k = j+1; k < n; k++)\n            {\n        \
    \        if(a[i] + a[j] + a[k] == 0)\n                {\n                    triples++;\n\
    \                }\n            }\n        }\n    }\n    return triples;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis solution doesn't work for large values of `n`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it for n = 10^9 and it worked fine.\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it for n = 10^9 and see if it works.\n\
    <|/ c |>\n<| c |>\nYes, it works. I tested it for n = 10^9 and it worked fine.\n\
    <|/ c |>\n<| c |>\nI tested it for n = 10^9 and it worked fine.\n<|/ c |>\n<|\
    \ a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long triple = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    triple++;\n    \
    \            }\n            }\n        }\n    }\n    return triple;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe that `long long a[n];` should be `long long a[n+1];`\
    \ since `a[n]` is out of bounds.\n<|/ c |>\n<| c |>\nYes, you are right. I just\
    \ copied his code and didn't change it. Thanks for pointing it out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; ++i)\n  \
    \  {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long\
    \ ans = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        for(int j = i + 1;\
    \ j < n; ++j)\n        {\n            for(int k = j + 1; k < n; ++k)\n       \
    \     {\n                if(a[i] + a[j] + a[k] == sum)\n                {\n  \
    \                  ans += 1;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the explanation to the answer.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added the explanation to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the explanation to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the explanation to the answer.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 1; i < n; i++)\n    {\n\
    \        for(int j = 1; j < i; j++)\n        {\n            for(int k = 1; k <\
    \ j; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n    \
    \            {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it for n = 5 and you'll see that your algorithm returns\
    \ 3 instead of 1.\n<|/ c |>\n<| c |>\nI tested it on n = 5 and it returned 1.\
    \ I edited the answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it\
    \ on n = 5 and it returned 1. I edited the answer to include a test case.\n<|/\
    \ c |>\n<| c |>\nI tested it on n = 5 and it returned 1. I edited the answer to\
    \ include a test case.\n<|/ c |>\n<| c |>\nI tested it on n = 5 and it returned\
    \ 1. I edited the answer to include a test case.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n       \
    \ a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == 0){\n                    triples++;\n   \
    \             }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    long long ans = 0;\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k\
    \ < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n  \
    \              {\n                    ans++;\n                    break;\n   \
    \             }\n            }\n        }\n    }\n    return ans;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 1; i < n; i++)\n    {\n\
    \        for(int j = 1; j < n; j++)\n        {\n            for(int k = 1; k <\
    \ n; k++)\n            {\n                if(a[i] < a[j] && a[i] < a[k])\n   \
    \             {\n                    if(a[j] < a[k])\n                    {\n\
    \                        if(a[j] + a[k] == sum)\n                        {\n \
    \                           count++;\n                        }\n            \
    \        }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nThe question asks for the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] +\
    \ a[k] is a multiple of 3.\n<|/ c |>\n<| c |>\nI added a solution that is O(n^3)\n\
    <|/ c |>\n<| c |>\nThe question asks for the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/ c |>\n\
    <| c |>\nI added a solution that is O(n^3)\n<|/ c |>\n<| c |>\nThe question asks\
    \ for the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i]\
    \ + a[j] + a[k] is a multiple of 3.\n<|/ c |>\n<| a |>\nThe question asks for\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.", "{\n    long a[n];\n    long triples = 0;\n   \
    \ for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n\
    \        {\n            for(int k = j + 1; k < n; k++)\n            {\n      \
    \          if(a[i] + a[j] + a[k] == 0)\n                {\n                  \
    \  triples += 1;\n                }\n            }\n        }\n    }\n    return\
    \ triples;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution\
    \ doesn't work if n is very large.\n<|/ c |>\n<| c |>\nIt works in O(n^3) time\
    \ complexity and O(1) space complexity.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ n is very large.\n<|/ c |>\n<| c |>\nIt works in O(n^3) time complexity and\
    \ O(1) space complexity.\n<|/ c |>\n<| c |>\nIt works in O(n^3) time complexity\
    \ and O(1) space complexity.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>",
  "{\n    long long a[n];\n    long long sum = 0;\n    long long triples = 0;\n  \
    \  for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum +=\
    \ a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j\
    \ < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i]\
    \ + a[j] + a[k] == sum){\n                    triples++;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThe question states that `a[i] = i * i - i + 1` so `a[i] + a[j]\
    \ + a[k]` must be `i * i - i` not `i * i - i + 1`.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. Thanks for pointing out. I will edit my answer.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i+1; j < n; j++)\n        {\n            for(int k = j+1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triples += 1;\n                }\n            }\n       \
    \ }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it for n = 5 and you'll see that your algorithm returns 1\
    \ instead of 3.\n<|/ c |>\n<| c |>\nI tested it on n = 5 and it returns 3. I think\
    \ it works.\n<|/ c |>\n<| c |>\nYes, it works. But it takes too much time for\
    \ n = 10. Can you suggest a faster algorithm?\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a faster algorithm. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your algorithm is much faster than mine.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n       \
    \ a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == 3){\n                    triples++;\n   \
    \             }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis is not correct. `get_max_triples(5L)`\
    \ returns `1L` but your algorithm returns `2L`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug, thank you for pointing it out. My algorithm is still O(n^3) though.\n<|/\
    \ c |>\n<| c |>\nYour algorithm is still O(n^3) because you still have three nested\
    \ loops. Your algorithm is still O(n^2) because you still have two nested loops.\
    \ Your algorithm is still O(n) because you still have one nested loop.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug, thank you for pointing it out. My algorithm is\
    \ still O(n^3) though.\n<|/ c |>\n<| c |>\nYour algorithm is still O(n^3) because\
    \ you still have three nested loops. Your algorithm is still O(n^2) because you\
    \ still have two nested loops. Your algorithm is still O(n) because you still\
    \ have one nested loop.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long triple = 0;\n  \
    \  long long i, j;\n    for(i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; i++) {\n        for(j = 0; j < n; j++) {\n     \
    \       if(i == j) {\n                triple++;\n            }\n            if(a[i]\
    \ > a[j]) {\n                triple++;\n            }\n        }\n    }\n    return\
    \ triple;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it for n = 5\
    \ and you'll see that your algorithm returns 0.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added the explanation to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the explanation to the answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the explanation to the answer.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added the explanation to the answer.\n<|/\
    \ c |>\n<| a tags=algorithm,c |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>",
  "{\n    long long int a[n];\n    long long int i,j,k;\n    long long int sum;\n\
    \    for(i=0;i<n;i++)\n    {\n        a[i]=i*(i+1)-1;\n    }\n    for(i=0;i<n;i++)\n\
    \    {\n        for(j=i+1;j<n;j++)\n        {\n            sum=0;\n          \
    \  for(k=0;k<n;k++)\n            {\n                if(i<k)\n                {\n\
    \                    sum+=a[k];\n                }\n                else if(j<k)\n\
    \                {\n                    sum+=a[k];\n                }\n      \
    \          else\n                {\n                    sum+=a[k];\n         \
    \       }\n            }\n            if(sum%3==0)\n            {\n          \
    \      return i+1;\n            }\n        }\n    }\n    return 0;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n \
    \   for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n\
    \        {\n            for(int k = j + 1; k < n; k++)\n            {\n      \
    \          if(a[i] + a[j] + a[k] == 0)\n                {\n                  \
    \  if(a[i] < a[j])\n                    {\n                        if(a[j] < a[k])\n\
    \                        {\n                            if(a[i] < a[k])\n    \
    \                        {\n                                if(a[i] < a[j])\n\
    \                                {\n                                    if(a[j]\
    \ < a[k])\n                                    {\n                           \
    \             if(a[i] < a[j])\n                                        {\n   \
    \                                         if(a[j] < a[k])\n                  \
    \                          {\n                                               \
    \ if(a[i] < a[j])\n                                                {\n       \
    \                                             if(a[j] < a[k])\n              \
    \                                      {\n                                   \
    \                     if(a[i] < a[j])\n                                      \
    \                  {\n                                                       \
    \     if(a[j] < a[k])\n                                                      \
    \      {\n                                                                if(a[i]\
    \ < a[j])\n                                                                {\n\
    \                                                                    if(a[j] <\
    \ a[k])\n                                                                    {\n\
    \                                                                        if(a[i]\
    \ < a[j])\n                                                                  \
    \      {\n                                                                   \
    \         if(a[j] < a[k])\n                                                  \
    \                          {\n                                               \
    \                                 if(a[i] < a[j])\n                          \
    \                                                      {\n                   \
    \                                                                 if(a[j] < a[k])\n\
    \                                                                            \
    \        {\n                                                                 \
    \                       if(a[i] < a[j])\n                                    \
    \                                                    {\n                     \
    \                                                                       if(a[j]\
    \ < a[k])\n                                                                  \
    \                          {\n                                               \
    \                                                 if(a[i] < a[j])\n          \
    \                                                                            \
    \          {\n                                                               \
    \                                     if(a[j] < a[k])\n                      \
    \                                                                            \
    \  {\n                                                                       \
    \                                 if(a[i] < a[j])\n                          \
    \                                                                            \
    \  {\n                                                                       \
    \                                     if(a[j] < a[k])\n                      \
    \                                                                            \
    \          {\n                                                               \
    \                                                 if(a[i] < a[j])\n          \
    \                                                                            \
    \                          {\n                                               \
    \                                                                     if(a[j]\
    \ < a[k])\n                                                                  \
    \                                                  {\n                       \
    \                                                                            \
    \                     if(a[i] < a[j])\n                                      \
    \                                                                            \
    \      {\n                                                                   \
    \                                                         if(a[j] < a[k])\n  \
    \                                                                            \
    \                                              {\n                           \
    \                                                                            \
    \                         if(a[i] < a[j])\n                                  \
    \                                                                            \
    \                  {\n                                                       \
    \                                                                            \
    \ if(a[j] < a[k])\n                                                          \
    \                                                                          {\n\
    \                                                                            \
    \                                                            if(a[i] < a[j])\n\
    \                                                                            \
    \                                                            {\n             \
    \                                                                            \
    \                                                   if(a[j] < a[k])\n        \
    \                                                                            \
    \                                                        {\n                 \
    \                                                                            \
    \                                                   if(a[i] < a[j])\n        \
    \                                                                            \
    \                                                            {\n             \
    \                                                                            \
    \                                                           if(a[j] < a[k])\n\
    \                                                                            \
    \                                                                        {\n \
    \                                                                            \
    \                                                                           if(a[i]\
    \ < ", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i <\
    \ n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int\
    \ i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int\
    \ k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n  \
    \                  return 1L;\n                }\n            }\n        }\n \
    \   }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis\
    \ is not an answer. Explain what your code does, and how it does it.\n<|/ c |>\n\
    <| c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nI added an explanation.\n\
    <|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| c |>\nI added an explanation.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>", "{\n    long long int a[n];\n \
    \   long long int i, j, k;\n    for(i = 0; i < n; i++){\n        a[i] = i * i\
    \ - i + 1;\n    }\n    sort(a, a + n);\n    long long int count = 0;\n    for(i\
    \ = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k =\
    \ 0; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n            \
    \        count++;\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis code doesn't work. Try it for n = 5 and you'll see why.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it for n = 5 and you'll see why.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for n = 5. It returns 1 instead of 3.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it for n = 5 and you'll see why.\n<|/ c |>\n<| c |>\n\
    It does work. Try it for n = 5 and you'll see why.\n<|/ c |>\n<| a tags=algorithm,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\nusing namespace std;",
  "{\n    long long a[n];\n    long long triples = 0;\n    long long i;\n    for(i\
    \ = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(long long j = i+1; j < n; j++)\n        {\n\
    \            for(long long k = j+1; k < n; k++)\n            {\n             \
    \   if(a[i] + a[j] + a[k] == 0)\n                {\n                    triples\
    \ += 1;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like this solution. Just a\
    \ couple of comments: 1) The `long long` type is not guaranteed to be 64 bits.\
    \ 2) The `long long` type is not guaranteed to be 64 bits either. 3) The `long\
    \ long` type is not guaranteed to be 64 bits either. 4) The `long long` type is\
    \ not guaranteed to be 64 bits either. 5) The `long long` type is not guaranteed\
    \ to be 64 bits either. 6) The `long long` type is not guaranteed to be 64 bits\
    \ either. 7) The `long long` type is not guaranteed to be 64 bits either. 8) The\
    \ `long long` type is not guaranteed to be 64 bits either. 9) The `long long`\
    \ type is not guaranteed to be 64 bits either. 10) The `long long` type is not\
    \ guaranteed to be 64 bits either. 11) The `long long` type is not guaranteed\
    \ to be 64 bits either. 12) The `long long` type is not guaranteed to be 64 bits\
    \ either. 13) The `long long` type is not guaranteed to be 64 bits either. 14)\
    \ The `long long` type is not guaranteed to be 64 bits either. 15) The `long long`\
    \ type is not guaranteed to be 64 bits either. 16) The `long long` type is not\
    \ guaranteed to be 64 bits either. 17) The `long long` type is not guaranteed\
    \ to be 64 bits either. 18) The `long long` type is not guaranteed to be 64 bits\
    \ either. 19) The `long long` type is not guaranteed to be 64 bits either. 20)\
    \ The `long long` type is not guaranteed to be 64 bits either. 21) The `long long`\
    \ type is not guaranteed to be 64 bits either. 22) The `long long` type is not\
    \ guaranteed to be 64 bits either. 23) The `long long` type is not guaranteed\
    \ to be 64 bits either. 24) The `long long` type is not guaranteed to be 64 bits\
    \ either. 25) The `long long` type is not guaranteed to be 64 bits either. 26)\
    \ The `long long` type is not guaranteed to be 64 ", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long triple = 0;\n    long long i = 0;\n   \
    \ long long j = 0;\n    long long k = 0;\n    long long count = 0;\n    \n   \
    \ for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    \n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < n; j++)\n        {\n\
    \            for(k = 0; k < n; k++)\n            {\n                if(a[i] <\
    \ a[j] && a[i] < a[k])\n                {\n                    triple = a[i] +\
    \ a[j] + a[k];\n                    if(triple % 3 == 0)\n                    {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis code doesn't work. Try it for n = 5 and you'll see that your\
    \ code returns 0 instead of 1.\n<|/ c |>\n<| c |>\nI tested it for n = 5 and it\
    \ returns 1. I tested it for n = 10 and it returns 2. What do you mean by \"doesn't\
    \ work\"?\n<|/ c |>\n<| c |>\nI mean it returns 0 instead of 1. I tested it for\
    \ n = 5 and it returns 1. I tested it for n = 10 and it returns 2. What do you\
    \ mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nI tested it for n = 5 and it returns\
    \ 1. I tested it for n = 10 and it returns 2. What do you mean by \"doesn't work\"\
    ?\n<|/ c |>\n<| c |>\nI tested it for n = 5 and it returns 1. I tested it for\
    \ n = 10 and it returns 2. What do you mean by \"doesn't work\"?\n<|/ c |>\n<|\
    \ a tags=algorithm,c++,arrays |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long triple\
    \ = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n      \
    \      for(int k = 0; k < n; k++){\n                if(i + j + k == a[i]){\n \
    \                   sum += triple;\n                }\n            }\n       \
    \ }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long sum = 0;\n    long long count = 0;\n    for(int i = 0;\
    \ i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n;\
    \ i++){\n        for(int j = 0; j < n; j++){\n            for(int k = 0; k < n;\
    \ k++){\n                if(i+j+k == n){\n                    sum += a[i] + a[j]\
    \ + a[k];\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n\
    <| c |>\nThe question says \"You have to create an integer array a of length n\"\
    \n<|/ c |>\n<| c |>\nYeah, I missed that part. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long int a[n];\n    long long int i, j, k;\n    long long\
    \ int count = 0;\n    for(i = 0; i < n; i++) \n    {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for(i = 0; i < n; i++) \n    {\n        for(j = i + 1; j <\
    \ n; j++) \n        {\n            for(k = 0; k < n; k++) \n            {\n  \
    \              if(a[i] + a[j] + a[k] == 0)\n                {\n              \
    \      count++;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis solution doesn't work. Try it for n = 10 and you'll see that\
    \ it will return 3 instead of 1.\n<|/ c |>\n<| c |>\nI tested it on n = 10 and\
    \ it returned 1. I added an explanation to the answer.\n<|/ c |>\n<| c |>\nThe\
    \ question states \"For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\" So the only valid triple is (1, 7, 13).\n<|/ c |>\n<| c |>\nYes,\
    \ but your solution returns 3 for n = 10. Try it for n = 10 and you'll see that\
    \ it will return 3 instead of 1.\n<|/ c |>\n<| c |>\nI tested it on n = 10 and\
    \ it returned 1. I added an explanation to the answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution has O(n^3) complexity. Not\
    \ sure if that is acceptable.\n<|/ c |>\n<| c |>\nYes, it is. I didn't want to\
    \ give the full solution, since it would be too long. Just the idea behind it.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. But the question was about O(n^2) complexity.\
    \ Your solution has O(n^3) complexity.\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ But the question was about O(n^2) complexity. Your solution has O(n^3) complexity.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. But the question was about O(n^2) complexity.\
    \ Your solution has O(n^3) complexity.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long\
    \ ans = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1;\
    \ j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n       \
    \     {\n                if(a[i] + a[j] + a[k] == sum)\n                {\n  \
    \                  ans++;\n                }\n            }\n        }\n    }\n\
    \    return ans;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static void main(String[] args) {\n    long n = Integer.parseInt(args[0]);\n\
    \    long a[] = new long[n];\n    long sum = 0;\n    long ans = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++)\
    \ {\n            for(int k = j + 1; k < n; k++) {\n                if(a[i] + a[j]\
    \ + a[k] == sum) {\n                    ans++;\n                }\n          \
    \  }\n        }\n    }\n    System.out.println(ans);\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i\
    \ = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n   \
    \ }\n    long long ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == sum){\n                    ans += 1;\n  \
    \              }\n            }\n        }\n    }\n    return ans;\n}\n</code>\n\
    <|/ a tags=algorithm,c |>\n<| c |>\nThe question was about C not C++\n<|/ c |>\n\
    <| c |>\nThe question was about C not C++\n<|/ c |>\n<| c |>\nThe question was\
    \ about C not C++\n<|/ c |>\n<| c |>\nThe question was about C not C++\n<|/ c\
    \ |>\n<| c |>\nThe question was about C not C++\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <stdio.h>\n#include <stdlib.h>", "{\n    long long a[n];\n  \
    \  long long sum = 0;\n    long long triple = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k\
    \ = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n    \
    \                triple++;\n                }\n            }\n        }\n    }\n\
    \    return triple;\n}\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nThis\
    \ is not correct. `a[i] = i * i - i + 1;` should be `a[i] = i * i - 1;`\n<|/ c\
    \ |>\n<| c |>\nI believe that `a[i] = i * i - 1;` should be `a[i] = i * i - 2;`\n\
    <|/ c |>\n<| c |>\nI believe that `a[i] = i * i - 1;` should be `a[i] = i * i\
    \ - 2;`\n<|/ c |>\n<| c |>\nI believe that `a[i] = i * i - 1;` should be `a[i]\
    \ = i * i - 2;`\n<|/ c |>\n<| c |>\nI believe that `a[i] = i * i - 1;` should\
    \ be `a[i] = i * i - 2;`\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    sort(a, a + n);\n    long long count = 0;\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n\
    \        {\n            for(int k = j + 1; k < n; k++)\n            {\n      \
    \          if(a[i] + a[j] + a[k] == sum)\n                {\n                \
    \    count++;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n\
    <| c |>\nThis doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used `long long` instead of `int`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `get_max_triples(5L)`. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used `long long` instead of `int`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `get_max_triples(5L)`. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>", "{\n    long long int a[n];\n    long long int i,j,k;\n\
    \    for(i=0;i<n;i++)\n    {\n        a[i]=i*i-1;\n    }\n    for(i=0;i<n;i++)\n\
    \    {\n        for(j=i+1;j<n;j++)\n        {\n            for(k=j+1;k<n;k++)\n\
    \            {\n                if(a[i]+a[j]+a[k]==0)\n                {\n   \
    \                 return 0;\n                }\n            }\n        }\n   \
    \ }\n    return 1;\n}\n</code>\n<|/ a tags=algorithm,c |>\n<| c |>\nThis doesn't\
    \ work. `get_max_triples(5L)` returns `1L`, but `a = [1, 3, 7, 13, 21]` only has\
    \ `(1, 7, 13)` as valid triples.\n<|/ c |>\n<| c |>\nYeah, I missed that case.\
    \ Thanks for pointing it out. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that works for all cases.\n<|/ c |>\n<| c |>\n\
    The question says \"Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\" Your solution only checks\
    \ for triples where the sum is exactly 0.\n<|/ c |>\n<| c |>\nYes, I missed that\
    \ case. Thanks for pointing it out. I'll update my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long long a[n];\n    long long sum = 0;\n    long long\
    \ count = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == sum){\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)` returns `0L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I just added a comment in the code explaining what it does.\n<|/ c |>\n\
    <| c |>\nI tested it again and now it works. I must have had a typo when I first\
    \ tested it.\n<|/ c |>\n<| c |>\nIt doesn't work if `sum` is negative.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work if `sum` is negative.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static int getMaxTriples(int n) {\n    int[] a = new int[n];\n\
    \    int sum = 0;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int\
    \ k = j + 1; k < n; k++) {\n                if (a[i] == sum && a[j] == sum &&\
    \ a[k] == sum) {\n                    count++;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,java,arrays\
    \ |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)` returns `0L` instead of\
    \ `1L`.\n<|/ c |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)` returns `0L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)`\
    \ returns `0L` instead of `1L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int getMaxTriples(int n) {\n    int[] a = new int[n];\n    int sum = 0;\n",
  "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k\
    \ = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n    \
    \                return 1L;\n                }\n            }\n        }\n   \
    \ }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| a |>\n\
    <code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long triple = 0;\n    long long i = 0;\n    long long j = 0;\n    long\
    \ long k = 0;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n  \
    \  }\n    for(i = 0; i < n; i++){\n        for(j = i+1; j < n; j++){\n       \
    \     for(k = 0; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n\
    \                    triple++;\n                }\n            }\n        }\n\
    \    }\n    return triple;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<|\
    \ c |>\nThe question was about a solution in C++, not C. Your solution does not\
    \ work in C++.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't work in C++, just\
    \ that it's not a C++ solution. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ is a\
    \ different language. C++ is a different language. C++ is a different language.\
    \ C++ is a different language. C++ is a different language. C++ is a different\
    \ language. C++ is a different language. C++ is a different language. C++ ", "{\n\
    \    long long int a[n];\n    long long int i;\n    long long int j;\n    long\
    \ long int k;\n    long long int sum = 0;\n    for(i = 0; i < n; i++){\n     \
    \   a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++){\n        for(j =\
    \ 0; j < n; j++){\n            for(k = 0; k < n; k++){\n                if(a[i]\
    \ < a[j] && a[i] < a[k]){\n                    sum++;\n                }\n   \
    \         }\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    long long ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == sum){\n                    ans++;\n     \
    \           }\n            }\n        }\n    }\n    return ans;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nI tested it on ideone and it returns 3L\n\
    <|/ c |>\n<| c |>\nI tested it on ideone and it returns 3L\n<|/ c |>\n<| c |>\n\
    I tested it on ideone and it returns 3L\n<|/ c |>\n<| c |>\nI tested it on ideone\
    \ and it returns 3L\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n   \
    \     for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == sum){\n                    return 1L;\n\
    \                }\n            }\n        }\n    }\n    return 0L;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution has a time complexity of O(n^3).\
    \ While the question asks for O(n^2)\n<|/ c |>\n<| c |>\nYes, I know. But I thought\
    \ that OP wants to know how many triples exist and I thought that he can easily\
    \ count them by himself.\n<|/ c |>\n<| c |>\nYes, I know. But I thought that OP\
    \ wants to know how many triples exist and I thought that he can easily count\
    \ them by himself.\n<|/ c |>\n<| c |>\nYes, I know. But I thought that OP wants\
    \ to know how many triples exist and I thought that he can easily count them by\
    \ himself.\n<|/ c |>\n<| c |>\nI added a solution that is O(n^2)\n<|/ c |>\n<|\
    \ a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k\
    \ = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n    \
    \                return 1L;\n                }\n            }\n        }\n   \
    \ }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThe question\
    \ says *the sum of all elements of the array is a multiple of 3* but your solution\
    \ doesn't take that into account.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ to find the number of triples whose sum is multiple of 3. So the answer should\
    \ be 1 since only (1, 7, 13) is valid. Isn't it ?\n<|/ c |>\n<| c |>\nThe question\
    \ says \"the sum of all elements of the array is a multiple of 3\" but your solution\
    \ doesn't take that into account.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ to find the number of triples whose sum is multiple of 3. So the answer should\
    \ be 1 since only (1, 7, 13) is valid. Isn't it ?\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that. Thanks for pointing it out. Updated the answer.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n   \
    \ long long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i -\
    \ i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n   \
    \             if(i == j && j == k){\n                    continue;\n         \
    \       }\n                if(a[i] + a[j] + a[k] == sum){\n                  \
    \  return 1L;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis solution doesn't work if n\
    \ is very large.\n<|/ c |>\n<| c |>\nI tested it on `n = 1000000000000L` and it\
    \ returned `1L` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work for n = 1000000000000L\n\
    <|/ c |>\n<| c |>\nI tested it on `n = 1000000000000L` and it returned `1L` as\
    \ expected.\n<|/ c |>\n<| c |>\nIt doesn't work for n = 1000000000000L\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\n", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    long long i;\n    for(i = 0; i < n; ++i)\n\
    \    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; ++i)\n   \
    \ {\n        for(long long j = i + 1; j < n; ++j)\n        {\n            for(long\
    \ long k = j + 1; k < n; ++k)\n            {\n                if(a[i] + a[j] +\
    \ a[k] == 0)\n                {\n                    ++triples;\n            \
    \    }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis code does not work. `a[i] = i * i - i\
    \ + 1;` should be `a[i] = i * i - i;`\n<|/ c |>\n<| c |>\nThis code does not work.\
    \ `a[i] = i * i - i + 1;` should be `a[i] = i * i - i;`\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long a[n];\n    long triples = 0;\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        for(int j = i + 1; j < n; ++j)\n        {\n            for(int k = j\
    \ + 1; k < n; ++k)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n\
    \                {\n                    ++triples;\n                }\n      \
    \      }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n\
    It works fine for me. Did you try it with `get_max_triples(5L)`?\n<|/ c |>\n<|\
    \ c |>\nYes, I did. `get_max_triples(5L)` returns `1L`, not `3L`.\n<|/ c |>\n\
    <| a |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>",
  "{\n    long long a[n];\n    long long i, j, k;\n    long long count = 0;\n    for(i\
    \ = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i <\
    \ n; i++){\n        for(j = i+1; j < n; j++){\n            for(k = 0; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == 0){\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ `get_max_triples(5L)` and it returned `1L` as expected. Can you please elaborate\
    \ on what is not working?\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(5L)`\
    \ and it returned `1L` as expected. Can you please elaborate on what is not working?\n\
    <|/ c |>\n<| c |>\nI tested it on `get_max_triples(5L)` and it returned `1L` as\
    \ expected. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\n\
    I tested it on `get_max_triples(5L)` and it returned `1L` as expected. Can you\
    \ please elaborate on what is not working?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long long int a[n];\n\
    \    long long int triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n    \
    \    for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n  \
    \              {\n                    if(a[i] < a[j])\n                    {\n\
    \                        if(a[i] < a[k])\n                        {\n        \
    \                    if(a[j] < a[k])\n                            {\n        \
    \                        if(a[i] < a[j])\n                                {\n\
    \                                    if(a[i] < a[k])\n                       \
    \             {\n                                        if(a[j] < a[k])\n   \
    \                                     {\n                                    \
    \        if(a[i] < a[j])\n                                            {\n    \
    \                                            if(a[i] < a[k])\n               \
    \                                 {\n                                        \
    \            if(a[j] < a[k])\n                                               \
    \     {\n                                                        if(a[i] < a[j])\n\
    \                                                        {\n                 \
    \                                           if(a[i] < a[k])\n                \
    \                                            {\n                             \
    \                                   if(a[j] < a[k])\n                        \
    \                                        {\n                                 \
    \                                   if(a[i] < a[j])\n                        \
    \                                            {\n                             \
    \                                           if(a[i] < a[k])\n                \
    \                                                        {\n                 \
    \                                                           if(a[j] < a[k])\n\
    \                                                                            {\n\
    \                                                                            \
    \    if(a[i] < a[j])\n                                                       \
    \                         {\n                                                \
    \                                    if(a[i] < a[k])\n                       \
    \                                                             {\n            \
    \                                                                            if(a[j]\
    \ < a[k])\n                                                                  \
    \                      {\n                                                   \
    \                                         if(a[i] < a[j])\n                  \
    \                                                                          {\n\
    \                                                                            \
    \                    if(a[i] < a[k])\n                                       \
    \                                                         {\n                \
    \                                                                            \
    \        if(a[j] < a[k])\n                                                   \
    \                                                 {\n                        \
    \                                                                            \
    \    if(a[i] < a[j])\n                                                       \
    \                                                 {\n                        \
    \                                                                            \
    \        if(a[i] < a[k])\n                                                   \
    \                                                         {\n                \
    \                                                                            \
    \                    if(a[j] < a[k])\n                                       \
    \                                                                         {\n\
    \                                                                            \
    \                                        if(a[i] < a[j])\n                   \
    \                                                                            \
    \                     {\n                                                    \
    \                                                                    if(a[i] <\
    \ a[k])\n                                                                    \
    \                                                    {\n                     \
    \                                                                            \
    \                           if(a[j] < a[k])\n                                \
    \                                                                            \
    \                {\n                                                         \
    \                                                                       if(a[i]\
    \ < a[j])\n                                                                  \
    \                                                              {\n           \
    \                                                                            \
    \                                             if(a[i] < a[k])\n              \
    \                                                                            \
    \                                          {\n                               \
    \                                                                            \
    \                             if(a[j] < a[k])\n                              \
    \                                                                            \
    \                              {\n                                           \
    \                                                                            \
    \                     if(a[i] < a[j])\n                                      \
    \                                                                            \
    \                          {\n                                               \
    \                                                                            \
    \                     if(a[i] < a[k])\n                                      \
    \                                                                            \
    \                              {\n                                           \
    \                                                                            \
    \                             if(a[j] < a[k])\n                              \
    \                                                                            \
    \                                          {\n", "{\n    long long a[n];\n   \
    \ long long sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i\
    \ * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = i+1; j < n; j++)\n        {\n            for(int k\
    \ = j+1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ sum)\n                    return 1L;\n            }\n        }\n    }\n    return\
    \ 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution does not\
    \ work for large numbers. Try with n = 10^9 and you will see that it will take\
    \ forever to finish.\n<|/ c |>\n<| c |>\nYes, I agree with you. But the question\
    \ was about finding all triples of length 3 that satisfy the condition. So, I\
    \ think this solution is good enough.\n<|/ c |>\n<| c |>\nYes, but this solution\
    \ does not work for large numbers. Try with n = 10^9 and you will see that it\
    \ will take forever to finish.\n<|/ c |>\n<| c |>\nYes, I agree with you. But\
    \ the question was about finding all triples of length 3 that satisfy the condition.\
    \ So, I think this solution is good enough.\n<|/ c |>\n<| c |>\nYes, I agree with\
    \ you. But the question was about finding all triples of length 3 that satisfy\
    \ the condition. So, I think this solution is good enough.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include<iostream>\nusing namespace std;", "{\n    long a[n];\n\
    \    long triples = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1;\
    \ j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i]\
    \ + a[j] + a[k] % 3 == 0){\n                    triples++;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n   \
    \ for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n     \
    \       for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe this\
    \ solution is O(n^3) not O(n^2)\n<|/ c |>\n<| c |>\nYes, you are right. My mistake.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    for(long i = 0; i < n; i++) \n    {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) \n    {\n        for(long\
    \ j = i+1; j < n; j++) \n        {\n            for(long k = j+1; k < n; k++)\
    \ \n            {\n                if(a[i] + a[j] + a[k] == 3) \n            \
    \    {\n                    if(i < j && i < k && j < k) \n                   \
    \ {\n                        triples += 1;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/\
    \ a tags=algorithm,c++,dynamic-programming |>\n<| c |>\nI believe this solution\
    \ will fail for large `n` due to integer overflow. For example, `get_max_triples(10000000000L)`\
    \ returns `-1`.\n<|/ c |>\n<| c |>\nYes, I agree with you. My solution was based\
    \ on a small test case. I'll edit my answer to include a solution that uses long\
    \ long instead of int.\n<|/ c |>\n<| a tags=algorithm,c++,dynamic-programming\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long a[n];\n    long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i]\
    \ = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n\
    \                if(a[i] < a[j] && a[i] < a[k] && a[j] < a[k]){\n            \
    \        if(a[i] + a[j] + a[k] == sum){\n                        return 1L;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return 0L;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26825825)\n\
    <|/ c |>\n<| c |>\nThe question was \"How to find the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3?\"\
    \ The code I provided does exactly that. How is it not an answer?\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3?\" The code I\
    \ provided does exactly that. How is it not an answer?\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to find the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k and a[i] + a[j] + a[k] is a multiple of 3?\" The code I provided does\
    \ exactly that. How is it not an answer?\n<|/ c |>\n<| c |>\nThe question was\
    \ \"How to find the number of triples (a[i], a[j], a[k]) of a where i < j < k\
    \ and a[i] + a[j] + a[k] is a multiple of 3?\" The code I provided does exactly\
    \ that. How is it not an answer?\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n   \
    \ long long triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triples += 1;\n                }\n            }\n       \
    \ }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c\
    \ |>\nI guess you meant `long long a[n];` instead of `long long a[n];` ?\n<|/\
    \ c |>\n<| c |>\nYes, thank you. Fixed it.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n   \
    \     for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == sum){\n                    return 1L;\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThe question asks for an algorithm that\
    \ runs in O(n) time. Your solution runs in O(n^3) time.\n<|/ c |>\n<| c |>\nThe\
    \ question asks for an algorithm that runs in O(n) time. Your solution runs in\
    \ O(n^3) time.\n<|/ c |>\n<| c |>\nI believe that my solution is O(n) time because\
    \ I used a hash table to store the results. I believe that my solution is O(n)\
    \ time because I used a hash table to store the results. I believe that my solution\
    \ is O(n) time because I used a hash table to store the results. I believe that\
    \ my solution is O(n) time because I used a hash table to store the results. I\
    \ believe that my solution is O(n) time because I used a hash table to store the\
    \ results. I believe that my solution is O(n) time because I used a hash table\
    \ to store the results. I believe that my solution is O(n) time because I used\
    \ a hash table to store the results. I believe that my solution is O(n) time because\
    \ I used a hash table to store the results. I believe that my solution is O(n)\
    \ time because I used a hash table to store the results. I believe that my solution\
    \ is O(n) time because I used a hash table to store the results. I believe that\
    \ my solution is O(n) time because I used a hash table to store the results.\n\
    <|/ c |>\n<| c |>\nI believe that my solution is O(n) time because I used a hash\
    \ table to store the results. I believe that my solution is O(n) time because\
    \ I used a hash table to store the results. I believe that my solution is O(n)\
    \ time because I used a hash table to store the results. I believe that my solution\
    \ is O(n) time because I used a hash table to store the results. I believe that\
    \ my solution is O(n) time because I used a hash table to store the results. ",
  "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    sort(a, a + n);\n\
    \    long long count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j\
    \ = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n       \
    \         if(a[i] + a[j] + a[k] == sum){\n                    count++;\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long a[n];\n    long triples = 0;\n    long i;\n\
    \    for(i = 0; i < n; i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n  \
    \  for(i = 0; i < n; i++) \n    {\n        for(long j = i + 1; j < n; j++) \n\
    \        {\n            for(long k = j + 1; k < n; k++) \n            {\n    \
    \            if(a[i] + a[j] + a[k] == 0) \n                {\n               \
    \     triples++;\n                }\n            }\n        }\n    }\n    return\
    \ triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution fails\
    \ for large values of `n`. It takes more than a minute to compute `get_max_triples(1000000000)`.\n\
    <|/ c |>\n<| c |>\nIt takes more than a minute to compute `get_max_triples(1000000000)`\
    \ on my machine.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(1000000000)`\
    \ on my machine and it took about a minute to compute it.\n<|/ c |>\n<| c |>\n\
    I tested it on `get_max_triples(1000000000)` on my machine and it took about a\
    \ minute to compute it.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(1000000000)`\
    \ on my machine and it took about a minute to compute it.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include<iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i\
    \ = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            for(int\
    \ k = j + 1; k < n; k++) {\n                if(a[i] + a[j] + a[k] == sum) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n   \
    \ long long triples = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(int i = 1; i < n; i++)\n    {\n        for(int\
    \ j = 1; j < i; j++)\n        {\n            for(int k = 1; k < j; k++)\n    \
    \        {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n \
    \                   triples += 1;\n                }\n            }\n        }\n\
    \    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n    long long\
    \ a[n];\n    long long sum = 0;\n    for(int i = 1; i < n; i++) {\n        a[i]\
    \ = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 1; i < n; i++)\
    \ {\n        for(int j = 1; j < n; j++) {\n            for(int k = 1; k < n; k++)\
    \ {\n                if(i + j + k == a[i]) {\n                    if(i % 3 ==\
    \ 0 && j % 3 == 0 && k % 3 == 0) {\n                        sum += 1;\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution does not\
    \ work if n is very large. For example, try with n = 10^9 and you will get an\
    \ overflow error.\n<|/ c |>\n<| c |>\nYes, I agree with you. My solution was for\
    \ small values of `n`. But I thought that OP will get an idea of how to solve\
    \ this problem for large values of `n`.\n<|/ c |>\n<| c |>\nYes, I agree with\
    \ you. My solution was for small values of `n`. But I thought that OP will get\
    \ an idea of how to solve this problem for large values of `n`.\n<|/ c |>\n<|\
    \ a |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n \
    \   long long i;\n    for(i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; i++) {\n        for(long long j = i+1; j < n; j++)\
    \ {\n            for(long long k = j+1; k < n; k++) {\n                if(a[i]\
    \ + a[j] + a[k] == 3) {\n                    triples++;\n                }\n \
    \           }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis solution does not work if the array is of size greater than 10^9.\
    \ I am getting time limit exceeded error for large inputs.\n<|/ c |>\n<| c |>\n\
    I tested it on `n = 10^9` and it worked fine. Are you sure you didn't miss something?\n\
    <|/ c |>\n<| c |>\nI tested it on n = 10^9 and it worked fine. Are you sure you\
    \ didn't miss something?\n<|/ c |>\n<| c |>\nI tested it on n = 10^9 and it worked\
    \ fine. Are you sure you didn't miss something?\n<|/ c |>\n<| c |>\nI tested it\
    \ on n = 10^9 and it worked fine. Are you sure you didn't miss something?\n<|/\
    \ c |>\n<| a tags=algorithm,arrays,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i+1; j < n; j++){\n            for(int k = j+1; k < n; k++){\n         \
    \       if(a[i] + a[j] + a[k] == sum){\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not correct. Try `get_max_triples(10L)`.\n\
    <|/ c |>\n<| c |>\nI tested it on `get_max_triples(10L)` and it returns `1L` as\
    \ expected.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(100L)` and it\
    \ returns `1L` as expected.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(1000L)`\
    \ and it returns `1L` as expected.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(10000L)`\
    \ and it returns `1L` as expected.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 0; i<n; i++)\n    {\n        a[i] = i * i -\
    \ i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i<n; i++)\n    {\n \
    \       for(int j = 0; j<n; j++)\n        {\n            for(int k = 0; k<n; k++)\n\
    \            {\n                if(i<j && j<k && k<i && a[i] + a[j] + a[k]==sum)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `get_max_triples(5L)` returns `1L` instead of `2L`.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone and it works. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you call `get_max_triples(5L)` on `5L`.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone and it works. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you call `get_max_triples(5L)` on `5L`.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n   \
    \ sort(a, a + n);\n    long long count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n;\
    \ k++){\n                if(a[i] + a[j] + a[k] == sum){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis is not an optimal solution. `O(n^3)`\
    \ solution is already given in the question.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ But the question was \"how to optimize this code\", not \"how to optimize this\
    \ algorithm\". And I thought that my solution would be faster than the one in\
    \ the question. Anyway, I added my solution to the answer.\n<|/ c |>\n<| c |>\n\
    I agree with you. But the question was \"how to optimize this code\", not \"how\
    \ to optimize this algorithm\". And I thought that my solution would be faster\
    \ than the one in the question. Anyway, I added my solution to the answer.\n<|/\
    \ c |>\n<| c |>\nI agree with you. But the question was \"how to optimize this\
    \ code\", not \"how to optimize this algorithm\". And I thought that my solution\
    \ would be faster than the one in the question. Anyway, I added my solution to\
    \ the answer.\n<|/ c |>\n<| c |>\nI agree with you. But the question was \"how\
    \ to optimize this code\", not \"how to optimize this algorithm\". And I thought\
    \ that my solution would be faster than the one in the question. Anyway, I added\
    \ my solution to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include<iostream>\n\
    using namespace std;", "{\n    long long int a[n];\n    long long int i,j,k;\n\
    \    for(i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n    }\n    for(i=0;i<n;i++)\n\
    \    {\n        for(j=i+1;j<n;j++)\n        {\n            for(k=j+1;k<n;k++)\n\
    \            {\n                if(a[i]+a[j]+a[k]==0)\n                {\n   \
    \                 return 0;\n                }\n            }\n        }\n   \
    \ }\n    return 1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include<bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    long long i;\n    for(i = 0; i < n; ++i)\n    {\n   \
    \     a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; ++i)\n    {\n      \
    \  for(long long j = i+1; j < n; ++j)\n        {\n            for(long long k\
    \ = j+1; k < n; ++k)\n            {\n                if(a[i] + a[j] + a[k] ==\
    \ 0)\n                {\n                    ++triples;\n                }\n \
    \           }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nI believe this can be done in O(n^2) by using a hash table to store\
    \ the pairs of numbers. Then for each number in the array, you can just check\
    \ if it is in the hash table and increment the counter.\n<|/ c |>\n<| c |>\nYes,\
    \ you can do it in O(n^2) by using a hash table. But the complexity is still O(n^3).\
    \ Hash table is O(n) complexity and O(n^2) is O(n^3)\n<|/ c |>\n<| c |>\nI believe\
    \ this can be done in O(n^2) by using a hash table to store the pairs of numbers.\
    \ Then for each number in the array, you can just check if it is in the hash table\
    \ and increment the counter.\n<|/ c |>\n<| c |>\nYes, you can do it in O(n^2)\
    \ by using a hash table. But the complexity is still O(n^3). Hash table is O(n)\
    \ complexity and O(n^2) is O(n^3)\n<|/ c |>\n<| c |>\nI believe this can be done\
    \ in O(n^2) by using a hash table to store the pairs of numbers. Then for each\
    \ number in the array, you can just check if it is in the hash table and increment\
    \ the counter.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long a[n];\n    long triples\
    \ = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(int i = 1; i < n; i++)\n    {\n        for(int j = 1; j < n; j++)\n\
    \        {\n            for(int k = 1; k < n; k++)\n            {\n          \
    \      if(a[i] < a[j] && a[i] < a[k])\n                {\n                   \
    \ if(a[j] < a[k])\n                    {\n                        if(a[j] + a[k]\
    \ >= 3 * a[i])\n                        {\n                            triples++;\n\
    \                        }\n                    }\n                    else\n\
    \                    {\n                        if(a[j] + a[k] >= 3 * a[i])\n\
    \                        {\n                            triples++;\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I believe this solution will give wrong result for input `n = 2`. Please check\
    \ my answer.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nimport java.util.stream.Collectors;", "{\n    long long int\
    \ a[n];\n    long long int sum = 0;\n    for(int i = 1; i < n; i++)\n    {\n \
    \       a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long int\
    \ ans = 0;\n    for(int i = 1; i < n; i++)\n    {\n        for(int j = 1; j <\
    \ n; j++)\n        {\n            for(int k = 1; k < n; k++)\n            {\n\
    \                if(a[i] < a[j] && a[i] < a[k])\n                {\n         \
    \           if(a[j] < a[k])\n                    {\n                        ans\
    \ += 1;\n                    }\n                    else\n                   \
    \ {\n                        ans += 2;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=algorithm,c++,dynamic-programming\
    \ |>\n<| c |>\nThis solution doesn't work. `get_max_triples(5L)` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Now I edited the\
    \ answer to include that case.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ still wrong. `get_max_triples(5L)` returns `1L` instead of `3L`.\n<|/ c |>\n\
    <| c |>\nYes, I missed that case. Now I edited the answer to include that case.\n\
    <|/ c |>\n<| c |>\nI believe this solution is still wrong. `get_max_triples(5L)`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| a tags=algorithm,c++,dynamic-programming\
    \ |>\n<code>", "{\n    long long a[n];\n    long long triples = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    triples += 1;\n\
    \                }\n            }\n        }\n    }\n    return triples;\n}\n\
    </code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis is not the right answer.\
    \ Try `get_max_triples(3L)`.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Also, your code\
    \ is O(n^3), which is very inefficient.\n<|/ c |>\n<| c |>\nI added a comment\
    \ explaining why I downvoted your answer.\n<|/ c |>\n<| c |>\nI added a comment\
    \ explaining why I downvoted your answer.\n<|/ c |>\n<| c |>\nI added a comment\
    \ explaining why I downvoted your answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long a[n];\n    long sum =\
    \ 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n \
    \       sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \      return 1L;\n            }\n        }\n    }\n    return 0L;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI didn't know that you can declare an array with variable\
    \ length in C++. Thanks for sharing your knowledge.\n<|/ c |>\n<| c |>\nYou can\
    \ declare an array with variable length but you cannot declare a variable length\
    \ array in C++.\n<|/ c |>\n<| c |>\nI see. Thanks for the info.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>", "{\n    long a[n];\n    long triples = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    if(a[i] < a[j])\n\
    \                    {\n                        if(a[i] < a[k])\n            \
    \            {\n                            if(a[j] < a[k])\n                \
    \            {\n                                triples += 1;\n              \
    \              }\n                        }\n                    }\n         \
    \           else if(a[i] < a[k])\n                    {\n                    \
    \    if(a[j] < a[k])\n                        {\n                            if(a[k]\
    \ < a[j])\n                            {\n                                triples\
    \ += 1;\n                            }\n                        }\n          \
    \          }\n                    else if(a[i] < a[k])\n                    {\n\
    \                        if(a[j] < a[k])\n                        {\n        \
    \                    if(a[k] < a[j])\n                            {\n        \
    \                        triples += 1;\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,dynamic-programming\
    \ |>\n<| c |>\nThis solution doesn't work. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| c |>\n: It works. I tested it with `get_max_triples(5L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| c |>\n: I tested it with `get_max_triples(5L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| c |>\n: I tested it with `get_max_triples(5L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| c |>\n: I tested it with `get_max_triples(5L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| a tags=algorithm,c++,dynamic-programming |>\n<code>", "{\n\
    \    long long a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++)\
    \ \n    {\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = 0; j < n; j++)\n        {\n            for(int k =\
    \ 0; k < n; k++)\n            {\n                if(i+j+k == a[i])\n         \
    \       {\n                    if(a[i] + a[j] + a[k] == 0)\n                 \
    \   {\n                        triples++;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        for(int j = i + 1; j < n; ++j)\n        {\n            for(int k = j\
    \ + 1; k < n; ++k)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis code doesn't work. `a` needs to be\
    \ `long long` instead of `long`.\n<|/ c |>\n<| c |>\n: I tested it on ideone and\
    \ it works fine. `long long` should be used instead of `long` because `long` has\
    \ limited range and `long long` has more range than `long`.\n<|/ c |>\n<| c |>\n\
    : Thanks for pointing out. I've corrected the code.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing out. I've corrected the code.\n<|/ c |>\n<| c |>\n: Thanks for\
    \ pointing out. I've corrected the code.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long long int a[n];\n\
    \    long long int i, j, k;\n    long long int sum = 0;\n    for(i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = i + 1; j < n; j++)\n        {\n            for(k = 0;\
    \ k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == 0)\n  \
    \              {\n                    break;\n                }\n            \
    \    if(a[i] + a[j] + a[k] == 3)\n                {\n                    sum +=\
    \ 1;\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis\
    \ doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\nYes, it\
    \ works. I tested it on `get_max_triples(5L)` and the result is `1L`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\n\
    It works. I tested it on `get_max_triples(5L)` and the result is `1L`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++)\n  \
    \  {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j < n; j++)\n        {\n\
    \            for(int k = j + 1; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                    return 1L;\n            }\n     \
    \   }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ an answer to the question. OP asked for O(n) solution. Your solution requires\
    \ O(n^3) time.\n<|/ c |>\n<| c |>\nI agree with you, but I believe that this is\
    \ an answer to the question as stated.\n<|/ c |>\n<| c |>\nThe question states\
    \ that \"the value of a[i] = i * i - i + 1\" is valid. Your solution requires\
    \ O(n^3) time.\n<|/ c |>\n<| c |>\nThe question states that \"the value of a[i]\
    \ = i * i - i + 1\" is valid. Your solution requires O(n^3) time.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that this is an answer to the question\
    \ as stated.\n<|/ c |>\n<| a |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long long a[n];\n    long long triples = 0;\n    long long i;\n    for(i = 0;\
    \ i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n         \
    \   for(long k = j+1; k < n; k++)\n            {\n                if(a[i] + a[j]\
    \ + a[k] == 0)\n                {\n                    triples += 1;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThe question\
    \ was about a solution in C++, not C. Also, the question was about a solution\
    \ that is O(n^3), not O(n^2).\n<|/ c |>\n<| c |>\nThe question was about a solution\
    \ in C++, not C. Also, the question was about a solution that is O(n^3), not O(n^2).\n\
    <|/ c |>\n<| c |>\nThe question was about a solution in C++, not C. Also, the\
    \ question was about a solution that is O(n^3), not O(n^2).\n<|/ c |>\n<| c |>\n\
    The question was about a solution in C++, not C. Also, the question was about\
    \ a solution that is O(n^3), not O(n^2).\n<|/ c |>\n<| c |>\nThe question was\
    \ about a solution in C++, not C. Also, the question was about a solution that\
    \ is O(n^3), not O(n^2).\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n\
    \            for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<|\
    \ c |>\nThis solution has time complexity of O(n^3). Not a good solution.\n<|/\
    \ c |>\n<| c |>\nI agree with you. But the OP asked for O(n^2) solution. Anyway,\
    \ I edited my answer to include a O(n^2) solution.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. But the OP asked for O(n^2) solution. Anyway, I edited my answer to\
    \ include a O(n^2) solution.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n \
    \   long long i, j, k;\n    for(i = 0; i < n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for(i = 0; i < n; i++) {\n        for(j = i+1; j < n; j++)\
    \ {\n            for(k = 0; k < n; k++) {\n                if(a[i] + a[j] + a[k]\
    \ == 0) {\n                    triples += 1;\n                    break;\n   \
    \             }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Can you please explain why you used\
    \ `long long` instead of `long`?\n<|/ c |>\n<| c |>\nBecause `long long` is 64\
    \ bit and `long` is 32 bit.\n<|/ c |>\n<| c |>\nI see. But why do you use `long\
    \ long` instead of `long`?\n<|/ c |>\n<| c |>\nBecause `long long` is 64 bit and\
    \ `long` is 32 bit.\n<|/ c |>\n<| c |>\nI see. But why do you use `long long`\
    \ instead of `long`?\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    sort(a, a + n);\n    long long ans = 0;\n    for(long i = 0; i < n;\
    \ i++){\n        for(long j = i + 1; j < n; j++){\n            for(long k = j\
    \ + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n        \
    \            ans++;\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution is O(n^3). Can you please\
    \ suggest a better solution?\n<|/ c |>\n<| c |>\nI added a O(n) solution. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThe O(n^3) solution is wrong. Consider `n = 10`.\
    \ The array `a` has `10` elements. But `a[0]` through `a[9]` have no triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `0` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `9` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `18` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `27` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `36` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `45` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `54` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `63` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `72` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `81` triples.\
    \ So the array `a` has `10` elements, but `a[0]` through `a[9]` have `90` triples.\
    \ So ", "{\n    long long a[n];\n    long long triples = 0;\n    long long i;\n\
    \    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ for(i = 0; i < n; i++)\n    {\n        for(long j = i + 1; j < n; j++)\n   \
    \     {\n            for(long k = j + 1; k < n; k++)\n            {\n        \
    \        if(a[i] + a[j] + a[k] == 0)\n                {\n                    triples\
    \ += 1;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nThis is not the most efficient\
    \ solution. Consider a case where n is 10^9. Your solution will take 10^9 iterations\
    \ to find the answer. On the other hand, my solution will take 10^9 iterations\
    \ to find all triples. So the time complexity of your solution is O(n^3). Your\
    \ solution is O(n^2).\n<|/ c |>\n<| c |>\nI agree with you. My solution is O(n^2)\
    \ but it is more efficient than yours. I didn't know that my solution was O(n^3).\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nI didn't know that my solution\
    \ was O(n^3). Thanks for pointing out. My solution was O(n^2) but it is more efficient\
    \ than yours. I didn't know that my solution was O(n^3). Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\nI didn't know that my solution was O(n^3). Thanks for pointing\
    \ out. My solution was O(n^2) but it is more efficient than yours. I didn't know\
    \ that my solution was O(n^3). Thanks for pointing out.\n<|/ c |>\n<| c |>\nI\
    \ didn't know that my solution was O(n^3). Thanks for pointing out. My solution\
    \ was O(n^2) but it is more efficient than yours. I didn't know that my solution\
    \ was O(n^3). Thanks for pointing out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k\
    \ = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it for n = 10 and you'll see why.\n<|/ c |>\n<| c |>\nI tested it on n =\
    \ 10 and it worked. Can you please explain why it doesn't work?\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work because you only count the triples up to `i`, but you\
    \ also need to count the triples up to `j` and `k`.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that works.\n<|/ c |>\n<| c |>\nI tested it\
    \ on n = 10 and it worked. Can you please explain why it doesn't work?\n<|/ c\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triples = 0;\n    long long i,\
    \ j;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i\
    \ = 0; i < n; i++){\n        for(j = 0; j < n; j++){\n            if(i<j){\n \
    \               for(long long k = i; k < j; k++){\n                    if(a[i]\
    \ + a[j] + a[k] == 3){\n                        triples++;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis is not correct. Try `get_max_triples(3L)`\n\
    <|/ c |>\n<| c |>\n: I believe that `get_max_triples(3L)` should return `1L`,\
    \ not `2L`.\n<|/ c |>\n<| c |>\n: I believe that `get_max_triples(3L)` should\
    \ return `1L`, not `2L`.\n<|/ c |>\n<| c |>\n: I believe that `get_max_triples(3L)`\
    \ should return `1L`, not `2L`.\n<|/ c |>\n<| c |>\n: I believe that `get_max_triples(3L)`\
    \ should return `1L`, not `2L`.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for(int i = 1; i < n; i++)\n    {\n        for(int j\
    \ = 1; j < n; j++)\n        {\n            for(int k = 1; k < n; k++)\n      \
    \      {\n                if(a[i] < a[j] && a[i] < a[k])\n                {\n\
    \                    if(a[j] < a[k])\n                    {\n                \
    \        if(a[j] + a[k] == 0)\n                        {\n                   \
    \         triples += 1;\n                        }\n                        else\
    \ if(a[j] + a[k] > 0)\n                        {\n                           \
    \ if(a[j] + a[k] % 3 == 0)\n                            {\n                  \
    \              triples += 1;\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>", "{\n    long long a[n];\n    long long triples = 0;\n    long long\
    \ i, j, k;\n    for(i = 0; i < n; i++) \n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; i++) \n    {\n        for(j = i + 1; j < n; j++)\
    \ \n        {\n            for(k = 0; k < n; k++) \n            {\n          \
    \      if(a[i] + a[j] + a[k] == 3) \n                {\n                    if(i\
    \ != j && i != k && j != k) \n                    {\n                        triples++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't\
    \ work. Try it for n = 5. The array is {1, 3, 7, 13, 21}. Your algorithm returns\
    \ 0.\n<|/ c |>\n<| c |>\n: It does work. Try it for n = 5. The array is {1, 3,\
    \ 7, 13, 21}. The only valid triple is (1, 7, 13). So the answer is 1.\n<|/ c\
    \ |>\n<| c |>\n: I added an explanation to the answer.\n<|/ c |>\n<| c |>\n: I\
    \ added an explanation to the answer.\n<|/ c |>\n<| c |>\n: I added an explanation\
    \ to the answer.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    long long res = 0;\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k\
    \ < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n  \
    \              {\n                    res++;\n                    break;\n   \
    \             }\n            }\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution doesn't work. Try it with\
    \ `get_max_triples(10L)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even\
    \ tested it with `get_max_triples(100L)` and it worked. Maybe you didn't test\
    \ it properly?\n<|/ c |>\n<| c |>\nI tested it with `get_max_triples(100L)` and\
    \ it worked. Maybe you didn't test it properly?\n<|/ c |>\n<| c |>\nI tested it\
    \ with `get_max_triples(100L)` and it worked. Maybe you didn't test it properly?\n\
    <|/ c |>\n<| c |>\nI tested it with `get_max_triples(100L)` and it worked. Maybe\
    \ you didn't test it properly?\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long a[n];\n    long triples\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n\
    \        {\n            for(int k = 0; k < n; k++)\n            {\n          \
    \      if(i+j+k == a[i])\n                {\n                    if(a[i] > a[j]\
    \ + a[k])\n                    {\n                        a[i] = a[j] + a[k];\n\
    \                        a[j] = i;\n                        a[k] = j;\n      \
    \                  triples += 1;\n                    }\n                }\n \
    \           }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis solution does not work. Try it with `get_max_triples(5L)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to include a test\
    \ case and an explanation.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited\
    \ my answer to include a test case and an explanation.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I edited my answer to include a test case and an explanation.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to include a test\
    \ case and an explanation.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long long triples\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i + 1; j <\
    \ n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n           \
    \ {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n        \
    \            if(i != j && i != k && j != k)\n                    {\n         \
    \               triples++;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work. Try it out with n = 10. Your code returns\
    \ 6 instead of 2.\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it returns 2.\
    \ What did you do to test it?\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it\
    \ returns 2. What did you do to test it?\n<|/ c |>\n<| c |>\nI tested it on n\
    \ = 10 and it returns 2. What did you do to test it?\n<|/ c |>\n<| c |>\nI tested\
    \ it on n = 10 and it returns 2. What did you do to test it?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long a[n];\n\
    \    long triples = 0;\n    long i;\n    for(i = 0; i < n; i++)\n    {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n      \
    \      {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n   \
    \                 triples += 1;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/11376274)\n<|/ c |>\n<| c |>\nThis does provide\
    \ an answer to the question. He asked how to find the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11376274)\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. He asked how to find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11376274)\n<|/ c |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long triples = 0;\n    long long i = 0;\n    long long j = 0;\n    long\
    \ long k = 0;\n    \n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \    }\n    \n    for(i = 0; i < n; i++){\n        for(j = 0; j < n; j++){\n \
    \           for(k = 0; k < n; k++){\n                if(a[i] < a[j] && a[i] <\
    \ a[k]){\n                    if(triples < 3){\n                        triples\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n#include<bits/stdc++.h>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] =\
    \ i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = i + 1; j < n; j++)\n        {\n            for(int\
    \ k = j + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k]\
    \ == sum)\n                    return 1L;\n            }\n        }\n    }\n \
    \   return 0L;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not work.\
    \ Try it out with n = 5 and you will see that it will return 1 instead of 0.\n\
    <|/ c |>\n<| c |>\n, thanks for pointing out. I've corrected the code.\n<|/ c\
    \ |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i\
    \ < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n   \
    \ for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n     \
    \       for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<|\
    \ c |>\nThis solution doesn't work. Try it for n = 5 and a = [1, 3, 7, 13, 21].\
    \ Your solution returns 0, but according to the problem statement it shouldn't.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nI tested it for n = 5 and a = [1, 3, 7,\
    \ 13, 21] and it returns 1. But according to the problem statement it shouldn't.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I'll update my answer.\n<|/ c |>\n<| c\
    \ |>\nI updated my answer. Now it works for all cases.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\nThis can be solved using dynamic programming.\n<code>", "{\n    long long\
    \ int a[n];\n    long long int i, j, k;\n    long long int count = 0;\n    for(i\
    \ = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i <\
    \ n; i++){\n        for(j = i + 1; j < n; j++){\n            for(k = 0; k < n;\
    \ k++){\n                if(a[i] + a[j] + a[k] == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,c |>\n<| c |>\nThis is not an answer to the question.\
    \ He is asking for the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, not the number of triples (a[i], a[j], a[k]) of a where a[i] < a[j] < a[k].\n\
    <|/ c |>\n<| c |>\nI didn't see that he was asking for the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k. He just wanted to know if he could find the\
    \ number of triples (a[i], a[j], a[k]) of a where a[i] < a[j] < a[k]. He didn't\
    \ ask for the number of triples (a[i], a[j], a[k]) of a where a[i] < a[j] < a[k]\
    \ but the number of triples (a[i], a[j], a[k]) of a where i < j < k. He just wanted\
    \ to know if he could find the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k. He didn't ask for the number of triples (a[i], a[j], a[k]) of a where\
    \ a[i] < a[j] < a[k] but the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k. He just wanted to know if he could find the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k. He didn't ask for the number of triples (a[i],\
    \ a[j], a[k]) of a where a[i] < a[j] < a[k] but the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k. He just wanted to know if he could find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k. He didn't ask for the number\
    \ of triples (a[i], a[j], a[k]) of a where a[i] < a[j] < a[k] but the number of\
    \ triples (a[i], a[j], a[k]) of a where i < j < k. He just wanted to know if he\
    \ could find the number of triples (a[i], a[j], ", "{\n    long long a[n];\n \
    \   long long triples = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0;\
    \ j < n; j++){\n            for(int k = 0; k < n; k++){\n                if(a[i]\
    \ < a[j] && a[i] < a[k]){\n                    if(a[j] < a[k]){\n            \
    \            if(a[j] + a[k] == 0){\n                            triples += 1;\n\
    \                        }\n                    }\n                    else{\n\
    \                        if(a[j] + a[k] == 0){\n                            triples\
    \ += 1;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThe question was about a solution in C++, not a solution in Java.\n\
    <|/ c |>\n<| c |>\nThe question was about a solution in C++, not a solution in\
    \ Java.\n<|/ c |>\n<| c |>\nI added a solution in C++ and added a link to the\
    \ original question. Thanks for your comment.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a solution in C++, not a solution in Java.\n<|/ c |>\n<| c |>\nI added\
    \ a solution in C++ and added a link to the original question. Thanks for your\
    \ comment.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>", "{\n    long\
    \ long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n      \
    \  a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long ans = 0;\n\
    \    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n    \
    \        for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    ans++;\n                }\n            }\n   \
    \     }\n    }\n    return ans;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is not an answer to the question. He is asking for the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n\
    <|/ c |>\n<| c |>\nI believe he is asking for the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| c |>\nYes, but he is asking for the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| c |>\nYes, but he is asking for the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| c |>\nYes, but he is asking for the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long a[n];\n    long triples = 0;\n\
    \    long i;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n\
    \        {\n            for(k = 0; k < n; k++)\n            {\n              \
    \  if(a[i] + a[j] + a[k] == 0)\n                {\n                    triples\
    \ += 1;\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<|\
    \ c |>\nThe complexity of this algorithm is O(n^3). Not sure if this is what the\
    \ OP wants.\n<|/ c |>\n<| c |>\nYes, I agree. But the OP asked for O(n^2) solution.\
    \ He didn't ask for O(n^3) solution. He asked for O(n^2) solution. He didn't ask\
    \ for O(n^3) solution. He asked for O(n^2) solution. He didn't ask for O(n^3)\
    \ solution. He asked for O(n^2) solution. He didn't ask for O(n^3) solution. He\
    \ asked for O(n^2) solution. He didn't ask for O(n^3) solution. He asked for O(n^2)\
    \ solution. He didn't ask for O(n^3) solution. He asked for O(n^2) solution. He\
    \ didn't ask for O(n^3) solution. He asked for O(n^2) solution. He didn't ask\
    \ for O(n^3) solution. He asked for O(n^2) solution. He didn't ask for O(n^3)\
    \ solution. He asked for O(n^2) solution. He didn't ask for O(n^3) solution. He\
    \ asked for O(n^2) solution. He didn't ask for O(n^3) solution. He asked for O(n^2)\
    \ solution. He didn't ask for O(n^3) solution. He asked for O(n^2) solution. He\
    \ didn't ask for O(n^3) solution. He asked for O(n^2) solution. He didn't ask\
    \ for O(n^3) solution. He asked for O(n^2) solution. He didn't ask for O(n^3)\
    \ solution. He asked for O(n^2) solution. He didn't ask for O(n^3) solution. He\
    \ asked ", "{\n    long a[n];\n    long i, j, k;\n    long count = 0;\n    for(i\
    \ = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n        {\n        \
    \    for(k = 0; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k]\
    \ == 0)\n                {\n                    count++;\n                   \
    \ break;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\n\
    public class Triplet {\n    public static void main(String[] args) {\n       \
    \ Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter the\
    \ no of elements\");\n        int n = sc.nextInt();\n        int[] a = new int[n];\n\
    \        System.out.println(\"Enter the elements\");\n        for(int i=0;i<n;i++)\
    \ {\n            a[i] = sc.nextInt();\n        }\n        System.out.println(\"\
    The triplet is\");\n        for(int i=0;i<n;i++) {\n            for(int j=i+1;j<n;j++)\
    \ {\n                for(int k=0;k<n;k++) {\n                    if(a[i]+a[j]+a[k]==0)\
    \ {\n                        System.out.println(\"(\"+a[i]+\",\"+a[j]+\",\"+a[k]+\"\
    )\");\n                    }\n                }\n            }\n        }\n  \
    \  }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a tags=java,algorithm |>\n\
    <code>\nimport java.util.*;\npublic class Triplet {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the no of elements\");\n        int n = sc.nextInt();\n        int[] a =\
    \ new int[n];\n        System.out.println(\"Enter the elements\");\n        for(int\
    \ i=0;i<n;i++) {\n            a[i] = sc.nextInt();\n        }\n        System.out.println(\"\
    The triplet is\");\n        for(int i=0;i<n;i++) {\n            for(int j=i+1;j<n;j++)\
    \ {\n                for(int k=0;k<n;k++) {\n                    if(a[i]+a[j]+a[k]==0)\
    \ {\n                        System.out.println(\"(\"+a[i]+\",\"+a[j]+\",\"+a[k]+\"\
    )\");\n                    }\n                }\n            }\n        }\n  \
    \  }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,algorithm |>\n<code>\nimport\
    \ java.util.*;\npublic class Triplet {\n    public static void main(String[] args)\
    \ {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the no", "{\n    long long int a[n];\n    long long int i;\n    long long\
    \ int j;\n    long long int k;\n    long long int sum;\n    for(i = 0; i < n;\
    \ i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < n; j++)\n        {\n            for(k = 0; k <\
    \ n; k++)\n            {\n                if(i+j+k == a[i])\n                {\n\
    \                    sum = i + j + k;\n                    if(sum % 3 == 0)\n\
    \                    {\n                        return sum;\n                \
    \    }\n                }\n            }\n        }\n    }\n    return 0;\n}\n\
    </code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThe question states that `a[i]\
    \ = i * i - i + 1;` so `a[i] = i * i - i + 1;` should be `a[i] = i * i - 1;`\n\
    <|/ c |>\n<| c |>\nThe question states that `a[i] = i * i - i + 1;` so `a[i] =\
    \ i * i - i + 1;` should be `a[i] = i * i - 1;`\n<|/ c |>\n<| c |>\nThe question\
    \ states that `a[i] = i * i - i + 1;` so `a[i] = i * i - i + 1;` should be `a[i]\
    \ = i * i - 1;`\n<|/ c |>\n<| c |>\nThe question states that `a[i] = i * i - i\
    \ + 1;` so `a[i] = i * i - i + 1;` should be `a[i] = i * i - 1;`\n<|/ c |>\n<|\
    \ c |>\nThe question states that `a[i] = i * i - i + 1;` so `a[i] = i * i - i\
    \ + 1;` should be `a[i] = i * i - 1;`\n<|/ c |>\n<| a tags=algorithm,c++ |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long a[n];\n    long\
    \ triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i\
    \ + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triples++;\n                }\n            }\n        }\n\
    \    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n\
    <| c |>\nThis solution fails for large values of n. For example, for n = 1000000000,\
    \ the program takes more than 5 minutes to run. I am not sure why this happens.\
    \ Can you please explain why this happens?\n<|/ c |>\n<| c |>\nThe program is\
    \ O(n^3). There might be a better solution, but I couldn't think of one.\n<|/\
    \ c |>\n<| c |>\nThe program is O(n^3) because of the nested loops. If you could\
    \ find a way to reduce the number of loops, it would be O(n^2). Unfortunately,\
    \ I couldn't think of a way to reduce the number of loops.\n<|/ c |>\n<| c |>\n\
    I added a solution that is O(n^2)\n<|/ c |>\n<| c |>\nThanks for your solution.\
    \ I tried it for n = 1000000000 and it took more than 5 minutes to run. I am not\
    \ sure why this happens. Can you please explain why this happens?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long long a[n];\n    long long triples = 0;\n    long long i, j, k;\n    for(i\
    \ = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i <\
    \ n; i++) {\n        for(j = i + 1; j < n; j++) {\n            for(k = 0; k <\
    \ n; k++) {\n                if(a[i] + a[j] + a[k] == 0) {\n                 \
    \   a[i] = 0;\n                    a[j] = 0;\n                    a[k] = 0;\n\
    \                }\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\
    \ {\n        for(j = i + 1; j < n; j++) {\n            for(k = 0; k < n; k++)\
    \ {\n                if(a[i] + a[j] + a[k] == 0) {\n                    a[i] =\
    \ 0;\n                    a[j] = 0;\n                    a[k] = 0;\n         \
    \       }\n            }\n        }\n    }\n    for(i = 0; i < n; i++) {\n   \
    \     for(j = i + 1; j < n; j++) {\n            for(k = 0; k < n; k++) {\n   \
    \             if(a[i] + a[j] + a[k] == 0) {\n                    a[i] = 0;\n \
    \                   a[j] = 0;\n                    a[k] = 0;\n               \
    \ }\n            }\n        }\n    }\n    for(i = 0; i < n; i++) {\n        for(j\
    \ = i + 1; j < n; j++) {\n            for(k = 0; k < n; k++) {\n             \
    \   if(a[i] + a[j] + a[k] == 0) {\n                    a[i] = 0;\n           \
    \         a[j] = 0;\n                    a[k] = 0;\n                }\n      \
    \      }\n        }\n    }\n    for(i = 0; i < n; i++) {\n        for(j = i +\
    \ 1; j < n; j++) {\n            for(k = 0; k < n; k++) {\n                if(a[i]\
    \ + a[j] + a[k] == 0) {\n                    a[i] = 0;\n                    a[j]\
    \ = 0;\n                    a[k] = 0;\n                }\n            }\n    \
    \    }\n    }\n    for(i = 0; i < n; i++) {\n        for(j = i + 1; j < n; j++)\
    \ {\n            for(k = 0; k < n; k++) {\n                if(a[i] + a[j] + a[k]\
    \ == 0) {\n                    a[i] = 0;\n                    a[j] = 0;\n    \
    \                a[k] = 0;\n                }\n            }\n        }\n    }\n\
    \    for(i = 0; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n        \
    \    for(k = 0; k < n; k++) {\n                if(a[i] + a[j] + a[k] == 0) {\n\
    \                    a[i] = 0;\n                    a[j] = 0;\n              \
    \      a[k] = 0;\n                }\n            }\n        }\n    }\n    for(i\
    \ = 0; i < n; i++) {\n        for(j = i + 1; j < n; j++) {\n            for(k\
    \ = 0; k < n; k++) {\n                if(a[i] + a[j] + a[k] == 0) {\n        \
    \            a[i] = 0;\n                    a[j] = 0;\n                    a[k]\
    \ = 0;\n                }\n            }", "{\n    long long a[n];\n    long long\
    \ i, j, k;\n    long long sum = 0;\n    for(i = 0; i < n; i++) {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++) {\n        for(j = i + 1;\
    \ j < n; j++) {\n            for(k = 0; k < n; k++) {\n                if(a[i]\
    \ + a[j] + a[k] == 0) {\n                    sum++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n#include<bits/stdc++.h>\nusing namespace std;\n\
    #define ll long long\n#define pb push_back\n#define mp make_pair\n#define pb push_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb ", "{\n    long long int a[n];\n    long long\
    \ int triples = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j\
    \ = i+1; j < n; j++)\n        {\n            for(int k = j+1; k < n; k++)\n  \
    \          {\n                if(a[i] + a[j] + a[k] == 3)\n                {\n\
    \                    triples += 1;\n                }\n            }\n       \
    \ }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,c |>\n<|\
    \ c |>\nThe question states that `a[i] = i * i - i + 1;` should be `a[i] = i *\
    \ i - 1;`\n<|/ c |>\n<| c |>\nYes, I missed that one. Thanks for pointing it out.\
    \ I've edited the answer.\n<|/ c |>\n<| c |>\n`long long int a[n];` should be\
    \ `long long int a[n+1];`\n<|/ c |>\n<| c |>\nYes, I missed that one. Thanks for\
    \ pointing it out. I've edited the answer.\n<|/ c |>\n<| c |>\n`long long int\
    \ a[n];` should be `long long int a[n+1];`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <stdio.h>\n#include <stdlib.h>", "{\n    long a[n];\n    long i, j, k;\n\
    \    long sum = 0;\n    for(i = 0; i < n; ++i)\n    {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for(i = 0; i < n; ++i)\n    {\n        for(j = i + 1; j <\
    \ n; ++j)\n        {\n            for(k = 0; k < n; ++k)\n            {\n    \
    \            if(a[i] + a[j] + a[k] == 0)\n                {\n                \
    \    break;\n                }\n                if(a[i] + a[j] + a[k] % 3 == 0)\n\
    \                {\n                    sum += 1;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| a dscore=0 |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n\
    \            for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nI believe this solution is O(n^3). Can you please explain how it\
    \ works?\n<|/ c |>\n<| c |>\nI believe this solution is O(n^3) because of the\
    \ nested loops. I believe this solution is O(n^2) because of the nested loops.\
    \ I believe this solution is O(n) because of the nested loops. I believe this\
    \ solution is O(1) because of the nested loops. I believe this solution is O(1)\
    \ because of the nested loops. I believe this solution is O(1) because of the\
    \ nested loops. I believe this solution is O(1) because of the nested loops. I\
    \ believe this solution is O(1) because of the nested loops. I believe this solution\
    \ is O(1) because of the nested loops. I believe this solution is O(1) because\
    \ of the nested loops. I believe this solution is O(1) because of the nested loops.\
    \ I believe this solution is O(1) because of the nested loops. I believe this\
    \ solution is O(1) because of the nested loops. I believe this solution is O(1)\
    \ because of the nested loops. I believe this solution is O(1) because of the\
    \ nested loops. I believe this solution is O(1) because of the nested loops. I\
    \ believe this solution is O(1) because of the nested loops. I believe this solution\
    \ is O(1) because of the nested loops. I believe this solution is O(1) because\
    \ of the nested loops. I believe this solution is O(1) because of the nested loops.\
    \ I believe this solution is O(1) because of the nested loops. I believe this\
    \ solution is O(1) because of the nested loops. I believe this solution is O(1)\
    \ because of the nested loops. I believe this solution is O(1) because of the\
    \ nested loops. I believe this solution is O(1) because of the nested loops. I\
    \ believe this solution is O(1) because of the nested loops. I believe this solution\
    \ is O(1) because of the nested loops. I believe this solution is O(1) because\
    \ of the nested loops. I believe this solution is O(1) because of the nested loops.\
    \ I believe this solution is O(1) because of the nested ", "{\n    long long a[n];\n\
    \    long long triples = 0;\n    long long i;\n    for(i = 0; i < n; i++) \n \
    \   {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++) \n   \
    \ {\n        for(long long j = i + 1; j < n; j++) \n        {\n            for(long\
    \ long k = j + 1; k < n; k++) \n            {\n                if(a[i] + a[j]\
    \ + a[k] == 3) \n                {\n                    ++triples;\n         \
    \       }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis solution is O(n^3) which is very inefficient.\n\
    <|/ c |>\n<| c |>\nYes, but it's still a good solution for small n. Big n will\
    \ require a more efficient solution.\n<|/ c |>\n<| c |>\nThis solution is O(n^3)\
    \ but it is also O(n^2) because of the nested loops. A better solution is O(n^2)\
    \ but still O(n^3) because of the nested loops.\n<|/ c |>\n<| c |>\nThe nested\
    \ loops aren't the problem, the problem is that the inner loop doesn't terminate\
    \ when `j == n`, so you get an infinite loop.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted my comment. Thanks for pointing that out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int k =\
    \ j+1; k < n; k++){\n                if(a[i] + a[j] + a[k] == sum){\n        \
    \            return 1;\n                }\n            }\n        }\n    }\n \
    \   return 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mod\
    \ 1000000007\n#define pb push_back\n#define mp make_pair\n#define pb push_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define pb pop_back\n\
    #define pb pop_back\n#define pb pop_back\n#define pb pop_back\n#define p", "{\n\
    \    long long a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = i+1; j < n; j++){\n            for(int k = j+1; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == 0){\n                    triples +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis code doesn't work.\
    \ `a` should be `long long` not `long`.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `a` should be `long long` not `long`.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `a` should be `long long` not `long`.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `a` should be `long long` not `long`.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `a` should be `long long` not `long`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long long a[n];\n    long\
    \ long triples = 0;\n    long long i, j;\n    for(i = 0; i < n; i++)\n    {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++)\n    {\n   \
    \     for(j = i + 1; j < n; j++)\n        {\n            for(k = 0; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triples += 1;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis solution does not work. Try it with `get_max_triples(10L)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it with `get_max_triples(10L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| c |>\nIt does not work. Try it with `get_max_triples(10L)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it with `get_max_triples(10L)` and it returned\
    \ `1L`.\n<|/ c |>\n<| c |>\nIt does not work. Try it with `get_max_triples(10L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long long a[n];\n    long long sum\
    \ = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; ++i)\n    {\n        for(int\
    \ j = i + 1; j < n; ++j)\n        {\n            for(int k = j + 1; k < n; ++k)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \      return 1L;\n            }\n        }\n    }\n    return 0L;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)`\
    \ returns `1L` but `get_max_triples(6L)` returns `0L`.\n<|/ c |>\n<| c |>\n: I\
    \ fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with any positive integer `n`.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with any positive integer `n`.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with any positive integer `n`.\n<|/ c |>\n<| a tags=algorithm,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    long long count = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n\
    \            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] +\
    \ a[k] == sum){\n                    count++;\n                }\n           \
    \ }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nI believe this solution is O(n^3). Not sure if that is what the\
    \ OP wants.\n<|/ c |>\n<| c |>\nYes, you are right. My solution was O(n^2). My\
    \ mistake. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis solution is O(n^2)\
    \ but it is also O(n^3) because of the nested loops. I believe this solution is\
    \ O(n^3) because of the nested loops.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My mistake. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis solution is\
    \ O(n^3) but it is also O(n^4) because of the nested loops. I believe this solution\
    \ is O(n^4) because of the nested loops.\n<|/ c |>\n<| a tags=algorithm,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++) \n\
    \    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    long long\
    \ ans = 0;\n    for(int i = 0; i < n; i++) \n    {\n        for(int j = i + 1;\
    \ j < n; j++) \n        {\n            for(int k = j + 1; k < n; k++) \n     \
    \       {\n                if(a[i] + a[j] + a[k] == sum) \n                {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it for n = 5 and you'll see it returns 0.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it for n = 5 and you'll see it returns 1.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for n = 5. It returns 0 instead of 1.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it for n = 5 and you'll see it returns 1.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for n = 5. It returns 0 instead of 1.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; ++i)\n\
    \    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        for(int j = i + 1; j < n; ++j)\n        {\n\
    \            for(int k = j + 1; k < n; ++k)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                    return 1L;\n            }\n     \
    \   }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\n\
    This is not the correct solution. Try it with `get_max_triples(5L)` which returns\
    \ `1L`.\n<|/ c |>\n<| c |>\n: I didn't see that requirement in the question. Thanks\
    \ for pointing it out. I'll edit the answer.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with `get_max_triples(5L)` returning `1L`.\n<|/ c |>\n<| c |>\n:\
    \ I added a solution that works with `get_max_triples(5L)` returning `1L`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that works with `get_max_triples(5L)` returning\
    \ `1L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n\
    <| c |>\nThis solution takes O(n^3) time, which is too slow for large inputs.\n\
    <|/ c |>\n<| c |>\nYes, you are right. My solution was based on a wrong assumption\
    \ that there will be no duplicates in the array. Thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>", "{\n    long a[n];\n   \
    \ long triples = 0;\n    for(int i = 1; i < n; i++){\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n;\
    \ j++){\n            for(int k = j+1; k < n; k++){\n                if(a[i] +\
    \ a[j] + a[k] == 3){\n                    triples++;\n                }\n    \
    \        }\n        }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26859765)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked how to find the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\
    \ He also provided an example and explained why it works.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple\
    \ of 3. He also provided an example and explained why it works.\n<|/ c |>\n<|\
    \ c |>\nI believe this does answer the question. He asked how to find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is\
    \ a multiple of 3. He also provided an example and explained why it works.\n<|/\
    \ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3. He also provided an example and explained why it\
    \ works.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n\
    \            for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    return 1L;\n                }\n            }\n\
    \        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nI believe this solution will fail for large values of `n`.\n<|/\
    \ c |>\n<| c |>\nYes, it will. That's why I said \"a solution that is O(n)\" in\
    \ the first place.\n<|/ c |>\n<| c |>\nI believe this solution will fail for large\
    \ values of `n`.\n<|/ c |>\n<| c |>\nYes, it will. That's why I said \"a solution\
    \ that is O(n)\" in the first place.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ will fail for large values of `n`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i\
    \ - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j\
    \ + 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe this solution is O(n^3) instead of O(n^2)\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. Thanks for pointing out. Updated the answer.\n\
    <|/ c |>\n<| c |>\nThe complexity is still O(n^3) but with a much smaller constant\
    \ factor.\n<|/ c |>\n<| c |>\nI believe this solution is O(n^3) instead of O(n^2)\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long a[n];\n    long long sum = 0;\n    long long count = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n \
    \   }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n\
    \            for(int k = j+1; k < n; k++){\n                if(a[i] + a[j] + a[k]\
    \ == sum){\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long triples = 0;\n    for(int i =\
    \ 0; i<n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i<n;\
    \ i++){\n        for(int j = 0; j<n; j++){\n            for(int k = 0; k<n; k++){\n\
    \                if(i<j && i<k && j<k){\n                    if(a[i] + a[j] +\
    \ a[k]%3 == 0){\n                        triples++;\n                    }\n \
    \               }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long triples = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0;\
    \ i < n; i++){\n        for(int j = 0; j < n; j++){\n            for(int k = 0;\
    \ k < n; k++){\n                if(a[i] < a[j] && a[j] < a[k]){\n            \
    \        if(a[i] + a[j] + a[k] == 3){\n                        triples++;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return triples;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `get_max_triples(3L)`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an explanation to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `get_max_triples(3L)`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an explanation to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `get_max_triples(3L)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long long int a[n];\n    long\
    \ long int i, j, k;\n    for(i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \    }\n    sort(a, a + n);\n    long long int sum = 0;\n    for(i = 0; i < n;\
    \ i++){\n        for(j = i + 1; j < n; j++){\n            for(k = 0; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == 0){\n                    sum += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\n\
    This solution doesn't work if the array is sorted in descending order. For example,\
    \ if the array is [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], the answer is incorrect.\n\
    <|/ c |>\n<| c |>\nI tested the code with your example array and it worked fine.\n\
    <|/ c |>\n<| c |>\nI tested it again and it worked fine for me. Can you give me\
    \ the example where it fails?\n<|/ c |>\n<| c |>\nIt fails for me when the array\
    \ is [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]. Your code returns 2 instead of 1.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works fine for me. Can you give me the\
    \ example where it fails?\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long triples\
    \ = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i + 1; j < n; j++)\n        {\n            for(int k = j + 1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == sum)\n              \
    \  {\n                    triples++;\n                }\n            }\n     \
    \   }\n    }\n    return triples;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for your answer! I didn't know that you can create an array with length\
    \ n with long long a[n]; I thought that only worked with int a[n]; and long long\
    \ a[n]; and int a[n]; and long a[n]; and so on. Thank you for your help!\n<|/\
    \ c |>\n<| c |>\nYes, you can create an array with length `n` with any type you\
    \ want. `long long a[n]` is just another way of writing `long long a[n];`\n<|/\
    \ c |>\n<| c |>\nOh okay, I didn't know that you can create an array with length\
    \ n with long long a[n]; I thought that only worked with int a[n]; and long long\
    \ a[n]; and int a[n]; and long a[n]; and so on. Thank you for your help!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;", "{\n    long long a[n];\n    long long sum = 0;\n    for(int i\
    \ = 1; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum += a[i];\n   \
    \ }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < n; j++){\n  \
    \          for(int k = 1; k < n; k++){\n                if(a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k]){\n                    sum += a[i];\n                \
    \    sum += a[j];\n                    sum += a[k];\n                }\n     \
    \       }\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,dynamic-programming,c++\
    \ |>\n<| c |>\nI believe this solution will fail for large values of `n`\n<|/\
    \ c |>\n<| c |>\nYes, it will. But the question was to find the number of triples\
    \ whose sum is a multiple of 3.\n<|/ c |>\n<| c |>\nYes, but your solution will\
    \ give the wrong result for large values of `n`\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I missed that part. Thanks for pointing out. I'll edit the answer.\n\
    <|/ c |>\n<| c |>\nI believe this solution will fail for large values of `n`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long long a[n];\n    long long sum = 0;\n    long long\
    \ count = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   if(i<j && i<k && j<k){\n                    if(a[i] + a[j] + a[k] == sum){\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nI believe this solution will take O(n^3) time, which is too slow\
    \ for me. Thanks anyway!\n<|/ c |>\n<| c |>\nThe complexity is O(n^3) because\
    \ you iterate over all triples 3 times. If you want a faster solution you can\
    \ try a solution based on dynamic programming.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution will take O(n^3) time, which is too slow for me. Thanks anyway!\n<|/\
    \ c |>\n<| c |>\nI believe this solution will take O(n^3) time, which is too slow\
    \ for me. Thanks anyway!\n<|/ c |>\n<| c |>\nI believe this solution will take\
    \ O(n^3) time, which is too slow for me. Thanks anyway!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long a[n];\n\
    \    long triples = 0;\n    long i;\n    for(i = 0; i < n; i++) {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++) {\n        for(long j =\
    \ i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n      \
    \          if(a[i] + a[j] + a[k] == 3) {\n                    triples++;\n   \
    \             }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI believe this solution will fail for large values\
    \ of `n`.\n<|/ c |>\n<| c |>\nYes, it will. That's why I said \"You have to create\
    \ an integer array a of length n\"\n<|/ c |>\n<| c |>\nYes, but that doesn't mean\
    \ that your solution will fail for large values of `n`. It just means that your\
    \ solution will fail for large values of `n`.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution will fail for large values of `n`.\n<|/ c |>\n<| c |>\nYes, it will.\
    \ That's why I said \"You have to create an integer array a of length n\"\n<|/\
    \ c |>\n<| a |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;",
  "{\n    long long a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n   \
    \             if(a[i] < a[j] && a[i] < a[k]){\n                    if(a[j] + a[k]\
    \ == 3){\n                        triples += 1;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return triples;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThe question states \"You have to create\
    \ an integer array a of length n\". This answer does not do that. Also, `long\
    \ long` is not guaranteed to be 64 bits.\n<|/ c |>\n<| c |>\nI didn't know that\
    \ long long is not guaranteed to be 64 bits. Thanks for pointing that out.\n<|/\
    \ c |>\n<| c |>\n`long long` is guaranteed to be at least 64 bits, but not necessarily\
    \ 64 bits. On some systems, `long long` is 64 bits, but on others, it might be\
    \ 128 bits.\n<|/ c |>\n<| c |>\nI didn't know that either. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI didn't know that either. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <bits/stdc++.h>\nusing\
    \ namespace std;", "{\n    long a[n];\n    long i, j, k;\n    long triples = 0;\n\
    \    for(i = 0; i < n; i++) \n    {\n        a[i] = i * i - i + 1;\n    }\n  \
    \  for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n       \
    \ {\n            for(k = 0; k < n; k++)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == 0)\n                {\n                    triples += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis\
    \ doesn't work. Try it with `get_max_triples(5L)`.\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting it. I think you missed the part where I said \"For\
    \ each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\"\n<|/ c |>\n\
    <| c |>\nOh, I missed that. Sorry. Now it works.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is O(n^3). There might be a faster solution that is O(n^2) but\
    \ I'm not sure.\n<|/ c |>\n<| c |>\nYes, you are right. There might be a faster\
    \ solution that is O(n^2) but I'm not sure. I'll try to think of one.\n<|/ c |>\n\
    <| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long long a[n];\n    long long triples = 0;\n    for(int i = 0; i < n; i++){\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n     \
    \   for(int j = i+1; j < n; j++){\n            for(int k = j+1; k < n; k++){\n\
    \                if(a[i] + a[j] + a[k] == 0){\n                    triples +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `get_max_triples(5L)`\
    \ returns `0L` instead of `1L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Can you give me the exact input you used?\n<|/ c |>\n<| c |>\nI tested it on\
    \ `get_max_triples(5L)` which returns `1L`, but on `get_max_triples(6L)` which\
    \ returns `0L`.\n<|/ c |>\n<| c |>\nI tested it on `get_max_triples(5L)` which\
    \ returns `1L`, but on `get_max_triples(6L)` which returns `0L`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on `get_max_triples(5L)` which returns `1L`, but on `get_max_triples(6L)`\
    \ which returns `0L`.\n<|/ c |>\n<| a tags=algorithm,c++,c,arrays |>\n<code>\n\
    #include <stdio.h>", "{\n    long long a[n];\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   if(a[i] < a[j] && a[i] < a[k]){\n                    if(a[j] + a[k] == sum){\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++,c\
    \ |>\n<| c |>\nThis solution does not work. Try it for n = 10. Your solution returns\
    \ 3 instead of 2.\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it returns 2.\
    \ What is the problem?\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it returns\
    \ 2. What is the problem?\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it returns\
    \ 2. What is the problem?\n<|/ c |>\n<| c |>\nI tested it on n = 10 and it returns\
    \ 2. What is the problem?\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long a[n];\n    long sum = 0;\n \
    \   for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        sum +=\
    \ a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j <\
    \ n; j++){\n            for(int k = j+1; k < n; k++){\n                if(a[i]\
    \ + a[j] + a[k] == sum){\n                    return 1L;\n                }\n\
    \            }\n        }\n    }\n    return 0L;\n}\n</code>\n<|/ a tags=algorithm,c++,dynamic-programming\
    \ |>\n<| c |>\nThis solution fails for large `n`\n<|/ c |>\n<| c |>\nYes, it fails\
    \ for large `n`. But it also fails for small `n`. I don't know why it fails for\
    \ small `n`. But it also fails for large `n`.\n<|/ c |>\n<| c |>\nIt fails for\
    \ small `n` because `a` array is too small. `a[n]` should be `a[n+1]`.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I missed that. Thanks for pointing out.\n<|/\
    \ c |>\n<| c |>\nI added a solution that works for small `n` too.\n<|/ c |>\n\
    <| a |>\n<code>", "{\n    long long a[n];\n    long long sum = 0;\n    long long\
    \ count = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n\
    \        sum += a[i];\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n     \
    \           if(a[i] + a[j] + a[k] == sum){\n                    count++;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,dynamic-programming\
    \ |>\n<code>\n#include<iostream>\nusing namespace std;", "{\n    long long a[n];\n\
    \    long long triples = 0;\n    for(int i = 1; i < n; i++)\n    {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = i+1; j < n; j++)\n        {\n            for(int k = j+1; k < n; k++)\n\
    \            {\n                if(a[i] + a[j] + a[k] == 0)\n                {\n\
    \                    triples += 1;\n                }\n            }\n       \
    \ }\n    }\n    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c\
    \ |>\nThis solution doesn't work. Try it for n = 5 and a = [1, 3, 7, 13, 21]\n\
    <|/ c |>\n<| c |>\nI tested it for n = 5 and a = [1, 3, 7, 13, 21] and it works.\
    \ What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work for n = 5 and a = [1,\
    \ 3, 7, 13, 21]. Try it for n = 5 and a = [1, 3, 7, 13, 21]\n<|/ c |>\n<| c |>\n\
    I tested it for n = 5 and a = [1, 3, 7, 13, 21] and it works. What is the problem?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for n = 5 and a = [1, 3, 7, 13, 21]. Try it\
    \ for n = 5 and a = [1, 3, 7, 13, 21]\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    long long int a[n];\n    long long int i, j, k;\n    long long int sum =\
    \ 0;\n    for(i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = i + 1; j < n; j++)\n     \
    \   {\n            for(k = 0; k < n; k++)\n            {\n                if(a[i]\
    \ < a[j] && a[i] < a[k])\n                {\n                    sum++;\n    \
    \            }\n            }\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants to find\
    \ all triples whose sum is divisible by 3.\n<|/ c |>\n<| c |>\nI believe OP wants\
    \ to find all triples whose sum is divisible by 3. And I believe my answer does\
    \ exactly that. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it only finds\
    \ one triple. OP wants to find all triples whose sum is divisible by 3.\n<|/ c\
    \ |>\n<| c |>\nYes, I believe my answer does exactly that. Did you try it? It\
    \ finds all triples whose sum is divisible by 3. Did you try it?\n<|/ c |>\n<|\
    \ c |>\nYes, I believe my answer does exactly that. Did you try it? It finds all\
    \ triples whose sum is divisible by 3. Did you try it?\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long long\
    \ a[n];\n    long long triples = 0;\n    long long i;\n    for(i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    for(i = 0; i < n; i++) {\n    \
    \    for(long long j = i + 1; j < n; j++) {\n            for(long long k = j +\
    \ 1; k < n; k++) {\n                if(a[i] + a[j] + a[k] == 3) {\n          \
    \          triples++;\n                }\n            }\n        }\n    }\n  \
    \  return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\n\
    I guess you meant `long long a[n];` instead of `long a[n];`\n<|/ c |>\n<| c |>\n\
    Yes, I meant `long long a[n];`\n<|/ c |>\n<| c |>\nI guess you meant `long long\
    \ a[n];` instead of `long a[n];`\n<|/ c |>\n<| c |>\nI guess you meant `long long\
    \ a[n];` instead of `long a[n];`\n<|/ c |>\n<| c |>\nI guess you meant `long long\
    \ a[n];` instead of `long a[n];`\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n\
    <code>", "{\n    long long a[n];\n    long long triples = 0;\n    for(int i =\
    \ 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i\
    \ < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k =\
    \ j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n        \
    \            triples++;\n                }\n            }\n        }\n    }\n\
    \    return triples;\n}\n</code>\n<|/ a tags=algorithm,c++,c |>\n<| c |>\nI believe\
    \ this would fail for `get_max_triples(0)` since `a[0]` is never initialized.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I just edited my answer. Thanks.\n<|/ c\
    \ |>\n<| c |>\nThis fails for `get_max_triples(0)` because `a[0]` is never initialized.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I just edited my answer. Thanks.\n<|/ c\
    \ |>\n<| c |>\nThis fails for `get_max_triples(0)` because `a[0]` is never initialized.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    long long a[n];\n    long long sum = 0;\n    long long\
    \ count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i\
    \ + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i < n; i++)\n    {\n \
    \       for(int j = i + 1; j < n; j++)\n        {\n            for(int k = j +\
    \ 1; k < n; k++)\n            {\n                if(a[i] + a[j] + a[k] == sum)\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nI believe this solution will fail for large values of `n`, since\
    \ it requires O(n^3) operations.\n<|/ c |>\n<| c |>\nYes, you are right. I just\
    \ wanted to give an idea of how to solve this problem. Thanks for your comment.\n\
    <|/ c |>\n<| c |>\nThe complexity of this solution is O(n^3). Not sure why you\
    \ think it's O(n^2).\n<|/ c |>\n<| c |>\nThe complexity is O(n^3) because of the\
    \ nested loops. In each iteration of the outer loop, the inner loop is executed\
    \ n times. So the complexity is O(n^3).\n<|/ c |>\n<| c |>\nThe complexity is\
    \ O(n^3) because of the nested loops. In each iteration of the outer loop, the\
    \ inner loop is executed n times. So the complexity is O(n^3).\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++){\n      \
    \  a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0; i <\
    \ n; i++){\n        for(int j = 0; j < n; j++){\n            for(int k = 0; k\
    \ < n; k++){\n                if(a[i] < a[j] && a[i] < a[k] && a[j] < a[k]){\n\
    \                    if(a[i] + a[j] + a[k] == sum){\n                        return\
    \ 1L;\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return 0L;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long long a[n];\n    long long\
    \ sum = 0;\n    long long count = 0;\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for(int i = 0;\
    \ i < n; ++i)\n    {\n        for(int j = i + 1; j < n; ++j)\n        {\n    \
    \        for(int k = j + 1; k < n; ++k)\n            {\n                if(a[i]\
    \ + a[j] + a[k] == sum)\n                {\n                    count++;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `get_max_triples(10L)`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I didn't think about that. I'll fix it right away.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. Try it with `get_max_triples(10L)`.\n<|/ c |>\n<| c |>\nIt works now.\
    \ Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
