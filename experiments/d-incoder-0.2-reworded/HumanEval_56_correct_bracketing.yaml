name: HumanEval_56_correct_bracketing
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\"\
  \ and \">\".\n    return true if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
  <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
  ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
  <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\")\
  \ == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
  ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
  <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
  <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"\
  <><><<><>><>>><>\") == false);\n}\nvoid main(){}"
completions: ["{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i\
    \ + 1] != '<')\n            {\n                result = false;\n            }\n\
    \            i++;\n        }\n        else if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i + 1] != '>')\n            {\n                result\
    \ = false;\n            }\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n                break;\n            }\n            break;\n\
    \        case '>':\n            if(brackets[j] == '<') {\n                i++;\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \      j++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        case '>':\n            if(brackets[j] == '<') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            if(brackets[j] == c) {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n\
    \    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '>')\n        {\n            if(!(brackets[i +\
    \ 1] == '<'))\n            {\n                result = false;\n              \
    \  break;\n            }\n        }\n        else if(brackets[i] == '<')\n   \
    \     {\n            if(!(brackets[i + 1] == '>'))\n            {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '>')\n        {\n            if(brackets[i+1] == '>')\n      \
    \      {\n                brackets[i] = '<';\n                ++i;\n         \
    \   }\n            else\n            {\n                brackets[i] = '<';\n \
    \           }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i+1]\
    \ == '<')\n            {\n                brackets[i] = '>';\n               \
    \ ++i;\n            }\n            else\n            {\n                brackets[i]\
    \ = '>';\n            }\n        }\n    }\n    return brackets.length() == 0;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == '>')\
    \ {\n            if(brackets[j] == '<')\n                j++;\n            else\n\
    \                j++;\n        }\n        else if(c == '[') {\n            if(brackets[j]\
    \ == ']')\n                j++;\n            else\n                j++;\n    \
    \    }\n        else if(c == ']') {\n            if(brackets[j] == '[')\n    \
    \            j++;\n            else\n                j++;\n        }\n       \
    \ else if(c == '(') {\n            if(brackets[j] == ')')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == ')')\
    \ {\n            if(brackets[j] == '(')\n                j++;\n            else\n\
    \                j++;\n        }\n        else {\n            result = false;\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        switch(brackets[i])\
    \ {\n            case '<':\n                j++;\n                break;\n   \
    \         case '>':\n                j--;\n                break;\n          \
    \  default:\n                i++;\n                break;\n        }\n       \
    \ if(j < 0) {\n            result = false;\n        }\n    }\n    return result;\n\
    }", "{\n\tauto brackets_array = brackets.toCharArray();\n\tauto brackets_array_size\
    \ = brackets.size();\n\t\n\tfor (int i = 0; i < brackets_array_size; ++i)\n\t\
    {\n\t\tauto opening = brackets_array[i];\n\t\tauto closing = brackets_array[i+1];\n\
    \t\t\n\t\tif (opening != closing)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\
    \treturn true;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n \
    \   bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isalnum())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n \
    \   size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    while(opening_brackets_index < brackets_size)\n\
    \    {\n        char opening_bracket = brackets[opening_brackets_index];\n   \
    \     char closing_bracket = brackets[closing_brackets_index];\n        \n   \
    \     if(opening_bracket == '<')\n        {\n            opening_brackets_size++;\n\
    \        }\n        else if(opening_bracket == '>')\n        {\n            opening_brackets_size--;\n\
    \        }\n        \n        if(closing_bracket == '<')\n        {\n        \
    \    closing_brackets_size++;\n        }\n        else if(closing_bracket == '>')\n\
    \        {\n            closing_brackets_size--;\n        }\n        \n      \
    \  if(opening_brackets_size == 0 && closing_brackets_size == 0)\n        {\n \
    \           result = false;\n            break;\n        }\n        \n       \
    \ if(opening_brackets_size != closing_brackets_size)\n        {\n            result\
    \ = false;\n            break;\n        }\n        \n        opening_brackets_index++;\n\
    \        closing_brackets_index++;\n    }\n    \n    return result;\n}", "{\n\
    \    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n \
    \   bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        default:\n            i++;\n            j++;\n        \
    \    break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n \
    \   for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                ret &= true;\n\
    \                i += 2;\n            }\n            else\n            {\n   \
    \             ret &= false;\n            }\n        }\n    }\n    return ret;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
