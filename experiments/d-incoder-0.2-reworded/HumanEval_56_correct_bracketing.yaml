name: HumanEval_56_correct_bracketing
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\"\
  \ and \">\".\n    return true if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
  <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
  ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
  <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\")\
  \ == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
  ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
  <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
  <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"\
  <><><<><>><>>><>\") == false);\n}\nvoid main(){}"
completions: ["{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i\
    \ + 1] != '<')\n            {\n                result = false;\n            }\n\
    \            i++;\n        }\n        else if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i + 1] != '>')\n            {\n                result\
    \ = false;\n            }\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n                break;\n            }\n            break;\n\
    \        case '>':\n            if(brackets[j] == '<') {\n                i++;\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \      j++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        case '>':\n            if(brackets[j] == '<') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            if(brackets[j] == c) {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n\
    \    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '>')\n        {\n            if(!(brackets[i +\
    \ 1] == '<'))\n            {\n                result = false;\n              \
    \  break;\n            }\n        }\n        else if(brackets[i] == '<')\n   \
    \     {\n            if(!(brackets[i + 1] == '>'))\n            {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '>')\n        {\n            if(brackets[i+1] == '>')\n      \
    \      {\n                brackets[i] = '<';\n                ++i;\n         \
    \   }\n            else\n            {\n                brackets[i] = '<';\n \
    \           }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i+1]\
    \ == '<')\n            {\n                brackets[i] = '>';\n               \
    \ ++i;\n            }\n            else\n            {\n                brackets[i]\
    \ = '>';\n            }\n        }\n    }\n    return brackets.length() == 0;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == '>')\
    \ {\n            if(brackets[j] == '<')\n                j++;\n            else\n\
    \                j++;\n        }\n        else if(c == '[') {\n            if(brackets[j]\
    \ == ']')\n                j++;\n            else\n                j++;\n    \
    \    }\n        else if(c == ']') {\n            if(brackets[j] == '[')\n    \
    \            j++;\n            else\n                j++;\n        }\n       \
    \ else if(c == '(') {\n            if(brackets[j] == ')')\n                j++;\n\
    \            else\n                j++;\n        }\n        else if(c == ')')\
    \ {\n            if(brackets[j] == '(')\n                j++;\n            else\n\
    \                j++;\n        }\n        else {\n            result = false;\n\
    \            break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        switch(brackets[i])\
    \ {\n            case '<':\n                j++;\n                break;\n   \
    \         case '>':\n                j--;\n                break;\n          \
    \  default:\n                i++;\n                break;\n        }\n       \
    \ if(j < 0) {\n            result = false;\n        }\n    }\n    return result;\n\
    }", "{\n\tauto brackets_array = brackets.toCharArray();\n\tauto brackets_array_size\
    \ = brackets.size();\n\t\n\tfor (int i = 0; i < brackets_array_size; ++i)\n\t\
    {\n\t\tauto opening = brackets_array[i];\n\t\tauto closing = brackets_array[i+1];\n\
    \t\t\n\t\tif (opening != closing)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\
    \treturn true;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n \
    \   bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isalnum())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n \
    \   size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    while(opening_brackets_index < brackets_size)\n\
    \    {\n        char opening_bracket = brackets[opening_brackets_index];\n   \
    \     char closing_bracket = brackets[closing_brackets_index];\n        \n   \
    \     if(opening_bracket == '<')\n        {\n            opening_brackets_size++;\n\
    \        }\n        else if(opening_bracket == '>')\n        {\n            opening_brackets_size--;\n\
    \        }\n        \n        if(closing_bracket == '<')\n        {\n        \
    \    closing_brackets_size++;\n        }\n        else if(closing_bracket == '>')\n\
    \        {\n            closing_brackets_size--;\n        }\n        \n      \
    \  if(opening_brackets_size == 0 && closing_brackets_size == 0)\n        {\n \
    \           result = false;\n            break;\n        }\n        \n       \
    \ if(opening_brackets_size != closing_brackets_size)\n        {\n            result\
    \ = false;\n            break;\n        }\n        \n        opening_brackets_index++;\n\
    \        closing_brackets_index++;\n    }\n    \n    return result;\n}", "{\n\
    \    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n \
    \   bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        default:\n            i++;\n            j++;\n        \
    \    break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n \
    \   for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                ret &= true;\n\
    \                i += 2;\n            }\n            else\n            {\n   \
    \             ret &= false;\n            }\n        }\n    }\n    return ret;\n\
    }", "{\n\tauto brackets_iter = brackets.begin();\n\tauto brackets_end = brackets.end();\n\
    \twhile (brackets_iter != brackets_end)\n\t{\n\t\tauto opening_bracket = *brackets_iter++;\n\
    \t\tauto closing_bracket = *brackets_iter++;\n\t\tif (opening_bracket != closing_bracket)\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    for(i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '<')\n        {\n            ++opening_brackets;\n        }\n\
    \        else if(c == '>')\n        {\n            ++closing_brackets;\n     \
    \   }\n    }\n    return opening_brackets == closing_brackets;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool result\
    \ = true;\n    while(i < len) {\n        char c = brackets[i];\n        switch(c)\
    \ {\n            case '<':\n                if(i+1 < len && brackets[i+1] == '>')\
    \ {\n                    i += 2;\n                } else {\n                 \
    \   result = false;\n                    break;\n                }\n         \
    \       break;\n            case '>':\n                if(i+1 < len && brackets[i+1]\
    \ == '<') {\n                    i += 2;\n                } else {\n         \
    \           result = false;\n                    break;\n                }\n \
    \               break;\n            default:\n                result = false;\n\
    \                break;\n        }\n        i += 1;\n    }\n    return result;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        if(c == '<') {\n            if(brackets[j] == '>') {\n              \
    \  i++;\n                j++;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        } else if(c == '>') {\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool\
    \ result = true;\n    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '>')\n        {\n            if(brackets[i+1] != '<')\n     \
    \       {\n                result = false;\n                break;\n         \
    \   }\n            ++i;\n        }\n        else if(c == '<')\n        {\n   \
    \         if(brackets[i-1] != '>')\n            {\n                result = false;\n\
    \                break;\n            }\n            --i;\n        }\n    }\n \
    \   return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] != '<')\n            return false;\n    }\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '>')\n\
    \            return false;\n    }\n    return true;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l\
    \ = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p\
    \ = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t\
    \ = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x\
    \ = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t brackets_size_b = brackets.length();\n\
    \    size_t brackets_size_a = brackets.length();\n    bool result = true;\n  \
    \  bool result_b = true;\n    bool result_a = true;\n    bool result_c = true;\n\
    \    bool result_d = true;\n    bool result_e = true;\n    bool result_f = true;\n\
    \    bool result_g = true;\n    bool result_h = true;\n    bool result_i = true;\n\
    \    bool result_j = true;\n    bool result_k = true;\n    bool result_l = true;\n\
    \    bool result_m = true;\n    bool result_n = true;\n    bool result_o = true;\n\
    \    bool result_p = true;\n    bool result_q = true;\n    bool result_r = true;\n\
    \    bool result_s = true;\n    bool result_t = true;\n    bool result_u = true;\n\
    \    bool result_v = true;\n    bool result_w = true;\n    bool result_x = true;\n\
    \    bool result_y = true;\n    bool result_z = true;\n    bool result_brackets\
    \ = true;\n    bool result_brackets_b = true;\n    bool result_brackets_a = true;\n\
    \    bool result_brackets_c = true;\n    bool result_brackets_d = true;\n    bool\
    \ result_brackets_e = true;\n    bool result_brackets_f = true;\n    bool result_brackets_g\
    \ = true;\n    bool result_brackets_h = true;\n    bool result_brackets_i = true;\n\
    \    bool result_brackets_j = true;\n    bool result_brackets_k = true;\n    bool\
    \ result_brackets_l = true;\n    bool result_brackets_m = true;\n    bool result_brackets_n\
    \ = true;\n    bool result_brackets_o = true;\n    bool result_brackets_p = true;\n\
    \    bool result_brackets_q = true;\n    bool result_brackets_r = true;\n    bool\
    \ result_brackets_s = true;\n    bool result_brackets_t = true;\n    bool result_brackets_u\
    \ = true;\n    bool result_brackets_v = true;\n    bool result_brackets_w = true;\n\
    \    bool result_brackets_x = true;\n", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(!brackets.at(i).isdigit())\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    bool ret = true;\n    for(i = 0;\
    \ i < len; ++i)\n    {\n        if(brackets[i] == '>')\n        {\n          \
    \  if(brackets[i+1] != '<')\n            {\n                ret = false;\n   \
    \             break;\n            }\n        }\n        else if(brackets[i] ==\
    \ '<')\n        {\n            if(brackets[i+1] != '>')\n            {\n     \
    \           ret = false;\n                break;\n            }\n        }\n \
    \   }\n    return ret;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i < len) {\n\
    \        if (brackets[i] == '<') {\n            while (j < len && brackets[j]\
    \ != '<') {\n                j++;\n            }\n            if (j == len) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        while (j < len && brackets[j] == '>') {\n                j++;\n     \
    \       }\n            if (j == len) {\n                result = false;\n    \
    \            break;\n            }\n            i++;\n        }\n        else\
    \ if (brackets[i] == '>') {\n            while (j < len && brackets[j] != '>')\
    \ {\n                j++;\n            }\n            if (j == len) {\n      \
    \          result = false;\n                break;\n            }\n          \
    \  while (j < len && brackets[j] == '<') {\n                j++;\n           \
    \ }\n            if (j == len) {\n                result = false;\n          \
    \      break;\n            }\n            i++;\n        }\n        else {\n  \
    \          i++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nI like this solution, although it would be more efficient to just\
    \ check each character in the string rather than the entire string. Also, you\
    \ can use a `std::map<char, char>` to avoid the nested loops.\n<|/ c |>\n<| c\
    \ |>\n: Yes, I agree. My solution was more of a proof of concept, since I didn't\
    \ want to write out all the code for the OP.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ using maps. I hope it helps.\n<|/ c |>\n<| c |>\n: I added a solution using\
    \ maps. I hope it helps.\n<|/ c |>\n<| c |>\n: I added a solution using maps.\
    \ I hope it helps.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n            case\
    \ '<':\n                if(brackets[j] == '>') {\n                    j++;\n \
    \               } else {\n                    result = false;\n              \
    \      break;\n                }\n                break;\n            case '>':\n\
    \                if(brackets[j] == '<') {\n                    j++;\n        \
    \        } else {\n                    result = false;\n                    break;\n\
    \                }\n                break;\n            default:\n           \
    \     result = false;\n                break;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == '<')\n\
    \        {\n            if(i+1 < len && brackets[i+1] == '<')\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '>')\n            {\n                ++i;\n      \
    \      }\n            else\n            {\n                result = false;\n \
    \               break;\n            }\n        }\n        else if(c == '<')\n\
    \        {\n            if(i+1 < len && brackets[i+1] == '<')\n            {\n\
    \                ++i;\n            }\n            else\n            {\n      \
    \          result = false;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i < len && j <\
    \ len) {\n        char c = brackets[i];\n        char d = brackets[j];\n     \
    \   if(c == '<') {\n            if(brackets[j+1] != '=') {\n                result\
    \ = false;\n                break;\n            }\n            i += 2;\n     \
    \       j += 2;\n        } else if(c != '>') {\n            result = false;\n\
    \            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    return\
    \ result;\n}", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            ++opening_brackets;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            ++closing_brackets;\n        }\n        else\n\
    \        {\n            result = false;\n        }\n        if(opening_brackets\
    \ != closing_brackets)\n        {\n            result = false;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c\
    \ |>\nI believe this fails for `<><>` - it returns `true` but should return `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. I fixed the code accordingly.\n<|/ c\
    \ |>\n<| c |>\nThis fails for `
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,algorithm,string |>\n<code>", "{\n\
    \    bool result = true;\n    for(int i = 0; i < brackets.length(); i++) {\n \
    \       char c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1]\
    \ == '>') {\n                result = false;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    size_t len = brackets.length();\n    size_t i\
    \ = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i < len) {\n  \
    \      char c = brackets[i];\n        if (c != '<') {\n            result = false;\n\
    \            break;\n        }\n        i++;\n        while (i < len && brackets[i]\
    \ != '<') {\n            i++;\n        }\n        if (i == len) {\n          \
    \  result = false;\n            break;\n        }\n        i++;\n        while\
    \ (i < len && brackets[i] != '>') {\n            i++;\n        }\n        if (i\
    \ == len) {\n            result = false;\n            break;\n        }\n    \
    \    j++;\n        while (j < len && brackets[j] != '>') {\n            j++;\n\
    \        }\n        if (j == len) {\n            result = false;\n           \
    \ break;\n        }\n    }\n    return result;\n}", "{\n    for(int i = 0; i <\
    \ brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i + 1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n\tsize_t\
    \ brackets_size = brackets.size();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\tbool result\
    \ = true;\n\twhile (i < brackets_size)\n\t{\n\t\tchar c = brackets[i];\n\t\tif\
    \ (c == '>')\n\t\t{\n\t\t\tif (j == brackets_size)\n\t\t\t{\n\t\t\t\tresult =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar next_c = brackets[j];\n\t\t\tif\
    \ (next_c == '<')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\
    \tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (c == '<')\n\t\t\
    {\n\t\t\tif (j == brackets_size)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tchar next_c = brackets[j];\n\t\t\tif (next_c == '>')\n\t\t\t{\n\
    \t\t\t\tj++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\t\
    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    size_t len = brackets.length();\n    size_t i\
    \ = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i < len) {\n  \
    \      char c = brackets[i];\n        switch (c) {\n        case '<':\n      \
    \      i++;\n            break;\n        case '>':\n            i++;\n       \
    \     break;\n        default:\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis fails for `<<><>>` - it returns `true` when it should be `false`\n\
    <|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<|\
    \ c |>\nThis fails for `<<><>>` - it returns `true` when it should be `false`\n\
    <|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<|\
    \ c |>\nThis fails for `<<><>>` - it returns `true` when it should be `false`\n\
    <|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>", "{\n    for(int i = 0; i\
    \ < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n       \
    \ {\n            if(brackets[i + 1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c !=\
    \ \"<\") {\n            result = false;\n        }\n    }\n    return result;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result =\
    \ true;\n    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '>')\n        {\n            if(brackets[i+1] != '<')\n     \
    \       {\n                result = false;\n                break;\n         \
    \   }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i+1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    bool\
    \ result = true;\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets[i]\
    \ == '<') {\n            if(brackets[i+1] == '>') {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't\
    \ work. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis fails for `<<><>>` but works\
    \ with `<<<>>`\n<|/ c |>\n<| c |>\nIt fails for `<<<>>` because `<<<>>` is actually\
    \ `<<<>>` but `<<<>>` has two opening brackets. So the algorithm is correct. `<<<>>`\
    \ has three opening brackets so `<<<>>` is actually `<<<>>` but `<<<>>` has two\
    \ opening brackets. So the algorithm is correct.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    size_t\
    \ len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool result\
    \ = true;\n    while(i < len) {\n        char c = brackets[i];\n        switch(c)\
    \ {\n        case '<':\n            if(brackets[j] == '>') {\n               \
    \ i++;\n                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n            break;\n        default:\n            i++;\n     \
    \       j++;\n            break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails for `<><>` - it returns\
    \ `true` when it should be `false`.\n<|/ c |>\n<| c |>\nYeah, I missed that case.\
    \ Fixed now.\n<|/ c |>\n<| c |>\nThis fails for `
  "{\n    size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n \
    \   {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n                return false;\n            i += 2;\n        }\n   \
    \     else if(brackets[i] == '<')\n        {\n            if(brackets[i+1] !=\
    \ '>')\n                return false;\n            i += 2;\n        }\n    }\n\
    \    return true;\n}", "{\n    size_t len = brackets.length();\n    size_t i;\n\
    \    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        char c\
    \ = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n            ++i;\n        }\n        else if(c == '<')\n     \
    \   {\n            if(brackets[i-1] != '>')\n            {\n                result\
    \ = false;\n                break;\n            }\n            --i;\n        }\n\
    \    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n        {\n            return false;\n\
    \        }\n    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] != '>')\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i < len) {\n \
    \       char c = brackets[i];\n        if(c == '<') {\n            if(brackets[j]\
    \ == '>') {\n                i++;\n                j++;\n            } else {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if(c == '>') {\n            if(brackets[j] == '<') {\n           \
    \     i++;\n                j++;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        } else {\n        \
    \    i++;\n        }\n    }\n    return result;\n}", "{\n    bool result = true;\n\
    \    for (auto c : brackets)\n    {\n        if (c != '>' && c != '<')\n     \
    \   {\n            result = false;\n            break;\n        }\n    }\n   \
    \ return result;\n}", "{\n    size_t brackets_size = brackets.length();\n    size_t\
    \ opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t i = 0;\n\
    \    size_t j = 0;\n    \n    while (i<brackets_size)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            opening_brackets++;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            closing_brackets++;\n      \
    \  }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        return false;\n    }\n    \n    i = opening_brackets;\n    j =\
    \ closing_brackets;\n    \n    while (j<brackets_size)\n    {\n        if (brackets[j]\
    \ == '<')\n        {\n            i++;\n        }\n        else if (brackets[j]\
    \ == '>')\n        {\n            j++;\n        }\n    }\n    \n    if (i != j)\n\
    \    {\n        return false;\n    }\n    \n    return true;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    bool result = true;\n    for(i\
    \ = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n\
    \        {\n            if(brackets[i+1] != '<')\n            {\n            \
    \    result = false;\n                break;\n            }\n            ++i;\n\
    \        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n            --i;\n        }\n    }\n    return result;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n            return false;\n   \
    \ }\n    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    bool result = true;\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        char c = brackets[i];\n   \
    \     if(c == '>')\n        {\n            if(brackets[i+1] != '<')\n        \
    \    {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    size_t brackets_size = brackets.length();\n    size_t opening_brackets =\
    \ 0;\n    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n\
    \    bool result = true;\n    \n    while (i<brackets_size)\n    {\n        if\
    \ (brackets[i] == '<')\n        {\n            opening_brackets++;\n        }\n\
    \        else if (brackets[i] == '>')\n        {\n            closing_brackets++;\n\
    \        }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}", "{\n   \
    \ size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    while (i < len) {\n        if (brackets[i] == '<') {\n \
    \           if (brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                j = 0;\n                i++;\n                result = false;\n\
    \            }\n        } else {\n            if (brackets[j] == '>') {\n    \
    \            j++;\n            } else {\n                j = 0;\n            \
    \    i++;\n                result = false;\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis fails for `<><>`\
    \ - it returns `true` when it should be `false`.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ noticed that and fixed it before you posted your comment. Thanks.\n<|/ c |>\n\
    <| c |>\n: I added a version that doesn't require a nested loop. Thanks.\n<|/\
    \ c |>\n<| a tags=c++,algorithm |>\nI believe this should work:\n<code>", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] != '<')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    for(i = len-1; i >= 0; --i)\n    {\n  \
    \      if(brackets[i] != '>')\n        {\n            result = false;\n      \
    \      break;\n        }\n    }\n    return result;\n}", "{\n\tauto brackets_iter\
    \ = brackets.begin();\n\tauto brackets_end = brackets.end();\n\twhile(brackets_iter\
    \ != brackets_end)\n\t{\n\t\tauto opening_bracket = *brackets_iter;\n\t\tauto\
    \ closing_bracket = *(brackets_iter + 1);\n\t\tif(brackets_iter == brackets_end\
    \ || opening_bracket != closing_bracket)\n\t\t\treturn false;\n\t\tbrackets_iter++;\n\
    \t}\n\treturn true;\n}", "{\n    size_t len = brackets.length();\n    bool result\
    \ = true;\n    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '>')\n        {\n            if(i+1 == len)\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \        char next = brackets[i+1];\n            if(c == '<')\n            {\n\
    \                if(next == '>')\n                {\n                    result\
    \ = true;\n                    break;\n                }\n                else\n\
    \                {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            else\n            {\n         \
    \       if(next == '<')\n                {\n                    result = false;\n\
    \                    break;\n                }\n                else\n       \
    \         {\n                    result = true;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    size_t brackets_size = brackets.size();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    \n\
    \    while (i < brackets_size)\n    {\n        if (brackets[i] == '<')\n     \
    \   {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n        }\n        i++;\n\
    \    }\n    \n    if (opening_brackets != closing_brackets)\n    {\n        return\
    \ false;\n    }\n    \n    while (j < brackets_size)\n    {\n        if (brackets[j]\
    \ == '<')\n        {\n            opening_brackets--;\n        }\n        else\
    \ if (brackets[j] == '>')\n        {\n            closing_brackets--;\n      \
    \  }\n        j++;\n    }\n    \n    if (opening_brackets != 0)\n    {\n     \
    \   return false;\n    }\n    \n    return true;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i <\
    \ len) {\n        char c = brackets[i];\n        switch (c) {\n        case '<':\n\
    \            if (j == i) {\n                result = false;\n                break;\n\
    \            }\n            ++i;\n            break;\n        case '>':\n    \
    \        if (j == i) {\n                result = false;\n                break;\n\
    \            }\n            ++i;\n            ++j;\n            break;\n     \
    \   default:\n            ++i;\n            break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n\tsize_t len = brackets.length();\n\tsize_t i;\n\t\
    bool result = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif(c == '>')\n\t\t\tresult = result && is_open_bracket(brackets, i);\n\t\t\
    else if(c == '<')\n\t\t\tresult = result && !is_open_bracket(brackets, i);\n\t\
    }\n\treturn result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] != '<')\n            return false;\n    }\n   \
    \ for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] !=\
    \ '>')\n            return false;\n    }\n    return true;\n}", "{\n\tsize_t len\
    \ = brackets.length();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\tbool result = true;\n\
    \twhile (i < len) {\n\t\tchar c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif\
    \ (j < i) {\n\t\t\t\tchar next = brackets[j];\n\t\t\t\tif (next == '>') {\n\t\t\
    \t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t} else if (c == '>') {\n\t\t\
    \tif (j > i) {\n\t\t\t\tchar next = brackets[j];\n\t\t\t\tif (next == '<') {\n\
    \t\t\t\t\tj--;\n\t\t\t\t} else {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t} else {\n\t\t\ti++;\n\t\
    \t}\n\t}\n\treturn result;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i < len && j <\
    \ len) {\n        char left = brackets[i];\n        char right = brackets[j];\n\
    \        switch(left) {\n        case '<':\n            if(brackets[j+1] != '=')\
    \ {\n                result = false;\n                break;\n            }\n\
    \            ++j;\n            break;\n        case '>':\n            if(brackets[j+1]\
    \ != '=') {\n                result = false;\n                break;\n       \
    \     }\n            ++j;\n            break;\n        default:\n            if(brackets[j+1]\
    \ != '=') {\n                result = false;\n                break;\n       \
    \     }\n            ++j;\n        }\n        ++i;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it\
    \ can be simplified a little bit more. For example, `correct_bracketing(\"<<><>>\"\
    )` can be simplified to `correct_bracketing(\"<>=\")`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ I agree. I was just trying to keep it simple and to the point. :)\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be simplified a little bit\
    \ more. For example, `correct_bracketing(\"<<><>>\")` can be simplified to `correct_bracketing(\"\
    <>=\")`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I was just trying to keep it simple\
    \ and to the point. :)\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a little bit more. For example, `correct_bracketing(\"\
    <<><>>\")` can be simplified to `correct_bracketing(\"<>=\")`.\n<|/ c |>\n<| a\
    \ tags=c++,algorithm,string |>\n<code>", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '>')\n            {\n                ++i;\n      \
    \      }\n            else\n            {\n                result = false;\n \
    \           }\n        }\n        else if(c == '<')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '<')\n            {\n                ++i;\n      \
    \      }\n            else\n            {\n                result = false;\n \
    \           }\n        }\n    }\n    return result;\n}", "{\n    size_t len =\
    \ brackets.length();\n    for(size_t i = 0; i < len; ++i)\n    {\n        char\
    \ c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                brackets.replace(i+2, i+2, \">\");\n\
    \                --i;\n            }\n            else\n            {\n      \
    \          brackets.replace(i+2, i+2, \"<\");\n                --i;\n        \
    \    }\n        }\n    }\n    return brackets.length() == 0;\n}", "{\n    size_t\
    \ len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \                return true;\n        }\n    }\n    return false;\n}", "{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while (i < len) {\n        char c = brackets[i];\n\
    \        switch (c) {\n        case '<':\n            if (j < i) {\n         \
    \       result = false;\n            }\n            j++;\n            break;\n\
    \        case '>':\n            if (j > i) {\n                result = false;\n\
    \            }\n            j--;\n            break;\n        default:\n     \
    \       if (j > i) {\n                result = false;\n            }\n       \
    \ }\n        i++;\n    }\n    return result;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '<')\n        {\n            if(brackets[i+1] == '>')\n      \
    \          return true;\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    size_t len = brackets.length();\n    bool result = true;\n    for (size_t\
    \ i = 0; i < len; ++i)\n    {\n        if (brackets[i] != '<')\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i)\n    {\n        if (brackets[i] != '>')\n        {\n  \
    \          result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] != brackets[brackets.length() - 1 - i])\n     \
    \   {\n            result = false;\n            break;\n        }\n    }\n   \
    \ return result;\n}", "{\n    size_t len = brackets.length();\n    size_t i =\
    \ 0;\n    size_t j = 0;\n    bool result = true;\n    while (i < len) {\n    \
    \    if (brackets[i] == '<') {\n            if (brackets[j] == '>') {\n      \
    \          i++;\n                j++;\n            } else {\n                result\
    \ = false;\n            }\n        } else {\n            if (brackets[j] == '>')\
    \ {\n                result = false;\n            } else {\n                j++;\n\
    \            }\n        }\n        i++;\n    }\n    return result;\n}", "{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_count\
    \ = 0;\n    size_t closing_brackets_count = 0;\n    size_t opening_brackets_index2\
    \ = 0;\n    size_t closing_brackets_index2 = 0;\n    size_t opening_brackets_index3\
    \ = 0;\n    size_t closing_brackets_index3 = 0;\n    size_t opening_brackets_index4\
    \ = 0;\n    size_t closing_brackets_index4 = 0;\n    size_t opening_brackets_index5\
    \ = 0;\n    size_t closing_brackets_index5 = 0;\n    size_t opening_brackets_index6\
    \ = 0;\n    size_t closing_brackets_index6 = 0;\n    size_t opening_brackets_index7\
    \ = 0;\n    size_t closing_brackets_index7 = 0;\n    size_t opening_brackets_index8\
    \ = 0;\n    size_t closing_brackets_index8 = 0;\n    size_t opening_brackets_index9\
    \ = 0;\n    size_t closing_brackets_index9 = 0;\n    size_t opening_brackets_index10\
    \ = 0;\n    size_t closing_brackets_index10 = 0;\n    size_t opening_brackets_index11\
    \ = 0;\n    size_t closing_brackets_index11 = 0;\n    size_t opening_brackets_index12\
    \ = 0;\n    size_t closing_brackets_index12 = 0;\n    size_t opening_brackets_index13\
    \ = 0;\n    size_t closing_brackets_index13 = 0;\n    size_t opening_brackets_index14\
    \ = 0;\n    size_t closing_brackets_index14 = 0;\n    size_t opening_brackets_index15\
    \ = 0;\n    size_t closing_brackets_index15 = 0;\n    size_t opening_brackets_index16\
    \ = 0;\n    size_t closing_brackets_index16 = 0;\n    size_t opening_brackets_index17\
    \ = 0;\n    size_t closing_brackets_index17 = 0;\n    size_t opening_brackets_index18\
    \ = 0;\n    size_t closing_brackets_index18 = 0;\n    size_t opening_brackets_index19\
    \ = 0;\n    size_t closing_brackets_index19 = 0;\n    size_t opening_brackets_index20\
    \ = 0;\n    size_t closing_brackets_index20 = 0;\n    size_t opening_brackets_index21\
    \ = 0;", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result\
    \ = true;\n    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n\
    \        if(c == '>')\n        {\n            if(i+1 < len && brackets[i+1] ==\
    \ '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = true;\n            }\n    \
    \        else\n            {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '<')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == '<')\n\
    \        {\n            if(i+1 < len && brackets[i+1] == '>')\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    for(size_t i = 0; i < brackets_size; ++i)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            opening_brackets_size++;\n\
    \            opening_brackets_index++;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else\n        {\n            assert(false);\n        }\n \
    \   }\n    \n    if(opening_brackets_size != closing_brackets_size)\n    {\n \
    \       result = false;\n    }\n    \n    if(opening_brackets_index != closing_brackets_index)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}", "{\n   \
    \ size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '>')\n        {\n     \
    \       if(brackets[i+1] != '<')\n            {\n                return false;\n\
    \            }\n            ++i;\n        }\n        else if(c == '<')\n     \
    \   {\n            if(brackets[i-1] != '>')\n            {\n                return\
    \ false;\n            }\n            --i;\n        }\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it with `\"<>\"`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it before posting. It returns true for \"<>\" and false for \"\
    <>\".\n<|/ c |>\n<| c |>\nI tested it on `\"<>\"` and it returns `true`. `\"<>\"\
    ` returns `true` because `\"<\"` has one opening bracket and `\">\"` has one closing\
    \ bracket.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. It returns\
    \ true for \"<>\" and false for \"<>\".\n<|/ c |>\n<| c |>\nI tested it on \"\
    <>\" and it returns true. <> returns true because < has one opening bracket and\
    \ > has one closing bracket.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\nusing namespace std;", "{\n\
    \    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n \
    \   bool result = true;\n    while(i < len) {\n        string opening = brackets.substr(i,\
    \ 1);\n        string closing = brackets.substr(j, 1);\n        bool opening_closed\
    \ = (opening == closing);\n        bool opening_open = (opening == \"<\");\n \
    \       bool opening_closed_open = (closing == \"<\");\n        bool opening_closed_closed\
    \ = (closing == \">\");\n        bool opening_open_closed = (opening == \">\"\
    );\n        bool opening_closed_open_closed = (closing == \"<\");\n        bool\
    \ opening_closed_closed_open = (closing == \">\");\n        bool opening_closed_open_open_closed\
    \ = (closing == \"<\");\n        bool opening_closed_closed_closed_open = (closing\
    \ == \">\");\n        bool opening_open_open_closed_closed = (opening == \"<\"\
    );\n        bool opening_open_closed_open_closed = (opening == \">\");\n     \
    \   bool opening_closed_open_open_closed_open = (closing == \"<\");\n        bool\
    \ opening_closed_closed_open_open_closed = (closing == \">\");\n        bool opening_open_open_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed =\
    \ (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed_closed\
    \ = (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open_closed\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed_open\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_closed_open\
    \ = (opening == \"<\");\n        bool opening_open_closed_closed_open_closed_closed_closed\
    \ = (opening == \">\");\n        bool opening_closed_open_open_closed_closed_open_closed_open\
    \ = (closing == \"<\");\n        bool opening_closed_closed_open_open_closed_closed_closed_open\
    \ = (closing == \">\");\n        bool opening_open_open_closed_closed_closed_closed_open_closed_open\
    \ = (opening == \"<\");\n        bool open", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(!brackets.at(i).isalnum())\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    bool result = true;\n    for(i\
    \ = 0; i < len; ++i)\n    {\n        if(brackets[i] != '<')\n        {\n     \
    \       result = false;\n            break;\n        }\n    }\n    for(i = len\
    \ - 1; i >= 0; --i)\n    {\n        if(brackets[i] != '>')\n        {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. Your code works perfectly\
    \ for me. I am still trying to understand how it works. Can you please explain\
    \ how it works?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope that\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. Now I understand how\
    \ it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\n#include <iterator>", "{\n\
    \    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if (c == '<')\n        \
    \    ++opening_brackets_size;\n        else if (c == '>')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}", "{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_index = 0;\n  \
    \  size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_end2\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end2\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end3\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end3\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end4\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end4\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end5\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end5\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end6\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end6\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end7\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end7\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end8\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end8\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end9\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end9\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end10\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end10\
    \ = 0; // end index for next closing bracket\n    size_t opening_brackets_index_end11\
    \ = 0; // end index for next opening bracket\n    size_t closing_brackets_index_end11\
    \ = 0; // end index for next closing bracket\n    size_t opening_bra", "{\n  \
    \  size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool\
    \ result = true;\n    \n    while (i<brackets_size) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n\
    \    \n    if (opening_brackets != closing_brackets) {\n        result = false;\n\
    \    }\n    \n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n    size_t\
    \ opening_brackets_end = 0;\n    size_t closing_brackets_end = 0;\n    \n    for(size_t\
    \ i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            opening_brackets++;\n            opening_brackets_index =\
    \ i;\n        }\n        else if(brackets[i] == '>')\n        {\n            closing_brackets++;\n\
    \            closing_brackets_index = i;\n        }\n    }\n    \n    opening_brackets_end\
    \ = opening_brackets_index + 1;\n    closing_brackets_end = closing_brackets_index\
    \ + 1;\n    \n    for(size_t i = opening_brackets_index; i < brackets_size; ++i)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            opening_brackets++;\n\
    \            opening_brackets_end = i;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n            closing_brackets_end\
    \ = i;\n        }\n    }\n    \n    if(opening_brackets_end != brackets_size)\n\
    \    {\n        return false;\n    }\n    \n    if(closing_brackets_end != brackets_size)\n\
    \    {\n        return false;\n    }\n    \n    if(opening_brackets != closing_brackets)\n\
    \    {\n        return false;\n    }\n    \n    return true;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] == '>')\n        {\n            if(brackets[i+1] != '<')\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else if(brackets[i] == '<')\n        {\n            if(brackets[i-1] != '>')\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n  \
    \  {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nI believe this fails for `<><>` which should return `true`.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I believe this fails for `<<><>>` which should return `false`.\n<|/ c |>\n<| c\
    \ |>\n: Yes, it does. I added a test case to my answer.\n<|/ c |>\n<| c |>\nI\
    \ believe this fails for `<><>` which should return `true`.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    size_t len = brackets.length();\n    for(size_t i = 0;\
    \ i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n          \
    \  if(brackets[i+1] != '>')\n            {\n                return false;\n  \
    \          }\n        }\n    }\n    return true;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t i;\n    for(i = 0; i < brackets_size; ++i)\n    {\n       \
    \ if(brackets[i] == '<')\n        {\n            ++opening_brackets;\n       \
    \ }\n        else if(brackets[i] == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}", "{\n\t\
    auto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\tauto opening_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto closing_brackets = brackets.find_first_of(bracket);\n\
    \t\n\tbool result = true;\n\t\n\tfor (auto i = opening_brackets; i < closing_brackets;\
    \ ++i)\n\t{\n\t\tauto opening_bracket = brackets[i];\n\t\tauto closing_bracket\
    \ = brackets[++i];\n\t\t\n\t\tif (opening_bracket != closing_bracket)\n\t\t{\n\
    \t\t\tresult = false;\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index\
    \ = 0;\n    bool result = true;\n    \n    for(size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            opening_brackets_size++;\n\
    \            opening_brackets_index++;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else\n        {\n            opening_brackets_size = 0;\n\
    \            closing_brackets_size = 0;\n            opening_brackets_index =\
    \ 0;\n            closing_brackets_index = 0;\n            result = false;\n \
    \       }\n    }\n    \n    if(opening_brackets_size != closing_brackets_size)\n\
    \    {\n        result = false;\n    }\n    \n    if(opening_brackets_index !=\
    \ closing_brackets_index)\n    {\n        result = false;\n    }\n    \n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i + 1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '<')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n        else if(c == '<')\n\
    \        {\n            if(i+1 < len && brackets[i+1] == '>')\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n                return true;\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        default:\n            result = false;\n         \
    \   break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                ++i;\n            }\n            else\n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\
    \tchar c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (brackets[i+1] == '>')\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "{\n    size_t\
    \ brackets_size = brackets.length();\n    size_t opening_brackets_size = 0;\n\
    \    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index = 0;\n\
    \    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_current\
    \ = 0;\n    size_t closing_brackets_index_current = 0;\n    size_t opening_brackets_index_end\
    \ = 0;\n    size_t closing_brackets_index_end = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_next = 0;\n    size_t opening_brackets_index_end_prev\
    \ = 0;\n    size_t closing_brackets_index_end_prev = 0;\n    size_t opening_brackets_index_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_current = 0;\n    size_t opening_brackets_index_end_next\
    \ = 0;\n    size_t closing_b", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] != \"<\")\n            return false;\n    }\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != \">\")\n            return false;\n    }\n    return true;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the brackets are in the wrong\
    \ order. For example, `\"<>\"` returns `true` when it should return `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. I didn't think about that case. I'll\
    \ fix it.\n<|/ c |>\n<| c |>\n: I fixed the bug. Now it works.\n<|/ c |>\n<| c\
    \ |>\n: I fixed the bug. Now it works.\n<|/ c |>\n<| c |>\n: I fixed the bug.\
    \ Now it works.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    bool result =\
    \ true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != brackets[brackets.length() - 1 - i])\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len && j < len) {\n        char c\
    \ = brackets[i];\n        char d = brackets[j];\n        if (c == d) {\n     \
    \       i++;\n            j++;\n        } else if (c == '<') {\n            if\
    \ (d == '>') {\n                i++;\n                j++;\n            } else\
    \ {\n                result = false;\n            }\n        } else {\n      \
    \      result = false;\n        }\n    }\n    return result;\n}", "{\n    bool\
    \ result = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n    \
    \    if(brackets[i] != brackets[brackets.length() - i])\n        {\n         \
    \   result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result =\
    \ true;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] != '<')\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    for(i = len - 1; i >= 0; --i)\n    {\n        if(brackets[i] != '>')\n  \
    \      {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    \n    while (i < brackets_size)\
    \ {\n        char c = brackets[i];\n        \n        if (c == '<') {\n      \
    \      opening_brackets++;\n        }\n        else if (c == '>') {\n        \
    \    closing_brackets++;\n        }\n        \n        i++;\n    }\n    \n   \
    \ if (opening_brackets != closing_brackets) {\n        result = false;\n    }\n\
    \    \n    return result;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        char\
    \ c = brackets[i];\n        if(c == '>')\n        {\n            if(i+1 < len\
    \ && brackets[i+1] == '<')\n            {\n                result = false;\n \
    \               break;\n            }\n        }\n        else if(c == '<')\n\
    \        {\n            if(i+1 < len && brackets[i+1] == '>')\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] ==\
    \ '<')\n        {\n            ++opening_brackets;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            ++closing_brackets;\n        }\n    }\n    if(opening_brackets\
    \ != closing_brackets)\n    {\n        return false;\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = true;\n            }\n    \
    \        else\n            {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count = 0;\n\
    \    size_t opening_brackets_count_max = 0;\n    size_t closing_brackets_count_max\
    \ = 0;\n    size_t opening_brackets_count_min = 0;\n    size_t closing_brackets_count_min\
    \ = 0;\n    size_t opening_brackets_count_min_index = 0;\n    size_t closing_brackets_count_min_index\
    \ = 0;\n    size_t opening_brackets_count_max_index = 0;\n    size_t closing_brackets_count_max_index\
    \ = 0;\n    size_t opening_brackets_count_min_index2 = 0;\n    size_t closing_brackets_count_min_index2\
    \ = 0;\n    size_t opening_brackets_count_max_index2 = 0;\n    size_t closing_brackets_count_max_index2\
    \ = 0;\n    size_t opening_brackets_count_min_index3 = 0;\n    size_t closing_brackets_count_min_index3\
    \ = 0;\n    size_t opening_brackets_count_max_index3 = 0;\n    size_t closing_brackets_count_max_index3\
    \ = 0;\n    size_t opening_brackets_count_min_index4 = 0;\n    size_t closing_brackets_count_min_index4\
    \ = 0;\n    size_t opening_brackets_count_max_index4 = 0;\n    size_t closing_brackets_count_max_index4\
    \ = 0;\n    size_t opening_brackets_count_min_index5 = 0;\n    size_t closing_brackets_count_min_index5\
    \ = 0;\n    size_t opening_brackets_count_max_index5 = 0;\n    size_t closing_brackets_count_max_index5\
    \ = 0;\n    size_t opening_brackets_count_min_index6 = 0;\n    size_t closing_brackets_count_min_index6\
    \ = 0;\n    size_t opening_brackets_count_max_index6 = 0;\n    size_t closing_brackets_count_max_index6\
    \ = 0;\n    size_t opening_brackets_count_min_index7 = 0;\n    size_t closing_brackets_count_min_index7\
    \ = 0;\n    size_t opening_brackets_count_max_index7 = 0;\n    size_t closing_brackets_count_max_index7\
    \ = 0;\n    size_t opening_brackets_count_min_index8 = 0;\n    size_t closing_brackets_count_min_index8\
    \ = 0;\n    size_t opening_brackets_count_", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    \n    while (i<brackets_size) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>') {\n            closing_brackets++;\n        }\n        i++;\n    }\n\
    \    \n    if (opening_brackets != closing_brackets) {\n        return false;\n\
    \    }\n    \n    i = opening_brackets;\n    \n    while (i < brackets_size) {\n\
    \        if (brackets[i] == '<') {\n            i++;\n        }\n        else\
    \ if (brackets[i] == '>') {\n            i++;\n        }\n        else {\n   \
    \         return false;\n        }\n    }\n    \n    return true;\n}", "{\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n     \
    \           return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result =\
    \ true;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '>')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    result = false;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but\
    \ I wonder how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n\
    I like it too, but I wonder how it compares to other solutions posted so far.\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder\
    \ how it compares to other solutions posted so far.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(i+1 < len && brackets[i+1] == '>')\n    \
    \        {\n                ++i;\n            }\n            else\n          \
    \  {\n                result = false;\n            }\n        }\n        else\
    \ if(c == '<')\n        {\n            if(i+1 < len && brackets[i+1] == '<')\n\
    \            {\n                ++i;\n            }\n            else\n      \
    \      {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    size_t brackets_size = brackets.length();\n  \
    \  size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n    size_t\
    \ opening_brackets_index_in_string = 0;\n    size_t closing_brackets_index_in_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets = 0;\n    size_t closing_brackets_index_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_brackets_index_in_brackets_string = 0;\n    size_t closing_brackets_index_in_brackets_string\
    \ = 0;\n    size_t opening_brackets_index_in_brackets_string = 0;\n    size_t\
    \ closing_brackets_index_in_brackets_string = 0;\n    size_t opening_brackets_index_in_brackets_string\
    \ = 0;\n    size_t closing_brackets_index_in_brackets_string = 0;\n    size_t\
    \ opening_bracket", "{\n\tauto bracket = brackets.front();\n\tauto brackets =\
    \ brackets.back();\n\tfor (auto &c : brackets)\n\t{\n\t\tif (c != bracket)\n\t\
    \t\treturn false;\n\t}\n\treturn true;\n}", "{\n    size_t len = brackets.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n                return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    bool result = true;\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != brackets[brackets.length()\
    \ - 1 - i])\n        {\n            result = false;\n            break;\n    \
    \    }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    for (size_t i = 0; i < brackets_size; ++i)\n\
    \    {\n        char c = brackets[i];\n        if (c == '<')\n        {\n    \
    \        opening_brackets_size++;\n            opening_brackets_index++;\n   \
    \     }\n        else if (c == '>')\n        {\n            closing_brackets_size++;\n\
    \            closing_brackets_index++;\n        }\n        else\n        {\n \
    \           if (opening_brackets_size != closing_brackets_size)\n            {\n\
    \                result = false;\n                break;\n            }\n    \
    \        opening_brackets_size = 0;\n            closing_brackets_size = 0;\n\
    \            opening_brackets_index = 0;\n            closing_brackets_index =\
    \ 0;\n        }\n    }\n    \n    if (opening_brackets_size != closing_brackets_size)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}", "{\n   \
    \ size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    bool result = true;\n    \n\
    \    for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n\
    \        if (c == '<')\n        {\n            opening_brackets_size++;\n    \
    \        opening_brackets_index++;\n        }\n        else if (c == '>')\n  \
    \      {\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n        else\n        {\n            if (opening_brackets_size !=\
    \ closing_brackets_size)\n            {\n                result = false;\n   \
    \             break;\n            }\n            \n            if (opening_brackets_index\
    \ != closing_brackets_index)\n            {\n                result = false;\n\
    \                break;\n            }\n            \n            opening_brackets_size\
    \ = 0;\n            closing_brackets_size = 0;\n            opening_brackets_index\
    \ = 0;\n            closing_brackets_index = 0;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool ret = true;\n    for(i = 0; i < len; ++i)\n    {\n  \
    \      if(brackets[i] == '>')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                ret = false;\n                break;\n       \
    \     }\n        }\n    }\n    return ret;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    size_t len =\
    \ brackets.length();\n    size_t i;\n    bool result = true;\n    for(i = 0; i\
    \ < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n  \
    \      {\n            if(i+1 < len && brackets[i+1] == '>')\n            {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n        else if(c == '<')\n        {\n            if(i+1 < len && brackets[i+1]\
    \ == '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != brackets[brackets.length() - 1 - i])\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    size_t\
    \ brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n    size_t\
    \ closing_brackets = 0;\n    size_t i;\n    bool result = true;\n    \n    for\
    \ (i = 0; i < brackets_size; ++i)\n    {\n        if (brackets[i] == '<')\n  \
    \      {\n            ++opening_brackets;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            ++closing_brackets;\n        }\n        else\n\
    \        {\n            result = false;\n        }\n    }\n    \n    if (opening_brackets\
    \ != closing_brackets)\n    {\n        result = false;\n    }\n    \n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_prev = 0;\n    size_t closing_brackets_index_prev\
    \ = 0;\n    size_t opening_brackets_index_next_prev = 0;\n    size_t closing_brackets_index_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_prev = 0;\n    size_t closing_brackets_index_prev_prev\
    \ = 0;\n    size_t opening_brackets_index_next_next_prev = 0;\n    size_t closing_brackets_index_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_prev = 0;\n    size_t closing_brackets_index_prev_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_next_prev_prev = 0;\n    size_t closing_brackets_index_next_prev_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_prev = 0;\n    size_t closing_brackets_index_prev_prev_next_prev\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_prev_prev = 0;\n    size_t opening_brackets_index_prev_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_prev_next_prev_prev = 0;\n    size_t\
    \ opening_brackets_index_next_prev_next_prev = 0;\n    size_t closing_brackets_index_next_prev_prev_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_prev_prev = 0;\n    size_t\
    \ closing_brackets_index_prev_next_prev_next_prev = 0;\n    size_t opening_brackets_index_next_next_prev_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev_prev_prev_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_prev_prev_prev = 0;\n    size_t closing_brackets_index_prev_next_prev_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_next_prev_prev = 0;\n    size_t\
    \ closing_brackets_index_prev_prev_next_prev_next_prev = 0;\n    size_t opening_brackets_index_next_next_prev_next_prev_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev_prev_prev_prev_prev = 0;\n\
    \    size_t opening_bracket", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i;\n    \n    for (i = 0; i < brackets_size; ++i)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            ++opening_brackets;\n        }\n        else\
    \ if (brackets[i] == '>')\n        {\n            ++closing_brackets;\n      \
    \  }\n    }\n    \n    return opening_brackets == closing_brackets;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev = 0;\n    size_t opening_brackets_index_prev_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next = 0;\n    size_t opening_brackets_index_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next = 0;\n    size_t opening_brackets_index_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ opening_brackets_index_next_next_next_next_prev = 0;\n    size_t closing_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next_next = 0;\n    size_t opening_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ open", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while (i < len) {\n        if (brackets[i]\
    \ == '<') {\n            i++;\n            if (j < len && brackets[j] == '>')\
    \ {\n                j++;\n            } else {\n                result = false;\n\
    \            }\n        } else {\n            if (j < len && brackets[j] == '>')\
    \ {\n                j++;\n            } else {\n                result = false;\n\
    \            }\n        }\n        i++;\n    }\n    return result;\n}", "{\n \
    \   size_t brackets_size = brackets.length();\n    size_t opening_brackets = 0;\n\
    \    size_t closing_brackets = 0;\n    size_t opening_brackets_size = 0;\n   \
    \ size_t closing_brackets_size = 0;\n    size_t i = 0;\n    size_t j = 0;\n  \
    \  size_t k = 0;\n    bool result = false;\n    \n    while (i < brackets_size)\n\
    \    {\n        if (brackets[i] == '<')\n        {\n            opening_brackets++;\n\
    \            opening_brackets_size++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n            closing_brackets_size++;\n\
    \        }\n        i++;\n    }\n    \n    if (opening_brackets == closing_brackets)\n\
    \    {\n        result = true;\n    }\n    else\n    {\n        if (opening_brackets_size\
    \ == closing_brackets_size)\n        {\n            for (j = 0; j < opening_brackets;\
    \ j++)\n            {\n                if (brackets[j] != '>')\n             \
    \   {\n                    result = false;\n                    break;\n     \
    \           }\n            }\n        }\n        else\n        {\n           \
    \ for (j = 0; j < opening_brackets_size; j++)\n            {\n               \
    \ if (brackets[j] != '>')\n                {\n                    result = false;\n\
    \                    break;\n                }\n            }\n            for\
    \ (k = opening_brackets_size; k < closing_brackets_size; k++)\n            {\n\
    \                if (brackets[k] != '>')\n                {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    }\n        }\n    }\n    \n    return result;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        if(brackets[i] == '<') {\n            i++;\n            while(i\
    \ < len && brackets[i] != '<') {\n                i++;\n            }\n      \
    \      j = i;\n            while(j < len && brackets[j] != '>') {\n          \
    \      j++;\n            }\n            if(j == i) {\n                result =\
    \ false;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len) {\n        char c = brackets[i];\n\
    \        switch(c) {\n        case '<':\n            if(brackets[j] == '>') {\n\
    \                i++;\n                j++;\n            } else {\n          \
    \      result = false;\n            }\n            break;\n        case '>':\n\
    \            if(brackets[j] == '<') {\n                i++;\n                j++;\n\
    \            } else {\n                result = false;\n            }\n      \
    \      break;\n        default:\n            i++;\n            j++;\n        \
    \    break;\n        }\n    }\n    return result;\n}", "{\n\tfor (int i = 0; i\
    \ < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\t\tif (c != '<')\n\
    \t\t\treturn false;\n\t\ti++;\n\t\twhile (i < brackets.length() && brackets[i]\
    \ != '>')\n\t\t\ti++;\n\t\tif (i >= brackets.length())\n\t\t\treturn false;\n\t\
    }\n\treturn true;\n}", "{\n    size_t len = brackets.length();\n    size_t i =\
    \ 0;\n    size_t j = 0;\n    bool result = true;\n    while (i < len) {\n    \
    \    char c = brackets[i];\n        switch (c) {\n        case '<':\n        \
    \    if (j < i) {\n                char d = brackets[j];\n                if (d\
    \ != '>') {\n                    result = false;\n                }\n        \
    \    }\n            ++i;\n            break;\n        case '>':\n            if\
    \ (j > i) {\n                char d = brackets[j];\n                if (d != '<')\
    \ {\n                    result = false;\n                }\n            }\n \
    \           ++i;\n            break;\n        default:\n            ++i;\n   \
    \         break;\n        }\n        ++j;\n    }\n    return result;\n}", "{\n\
    \tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tint j = i + 1;\n\t\twhile (j < brackets.length() && brackets[j] == c)\n\t\t\
    \tj++;\n\t\tif (j == brackets.length())\n\t\t\treturn true;\n\t\tchar next = brackets[j];\n\
    \t\tif (next != c)\n\t\t\treturn false;\n\t\ti = j;\n\t}\n\treturn false;\n}",
  "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    bool result = true;\n\
    \    while(i < len) {\n        char c = brackets[i];\n        if(c == '<') {\n\
    \            if(brackets[i+1] == '>') {\n                i += 2;\n           \
    \ } else {\n                result = false;\n                break;\n        \
    \    }\n        } else if(c == '>') {\n            if(brackets[i+1] == '<') {\n\
    \                i += 2;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else {\n            result =\
    \ false;\n            break;\n        }\n        i += 1;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. `correct_bracketing(\"\
    <<><>>\")` returns `true` but `correct_bracketing(\"<><<>\")` returns `false`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `correct_bracketing(\"<<><>>\")` returns `true` but\
    \ `correct_bracketing(\"<><<>\")` returns `false`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n \
    \   bool result = true;\n    while(i < len && j < len) {\n        char c = brackets[i];\n\
    \        char d = brackets[j];\n        if(c == '<') {\n            if(brackets[j+1]\
    \ != '>') {\n                result = false;\n                break;\n       \
    \     }\n            i += 2;\n            j += 2;\n        } else if(c == '>')\
    \ {\n            if(brackets[j+1] != '<') {\n                result = false;\n\
    \                break;\n            }\n            i += 2;\n            j +=\
    \ 2;\n        } else {\n            if(brackets[j+1] != c) {\n               \
    \ result = false;\n                break;\n            }\n            i += 2;\n\
    \            j += 2;\n        }\n    }\n    return result;\n}", "{\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    for(int i = brackets.length()-1; i >= 0; i--)\n    {\n      \
    \  if(brackets[i] != '>')\n        {\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;\n}", "{\n    for(int i = 0; i\
    \ < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    \n\
    \    while (i<brackets_size)\n    {\n        if (brackets[i] == '<')\n       \
    \ {\n            opening_brackets++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            closing_brackets++;\n        }\n        i++;\n\
    \    }\n    \n    if (opening_brackets != closing_brackets)\n    {\n        result\
    \ = false;\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    bool result = true;\n    for(size_t i = 0; i < brackets_size; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '<')\n        {\n            opening_brackets_size++;\n\
    \        }\n        else if(c == '>')\n        {\n            closing_brackets_size++;\n\
    \        }\n        else\n        {\n            result = false;\n           \
    \ break;\n        }\n    }\n    if(opening_brackets_size == closing_brackets_size)\n\
    \    {\n        result = true;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
