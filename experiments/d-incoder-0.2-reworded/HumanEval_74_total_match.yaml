name: HumanEval_74_total_match
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that accepts\
  \ two arrays of strings and returns the array that has \n    total number of chars\
  \ in the all strings of the array less than the other array.\n\n    if the two arrays\
  \ have the same number of chars, return the first array.\n\n    Examples\n    >>>\
  \ total_match([], [])\n    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
  , \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\"\
  , \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"\
  hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>>\
  \ total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \n\
  */\nstring[] total_match(string[] lst1, string[] lst2) \n"
tests: "unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
  \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
  hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
  , \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\",\
  \ \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
  ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
  ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
  hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
  \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
